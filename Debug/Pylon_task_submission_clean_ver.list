
Pylon_task_submission_clean_ver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002350  08005094  08005094  00006094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073e4  080073e4  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073ec  080073ec  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ec  080073ec  000083ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073f0  080073f0  000083f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080073f4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000006c  08007460  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08007460  00009278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c206  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcb  00000000  00000000  000152a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00017270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008cc  00000000  00000000  00017dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b6  00000000  00000000  0001869c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101cf  00000000  00000000  0002ff52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d2d1  00000000  00000000  00040121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd3f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003624  00000000  00000000  000cd438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d0a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800507c 	.word	0x0800507c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800507c 	.word	0x0800507c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <padding_data_for_AES_encryption>:
#include <string.h>
#include <stdio.h>
#include "mbedtls/aes.h"
#include"AES_User_defines.h"
#include"key_stoarge.h"
void padding_data_for_AES_encryption(unsigned char*original_text,size_t original_text_length,unsigned char * output){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
    memcpy(output, original_text, original_text_length);
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f004 f91a 	bl	80047ca <memcpy>
    memset(output + original_text_length, 0x00, 128 - original_text_length);  //padding
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	18d0      	adds	r0, r2, r3
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80005a2:	461a      	mov	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f004 f885 	bl	80046b4 <memset>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <AES_Encryption>:
// Encryption
void AES_Encryption(size_t padded_message_len ,  unsigned char * padded_clear_message, unsigned char*padded_encrypted_message){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0cc      	sub	sp, #304	@ 0x130
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80005c2:	6018      	str	r0, [r3, #0]
 80005c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80005cc:	6019      	str	r1, [r3, #0]
 80005ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80005d6:	601a      	str	r2, [r3, #0]
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fc1a 	bl	8002e16 <mbedtls_aes_init>
	if (mbedtls_aes_setkey_enc(&aes, key, 256) != 0) {
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005ea:	4919      	ldr	r1, [pc, #100]	@ (8000650 <AES_Encryption+0x9c>)
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 fc31 	bl	8002e54 <mbedtls_aes_setkey_enc>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <AES_Encryption+0x4c>
    printf("Failed to set AES encryption key\n");
 80005f8:	4816      	ldr	r0, [pc, #88]	@ (8000654 <AES_Encryption+0xa0>)
 80005fa:	f003 ff7b 	bl	80044f4 <puts>
    return 1;
 80005fe:	e022      	b.n	8000646 <AES_Encryption+0x92>
}

if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, padded_message_len, iv, padded_clear_message, padded_encrypted_message) != 0) {
 8000600:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000604:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8000608:	f107 0010 	add.w	r0, r7, #16
 800060c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000610:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800061c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <AES_Encryption+0xa4>)
 8000626:	6812      	ldr	r2, [r2, #0]
 8000628:	2101      	movs	r1, #1
 800062a:	f003 fcf8 	bl	800401e <mbedtls_aes_crypt_cbc>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <AES_Encryption+0x88>
    printf("Encryption failed\n");
 8000634:	4809      	ldr	r0, [pc, #36]	@ (800065c <AES_Encryption+0xa8>)
 8000636:	f003 ff5d 	bl	80044f4 <puts>
    return 1;
 800063a:	e004      	b.n	8000646 <AES_Encryption+0x92>
}
mbedtls_aes_free(&aes);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fbf6 	bl	8002e32 <mbedtls_aes_free>
}
 8000646:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	08005140 	.word	0x08005140
 8000654:	08005094 	.word	0x08005094
 8000658:	08005160 	.word	0x08005160
 800065c:	080050b8 	.word	0x080050b8

08000660 <AES_Decryption>:
void AES_Decryption(size_t padded_message_len ,unsigned char * padded_Encrypted_message,unsigned char*padded_decrytped_message){
 8000660:	b580      	push	{r7, lr}
 8000662:	b0cc      	sub	sp, #304	@ 0x130
 8000664:	af02      	add	r7, sp, #8
 8000666:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800066a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800066e:	6018      	str	r0, [r3, #0]
 8000670:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000674:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000678:	6019      	str	r1, [r3, #0]
 800067a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800067e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000682:	601a      	str	r2, [r3, #0]

// Decryption
//   memcpy(iv_copy, iv, AES_BLOCK_SIZE); // Reset IV for decryption
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fbc4 	bl	8002e16 <mbedtls_aes_init>
if (mbedtls_aes_setkey_dec(&aes, key, 256) != 0) {
 800068e:	f107 0310 	add.w	r3, r7, #16
 8000692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000696:	4919      	ldr	r1, [pc, #100]	@ (80006fc <AES_Decryption+0x9c>)
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fdb1 	bl	8003200 <mbedtls_aes_setkey_dec>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d003      	beq.n	80006ac <AES_Decryption+0x4c>
    printf("Failed to set AES decryption key\n");
 80006a4:	4816      	ldr	r0, [pc, #88]	@ (8000700 <AES_Decryption+0xa0>)
 80006a6:	f003 ff25 	bl	80044f4 <puts>
    return 1;
 80006aa:	e022      	b.n	80006f2 <AES_Decryption+0x92>
}

if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, padded_message_len, iv, padded_Encrypted_message, padded_decrytped_message) != 0) {
 80006ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006b0:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 80006b4:	f107 0010 	add.w	r0, r7, #16
 80006b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006bc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80006c8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <AES_Decryption+0xa4>)
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	2100      	movs	r1, #0
 80006d6:	f003 fca2 	bl	800401e <mbedtls_aes_crypt_cbc>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <AES_Decryption+0x88>
    printf("Decryption failed\n");
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <AES_Decryption+0xa8>)
 80006e2:	f003 ff07 	bl	80044f4 <puts>
    return 1;
 80006e6:	e004      	b.n	80006f2 <AES_Decryption+0x92>
}
mbedtls_aes_free(&aes);
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fba0 	bl	8002e32 <mbedtls_aes_free>
}
 80006f2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	08005140 	.word	0x08005140
 8000700:	080050cc 	.word	0x080050cc
 8000704:	08005160 	.word	0x08005160
 8000708:	080050f0 	.word	0x080050f0

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b5b0      	push	{r4, r5, r7, lr}
 800070e:	b0ee      	sub	sp, #440	@ 0x1b8
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  unsigned char plaintext[] = "This is a secret message!-omar says hi";
 8000712:	4b31      	ldr	r3, [pc, #196]	@ (80007d8 <main+0xcc>)
 8000714:	f507 74c2 	add.w	r4, r7, #388	@ 0x184
 8000718:	461d      	mov	r5, r3
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000726:	6020      	str	r0, [r4, #0]
 8000728:	3404      	adds	r4, #4
 800072a:	8021      	strh	r1, [r4, #0]
 800072c:	3402      	adds	r4, #2
 800072e:	0c0b      	lsrs	r3, r1, #16
 8000730:	7023      	strb	r3, [r4, #0]
	    // Buffers for ciphertext and decrypted text
	    unsigned char ciphertext[128];
	    unsigned char decrypted[128];
	    unsigned char padded_plaintext[128];
	    size_t plaintext_len = strlen((char *)plaintext);
 8000732:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fd52 	bl	80001e0 <strlen>
 800073c:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
	    size_t padded_len = ((plaintext_len + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE; // Pad to block size
 8000740:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8000744:	330f      	adds	r3, #15
 8000746:	f023 030f 	bic.w	r3, r3, #15
 800074a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	    padding_data_for_AES_encryption(plaintext,plaintext_len,padded_plaintext);
 800074e:	1d3a      	adds	r2, r7, #4
 8000750:	f507 73c2 	add.w	r3, r7, #388	@ 0x184
 8000754:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff11 	bl	8000580 <padding_data_for_AES_encryption>

	    AES_Encryption(padded_len,padded_plaintext,ciphertext);
 800075e:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	4619      	mov	r1, r3
 8000766:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 800076a:	f7ff ff23 	bl	80005b4 <AES_Encryption>
	    AES_Decryption(padded_len,ciphertext,decrypted);
 800076e:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8000772:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000776:	4619      	mov	r1, r3
 8000778:	f8d7 01b0 	ldr.w	r0, [r7, #432]	@ 0x1b0
 800077c:	f7ff ff70 	bl	8000660 <AES_Decryption>

	    // Remove padding
	    size_t unpadded_len = padded_len - decrypted[padded_len - 1];
 8000780:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000784:	3b01      	subs	r3, #1
 8000786:	f507 72dc 	add.w	r2, r7, #440	@ 0x1b8
 800078a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800078e:	5cd3      	ldrb	r3, [r2, r3]
 8000790:	461a      	mov	r2, r3
 8000792:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	    decrypted[unpadded_len] = '\0'; // Null-terminate the decrypted string
 800079c:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 80007a0:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 80007a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80007a8:	4413      	add	r3, r2
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]

	    printf("Decrypted text: %s\n", decrypted);
 80007ae:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80007b2:	4619      	mov	r1, r3
 80007b4:	4809      	ldr	r0, [pc, #36]	@ (80007dc <main+0xd0>)
 80007b6:	f003 fe35 	bl	8004424 <iprintf>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ba:	f000 fad1 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007be:	f000 f80f 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c2:	f000 f8c5 	bl	8000950 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007c6:	f000 f86b 	bl	80008a0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80007ca:	f000 f897 	bl	80008fc <MX_USART1_UART_Init>
  MX_MBEDTLS_Init();
 80007ce:	f002 fb1b 	bl	8002e08 <MX_MBEDTLS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <main+0xc6>
 80007d6:	bf00      	nop
 80007d8:	08005118 	.word	0x08005118
 80007dc:	08005104 	.word	0x08005104

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	@ 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	@ 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 ff60 	bl	80046b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <SystemClock_Config+0xb8>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <SystemClock_Config+0xb8>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	@ 0x40
 8000814:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <SystemClock_Config+0xb8>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <SystemClock_Config+0xbc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <SystemClock_Config+0xbc>)
 800082e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <SystemClock_Config+0xbc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000844:	2301      	movs	r3, #1
 8000846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000848:	2310      	movs	r3, #16
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f000 ff61 	bl	800171c <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000860:	f000 f89e 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f001 f9c4 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800088a:	f000 f889 	bl	80009a0 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	@ 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	@ (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	@ (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f000 fdd9 	bl	8001494 <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 f85a 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000088 	.word	0x20000088
 80008f4:	40005400 	.word	0x40005400
 80008f8:	000186a0 	.word	0x000186a0

080008fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000900:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <MX_USART1_UART_Init+0x50>)
 8000904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b09      	ldr	r3, [pc, #36]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <MX_USART1_UART_Init+0x4c>)
 8000934:	f001 fb4a 	bl	8001fcc <HAL_UART_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800093e:	f000 f82f 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	200000dc 	.word	0x200000dc
 800094c:	40011000 	.word	0x40011000

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_GPIO_Init+0x4c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a08      	ldr	r2, [pc, #32]	@ (800099c <MX_GPIO_Init+0x4c>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_GPIO_Init+0x4c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	@ (8000a80 <HAL_I2C_MspInit+0x84>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d12b      	bne.n	8000a76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a17      	ldr	r2, [pc, #92]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a3a:	23c0      	movs	r3, #192	@ 0xc0
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3e:	2312      	movs	r3, #18
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <HAL_I2C_MspInit+0x8c>)
 8000a56:	f000 fb99 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_I2C_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	@ 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b20 <HAL_UART_MspInit+0x94>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d134      	bne.n	8000b18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_UART_MspInit+0x98>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <HAL_UART_MspInit+0x98>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_UART_MspInit+0x98>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_UART_MspInit+0x98>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <HAL_UART_MspInit+0x98>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_UART_MspInit+0x98>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ae6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af8:	2307      	movs	r3, #7
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <HAL_UART_MspInit+0x9c>)
 8000b04:	f000 fb42 	bl	800118c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2025      	movs	r0, #37	@ 0x25
 8000b0e:	f000 fa74 	bl	8000ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b12:	2025      	movs	r0, #37	@ 0x25
 8000b14:	f000 fa8d 	bl	8001032 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	@ 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 f93f 	bl	8000e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <USART1_IRQHandler+0x10>)
 8000b92:	f001 fa6b 	bl	800206c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000dc 	.word	0x200000dc

08000ba0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	e00a      	b.n	8000bc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb2:	f3af 8000 	nop.w
 8000bb6:	4601      	mov	r1, r0
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	60ba      	str	r2, [r7, #8]
 8000bbe:	b2ca      	uxtb	r2, r1
 8000bc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	697a      	ldr	r2, [r7, #20]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbf0      	blt.n	8000bb2 <_read+0x12>
  }

  return len;
 8000bd0:	687b      	ldr	r3, [r7, #4]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e009      	b.n	8000c00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf1      	blt.n	8000bec <_write+0x12>
  }
  return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_isatty>:

int _isatty(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f003 fd60 	bl	8004770 <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20010000 	.word	0x20010000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	20000124 	.word	0x20000124
 8000ce4:	20000278 	.word	0x20000278

08000ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f003 fd1f 	bl	800477c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3e:	f7ff fce5 	bl	800070c <main>
  bx  lr    
 8000d42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d50:	080073f4 	.word	0x080073f4
  ldr r2, =_sbss
 8000d54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d58:	20000278 	.word	0x20000278

08000d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d64:	4b0e      	ldr	r3, [pc, #56]	@ (8000da0 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <HAL_Init+0x40>)
 8000d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	@ (8000da0 <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <HAL_Init+0x40>)
 8000d76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a07      	ldr	r2, [pc, #28]	@ (8000da0 <HAL_Init+0x40>)
 8000d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 f92b 	bl	8000fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8e:	200f      	movs	r0, #15
 8000d90:	f000 f808 	bl	8000da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe0a 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023c00 	.word	0x40023c00

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x54>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_InitTick+0x58>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f000 f943 	bl	800104e <HAL_SYSTICK_Config>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00e      	b.n	8000df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d80a      	bhi.n	8000dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f90b 	bl	8000ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de4:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <HAL_InitTick+0x5c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e000      	b.n	8000df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000000 	.word	0x20000000
 8000dfc:	20000008 	.word	0x20000008
 8000e00:	20000004 	.word	0x20000004

08000e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x20>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <HAL_IncTick+0x24>)
 8000e16:	6013      	str	r3, [r2, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000128 	.word	0x20000128

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <HAL_GetTick+0x14>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000128 	.word	0x20000128

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	@ (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4907      	ldr	r1, [pc, #28]	@ (8000ee0 <__NVIC_EnableIRQ+0x38>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e100 	.word	0xe000e100

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	@ (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	@ (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	@ 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	@ 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fb0:	d301      	bcc.n	8000fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e00f      	b.n	8000fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f7ff ff8e 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <SysTick_Config+0x40>)
 8000fd0:	2207      	movs	r2, #7
 8000fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff29 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	60b9      	str	r1, [r7, #8]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff3e 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff8e 	bl	8000f38 <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5d 	bl	8000ee4 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff31 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffa2 	bl	8000fa0 <SysTick_Config>
 800105c:	4603      	mov	r3, r0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b084      	sub	sp, #16
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001072:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff feda 	bl	8000e2c <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	@ 0x80
 800108a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e052      	b.n	800113e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0216 	bic.w	r2, r2, #22
 80010a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d103      	bne.n	80010c8 <HAL_DMA_Abort+0x62>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0208 	bic.w	r2, r2, #8
 80010d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010e8:	e013      	b.n	8001112 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ea:	f7ff fe9f 	bl	8000e2c <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b05      	cmp	r3, #5
 80010f6:	d90c      	bls.n	8001112 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2220      	movs	r2, #32
 80010fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2203      	movs	r2, #3
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e015      	b.n	800113e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1e4      	bne.n	80010ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001124:	223f      	movs	r2, #63	@ 0x3f
 8001126:	409a      	lsls	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2201      	movs	r2, #1
 8001130:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d004      	beq.n	8001164 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	e00c      	b.n	800117e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2205      	movs	r2, #5
 8001168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e159      	b.n	800145c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8148 	bne.w	8001456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a2 	beq.w	8001456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a56      	ldr	r2, [pc, #344]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b54      	ldr	r3, [pc, #336]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a52      	ldr	r2, [pc, #328]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	@ (800147c <HAL_GPIO_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x202>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	@ (8001480 <HAL_GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1fa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	@ (8001488 <HAL_GPIO_Init+0x2fc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	@ (800148c <HAL_GPIO_Init+0x300>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1f2>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800137e:	2307      	movs	r3, #7
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a24      	ldr	r2, [pc, #144]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_GPIO_Init+0x304>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f aea2 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e12b      	b.n	80016fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff fa9e 	bl	80009fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2224      	movs	r2, #36	@ 0x24
 80014c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014f8:	f000 fd40 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 80014fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a81      	ldr	r2, [pc, #516]	@ (8001708 <HAL_I2C_Init+0x274>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d807      	bhi.n	8001518 <HAL_I2C_Init+0x84>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a80      	ldr	r2, [pc, #512]	@ (800170c <HAL_I2C_Init+0x278>)
 800150c:	4293      	cmp	r3, r2
 800150e:	bf94      	ite	ls
 8001510:	2301      	movls	r3, #1
 8001512:	2300      	movhi	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	e006      	b.n	8001526 <HAL_I2C_Init+0x92>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a7d      	ldr	r2, [pc, #500]	@ (8001710 <HAL_I2C_Init+0x27c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	bf94      	ite	ls
 8001520:	2301      	movls	r3, #1
 8001522:	2300      	movhi	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e0e7      	b.n	80016fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	4a78      	ldr	r2, [pc, #480]	@ (8001714 <HAL_I2C_Init+0x280>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	0c9b      	lsrs	r3, r3, #18
 8001538:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4a6a      	ldr	r2, [pc, #424]	@ (8001708 <HAL_I2C_Init+0x274>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d802      	bhi.n	8001568 <HAL_I2C_Init+0xd4>
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3301      	adds	r3, #1
 8001566:	e009      	b.n	800157c <HAL_I2C_Init+0xe8>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a69      	ldr	r2, [pc, #420]	@ (8001718 <HAL_I2C_Init+0x284>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	3301      	adds	r3, #1
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6812      	ldr	r2, [r2, #0]
 8001580:	430b      	orrs	r3, r1
 8001582:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800158e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	495c      	ldr	r1, [pc, #368]	@ (8001708 <HAL_I2C_Init+0x274>)
 8001598:	428b      	cmp	r3, r1
 800159a:	d819      	bhi.n	80015d0 <HAL_I2C_Init+0x13c>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e59      	subs	r1, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80015aa:	1c59      	adds	r1, r3, #1
 80015ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015b0:	400b      	ands	r3, r1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00a      	beq.n	80015cc <HAL_I2C_Init+0x138>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1e59      	subs	r1, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ca:	e051      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 80015cc:	2304      	movs	r3, #4
 80015ce:	e04f      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <HAL_I2C_Init+0x168>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1e58      	subs	r0, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6859      	ldr	r1, [r3, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	440b      	add	r3, r1
 80015e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	e012      	b.n	8001622 <HAL_I2C_Init+0x18e>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e58      	subs	r0, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	440b      	add	r3, r1
 800160a:	0099      	lsls	r1, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001612:	3301      	adds	r3, #1
 8001614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Init+0x196>
 8001626:	2301      	movs	r3, #1
 8001628:	e022      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10e      	bne.n	8001650 <HAL_I2C_Init+0x1bc>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1e58      	subs	r0, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	460b      	mov	r3, r1
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	440b      	add	r3, r1
 8001640:	fbb0 f3f3 	udiv	r3, r0, r3
 8001644:	3301      	adds	r3, #1
 8001646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800164a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800164e:	e00f      	b.n	8001670 <HAL_I2C_Init+0x1dc>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1e58      	subs	r0, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6859      	ldr	r1, [r3, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	440b      	add	r3, r1
 800165e:	0099      	lsls	r1, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	fbb0 f3f3 	udiv	r3, r0, r3
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	6809      	ldr	r1, [r1, #0]
 8001674:	4313      	orrs	r3, r2
 8001676:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69da      	ldr	r2, [r3, #28]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	431a      	orrs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800169e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6911      	ldr	r1, [r2, #16]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68d2      	ldr	r2, [r2, #12]
 80016aa:	4311      	orrs	r1, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	430b      	orrs	r3, r1
 80016b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2220      	movs	r2, #32
 80016ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	000186a0 	.word	0x000186a0
 800170c:	001e847f 	.word	0x001e847f
 8001710:	003d08ff 	.word	0x003d08ff
 8001714:	431bde83 	.word	0x431bde83
 8001718:	10624dd3 	.word	0x10624dd3

0800171c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e267      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d075      	beq.n	8001826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800173a:	4b88      	ldr	r3, [pc, #544]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 030c 	and.w	r3, r3, #12
 8001742:	2b04      	cmp	r3, #4
 8001744:	d00c      	beq.n	8001760 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001746:	4b85      	ldr	r3, [pc, #532]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800174e:	2b08      	cmp	r3, #8
 8001750:	d112      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001752:	4b82      	ldr	r3, [pc, #520]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800175e:	d10b      	bne.n	8001778 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001760:	4b7e      	ldr	r3, [pc, #504]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d05b      	beq.n	8001824 <HAL_RCC_OscConfig+0x108>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d157      	bne.n	8001824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e242      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001780:	d106      	bne.n	8001790 <HAL_RCC_OscConfig+0x74>
 8001782:	4b76      	ldr	r3, [pc, #472]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a75      	ldr	r2, [pc, #468]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x98>
 800179a:	4b70      	ldr	r3, [pc, #448]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a6f      	ldr	r2, [pc, #444]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b6d      	ldr	r3, [pc, #436]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6c      	ldr	r2, [pc, #432]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xb0>
 80017b4:	4b69      	ldr	r3, [pc, #420]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a68      	ldr	r2, [pc, #416]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b66      	ldr	r3, [pc, #408]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a65      	ldr	r2, [pc, #404]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb2a 	bl	8000e2c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff fb26 	bl	8000e2c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e207      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b5b      	ldr	r3, [pc, #364]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fb16 	bl	8000e2c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff fb12 	bl	8000e2c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	@ 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1f3      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b51      	ldr	r3, [pc, #324]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0xe8>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001832:	4b4a      	ldr	r3, [pc, #296]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183e:	4b47      	ldr	r3, [pc, #284]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001846:	2b08      	cmp	r3, #8
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184a:	4b44      	ldr	r3, [pc, #272]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b41      	ldr	r3, [pc, #260]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e1c7      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b3b      	ldr	r3, [pc, #236]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4937      	ldr	r1, [pc, #220]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e03a      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <HAL_RCC_OscConfig+0x244>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff facb 	bl	8000e2c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff fac7 	bl	8000e2c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1a8      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	4b2b      	ldr	r3, [pc, #172]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b28      	ldr	r3, [pc, #160]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4925      	ldr	r1, [pc, #148]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <HAL_RCC_OscConfig+0x244>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff faaa 	bl	8000e2c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff faa6 	bl	8000e2c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e187      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d036      	beq.n	8001974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d016      	beq.n	800193c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_RCC_OscConfig+0x248>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001914:	f7ff fa8a 	bl	8000e2c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff fa86 	bl	8000e2c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e167      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b0b      	ldr	r3, [pc, #44]	@ (800195c <HAL_RCC_OscConfig+0x240>)
 8001930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x200>
 800193a:	e01b      	b.n	8001974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800193c:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_RCC_OscConfig+0x248>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001942:	f7ff fa73 	bl	8000e2c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001948:	e00e      	b.n	8001968 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fa6f 	bl	8000e2c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d907      	bls.n	8001968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e150      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
 800195c:	40023800 	.word	0x40023800
 8001960:	42470000 	.word	0x42470000
 8001964:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	4b88      	ldr	r3, [pc, #544]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 800196a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1ea      	bne.n	800194a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8097 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001986:	4b81      	ldr	r3, [pc, #516]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10f      	bne.n	80019b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b7d      	ldr	r3, [pc, #500]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a2:	4b7a      	ldr	r3, [pc, #488]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ae:	2301      	movs	r3, #1
 80019b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b77      	ldr	r3, [pc, #476]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d118      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b74      	ldr	r3, [pc, #464]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a73      	ldr	r2, [pc, #460]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fa2f 	bl	8000e2c <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d2:	f7ff fa2b 	bl	8000e2c <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e10c      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b90 <HAL_RCC_OscConfig+0x474>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d106      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2ea>
 80019f8:	4b64      	ldr	r3, [pc, #400]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fc:	4a63      	ldr	r2, [pc, #396]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a04:	e01c      	b.n	8001a40 <HAL_RCC_OscConfig+0x324>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d10c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x30c>
 8001a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a12:	4a5e      	ldr	r2, [pc, #376]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a26:	e00b      	b.n	8001a40 <HAL_RCC_OscConfig+0x324>
 8001a28:	4b58      	ldr	r3, [pc, #352]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2c:	4a57      	ldr	r2, [pc, #348]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a34:	4b55      	ldr	r3, [pc, #340]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a38:	4a54      	ldr	r2, [pc, #336]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a3a:	f023 0304 	bic.w	r3, r3, #4
 8001a3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d015      	beq.n	8001a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff f9f0 	bl	8000e2c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4e:	e00a      	b.n	8001a66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9ec 	bl	8000e2c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0cb      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	4b49      	ldr	r3, [pc, #292]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0ee      	beq.n	8001a50 <HAL_RCC_OscConfig+0x334>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff f9da 	bl	8000e2c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7a:	e00a      	b.n	8001a92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f9d6 	bl	8000e2c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e0b5      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a92:	4b3e      	ldr	r3, [pc, #248]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1ee      	bne.n	8001a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa4:	4b39      	ldr	r3, [pc, #228]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	4a38      	ldr	r2, [pc, #224]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80a1 	beq.w	8001bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aba:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d05c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d141      	bne.n	8001b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f9aa 	bl	8000e2c <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f9a6 	bl	8000e2c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e087      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1b      	ldr	r3, [r3, #32]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	019b      	lsls	r3, r3, #6
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	491b      	ldr	r1, [pc, #108]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff f97f 	bl	8000e2c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff f97b 	bl	8000e2c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e05c      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x416>
 8001b50:	e054      	b.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <HAL_RCC_OscConfig+0x478>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f968 	bl	8000e2c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff f964 	bl	8000e2c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e045      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b72:	4b06      	ldr	r3, [pc, #24]	@ (8001b8c <HAL_RCC_OscConfig+0x470>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x444>
 8001b7e:	e03d      	b.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e038      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40007000 	.word	0x40007000
 8001b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <HAL_RCC_OscConfig+0x4ec>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d028      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d121      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d11a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bc8:	4013      	ands	r3, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d111      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bde:	085b      	lsrs	r3, r3, #1
 8001be0:	3b01      	subs	r3, #1
 8001be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d107      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0cc      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b68      	ldr	r3, [pc, #416]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d90c      	bls.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b65      	ldr	r3, [pc, #404]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b63      	ldr	r3, [pc, #396]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0b8      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c60:	4b59      	ldr	r3, [pc, #356]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a58      	ldr	r2, [pc, #352]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c78:	4b53      	ldr	r3, [pc, #332]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a52      	ldr	r2, [pc, #328]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b50      	ldr	r3, [pc, #320]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	494d      	ldr	r1, [pc, #308]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d044      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b47      	ldr	r3, [pc, #284]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d119      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d003      	beq.n	8001cca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cc6:	2b03      	cmp	r3, #3
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cca:	4b3f      	ldr	r3, [pc, #252]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cda:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e067      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cea:	4b37      	ldr	r3, [pc, #220]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f023 0203 	bic.w	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4934      	ldr	r1, [pc, #208]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f896 	bl	8000e2c <HAL_GetTick>
 8001d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d02:	e00a      	b.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d04:	f7ff f892 	bl	8000e2c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04f      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 020c 	and.w	r2, r3, #12
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1eb      	bne.n	8001d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b25      	ldr	r3, [pc, #148]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d20c      	bcs.n	8001d54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d001      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e032      	b.n	8001dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4916      	ldr	r1, [pc, #88]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d7e:	4b12      	ldr	r3, [pc, #72]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d92:	f000 f821 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	091b      	lsrs	r3, r3, #4
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	490a      	ldr	r1, [pc, #40]	@ (8001dcc <HAL_RCC_ClockConfig+0x1c0>)
 8001da4:	5ccb      	ldrb	r3, [r1, r3]
 8001da6:	fa22 f303 	lsr.w	r3, r2, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dae:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fff6 	bl	8000da4 <HAL_InitTick>

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023c00 	.word	0x40023c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08005170 	.word	0x08005170
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b090      	sub	sp, #64	@ 0x40
 8001dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df0:	4b59      	ldr	r3, [pc, #356]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d00d      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x40>
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	f200 80a1 	bhi.w	8001f44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d003      	beq.n	8001e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0a:	e09b      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b53      	ldr	r3, [pc, #332]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e10:	e09b      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e12:	4b53      	ldr	r3, [pc, #332]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e16:	e098      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e18:	4b4f      	ldr	r3, [pc, #316]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e22:	4b4d      	ldr	r3, [pc, #308]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d028      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	099b      	lsrs	r3, r3, #6
 8001e34:	2200      	movs	r2, #0
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e40:	2100      	movs	r1, #0
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e44:	fb03 f201 	mul.w	r2, r3, r1
 8001e48:	2300      	movs	r3, #0
 8001e4a:	fb00 f303 	mul.w	r3, r0, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a43      	ldr	r2, [pc, #268]	@ (8001f60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e52:	fba0 1202 	umull	r1, r2, r0, r2
 8001e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e58:	460a      	mov	r2, r1
 8001e5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e5e:	4413      	add	r3, r2
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e64:	2200      	movs	r2, #0
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	61fa      	str	r2, [r7, #28]
 8001e6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e72:	f7fe fa0d 	bl	8000290 <__aeabi_uldivmod>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e7e:	e053      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e80:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	099b      	lsrs	r3, r3, #6
 8001e86:	2200      	movs	r2, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	617a      	str	r2, [r7, #20]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e92:	f04f 0b00 	mov.w	fp, #0
 8001e96:	4652      	mov	r2, sl
 8001e98:	465b      	mov	r3, fp
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 0100 	mov.w	r1, #0
 8001ea2:	0159      	lsls	r1, r3, #5
 8001ea4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea8:	0150      	lsls	r0, r2, #5
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	ebb2 080a 	subs.w	r8, r2, sl
 8001eb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ec2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ec6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eca:	ebb2 0408 	subs.w	r4, r2, r8
 8001ece:	eb63 0509 	sbc.w	r5, r3, r9
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	00eb      	lsls	r3, r5, #3
 8001edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	4614      	mov	r4, r2
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	eb14 030a 	adds.w	r3, r4, sl
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	eb45 030b 	adc.w	r3, r5, fp
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001efe:	4629      	mov	r1, r5
 8001f00:	028b      	lsls	r3, r1, #10
 8001f02:	4621      	mov	r1, r4
 8001f04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f08:	4621      	mov	r1, r4
 8001f0a:	028a      	lsls	r2, r1, #10
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f12:	2200      	movs	r2, #0
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	60fa      	str	r2, [r7, #12]
 8001f18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f1c:	f7fe f9b8 	bl	8000290 <__aeabi_uldivmod>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4613      	mov	r3, r2
 8001f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	3301      	adds	r3, #1
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f42:	e002      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3740      	adds	r7, #64	@ 0x40
 8001f50:	46bd      	mov	sp, r7
 8001f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	00f42400 	.word	0x00f42400
 8001f60:	017d7840 	.word	0x017d7840

08001f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000000 	.word	0x20000000

08001f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f80:	f7ff fff0 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001f84:	4602      	mov	r2, r0
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	4903      	ldr	r1, [pc, #12]	@ (8001fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f92:	5ccb      	ldrb	r3, [r1, r3]
 8001f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	08005180 	.word	0x08005180

08001fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa8:	f7ff ffdc 	bl	8001f64 <HAL_RCC_GetHCLKFreq>
 8001fac:	4602      	mov	r2, r0
 8001fae:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	4903      	ldr	r1, [pc, #12]	@ (8001fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	08005180 	.word	0x08005180

08001fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e042      	b.n	8002064 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d106      	bne.n	8001ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7fe fd4a 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2224      	movs	r2, #36	@ 0x24
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800200e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 fc85 	bl	8002920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2220      	movs	r2, #32
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0ba      	sub	sp, #232	@ 0xe8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800209e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80020aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10f      	bne.n	80020d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_UART_IRQHandler+0x66>
 80020be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fb69 	bl	80027a2 <UART_Receive_IT>
      return;
 80020d0:	e25b      	b.n	800258a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80de 	beq.w	8002298 <HAL_UART_IRQHandler+0x22c>
 80020dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d106      	bne.n	80020f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80d1 	beq.w	8002298 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <HAL_UART_IRQHandler+0xae>
 8002102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	f043 0201 	orr.w	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800211a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <HAL_UART_IRQHandler+0xd2>
 8002126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	f043 0202 	orr.w	r2, r3, #2
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800213e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_UART_IRQHandler+0xf6>
 800214a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d005      	beq.n	8002162 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f043 0204 	orr.w	r2, r3, #4
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d011      	beq.n	8002192 <HAL_UART_IRQHandler+0x126>
 800216e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002172:	f003 0320 	and.w	r3, r3, #32
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800217a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	f043 0208 	orr.w	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 81f2 	beq.w	8002580 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800219c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021a0:	f003 0320 	and.w	r3, r3, #32
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_UART_IRQHandler+0x14e>
 80021a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 faf4 	bl	80027a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c4:	2b40      	cmp	r3, #64	@ 0x40
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d103      	bne.n	80021e6 <HAL_UART_IRQHandler+0x17a>
 80021de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d04f      	beq.n	8002286 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f9fc 	bl	80025e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021f6:	2b40      	cmp	r3, #64	@ 0x40
 80021f8:	d141      	bne.n	800227e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3314      	adds	r3, #20
 8002200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002208:	e853 3f00 	ldrex	r3, [r3]
 800220c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3314      	adds	r3, #20
 8002222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002226:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800222a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800222e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002236:	e841 2300 	strex	r3, r2, [r1]
 800223a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800223e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1d9      	bne.n	80021fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	2b00      	cmp	r3, #0
 800224c:	d013      	beq.n	8002276 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002252:	4a7e      	ldr	r2, [pc, #504]	@ (800244c <HAL_UART_IRQHandler+0x3e0>)
 8002254:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe ff73 	bl	8001146 <HAL_DMA_Abort_IT>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d016      	beq.n	8002294 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002270:	4610      	mov	r0, r2
 8002272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002274:	e00e      	b.n	8002294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f99e 	bl	80025b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227c:	e00a      	b.n	8002294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f99a 	bl	80025b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002284:	e006      	b.n	8002294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f996 	bl	80025b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002292:	e175      	b.n	8002580 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002294:	bf00      	nop
    return;
 8002296:	e173      	b.n	8002580 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	2b01      	cmp	r3, #1
 800229e:	f040 814f 	bne.w	8002540 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80022a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 8148 	beq.w	8002540 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8141 	beq.w	8002540 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022de:	2b40      	cmp	r3, #64	@ 0x40
 80022e0:	f040 80b6 	bne.w	8002450 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8145 	beq.w	8002584 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80022fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002302:	429a      	cmp	r2, r3
 8002304:	f080 813e 	bcs.w	8002584 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800230e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800231a:	f000 8088 	beq.w	800242e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800232c:	e853 3f00 	ldrex	r3, [r3]
 8002330:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800233c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800234a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800234e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002356:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800235a:	e841 2300 	strex	r3, r2, [r1]
 800235e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002362:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1d9      	bne.n	800231e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3314      	adds	r3, #20
 8002370:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002374:	e853 3f00 	ldrex	r3, [r3]
 8002378:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800237a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3314      	adds	r3, #20
 800238a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800238e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002392:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002396:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80023a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1e1      	bne.n	800236a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3314      	adds	r3, #20
 80023ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023b0:	e853 3f00 	ldrex	r3, [r3]
 80023b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3314      	adds	r3, #20
 80023c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023d2:	e841 2300 	strex	r3, r2, [r1]
 80023d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1e3      	bne.n	80023a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2220      	movs	r2, #32
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	330c      	adds	r3, #12
 80023f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023f6:	e853 3f00 	ldrex	r3, [r3]
 80023fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80023fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023fe:	f023 0310 	bic.w	r3, r3, #16
 8002402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	330c      	adds	r3, #12
 800240c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002410:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002412:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002416:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002418:	e841 2300 	strex	r3, r2, [r1]
 800241c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800241e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e3      	bne.n	80023ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fe1c 	bl	8001066 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800243c:	b29b      	uxth	r3, r3
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	b29b      	uxth	r3, r3
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f8c1 	bl	80025cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800244a:	e09b      	b.n	8002584 <HAL_UART_IRQHandler+0x518>
 800244c:	080026ab 	.word	0x080026ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002458:	b29b      	uxth	r3, r3
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002464:	b29b      	uxth	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 808e 	beq.w	8002588 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800246c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 8089 	beq.w	8002588 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330c      	adds	r3, #12
 800247c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002480:	e853 3f00 	ldrex	r3, [r3]
 8002484:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002488:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800248c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	330c      	adds	r3, #12
 8002496:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800249a:	647a      	str	r2, [r7, #68]	@ 0x44
 800249c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80024a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e3      	bne.n	8002476 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3314      	adds	r3, #20
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	e853 3f00 	ldrex	r3, [r3]
 80024bc:	623b      	str	r3, [r7, #32]
   return(result);
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3314      	adds	r3, #20
 80024ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80024d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024da:	e841 2300 	strex	r3, r2, [r1]
 80024de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1e3      	bne.n	80024ae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	330c      	adds	r3, #12
 80024fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	e853 3f00 	ldrex	r3, [r3]
 8002502:	60fb      	str	r3, [r7, #12]
   return(result);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0310 	bic.w	r3, r3, #16
 800250a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002518:	61fa      	str	r2, [r7, #28]
 800251a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	e841 2300 	strex	r3, r2, [r1]
 8002524:	617b      	str	r3, [r7, #20]
   return(result);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e3      	bne.n	80024f4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002532:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f847 	bl	80025cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800253e:	e023      	b.n	8002588 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_UART_IRQHandler+0x4f4>
 800254c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f8ba 	bl	80026d2 <UART_Transmit_IT>
    return;
 800255e:	e014      	b.n	800258a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00e      	beq.n	800258a <HAL_UART_IRQHandler+0x51e>
 800256c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f8fa 	bl	8002772 <UART_EndTransmit_IT>
    return;
 800257e:	e004      	b.n	800258a <HAL_UART_IRQHandler+0x51e>
    return;
 8002580:	bf00      	nop
 8002582:	e002      	b.n	800258a <HAL_UART_IRQHandler+0x51e>
      return;
 8002584:	bf00      	nop
 8002586:	e000      	b.n	800258a <HAL_UART_IRQHandler+0x51e>
      return;
 8002588:	bf00      	nop
  }
}
 800258a:	37e8      	adds	r7, #232	@ 0xe8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b095      	sub	sp, #84	@ 0x54
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	330c      	adds	r3, #12
 80025f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025f6:	e853 3f00 	ldrex	r3, [r3]
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800260c:	643a      	str	r2, [r7, #64]	@ 0x40
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002614:	e841 2300 	strex	r3, r2, [r1]
 8002618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800261a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e5      	bne.n	80025ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	e853 3f00 	ldrex	r3, [r3]
 800262e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f023 0301 	bic.w	r3, r3, #1
 8002636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3314      	adds	r3, #20
 800263e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002648:	e841 2300 	strex	r3, r2, [r1]
 800264c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e5      	bne.n	8002620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002658:	2b01      	cmp	r3, #1
 800265a:	d119      	bne.n	8002690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	330c      	adds	r3, #12
 8002662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	e853 3f00 	ldrex	r3, [r3]
 800266a:	60bb      	str	r3, [r7, #8]
   return(result);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f023 0310 	bic.w	r3, r3, #16
 8002672:	647b      	str	r3, [r7, #68]	@ 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	330c      	adds	r3, #12
 800267a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800267c:	61ba      	str	r2, [r7, #24]
 800267e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002680:	6979      	ldr	r1, [r7, #20]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	e841 2300 	strex	r3, r2, [r1]
 8002688:	613b      	str	r3, [r7, #16]
   return(result);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e5      	bne.n	800265c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800269e:	bf00      	nop
 80026a0:	3754      	adds	r7, #84	@ 0x54
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b084      	sub	sp, #16
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f7ff ff77 	bl	80025b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b21      	cmp	r3, #33	@ 0x21
 80026e4:	d13e      	bne.n	8002764 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ee:	d114      	bne.n	800271a <UART_Transmit_IT+0x48>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d110      	bne.n	800271a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800270c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	1c9a      	adds	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	621a      	str	r2, [r3, #32]
 8002718:	e008      	b.n	800272c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6211      	str	r1, [r2, #32]
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29b      	uxth	r3, r3
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4619      	mov	r1, r3
 800273a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800274e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fefc 	bl	8002590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b08c      	sub	sp, #48	@ 0x30
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b22      	cmp	r3, #34	@ 0x22
 80027b4:	f040 80ae 	bne.w	8002914 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027c0:	d117      	bne.n	80027f2 <UART_Receive_IT+0x50>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d113      	bne.n	80027f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ea:	1c9a      	adds	r2, r3, #2
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80027f0:	e026      	b.n	8002840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002804:	d007      	beq.n	8002816 <UART_Receive_IT+0x74>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <UART_Receive_IT+0x82>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e008      	b.n	8002836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002830:	b2da      	uxtb	r2, r3
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29b      	uxth	r3, r3
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4619      	mov	r1, r3
 800284e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002850:	2b00      	cmp	r3, #0
 8002852:	d15d      	bne.n	8002910 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0220 	bic.w	r2, r2, #32
 8002862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695a      	ldr	r2, [r3, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	2b01      	cmp	r3, #1
 8002898:	d135      	bne.n	8002906 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	330c      	adds	r3, #12
 80028a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	e853 3f00 	ldrex	r3, [r3]
 80028ae:	613b      	str	r3, [r7, #16]
   return(result);
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	f023 0310 	bic.w	r3, r3, #16
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	330c      	adds	r3, #12
 80028be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028c0:	623a      	str	r2, [r7, #32]
 80028c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c4:	69f9      	ldr	r1, [r7, #28]
 80028c6:	6a3a      	ldr	r2, [r7, #32]
 80028c8:	e841 2300 	strex	r3, r2, [r1]
 80028cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e5      	bne.n	80028a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d10a      	bne.n	80028f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fe64 	bl	80025cc <HAL_UARTEx_RxEventCallback>
 8002904:	e002      	b.n	800290c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fe4c 	bl	80025a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e002      	b.n	8002916 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3730      	adds	r7, #48	@ 0x30
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002924:	b0c0      	sub	sp, #256	@ 0x100
 8002926:	af00      	add	r7, sp, #0
 8002928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	68d9      	ldr	r1, [r3, #12]
 800293e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	ea40 0301 	orr.w	r3, r0, r1
 8002948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800294a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	431a      	orrs	r2, r3
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002978:	f021 010c 	bic.w	r1, r1, #12
 800297c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002986:	430b      	orrs	r3, r1
 8002988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800298a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	6999      	ldr	r1, [r3, #24]
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	ea40 0301 	orr.w	r3, r0, r1
 80029a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b8f      	ldr	r3, [pc, #572]	@ (8002bec <UART_SetConfig+0x2cc>)
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d005      	beq.n	80029c0 <UART_SetConfig+0xa0>
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b8d      	ldr	r3, [pc, #564]	@ (8002bf0 <UART_SetConfig+0x2d0>)
 80029bc:	429a      	cmp	r2, r3
 80029be:	d104      	bne.n	80029ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029c0:	f7ff faf0 	bl	8001fa4 <HAL_RCC_GetPCLK2Freq>
 80029c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029c8:	e003      	b.n	80029d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ca:	f7ff fad7 	bl	8001f7c <HAL_RCC_GetPCLK1Freq>
 80029ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029dc:	f040 810c 	bne.w	8002bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e4:	2200      	movs	r2, #0
 80029e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029f2:	4622      	mov	r2, r4
 80029f4:	462b      	mov	r3, r5
 80029f6:	1891      	adds	r1, r2, r2
 80029f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029fa:	415b      	adcs	r3, r3
 80029fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a02:	4621      	mov	r1, r4
 8002a04:	eb12 0801 	adds.w	r8, r2, r1
 8002a08:	4629      	mov	r1, r5
 8002a0a:	eb43 0901 	adc.w	r9, r3, r1
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a22:	4690      	mov	r8, r2
 8002a24:	4699      	mov	r9, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	eb18 0303 	adds.w	r3, r8, r3
 8002a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a30:	462b      	mov	r3, r5
 8002a32:	eb49 0303 	adc.w	r3, r9, r3
 8002a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a4e:	460b      	mov	r3, r1
 8002a50:	18db      	adds	r3, r3, r3
 8002a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a54:	4613      	mov	r3, r2
 8002a56:	eb42 0303 	adc.w	r3, r2, r3
 8002a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a64:	f7fd fc14 	bl	8000290 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4b61      	ldr	r3, [pc, #388]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	011c      	lsls	r4, r3, #4
 8002a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	1891      	adds	r1, r2, r2
 8002a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a90:	415b      	adcs	r3, r3
 8002a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a98:	4641      	mov	r1, r8
 8002a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	f04f 0300 	mov.w	r3, #0
 8002aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ab8:	4692      	mov	sl, r2
 8002aba:	469b      	mov	fp, r3
 8002abc:	4643      	mov	r3, r8
 8002abe:	eb1a 0303 	adds.w	r3, sl, r3
 8002ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8002acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	18db      	adds	r3, r3, r3
 8002ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aea:	4613      	mov	r3, r2
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002afa:	f7fd fbc9 	bl	8000290 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	4b3b      	ldr	r3, [pc, #236]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002b06:	fba3 2301 	umull	r2, r3, r3, r1
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2264      	movs	r2, #100	@ 0x64
 8002b0e:	fb02 f303 	mul.w	r3, r2, r3
 8002b12:	1acb      	subs	r3, r1, r3
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b1a:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b28:	441c      	add	r4, r3
 8002b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	464b      	mov	r3, r9
 8002b40:	1891      	adds	r1, r2, r2
 8002b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b44:	415b      	adcs	r3, r3
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	1851      	adds	r1, r2, r1
 8002b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b52:	4649      	mov	r1, r9
 8002b54:	414b      	adcs	r3, r1
 8002b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b64:	4659      	mov	r1, fp
 8002b66:	00cb      	lsls	r3, r1, #3
 8002b68:	4651      	mov	r1, sl
 8002b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6e:	4651      	mov	r1, sl
 8002b70:	00ca      	lsls	r2, r1, #3
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	4642      	mov	r2, r8
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b80:	464b      	mov	r3, r9
 8002b82:	460a      	mov	r2, r1
 8002b84:	eb42 0303 	adc.w	r3, r2, r3
 8002b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	18db      	adds	r3, r3, r3
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	eb42 0303 	adc.w	r3, r2, r3
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bb6:	f7fd fb6b 	bl	8000290 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bc4:	095b      	lsrs	r3, r3, #5
 8002bc6:	2164      	movs	r1, #100	@ 0x64
 8002bc8:	fb01 f303 	mul.w	r3, r1, r3
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	3332      	adds	r3, #50	@ 0x32
 8002bd2:	4a08      	ldr	r2, [pc, #32]	@ (8002bf4 <UART_SetConfig+0x2d4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f003 0207 	and.w	r2, r3, #7
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4422      	add	r2, r4
 8002be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002be8:	e106      	b.n	8002df8 <UART_SetConfig+0x4d8>
 8002bea:	bf00      	nop
 8002bec:	40011000 	.word	0x40011000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	1891      	adds	r1, r2, r2
 8002c10:	6239      	str	r1, [r7, #32]
 8002c12:	415b      	adcs	r3, r3
 8002c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	1854      	adds	r4, r2, r1
 8002c1e:	4649      	mov	r1, r9
 8002c20:	eb43 0501 	adc.w	r5, r3, r1
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	00eb      	lsls	r3, r5, #3
 8002c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c32:	00e2      	lsls	r2, r4, #3
 8002c34:	4614      	mov	r4, r2
 8002c36:	461d      	mov	r5, r3
 8002c38:	4643      	mov	r3, r8
 8002c3a:	18e3      	adds	r3, r4, r3
 8002c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c40:	464b      	mov	r3, r9
 8002c42:	eb45 0303 	adc.w	r3, r5, r3
 8002c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c66:	4629      	mov	r1, r5
 8002c68:	008b      	lsls	r3, r1, #2
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c70:	4621      	mov	r1, r4
 8002c72:	008a      	lsls	r2, r1, #2
 8002c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c78:	f7fd fb0a 	bl	8000290 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4b60      	ldr	r3, [pc, #384]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	011c      	lsls	r4, r3, #4
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	61b9      	str	r1, [r7, #24]
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cac:	4641      	mov	r1, r8
 8002cae:	1851      	adds	r1, r2, r1
 8002cb0:	6139      	str	r1, [r7, #16]
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	414b      	adcs	r3, r1
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cc4:	4659      	mov	r1, fp
 8002cc6:	00cb      	lsls	r3, r1, #3
 8002cc8:	4651      	mov	r1, sl
 8002cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cce:	4651      	mov	r1, sl
 8002cd0:	00ca      	lsls	r2, r1, #3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4642      	mov	r2, r8
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	eb42 0303 	adc.w	r3, r2, r3
 8002ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d04:	4649      	mov	r1, r9
 8002d06:	008b      	lsls	r3, r1, #2
 8002d08:	4641      	mov	r1, r8
 8002d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d0e:	4641      	mov	r1, r8
 8002d10:	008a      	lsls	r2, r1, #2
 8002d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d16:	f7fd fabb 	bl	8000290 <__aeabi_uldivmod>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4b38      	ldr	r3, [pc, #224]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002d22:	fba3 2301 	umull	r2, r3, r3, r1
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2264      	movs	r2, #100	@ 0x64
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	1acb      	subs	r3, r1, r3
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	3332      	adds	r3, #50	@ 0x32
 8002d34:	4a33      	ldr	r2, [pc, #204]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d40:	441c      	add	r4, r3
 8002d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d46:	2200      	movs	r2, #0
 8002d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d60:	4641      	mov	r1, r8
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	4649      	mov	r1, r9
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	607b      	str	r3, [r7, #4]
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d78:	4659      	mov	r1, fp
 8002d7a:	00cb      	lsls	r3, r1, #3
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d82:	4651      	mov	r1, sl
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d92:	464b      	mov	r3, r9
 8002d94:	460a      	mov	r2, r1
 8002d96:	eb42 0303 	adc.w	r3, r2, r3
 8002d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002db4:	4649      	mov	r1, r9
 8002db6:	008b      	lsls	r3, r1, #2
 8002db8:	4641      	mov	r1, r8
 8002dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	008a      	lsls	r2, r1, #2
 8002dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dc6:	f7fd fa63 	bl	8000290 <__aeabi_uldivmod>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	2164      	movs	r1, #100	@ 0x64
 8002dd8:	fb01 f303 	mul.w	r3, r1, r3
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	3332      	adds	r3, #50	@ 0x32
 8002de2:	4a08      	ldr	r2, [pc, #32]	@ (8002e04 <UART_SetConfig+0x4e4>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	f003 020f 	and.w	r2, r3, #15
 8002dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4422      	add	r2, r4
 8002df6:	609a      	str	r2, [r3, #8]
}
 8002df8:	bf00      	nop
 8002dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e04:	51eb851f 	.word	0x51eb851f

08002e08 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8002e1e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002e22:	2100      	movs	r1, #0
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f001 fc45 	bl	80046b4 <memset>
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8002e40:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f001 f96b 	bl	8004120 <mbedtls_platform_zeroize>
 8002e4a:	e000      	b.n	8002e4e <mbedtls_aes_free+0x1c>
        return;
 8002e4c:	bf00      	nop
}
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e66:	d012      	beq.n	8002e8e <mbedtls_aes_setkey_enc+0x3a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e6e:	d812      	bhi.n	8002e96 <mbedtls_aes_setkey_enc+0x42>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b80      	cmp	r3, #128	@ 0x80
 8002e74:	d003      	beq.n	8002e7e <mbedtls_aes_setkey_enc+0x2a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e7a:	d004      	beq.n	8002e86 <mbedtls_aes_setkey_enc+0x32>
 8002e7c:	e00b      	b.n	8002e96 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	220a      	movs	r2, #10
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e00a      	b.n	8002e9c <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	220c      	movs	r2, #12
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	e006      	b.n	8002e9c <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	220e      	movs	r2, #14
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e002      	b.n	8002e9c <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8002e96:	f06f 031f 	mvn.w	r3, #31
 8002e9a:	e1a7      	b.n	80031ec <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3308      	adds	r3, #8
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e027      	b.n	8002efe <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	4619      	mov	r1, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	021b      	lsls	r3, r3, #8
 8002ec8:	ea41 0203 	orr.w	r2, r1, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	3302      	adds	r3, #2
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	440b      	add	r3, r1
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	ea42 0103 	orr.w	r1, r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	3303      	adds	r3, #3
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	061a      	lsls	r2, r3, #24
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	6938      	ldr	r0, [r7, #16]
 8002ef2:	4403      	add	r3, r0
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	697a      	ldr	r2, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3d2      	bcc.n	8002eae <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b0e      	cmp	r3, #14
 8002f0e:	f000 80ca 	beq.w	80030a6 <mbedtls_aes_setkey_enc+0x252>
 8002f12:	2b0e      	cmp	r3, #14
 8002f14:	f300 8169 	bgt.w	80031ea <mbedtls_aes_setkey_enc+0x396>
 8002f18:	2b0a      	cmp	r3, #10
 8002f1a:	d002      	beq.n	8002f22 <mbedtls_aes_setkey_enc+0xce>
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d057      	beq.n	8002fd0 <mbedtls_aes_setkey_enc+0x17c>
 8002f20:	e163      	b.n	80031ea <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e04f      	b.n	8002fc8 <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	495f      	ldr	r1, [pc, #380]	@ (80030ac <mbedtls_aes_setkey_enc+0x258>)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f34:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	320c      	adds	r2, #12
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	0a12      	lsrs	r2, r2, #8
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	495b      	ldr	r1, [pc, #364]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8002f42:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8002f44:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	4957      	ldr	r1, [pc, #348]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002f56:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	0e1b      	lsrs	r3, r3, #24
 8002f60:	4953      	ldr	r1, [pc, #332]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8002f66:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	330c      	adds	r3, #12
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	4a4f      	ldr	r2, [pc, #316]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002f7c:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8002f7e:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	3304      	adds	r3, #4
 8002f84:	6819      	ldr	r1, [r3, #0]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	3310      	adds	r3, #16
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	3314      	adds	r3, #20
 8002f90:	404a      	eors	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	3308      	adds	r3, #8
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	404a      	eors	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	330c      	adds	r3, #12
 8002fac:	6819      	ldr	r1, [r3, #0]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3318      	adds	r3, #24
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	331c      	adds	r3, #28
 8002fb8:	404a      	eors	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3310      	adds	r3, #16
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d9ac      	bls.n	8002f28 <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 8002fce:	e10c      	b.n	80031ea <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e063      	b.n	800309e <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4934      	ldr	r1, [pc, #208]	@ (80030ac <mbedtls_aes_setkey_enc+0x258>)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fe2:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	3214      	adds	r2, #20
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	0a12      	lsrs	r2, r2, #8
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	4930      	ldr	r1, [pc, #192]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8002ff0:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8002ff2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	492c      	ldr	r1, [pc, #176]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8003000:	5ccb      	ldrb	r3, [r1, r3]
 8003002:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003004:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	3314      	adds	r3, #20
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	4928      	ldr	r1, [pc, #160]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8003010:	5ccb      	ldrb	r3, [r1, r3]
 8003012:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003014:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	3314      	adds	r3, #20
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	4a23      	ldr	r2, [pc, #140]	@ (80030b0 <mbedtls_aes_setkey_enc+0x25c>)
 8003022:	5cd3      	ldrb	r3, [r2, r3]
 8003024:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800302a:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800302c:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	3304      	adds	r3, #4
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	3318      	adds	r3, #24
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	331c      	adds	r3, #28
 800303e:	404a      	eors	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	3308      	adds	r3, #8
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	331c      	adds	r3, #28
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3320      	adds	r3, #32
 8003052:	404a      	eors	r2, r1
 8003054:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	330c      	adds	r3, #12
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3320      	adds	r3, #32
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3324      	adds	r3, #36	@ 0x24
 8003066:	404a      	eors	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	3310      	adds	r3, #16
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3324      	adds	r3, #36	@ 0x24
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	3328      	adds	r3, #40	@ 0x28
 800307a:	404a      	eors	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	3314      	adds	r3, #20
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	3328      	adds	r3, #40	@ 0x28
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	332c      	adds	r3, #44	@ 0x2c
 800308e:	404a      	eors	r2, r1
 8003090:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	3318      	adds	r3, #24
 800309c:	613b      	str	r3, [r7, #16]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2b07      	cmp	r3, #7
 80030a2:	d998      	bls.n	8002fd6 <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 80030a4:	e0a1      	b.n	80031ea <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
 80030aa:	e099      	b.n	80031e0 <mbedtls_aes_setkey_enc+0x38c>
 80030ac:	08007388 	.word	0x08007388
 80030b0:	08005188 	.word	0x08005188
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	494f      	ldr	r1, [pc, #316]	@ (80031f8 <mbedtls_aes_setkey_enc+0x3a4>)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030c0:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	321c      	adds	r2, #28
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	0a12      	lsrs	r2, r2, #8
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	494b      	ldr	r1, [pc, #300]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 80030ce:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 80030d0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	331c      	adds	r3, #28
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4947      	ldr	r1, [pc, #284]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 80030de:	5ccb      	ldrb	r3, [r1, r3]
 80030e0:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80030e2:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	331c      	adds	r3, #28
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	0e1b      	lsrs	r3, r3, #24
 80030ec:	4943      	ldr	r1, [pc, #268]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80030f2:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	331c      	adds	r3, #28
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	4a3f      	ldr	r2, [pc, #252]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 8003100:	5cd3      	ldrb	r3, [r2, r3]
 8003102:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003108:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800310a:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	3304      	adds	r3, #4
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	3320      	adds	r3, #32
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	3324      	adds	r3, #36	@ 0x24
 800311c:	404a      	eors	r2, r1
 800311e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	3308      	adds	r3, #8
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	3324      	adds	r3, #36	@ 0x24
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	3328      	adds	r3, #40	@ 0x28
 8003130:	404a      	eors	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	330c      	adds	r3, #12
 8003138:	6819      	ldr	r1, [r3, #0]
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	3328      	adds	r3, #40	@ 0x28
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	332c      	adds	r3, #44	@ 0x2c
 8003144:	404a      	eors	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	3310      	adds	r3, #16
 800314c:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	322c      	adds	r2, #44	@ 0x2c
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	4929      	ldr	r1, [pc, #164]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 8003158:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800315a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	332c      	adds	r3, #44	@ 0x2c
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b2db      	uxtb	r3, r3
 8003166:	4925      	ldr	r1, [pc, #148]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 8003168:	5ccb      	ldrb	r3, [r1, r3]
 800316a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800316c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	332c      	adds	r3, #44	@ 0x2c
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	4920      	ldr	r1, [pc, #128]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800317e:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	332c      	adds	r3, #44	@ 0x2c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	0e1b      	lsrs	r3, r3, #24
 800318a:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <mbedtls_aes_setkey_enc+0x3a8>)
 800318c:	5cd3      	ldrb	r3, [r2, r3]
 800318e:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003194:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8003196:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	3314      	adds	r3, #20
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3330      	adds	r3, #48	@ 0x30
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	3334      	adds	r3, #52	@ 0x34
 80031a8:	404a      	eors	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	3318      	adds	r3, #24
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	3334      	adds	r3, #52	@ 0x34
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3338      	adds	r3, #56	@ 0x38
 80031bc:	404a      	eors	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	331c      	adds	r3, #28
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3338      	adds	r3, #56	@ 0x38
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	333c      	adds	r3, #60	@ 0x3c
 80031d0:	404a      	eors	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3320      	adds	r3, #32
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	f67f af66 	bls.w	80030b4 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 80031e8:	bf00      	nop
    }

    return( 0 );
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	08007388 	.word	0x08007388
 80031fc:	08005188 	.word	0x08005188

08003200 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b0d0      	sub	sp, #320	@ 0x140
 8003204:	af00      	add	r7, sp, #0
 8003206:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800320a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800320e:	6018      	str	r0, [r3, #0]
 8003210:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003214:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003218:	6019      	str	r1, [r3, #0]
 800321a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800321e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003222:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fdf4 	bl	8002e16 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800322e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003232:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3308      	adds	r3, #8
 800323a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800323e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003242:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800324c:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800324e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003252:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8003256:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800325a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800325e:	f107 0014 	add.w	r0, r7, #20
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	f7ff fdf5 	bl	8002e54 <mbedtls_aes_setkey_enc>
 800326a:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800326e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 80dd 	bne.w	8003432 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 8003278:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800327c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003286:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 800328e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003292:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800329c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	4413      	add	r3, r2
 80032a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 80032aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80032ae:	1d13      	adds	r3, r2, #4
 80032b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80032b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032b8:	1d19      	adds	r1, r3, #4
 80032ba:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80032be:	6812      	ldr	r2, [r2, #0]
 80032c0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80032c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80032c6:	1d13      	adds	r3, r2, #4
 80032c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80032cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032d0:	1d19      	adds	r1, r3, #4
 80032d2:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80032da:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80032de:	1d13      	adds	r3, r2, #4
 80032e0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80032e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032e8:	1d19      	adds	r1, r3, #4
 80032ea:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80032f2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80032f6:	1d13      	adds	r3, r2, #4
 80032f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80032fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003300:	1d19      	adds	r1, r3, #4
 8003302:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800330a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800330e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3b01      	subs	r3, #1
 8003318:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800331c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003320:	3b20      	subs	r3, #32
 8003322:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003326:	e04f      	b.n	80033c8 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800332e:	e03d      	b.n	80033ac <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003330:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	4a44      	ldr	r2, [pc, #272]	@ (800344c <mbedtls_aes_setkey_dec+0x24c>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	461a      	mov	r2, r3
 800333e:	4b44      	ldr	r3, [pc, #272]	@ (8003450 <mbedtls_aes_setkey_dec+0x250>)
 8003340:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003344:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b2db      	uxtb	r3, r3
 800334e:	493f      	ldr	r1, [pc, #252]	@ (800344c <mbedtls_aes_setkey_dec+0x24c>)
 8003350:	5ccb      	ldrb	r3, [r1, r3]
 8003352:	4619      	mov	r1, r3
 8003354:	4b3f      	ldr	r3, [pc, #252]	@ (8003454 <mbedtls_aes_setkey_dec+0x254>)
 8003356:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800335a:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800335c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4939      	ldr	r1, [pc, #228]	@ (800344c <mbedtls_aes_setkey_dec+0x24c>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	4619      	mov	r1, r3
 800336c:	4b3a      	ldr	r3, [pc, #232]	@ (8003458 <mbedtls_aes_setkey_dec+0x258>)
 800336e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003372:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8003376:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e1b      	lsrs	r3, r3, #24
 800337e:	4a33      	ldr	r2, [pc, #204]	@ (800344c <mbedtls_aes_setkey_dec+0x24c>)
 8003380:	5cd3      	ldrb	r3, [r2, r3]
 8003382:	461a      	mov	r2, r3
 8003384:	4b35      	ldr	r3, [pc, #212]	@ (800345c <mbedtls_aes_setkey_dec+0x25c>)
 8003386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800338a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800338e:	1d18      	adds	r0, r3, #4
 8003390:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003394:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003396:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8003398:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800339c:	3301      	adds	r3, #1
 800339e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80033a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033a6:	3304      	adds	r3, #4
 80033a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80033ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	ddbd      	ble.n	8003330 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80033b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80033b8:	3b01      	subs	r3, #1
 80033ba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80033be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033c2:	3b20      	subs	r3, #32
 80033c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80033c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	dcab      	bgt.n	8003328 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 80033d0:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80033d4:	1d13      	adds	r3, r2, #4
 80033d6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80033da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80033de:	1d19      	adds	r1, r3, #4
 80033e0:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80033e8:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80033ec:	1d13      	adds	r3, r2, #4
 80033ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80033f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80033f6:	1d19      	adds	r1, r3, #4
 80033f8:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003400:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003404:	1d13      	adds	r3, r2, #4
 8003406:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800340a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800340e:	1d19      	adds	r1, r3, #4
 8003410:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003414:	6812      	ldr	r2, [r2, #0]
 8003416:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003418:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800341c:	1d13      	adds	r3, r2, #4
 800341e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003422:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003426:	1d19      	adds	r1, r3, #4
 8003428:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	e000      	b.n	8003434 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 8003432:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8003434:	f107 0314 	add.w	r3, r7, #20
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fcfa 	bl	8002e32 <mbedtls_aes_free>

    return( ret );
 800343e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8003442:	4618      	mov	r0, r3
 8003444:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	08005188 	.word	0x08005188
 8003450:	08006388 	.word	0x08006388
 8003454:	08006788 	.word	0x08006788
 8003458:	08006b88 	.word	0x08006b88
 800345c:	08006f88 	.word	0x08006f88

08003460 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003460:	b480      	push	{r7}
 8003462:	b08f      	sub	sp, #60	@ 0x3c
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	3301      	adds	r3, #1
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	431a      	orrs	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3302      	adds	r3, #2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	3303      	adds	r3, #3
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	4313      	orrs	r3, r2
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	1d1a      	adds	r2, r3, #4
 800349c:	633a      	str	r2, [r7, #48]	@ 0x30
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a2:	4053      	eors	r3, r2
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	3304      	adds	r3, #4
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3305      	adds	r3, #5
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	431a      	orrs	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	3306      	adds	r3, #6
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	041b      	lsls	r3, r3, #16
 80034c0:	431a      	orrs	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3307      	adds	r3, #7
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	061b      	lsls	r3, r3, #24
 80034ca:	4313      	orrs	r3, r2
 80034cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d8:	4053      	eors	r3, r2
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3308      	adds	r3, #8
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3309      	adds	r3, #9
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	330a      	adds	r3, #10
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	041b      	lsls	r3, r3, #16
 80034f6:	431a      	orrs	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	330b      	adds	r3, #11
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	4313      	orrs	r3, r2
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	1d1a      	adds	r2, r3, #4
 8003508:	633a      	str	r2, [r7, #48]	@ 0x30
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	4053      	eors	r3, r2
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	330c      	adds	r3, #12
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	330d      	adds	r3, #13
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	021b      	lsls	r3, r3, #8
 8003522:	431a      	orrs	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	330e      	adds	r3, #14
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	431a      	orrs	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	330f      	adds	r3, #15
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	4313      	orrs	r3, r2
 8003538:	623b      	str	r3, [r7, #32]
 800353a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353c:	1d1a      	adds	r2, r3, #4
 800353e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a3a      	ldr	r2, [r7, #32]
 8003544:	4053      	eors	r3, r2
 8003546:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	105b      	asrs	r3, r3, #1
 800354e:	3b01      	subs	r3, #1
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
 8003552:	e0fa      	b.n	800374a <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	633a      	str	r2, [r7, #48]	@ 0x30
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	b2db      	uxtb	r3, r3
 8003560:	49ab      	ldr	r1, [pc, #684]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003566:	405a      	eors	r2, r3
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	b2db      	uxtb	r3, r3
 800356e:	49a9      	ldr	r1, [pc, #676]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003574:	405a      	eors	r2, r3
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	b2db      	uxtb	r3, r3
 800357c:	49a6      	ldr	r1, [pc, #664]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 800357e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003582:	405a      	eors	r2, r3
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	0e1b      	lsrs	r3, r3, #24
 8003588:	49a4      	ldr	r1, [pc, #656]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 800358a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800358e:	4053      	eors	r3, r2
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	633a      	str	r2, [r7, #48]	@ 0x30
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800359c:	b2db      	uxtb	r3, r3
 800359e:	499c      	ldr	r1, [pc, #624]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 80035a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035a4:	405a      	eors	r2, r3
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	4999      	ldr	r1, [pc, #612]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 80035ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035b2:	405a      	eors	r2, r3
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4997      	ldr	r1, [pc, #604]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 80035bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035c0:	405a      	eors	r2, r3
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c4:	0e1b      	lsrs	r3, r3, #24
 80035c6:	4995      	ldr	r1, [pc, #596]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 80035c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035cc:	4053      	eors	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	498c      	ldr	r1, [pc, #560]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 80035de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035e2:	405a      	eors	r2, r3
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	498a      	ldr	r1, [pc, #552]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 80035ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035f0:	405a      	eors	r2, r3
 80035f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4987      	ldr	r1, [pc, #540]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 80035fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035fe:	405a      	eors	r2, r3
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	0e1b      	lsrs	r3, r3, #24
 8003604:	4985      	ldr	r1, [pc, #532]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003606:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800360a:	4053      	eors	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	633a      	str	r2, [r7, #48]	@ 0x30
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	497d      	ldr	r1, [pc, #500]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 800361c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003620:	405a      	eors	r2, r3
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	b2db      	uxtb	r3, r3
 8003628:	497a      	ldr	r1, [pc, #488]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 800362a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800362e:	405a      	eors	r2, r3
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4978      	ldr	r1, [pc, #480]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003638:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800363c:	405a      	eors	r2, r3
 800363e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003640:	0e1b      	lsrs	r3, r3, #24
 8003642:	4976      	ldr	r1, [pc, #472]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003644:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003648:	4053      	eors	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800364c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364e:	1d1a      	adds	r2, r3, #4
 8003650:	633a      	str	r2, [r7, #48]	@ 0x30
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	496d      	ldr	r1, [pc, #436]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 800365a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800365e:	405a      	eors	r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	b2db      	uxtb	r3, r3
 8003666:	496b      	ldr	r1, [pc, #428]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003668:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800366c:	405a      	eors	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4968      	ldr	r1, [pc, #416]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003676:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800367a:	405a      	eors	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	0e1b      	lsrs	r3, r3, #24
 8003680:	4966      	ldr	r1, [pc, #408]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003682:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003686:	4053      	eors	r3, r2
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	1d1a      	adds	r2, r3, #4
 800368e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	495e      	ldr	r1, [pc, #376]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800369c:	405a      	eors	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	495b      	ldr	r1, [pc, #364]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 80036a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036aa:	405a      	eors	r2, r3
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	4959      	ldr	r1, [pc, #356]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 80036b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036b8:	405a      	eors	r2, r3
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	0e1b      	lsrs	r3, r3, #24
 80036be:	4957      	ldr	r1, [pc, #348]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 80036c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036c4:	4053      	eors	r3, r2
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ca:	1d1a      	adds	r2, r3, #4
 80036cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	494e      	ldr	r1, [pc, #312]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 80036d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036da:	405a      	eors	r2, r3
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	494c      	ldr	r1, [pc, #304]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 80036e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036e8:	405a      	eors	r2, r3
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4949      	ldr	r1, [pc, #292]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 80036f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036f6:	405a      	eors	r2, r3
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	0e1b      	lsrs	r3, r3, #24
 80036fc:	4947      	ldr	r1, [pc, #284]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 80036fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003702:	4053      	eors	r3, r2
 8003704:	627b      	str	r3, [r7, #36]	@ 0x24
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	633a      	str	r2, [r7, #48]	@ 0x30
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	493f      	ldr	r1, [pc, #252]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003714:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003718:	405a      	eors	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	b2db      	uxtb	r3, r3
 8003720:	493c      	ldr	r1, [pc, #240]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003726:	405a      	eors	r2, r3
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	b2db      	uxtb	r3, r3
 800372e:	493a      	ldr	r1, [pc, #232]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003734:	405a      	eors	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	0e1b      	lsrs	r3, r3, #24
 800373a:	4938      	ldr	r1, [pc, #224]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 800373c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003740:	4053      	eors	r3, r2
 8003742:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003746:	3b01      	subs	r3, #1
 8003748:	637b      	str	r3, [r7, #52]	@ 0x34
 800374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374c:	2b00      	cmp	r3, #0
 800374e:	f73f af01 	bgt.w	8003554 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	633a      	str	r2, [r7, #48]	@ 0x30
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375c:	b2db      	uxtb	r3, r3
 800375e:	492c      	ldr	r1, [pc, #176]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003760:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003764:	405a      	eors	r2, r3
 8003766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	b2db      	uxtb	r3, r3
 800376c:	4929      	ldr	r1, [pc, #164]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 800376e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003772:	405a      	eors	r2, r3
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4927      	ldr	r1, [pc, #156]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 800377c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003780:	405a      	eors	r2, r3
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	4925      	ldr	r1, [pc, #148]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800378c:	4053      	eors	r3, r2
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	1d1a      	adds	r2, r3, #4
 8003794:	633a      	str	r2, [r7, #48]	@ 0x30
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	b2db      	uxtb	r3, r3
 800379c:	491c      	ldr	r1, [pc, #112]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 800379e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037a2:	405a      	eors	r2, r3
 80037a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	491a      	ldr	r1, [pc, #104]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 80037ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037b0:	405a      	eors	r2, r3
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4917      	ldr	r1, [pc, #92]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 80037ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037be:	405a      	eors	r2, r3
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c2:	0e1b      	lsrs	r3, r3, #24
 80037c4:	4915      	ldr	r1, [pc, #84]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 80037c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ca:	4053      	eors	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	1d1a      	adds	r2, r3, #4
 80037d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	490d      	ldr	r1, [pc, #52]	@ (8003810 <mbedtls_internal_aes_encrypt+0x3b0>)
 80037dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037e0:	405a      	eors	r2, r3
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	490a      	ldr	r1, [pc, #40]	@ (8003814 <mbedtls_internal_aes_encrypt+0x3b4>)
 80037ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ee:	405a      	eors	r2, r3
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	0c1b      	lsrs	r3, r3, #16
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	4908      	ldr	r1, [pc, #32]	@ (8003818 <mbedtls_internal_aes_encrypt+0x3b8>)
 80037f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037fc:	405a      	eors	r2, r3
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	0e1b      	lsrs	r3, r3, #24
 8003802:	4906      	ldr	r1, [pc, #24]	@ (800381c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003808:	4053      	eors	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380e:	e007      	b.n	8003820 <mbedtls_internal_aes_encrypt+0x3c0>
 8003810:	08005288 	.word	0x08005288
 8003814:	08005688 	.word	0x08005688
 8003818:	08005a88 	.word	0x08005a88
 800381c:	08005e88 	.word	0x08005e88
 8003820:	1d1a      	adds	r2, r3, #4
 8003822:	633a      	str	r2, [r7, #48]	@ 0x30
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	4979      	ldr	r1, [pc, #484]	@ (8003a10 <mbedtls_internal_aes_encrypt+0x5b0>)
 800382c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003830:	405a      	eors	r2, r3
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	b2db      	uxtb	r3, r3
 8003838:	4976      	ldr	r1, [pc, #472]	@ (8003a14 <mbedtls_internal_aes_encrypt+0x5b4>)
 800383a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800383e:	405a      	eors	r2, r3
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4974      	ldr	r1, [pc, #464]	@ (8003a18 <mbedtls_internal_aes_encrypt+0x5b8>)
 8003848:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800384c:	405a      	eors	r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	0e1b      	lsrs	r3, r3, #24
 8003852:	4972      	ldr	r1, [pc, #456]	@ (8003a1c <mbedtls_internal_aes_encrypt+0x5bc>)
 8003854:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003858:	4053      	eors	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	1d1a      	adds	r2, r3, #4
 8003860:	633a      	str	r2, [r7, #48]	@ 0x30
 8003862:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	496d      	ldr	r1, [pc, #436]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 800386a:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 800386c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	b2db      	uxtb	r3, r3
 8003874:	496a      	ldr	r1, [pc, #424]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 800387a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4967      	ldr	r1, [pc, #412]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003888:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	0e1b      	lsrs	r3, r3, #24
 800388e:	4964      	ldr	r1, [pc, #400]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003890:	5ccb      	ldrb	r3, [r1, r3]
 8003892:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003894:	4053      	eors	r3, r2
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	1d1a      	adds	r2, r3, #4
 800389c:	633a      	str	r2, [r7, #48]	@ 0x30
 800389e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	495e      	ldr	r1, [pc, #376]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038a6:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 80038a8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	0a1b      	lsrs	r3, r3, #8
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	495b      	ldr	r1, [pc, #364]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80038b6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	0c1b      	lsrs	r3, r3, #16
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4958      	ldr	r1, [pc, #352]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80038c4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	4955      	ldr	r1, [pc, #340]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 80038d0:	4053      	eors	r3, r2
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 80038d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d6:	1d1a      	adds	r2, r3, #4
 80038d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80038da:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	494f      	ldr	r1, [pc, #316]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038e2:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 80038e4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	494c      	ldr	r1, [pc, #304]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 80038f2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	4949      	ldr	r1, [pc, #292]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038fc:	5ccb      	ldrb	r3, [r1, r3]
 80038fe:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003900:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	0e1b      	lsrs	r3, r3, #24
 8003906:	4946      	ldr	r1, [pc, #280]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003908:	5ccb      	ldrb	r3, [r1, r3]
 800390a:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800390c:	4053      	eors	r3, r2
 800390e:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	1d1a      	adds	r2, r3, #4
 8003914:	633a      	str	r2, [r7, #48]	@ 0x30
 8003916:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	4940      	ldr	r1, [pc, #256]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 800391e:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003920:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	0a1b      	lsrs	r3, r3, #8
 8003926:	b2db      	uxtb	r3, r3
 8003928:	493d      	ldr	r1, [pc, #244]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 800392a:	5ccb      	ldrb	r3, [r1, r3]
 800392c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800392e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	0c1b      	lsrs	r3, r3, #16
 8003934:	b2db      	uxtb	r3, r3
 8003936:	493a      	ldr	r1, [pc, #232]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003938:	5ccb      	ldrb	r3, [r1, r3]
 800393a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800393c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	4937      	ldr	r1, [pc, #220]	@ (8003a20 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003944:	5ccb      	ldrb	r3, [r1, r3]
 8003946:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003948:	4053      	eors	r3, r2
 800394a:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	b2da      	uxtb	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003956:	0a1a      	lsrs	r2, r3, #8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3301      	adds	r3, #1
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	0c1a      	lsrs	r2, r3, #16
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3302      	adds	r3, #2
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396e:	0e1a      	lsrs	r2, r3, #24
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3303      	adds	r3, #3
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3304      	adds	r3, #4
 800397c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	0a1a      	lsrs	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	3305      	adds	r3, #5
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	0c1a      	lsrs	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3306      	adds	r3, #6
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	0e1a      	lsrs	r2, r3, #24
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3307      	adds	r3, #7
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3308      	adds	r3, #8
 80039aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	0a1a      	lsrs	r2, r3, #8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3309      	adds	r3, #9
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	0c1a      	lsrs	r2, r3, #16
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	330a      	adds	r3, #10
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	0e1a      	lsrs	r2, r3, #24
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	330b      	adds	r3, #11
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	330c      	adds	r3, #12
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	6a3b      	ldr	r3, [r7, #32]
 80039e0:	0a1a      	lsrs	r2, r3, #8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	330d      	adds	r3, #13
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	0c1a      	lsrs	r2, r3, #16
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	330e      	adds	r3, #14
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	0e1a      	lsrs	r2, r3, #24
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	330f      	adds	r3, #15
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	373c      	adds	r7, #60	@ 0x3c
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	08005288 	.word	0x08005288
 8003a14:	08005688 	.word	0x08005688
 8003a18:	08005a88 	.word	0x08005a88
 8003a1c:	08005e88 	.word	0x08005e88
 8003a20:	08005188 	.word	0x08005188

08003a24 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b08f      	sub	sp, #60	@ 0x3c
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3302      	adds	r3, #2
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	041b      	lsls	r3, r3, #16
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	3303      	adds	r3, #3
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	061b      	lsls	r3, r3, #24
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	1d1a      	adds	r2, r3, #4
 8003a60:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a66:	4053      	eors	r3, r2
 8003a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	461a      	mov	r2, r3
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3305      	adds	r3, #5
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3306      	adds	r3, #6
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	431a      	orrs	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	3307      	adds	r3, #7
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a94:	1d1a      	adds	r2, r3, #4
 8003a96:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a9c:	4053      	eors	r3, r2
 8003a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3309      	adds	r3, #9
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	021b      	lsls	r3, r3, #8
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	330a      	adds	r3, #10
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	330b      	adds	r3, #11
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	1d1a      	adds	r2, r3, #4
 8003acc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	4053      	eors	r3, r2
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	330d      	adds	r3, #13
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	330e      	adds	r3, #14
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	330f      	adds	r3, #15
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	061b      	lsls	r3, r3, #24
 8003afa:	4313      	orrs	r3, r2
 8003afc:	623b      	str	r3, [r7, #32]
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	1d1a      	adds	r2, r3, #4
 8003b02:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a3a      	ldr	r2, [r7, #32]
 8003b08:	4053      	eors	r3, r2
 8003b0a:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	105b      	asrs	r3, r3, #1
 8003b12:	3b01      	subs	r3, #1
 8003b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b16:	e0fa      	b.n	8003d0e <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	49ab      	ldr	r1, [pc, #684]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003b26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b2a:	405a      	eors	r2, r3
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	49a9      	ldr	r1, [pc, #676]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003b34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b38:	405a      	eors	r2, r3
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	49a6      	ldr	r1, [pc, #664]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b46:	405a      	eors	r2, r3
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	0e1b      	lsrs	r3, r3, #24
 8003b4c:	49a4      	ldr	r1, [pc, #656]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b52:	4053      	eors	r3, r2
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	499c      	ldr	r1, [pc, #624]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003b64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b68:	405a      	eors	r2, r3
 8003b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	4999      	ldr	r1, [pc, #612]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003b72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b76:	405a      	eors	r2, r3
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4997      	ldr	r1, [pc, #604]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003b80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b84:	405a      	eors	r2, r3
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	4995      	ldr	r1, [pc, #596]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b90:	4053      	eors	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	1d1a      	adds	r2, r3, #4
 8003b98:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	498c      	ldr	r1, [pc, #560]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ba2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ba6:	405a      	eors	r2, r3
 8003ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	498a      	ldr	r1, [pc, #552]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003bb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bb4:	405a      	eors	r2, r3
 8003bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	4987      	ldr	r1, [pc, #540]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bc2:	405a      	eors	r2, r3
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	0e1b      	lsrs	r3, r3, #24
 8003bc8:	4985      	ldr	r1, [pc, #532]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003bca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bce:	4053      	eors	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	497d      	ldr	r1, [pc, #500]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003be4:	405a      	eors	r2, r3
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	497a      	ldr	r1, [pc, #488]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bf2:	405a      	eors	r2, r3
 8003bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4978      	ldr	r1, [pc, #480]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003bfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c00:	405a      	eors	r2, r3
 8003c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c04:	0e1b      	lsrs	r3, r3, #24
 8003c06:	4976      	ldr	r1, [pc, #472]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003c08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c0c:	4053      	eors	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	496d      	ldr	r1, [pc, #436]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003c1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c22:	405a      	eors	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	496b      	ldr	r1, [pc, #428]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c30:	405a      	eors	r2, r3
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4968      	ldr	r1, [pc, #416]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003c3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c3e:	405a      	eors	r2, r3
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	0e1b      	lsrs	r3, r3, #24
 8003c44:	4966      	ldr	r1, [pc, #408]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003c46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c4a:	4053      	eors	r3, r2
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	495e      	ldr	r1, [pc, #376]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003c5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c60:	405a      	eors	r2, r3
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	495b      	ldr	r1, [pc, #364]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003c6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c6e:	405a      	eors	r2, r3
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4959      	ldr	r1, [pc, #356]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003c78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c7c:	405a      	eors	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	0e1b      	lsrs	r3, r3, #24
 8003c82:	4957      	ldr	r1, [pc, #348]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003c84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c88:	4053      	eors	r3, r2
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8e:	1d1a      	adds	r2, r3, #4
 8003c90:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	494e      	ldr	r1, [pc, #312]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003c9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c9e:	405a      	eors	r2, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	0a1b      	lsrs	r3, r3, #8
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	494c      	ldr	r1, [pc, #304]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ca8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cac:	405a      	eors	r2, r3
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	0c1b      	lsrs	r3, r3, #16
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4949      	ldr	r1, [pc, #292]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cba:	405a      	eors	r2, r3
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	0e1b      	lsrs	r3, r3, #24
 8003cc0:	4947      	ldr	r1, [pc, #284]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003cc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cc6:	4053      	eors	r3, r2
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ccc:	1d1a      	adds	r2, r3, #4
 8003cce:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	493f      	ldr	r1, [pc, #252]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003cd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cdc:	405a      	eors	r2, r3
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	493c      	ldr	r1, [pc, #240]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cea:	405a      	eors	r2, r3
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	493a      	ldr	r1, [pc, #232]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003cf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cf8:	405a      	eors	r2, r3
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	0e1b      	lsrs	r3, r3, #24
 8003cfe:	4938      	ldr	r1, [pc, #224]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d04:	4053      	eors	r3, r2
 8003d06:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f73f af01 	bgt.w	8003b18 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	492c      	ldr	r1, [pc, #176]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d28:	405a      	eors	r2, r3
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	4929      	ldr	r1, [pc, #164]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d36:	405a      	eors	r2, r3
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	4927      	ldr	r1, [pc, #156]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d44:	405a      	eors	r2, r3
 8003d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	4925      	ldr	r1, [pc, #148]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d50:	4053      	eors	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	491c      	ldr	r1, [pc, #112]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d66:	405a      	eors	r2, r3
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	0a1b      	lsrs	r3, r3, #8
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	491a      	ldr	r1, [pc, #104]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d74:	405a      	eors	r2, r3
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	4917      	ldr	r1, [pc, #92]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d82:	405a      	eors	r2, r3
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	0e1b      	lsrs	r3, r3, #24
 8003d88:	4915      	ldr	r1, [pc, #84]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d8e:	4053      	eors	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	1d1a      	adds	r2, r3, #4
 8003d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	490d      	ldr	r1, [pc, #52]	@ (8003dd4 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003da4:	405a      	eors	r2, r3
 8003da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da8:	0a1b      	lsrs	r3, r3, #8
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	490a      	ldr	r1, [pc, #40]	@ (8003dd8 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003dae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003db2:	405a      	eors	r2, r3
 8003db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4908      	ldr	r1, [pc, #32]	@ (8003ddc <mbedtls_internal_aes_decrypt+0x3b8>)
 8003dbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dc0:	405a      	eors	r2, r3
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	0e1b      	lsrs	r3, r3, #24
 8003dc6:	4906      	ldr	r1, [pc, #24]	@ (8003de0 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003dc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dcc:	4053      	eors	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd2:	e007      	b.n	8003de4 <mbedtls_internal_aes_decrypt+0x3c0>
 8003dd4:	08006388 	.word	0x08006388
 8003dd8:	08006788 	.word	0x08006788
 8003ddc:	08006b88 	.word	0x08006b88
 8003de0:	08006f88 	.word	0x08006f88
 8003de4:	1d1a      	adds	r2, r3, #4
 8003de6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	4979      	ldr	r1, [pc, #484]	@ (8003fd4 <mbedtls_internal_aes_decrypt+0x5b0>)
 8003df0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003df4:	405a      	eors	r2, r3
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	4976      	ldr	r1, [pc, #472]	@ (8003fd8 <mbedtls_internal_aes_decrypt+0x5b4>)
 8003dfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e02:	405a      	eors	r2, r3
 8003e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e06:	0c1b      	lsrs	r3, r3, #16
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4974      	ldr	r1, [pc, #464]	@ (8003fdc <mbedtls_internal_aes_decrypt+0x5b8>)
 8003e0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e10:	405a      	eors	r2, r3
 8003e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	4972      	ldr	r1, [pc, #456]	@ (8003fe0 <mbedtls_internal_aes_decrypt+0x5bc>)
 8003e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e1c:	4053      	eors	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8003e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e22:	1d1a      	adds	r2, r3, #4
 8003e24:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e26:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003e28:	69fa      	ldr	r2, [r7, #28]
 8003e2a:	b2d2      	uxtb	r2, r2
 8003e2c:	496d      	ldr	r1, [pc, #436]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e2e:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8003e30:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	496a      	ldr	r1, [pc, #424]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e3a:	5ccb      	ldrb	r3, [r1, r3]
 8003e3c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003e3e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	0c1b      	lsrs	r3, r3, #16
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	4967      	ldr	r1, [pc, #412]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e48:	5ccb      	ldrb	r3, [r1, r3]
 8003e4a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e4c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	0e1b      	lsrs	r3, r3, #24
 8003e52:	4964      	ldr	r1, [pc, #400]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e54:	5ccb      	ldrb	r3, [r1, r3]
 8003e56:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003e58:	4053      	eors	r3, r2
 8003e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e62:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	495e      	ldr	r1, [pc, #376]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e6a:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003e6c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	495b      	ldr	r1, [pc, #364]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e76:	5ccb      	ldrb	r3, [r1, r3]
 8003e78:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003e7a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	0c1b      	lsrs	r3, r3, #16
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	4958      	ldr	r1, [pc, #352]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e84:	5ccb      	ldrb	r3, [r1, r3]
 8003e86:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e88:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	0e1b      	lsrs	r3, r3, #24
 8003e8e:	4955      	ldr	r1, [pc, #340]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e90:	5ccb      	ldrb	r3, [r1, r3]
 8003e92:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003e94:	4053      	eors	r3, r2
 8003e96:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8003e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e9e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	494f      	ldr	r1, [pc, #316]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003ea6:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003ea8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	494c      	ldr	r1, [pc, #304]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8003eb6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	0c1b      	lsrs	r3, r3, #16
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	4949      	ldr	r1, [pc, #292]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003ec0:	5ccb      	ldrb	r3, [r1, r3]
 8003ec2:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ec4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	0e1b      	lsrs	r3, r3, #24
 8003eca:	4946      	ldr	r1, [pc, #280]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003ecc:	5ccb      	ldrb	r3, [r1, r3]
 8003ece:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003ed0:	4053      	eors	r3, r2
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed6:	1d1a      	adds	r2, r3, #4
 8003ed8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eda:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	4940      	ldr	r1, [pc, #256]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003ee2:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003ee4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	0a1b      	lsrs	r3, r3, #8
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	493d      	ldr	r1, [pc, #244]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8003ef2:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	493a      	ldr	r1, [pc, #232]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003efc:	5ccb      	ldrb	r3, [r1, r3]
 8003efe:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003f00:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	0e1b      	lsrs	r3, r3, #24
 8003f06:	4937      	ldr	r1, [pc, #220]	@ (8003fe4 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003f08:	5ccb      	ldrb	r3, [r1, r3]
 8003f0a:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003f0c:	4053      	eors	r3, r2
 8003f0e:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8003f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	0a1a      	lsrs	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]
 8003f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f26:	0c1a      	lsrs	r2, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f32:	0e1a      	lsrs	r2, r3, #24
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3303      	adds	r3, #3
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	0a1a      	lsrs	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3305      	adds	r3, #5
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f54:	0c1a      	lsrs	r2, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3306      	adds	r3, #6
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f60:	0e1a      	lsrs	r2, r3, #24
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3307      	adds	r3, #7
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f70:	b2d2      	uxtb	r2, r2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f76:	0a1a      	lsrs	r2, r3, #8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3309      	adds	r3, #9
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	0c1a      	lsrs	r2, r3, #16
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	330a      	adds	r3, #10
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	0e1a      	lsrs	r2, r3, #24
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	330b      	adds	r3, #11
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	330c      	adds	r3, #12
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	0a1a      	lsrs	r2, r3, #8
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	330d      	adds	r3, #13
 8003faa:	b2d2      	uxtb	r2, r2
 8003fac:	701a      	strb	r2, [r3, #0]
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	0c1a      	lsrs	r2, r3, #16
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	330e      	adds	r3, #14
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	0e1a      	lsrs	r2, r3, #24
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	330f      	adds	r3, #15
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	373c      	adds	r7, #60	@ 0x3c
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	08006388 	.word	0x08006388
 8003fd8:	08006788 	.word	0x08006788
 8003fdc:	08006b88 	.word	0x08006b88
 8003fe0:	08006f88 	.word	0x08006f88
 8003fe4:	08006288 	.word	0x08006288

08003fe8 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d106      	bne.n	800400a <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f7ff fa2d 	bl	8003460 <mbedtls_internal_aes_encrypt>
 8004006:	4603      	mov	r3, r0
 8004008:	e005      	b.n	8004016 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff fd08 	bl	8003a24 <mbedtls_internal_aes_decrypt>
 8004014:	4603      	mov	r3, r0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800401e:	b5b0      	push	{r4, r5, r7, lr}
 8004020:	b08a      	sub	sp, #40	@ 0x28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	2b00      	cmp	r3, #0
 8004034:	d002      	beq.n	800403c <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 8004036:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800403a:	e06d      	b.n	8004118 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d166      	bne.n	8004110 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 8004042:	e036      	b.n	80040b2 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8004044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004046:	f107 0414 	add.w	r4, r7, #20
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8004054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff ffc4 	bl	8003fe8 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
 8004064:	e010      	b.n	8004088 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800406a:	4413      	add	r3, r2
 800406c:	7819      	ldrb	r1, [r3, #0]
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	4413      	add	r3, r2
 8004074:	781a      	ldrb	r2, [r3, #0]
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800407a:	4403      	add	r3, r0
 800407c:	404a      	eors	r2, r1
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	3301      	adds	r3, #1
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	2b0f      	cmp	r3, #15
 800408c:	ddeb      	ble.n	8004066 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	461d      	mov	r5, r3
 8004092:	f107 0414 	add.w	r4, r7, #20
 8004096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004098:	6028      	str	r0, [r5, #0]
 800409a:	6069      	str	r1, [r5, #4]
 800409c:	60aa      	str	r2, [r5, #8]
 800409e:	60eb      	str	r3, [r5, #12]

            input  += 16;
 80040a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a2:	3310      	adds	r3, #16
 80040a4:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 80040a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a8:	3310      	adds	r3, #16
 80040aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3b10      	subs	r3, #16
 80040b0:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1c5      	bne.n	8004044 <mbedtls_aes_crypt_cbc+0x26>
 80040b8:	e02d      	b.n	8004116 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 80040ba:	2300      	movs	r3, #0
 80040bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80040be:	e010      	b.n	80040e2 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80040c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040c4:	4413      	add	r3, r2
 80040c6:	7819      	ldrb	r1, [r3, #0]
 80040c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	4413      	add	r3, r2
 80040ce:	781a      	ldrb	r2, [r3, #0]
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80040d4:	4403      	add	r3, r0
 80040d6:	404a      	eors	r2, r1
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	3301      	adds	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	2b0f      	cmp	r3, #15
 80040e6:	ddeb      	ble.n	80040c0 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80040e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7ff ff7a 	bl	8003fe8 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 80040f4:	2210      	movs	r2, #16
 80040f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040f8:	6838      	ldr	r0, [r7, #0]
 80040fa:	f000 fb66 	bl	80047ca <memcpy>

            input  += 16;
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	3310      	adds	r3, #16
 8004102:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004106:	3310      	adds	r3, #16
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	3b10      	subs	r3, #16
 800410e:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1d1      	bne.n	80040ba <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3728      	adds	r7, #40	@ 0x28
 800411c:	46bd      	mov	sp, r7
 800411e:	bdb0      	pop	{r4, r5, r7, pc}

08004120 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 800412a:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <mbedtls_platform_zeroize+0x20>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	2100      	movs	r1, #0
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	2000000c 	.word	0x2000000c

08004144 <sbrk_aligned>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	4e0f      	ldr	r6, [pc, #60]	@ (8004184 <sbrk_aligned+0x40>)
 8004148:	460c      	mov	r4, r1
 800414a:	6831      	ldr	r1, [r6, #0]
 800414c:	4605      	mov	r5, r0
 800414e:	b911      	cbnz	r1, 8004156 <sbrk_aligned+0x12>
 8004150:	f000 faec 	bl	800472c <_sbrk_r>
 8004154:	6030      	str	r0, [r6, #0]
 8004156:	4621      	mov	r1, r4
 8004158:	4628      	mov	r0, r5
 800415a:	f000 fae7 	bl	800472c <_sbrk_r>
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	d103      	bne.n	800416a <sbrk_aligned+0x26>
 8004162:	f04f 34ff 	mov.w	r4, #4294967295
 8004166:	4620      	mov	r0, r4
 8004168:	bd70      	pop	{r4, r5, r6, pc}
 800416a:	1cc4      	adds	r4, r0, #3
 800416c:	f024 0403 	bic.w	r4, r4, #3
 8004170:	42a0      	cmp	r0, r4
 8004172:	d0f8      	beq.n	8004166 <sbrk_aligned+0x22>
 8004174:	1a21      	subs	r1, r4, r0
 8004176:	4628      	mov	r0, r5
 8004178:	f000 fad8 	bl	800472c <_sbrk_r>
 800417c:	3001      	adds	r0, #1
 800417e:	d1f2      	bne.n	8004166 <sbrk_aligned+0x22>
 8004180:	e7ef      	b.n	8004162 <sbrk_aligned+0x1e>
 8004182:	bf00      	nop
 8004184:	2000012c 	.word	0x2000012c

08004188 <_malloc_r>:
 8004188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800418c:	1ccd      	adds	r5, r1, #3
 800418e:	f025 0503 	bic.w	r5, r5, #3
 8004192:	3508      	adds	r5, #8
 8004194:	2d0c      	cmp	r5, #12
 8004196:	bf38      	it	cc
 8004198:	250c      	movcc	r5, #12
 800419a:	2d00      	cmp	r5, #0
 800419c:	4606      	mov	r6, r0
 800419e:	db01      	blt.n	80041a4 <_malloc_r+0x1c>
 80041a0:	42a9      	cmp	r1, r5
 80041a2:	d904      	bls.n	80041ae <_malloc_r+0x26>
 80041a4:	230c      	movs	r3, #12
 80041a6:	6033      	str	r3, [r6, #0]
 80041a8:	2000      	movs	r0, #0
 80041aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004284 <_malloc_r+0xfc>
 80041b2:	f000 f869 	bl	8004288 <__malloc_lock>
 80041b6:	f8d8 3000 	ldr.w	r3, [r8]
 80041ba:	461c      	mov	r4, r3
 80041bc:	bb44      	cbnz	r4, 8004210 <_malloc_r+0x88>
 80041be:	4629      	mov	r1, r5
 80041c0:	4630      	mov	r0, r6
 80041c2:	f7ff ffbf 	bl	8004144 <sbrk_aligned>
 80041c6:	1c43      	adds	r3, r0, #1
 80041c8:	4604      	mov	r4, r0
 80041ca:	d158      	bne.n	800427e <_malloc_r+0xf6>
 80041cc:	f8d8 4000 	ldr.w	r4, [r8]
 80041d0:	4627      	mov	r7, r4
 80041d2:	2f00      	cmp	r7, #0
 80041d4:	d143      	bne.n	800425e <_malloc_r+0xd6>
 80041d6:	2c00      	cmp	r4, #0
 80041d8:	d04b      	beq.n	8004272 <_malloc_r+0xea>
 80041da:	6823      	ldr	r3, [r4, #0]
 80041dc:	4639      	mov	r1, r7
 80041de:	4630      	mov	r0, r6
 80041e0:	eb04 0903 	add.w	r9, r4, r3
 80041e4:	f000 faa2 	bl	800472c <_sbrk_r>
 80041e8:	4581      	cmp	r9, r0
 80041ea:	d142      	bne.n	8004272 <_malloc_r+0xea>
 80041ec:	6821      	ldr	r1, [r4, #0]
 80041ee:	1a6d      	subs	r5, r5, r1
 80041f0:	4629      	mov	r1, r5
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7ff ffa6 	bl	8004144 <sbrk_aligned>
 80041f8:	3001      	adds	r0, #1
 80041fa:	d03a      	beq.n	8004272 <_malloc_r+0xea>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	442b      	add	r3, r5
 8004200:	6023      	str	r3, [r4, #0]
 8004202:	f8d8 3000 	ldr.w	r3, [r8]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	bb62      	cbnz	r2, 8004264 <_malloc_r+0xdc>
 800420a:	f8c8 7000 	str.w	r7, [r8]
 800420e:	e00f      	b.n	8004230 <_malloc_r+0xa8>
 8004210:	6822      	ldr	r2, [r4, #0]
 8004212:	1b52      	subs	r2, r2, r5
 8004214:	d420      	bmi.n	8004258 <_malloc_r+0xd0>
 8004216:	2a0b      	cmp	r2, #11
 8004218:	d917      	bls.n	800424a <_malloc_r+0xc2>
 800421a:	1961      	adds	r1, r4, r5
 800421c:	42a3      	cmp	r3, r4
 800421e:	6025      	str	r5, [r4, #0]
 8004220:	bf18      	it	ne
 8004222:	6059      	strne	r1, [r3, #4]
 8004224:	6863      	ldr	r3, [r4, #4]
 8004226:	bf08      	it	eq
 8004228:	f8c8 1000 	streq.w	r1, [r8]
 800422c:	5162      	str	r2, [r4, r5]
 800422e:	604b      	str	r3, [r1, #4]
 8004230:	4630      	mov	r0, r6
 8004232:	f000 f82f 	bl	8004294 <__malloc_unlock>
 8004236:	f104 000b 	add.w	r0, r4, #11
 800423a:	1d23      	adds	r3, r4, #4
 800423c:	f020 0007 	bic.w	r0, r0, #7
 8004240:	1ac2      	subs	r2, r0, r3
 8004242:	bf1c      	itt	ne
 8004244:	1a1b      	subne	r3, r3, r0
 8004246:	50a3      	strne	r3, [r4, r2]
 8004248:	e7af      	b.n	80041aa <_malloc_r+0x22>
 800424a:	6862      	ldr	r2, [r4, #4]
 800424c:	42a3      	cmp	r3, r4
 800424e:	bf0c      	ite	eq
 8004250:	f8c8 2000 	streq.w	r2, [r8]
 8004254:	605a      	strne	r2, [r3, #4]
 8004256:	e7eb      	b.n	8004230 <_malloc_r+0xa8>
 8004258:	4623      	mov	r3, r4
 800425a:	6864      	ldr	r4, [r4, #4]
 800425c:	e7ae      	b.n	80041bc <_malloc_r+0x34>
 800425e:	463c      	mov	r4, r7
 8004260:	687f      	ldr	r7, [r7, #4]
 8004262:	e7b6      	b.n	80041d2 <_malloc_r+0x4a>
 8004264:	461a      	mov	r2, r3
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	42a3      	cmp	r3, r4
 800426a:	d1fb      	bne.n	8004264 <_malloc_r+0xdc>
 800426c:	2300      	movs	r3, #0
 800426e:	6053      	str	r3, [r2, #4]
 8004270:	e7de      	b.n	8004230 <_malloc_r+0xa8>
 8004272:	230c      	movs	r3, #12
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	4630      	mov	r0, r6
 8004278:	f000 f80c 	bl	8004294 <__malloc_unlock>
 800427c:	e794      	b.n	80041a8 <_malloc_r+0x20>
 800427e:	6005      	str	r5, [r0, #0]
 8004280:	e7d6      	b.n	8004230 <_malloc_r+0xa8>
 8004282:	bf00      	nop
 8004284:	20000130 	.word	0x20000130

08004288 <__malloc_lock>:
 8004288:	4801      	ldr	r0, [pc, #4]	@ (8004290 <__malloc_lock+0x8>)
 800428a:	f000 ba9c 	b.w	80047c6 <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	20000274 	.word	0x20000274

08004294 <__malloc_unlock>:
 8004294:	4801      	ldr	r0, [pc, #4]	@ (800429c <__malloc_unlock+0x8>)
 8004296:	f000 ba97 	b.w	80047c8 <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	20000274 	.word	0x20000274

080042a0 <std>:
 80042a0:	2300      	movs	r3, #0
 80042a2:	b510      	push	{r4, lr}
 80042a4:	4604      	mov	r4, r0
 80042a6:	e9c0 3300 	strd	r3, r3, [r0]
 80042aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ae:	6083      	str	r3, [r0, #8]
 80042b0:	8181      	strh	r1, [r0, #12]
 80042b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80042b4:	81c2      	strh	r2, [r0, #14]
 80042b6:	6183      	str	r3, [r0, #24]
 80042b8:	4619      	mov	r1, r3
 80042ba:	2208      	movs	r2, #8
 80042bc:	305c      	adds	r0, #92	@ 0x5c
 80042be:	f000 f9f9 	bl	80046b4 <memset>
 80042c2:	4b0d      	ldr	r3, [pc, #52]	@ (80042f8 <std+0x58>)
 80042c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80042c6:	4b0d      	ldr	r3, [pc, #52]	@ (80042fc <std+0x5c>)
 80042c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <std+0x60>)
 80042cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <std+0x64>)
 80042d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80042d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004308 <std+0x68>)
 80042d4:	6224      	str	r4, [r4, #32]
 80042d6:	429c      	cmp	r4, r3
 80042d8:	d006      	beq.n	80042e8 <std+0x48>
 80042da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042de:	4294      	cmp	r4, r2
 80042e0:	d002      	beq.n	80042e8 <std+0x48>
 80042e2:	33d0      	adds	r3, #208	@ 0xd0
 80042e4:	429c      	cmp	r4, r3
 80042e6:	d105      	bne.n	80042f4 <std+0x54>
 80042e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042f0:	f000 ba68 	b.w	80047c4 <__retarget_lock_init_recursive>
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	bf00      	nop
 80042f8:	08004505 	.word	0x08004505
 80042fc:	08004527 	.word	0x08004527
 8004300:	0800455f 	.word	0x0800455f
 8004304:	08004583 	.word	0x08004583
 8004308:	20000134 	.word	0x20000134

0800430c <stdio_exit_handler>:
 800430c:	4a02      	ldr	r2, [pc, #8]	@ (8004318 <stdio_exit_handler+0xc>)
 800430e:	4903      	ldr	r1, [pc, #12]	@ (800431c <stdio_exit_handler+0x10>)
 8004310:	4803      	ldr	r0, [pc, #12]	@ (8004320 <stdio_exit_handler+0x14>)
 8004312:	f000 b869 	b.w	80043e8 <_fwalk_sglue>
 8004316:	bf00      	nop
 8004318:	20000010 	.word	0x20000010
 800431c:	08004f25 	.word	0x08004f25
 8004320:	20000020 	.word	0x20000020

08004324 <cleanup_stdio>:
 8004324:	6841      	ldr	r1, [r0, #4]
 8004326:	4b0c      	ldr	r3, [pc, #48]	@ (8004358 <cleanup_stdio+0x34>)
 8004328:	4299      	cmp	r1, r3
 800432a:	b510      	push	{r4, lr}
 800432c:	4604      	mov	r4, r0
 800432e:	d001      	beq.n	8004334 <cleanup_stdio+0x10>
 8004330:	f000 fdf8 	bl	8004f24 <_fflush_r>
 8004334:	68a1      	ldr	r1, [r4, #8]
 8004336:	4b09      	ldr	r3, [pc, #36]	@ (800435c <cleanup_stdio+0x38>)
 8004338:	4299      	cmp	r1, r3
 800433a:	d002      	beq.n	8004342 <cleanup_stdio+0x1e>
 800433c:	4620      	mov	r0, r4
 800433e:	f000 fdf1 	bl	8004f24 <_fflush_r>
 8004342:	68e1      	ldr	r1, [r4, #12]
 8004344:	4b06      	ldr	r3, [pc, #24]	@ (8004360 <cleanup_stdio+0x3c>)
 8004346:	4299      	cmp	r1, r3
 8004348:	d004      	beq.n	8004354 <cleanup_stdio+0x30>
 800434a:	4620      	mov	r0, r4
 800434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004350:	f000 bde8 	b.w	8004f24 <_fflush_r>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	bf00      	nop
 8004358:	20000134 	.word	0x20000134
 800435c:	2000019c 	.word	0x2000019c
 8004360:	20000204 	.word	0x20000204

08004364 <global_stdio_init.part.0>:
 8004364:	b510      	push	{r4, lr}
 8004366:	4b0b      	ldr	r3, [pc, #44]	@ (8004394 <global_stdio_init.part.0+0x30>)
 8004368:	4c0b      	ldr	r4, [pc, #44]	@ (8004398 <global_stdio_init.part.0+0x34>)
 800436a:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <global_stdio_init.part.0+0x38>)
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	4620      	mov	r0, r4
 8004370:	2200      	movs	r2, #0
 8004372:	2104      	movs	r1, #4
 8004374:	f7ff ff94 	bl	80042a0 <std>
 8004378:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800437c:	2201      	movs	r2, #1
 800437e:	2109      	movs	r1, #9
 8004380:	f7ff ff8e 	bl	80042a0 <std>
 8004384:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004388:	2202      	movs	r2, #2
 800438a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438e:	2112      	movs	r1, #18
 8004390:	f7ff bf86 	b.w	80042a0 <std>
 8004394:	2000026c 	.word	0x2000026c
 8004398:	20000134 	.word	0x20000134
 800439c:	0800430d 	.word	0x0800430d

080043a0 <__sfp_lock_acquire>:
 80043a0:	4801      	ldr	r0, [pc, #4]	@ (80043a8 <__sfp_lock_acquire+0x8>)
 80043a2:	f000 ba10 	b.w	80047c6 <__retarget_lock_acquire_recursive>
 80043a6:	bf00      	nop
 80043a8:	20000275 	.word	0x20000275

080043ac <__sfp_lock_release>:
 80043ac:	4801      	ldr	r0, [pc, #4]	@ (80043b4 <__sfp_lock_release+0x8>)
 80043ae:	f000 ba0b 	b.w	80047c8 <__retarget_lock_release_recursive>
 80043b2:	bf00      	nop
 80043b4:	20000275 	.word	0x20000275

080043b8 <__sinit>:
 80043b8:	b510      	push	{r4, lr}
 80043ba:	4604      	mov	r4, r0
 80043bc:	f7ff fff0 	bl	80043a0 <__sfp_lock_acquire>
 80043c0:	6a23      	ldr	r3, [r4, #32]
 80043c2:	b11b      	cbz	r3, 80043cc <__sinit+0x14>
 80043c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c8:	f7ff bff0 	b.w	80043ac <__sfp_lock_release>
 80043cc:	4b04      	ldr	r3, [pc, #16]	@ (80043e0 <__sinit+0x28>)
 80043ce:	6223      	str	r3, [r4, #32]
 80043d0:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <__sinit+0x2c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f5      	bne.n	80043c4 <__sinit+0xc>
 80043d8:	f7ff ffc4 	bl	8004364 <global_stdio_init.part.0>
 80043dc:	e7f2      	b.n	80043c4 <__sinit+0xc>
 80043de:	bf00      	nop
 80043e0:	08004325 	.word	0x08004325
 80043e4:	2000026c 	.word	0x2000026c

080043e8 <_fwalk_sglue>:
 80043e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ec:	4607      	mov	r7, r0
 80043ee:	4688      	mov	r8, r1
 80043f0:	4614      	mov	r4, r2
 80043f2:	2600      	movs	r6, #0
 80043f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043f8:	f1b9 0901 	subs.w	r9, r9, #1
 80043fc:	d505      	bpl.n	800440a <_fwalk_sglue+0x22>
 80043fe:	6824      	ldr	r4, [r4, #0]
 8004400:	2c00      	cmp	r4, #0
 8004402:	d1f7      	bne.n	80043f4 <_fwalk_sglue+0xc>
 8004404:	4630      	mov	r0, r6
 8004406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800440a:	89ab      	ldrh	r3, [r5, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d907      	bls.n	8004420 <_fwalk_sglue+0x38>
 8004410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004414:	3301      	adds	r3, #1
 8004416:	d003      	beq.n	8004420 <_fwalk_sglue+0x38>
 8004418:	4629      	mov	r1, r5
 800441a:	4638      	mov	r0, r7
 800441c:	47c0      	blx	r8
 800441e:	4306      	orrs	r6, r0
 8004420:	3568      	adds	r5, #104	@ 0x68
 8004422:	e7e9      	b.n	80043f8 <_fwalk_sglue+0x10>

08004424 <iprintf>:
 8004424:	b40f      	push	{r0, r1, r2, r3}
 8004426:	b507      	push	{r0, r1, r2, lr}
 8004428:	4906      	ldr	r1, [pc, #24]	@ (8004444 <iprintf+0x20>)
 800442a:	ab04      	add	r3, sp, #16
 800442c:	6808      	ldr	r0, [r1, #0]
 800442e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004432:	6881      	ldr	r1, [r0, #8]
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	f000 fa4b 	bl	80048d0 <_vfiprintf_r>
 800443a:	b003      	add	sp, #12
 800443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004440:	b004      	add	sp, #16
 8004442:	4770      	bx	lr
 8004444:	2000001c 	.word	0x2000001c

08004448 <_puts_r>:
 8004448:	6a03      	ldr	r3, [r0, #32]
 800444a:	b570      	push	{r4, r5, r6, lr}
 800444c:	6884      	ldr	r4, [r0, #8]
 800444e:	4605      	mov	r5, r0
 8004450:	460e      	mov	r6, r1
 8004452:	b90b      	cbnz	r3, 8004458 <_puts_r+0x10>
 8004454:	f7ff ffb0 	bl	80043b8 <__sinit>
 8004458:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800445a:	07db      	lsls	r3, r3, #31
 800445c:	d405      	bmi.n	800446a <_puts_r+0x22>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	0598      	lsls	r0, r3, #22
 8004462:	d402      	bmi.n	800446a <_puts_r+0x22>
 8004464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004466:	f000 f9ae 	bl	80047c6 <__retarget_lock_acquire_recursive>
 800446a:	89a3      	ldrh	r3, [r4, #12]
 800446c:	0719      	lsls	r1, r3, #28
 800446e:	d502      	bpl.n	8004476 <_puts_r+0x2e>
 8004470:	6923      	ldr	r3, [r4, #16]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d135      	bne.n	80044e2 <_puts_r+0x9a>
 8004476:	4621      	mov	r1, r4
 8004478:	4628      	mov	r0, r5
 800447a:	f000 f8c5 	bl	8004608 <__swsetup_r>
 800447e:	b380      	cbz	r0, 80044e2 <_puts_r+0x9a>
 8004480:	f04f 35ff 	mov.w	r5, #4294967295
 8004484:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004486:	07da      	lsls	r2, r3, #31
 8004488:	d405      	bmi.n	8004496 <_puts_r+0x4e>
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	059b      	lsls	r3, r3, #22
 800448e:	d402      	bmi.n	8004496 <_puts_r+0x4e>
 8004490:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004492:	f000 f999 	bl	80047c8 <__retarget_lock_release_recursive>
 8004496:	4628      	mov	r0, r5
 8004498:	bd70      	pop	{r4, r5, r6, pc}
 800449a:	2b00      	cmp	r3, #0
 800449c:	da04      	bge.n	80044a8 <_puts_r+0x60>
 800449e:	69a2      	ldr	r2, [r4, #24]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	dc17      	bgt.n	80044d4 <_puts_r+0x8c>
 80044a4:	290a      	cmp	r1, #10
 80044a6:	d015      	beq.n	80044d4 <_puts_r+0x8c>
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	6022      	str	r2, [r4, #0]
 80044ae:	7019      	strb	r1, [r3, #0]
 80044b0:	68a3      	ldr	r3, [r4, #8]
 80044b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044b6:	3b01      	subs	r3, #1
 80044b8:	60a3      	str	r3, [r4, #8]
 80044ba:	2900      	cmp	r1, #0
 80044bc:	d1ed      	bne.n	800449a <_puts_r+0x52>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da11      	bge.n	80044e6 <_puts_r+0x9e>
 80044c2:	4622      	mov	r2, r4
 80044c4:	210a      	movs	r1, #10
 80044c6:	4628      	mov	r0, r5
 80044c8:	f000 f85f 	bl	800458a <__swbuf_r>
 80044cc:	3001      	adds	r0, #1
 80044ce:	d0d7      	beq.n	8004480 <_puts_r+0x38>
 80044d0:	250a      	movs	r5, #10
 80044d2:	e7d7      	b.n	8004484 <_puts_r+0x3c>
 80044d4:	4622      	mov	r2, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f857 	bl	800458a <__swbuf_r>
 80044dc:	3001      	adds	r0, #1
 80044de:	d1e7      	bne.n	80044b0 <_puts_r+0x68>
 80044e0:	e7ce      	b.n	8004480 <_puts_r+0x38>
 80044e2:	3e01      	subs	r6, #1
 80044e4:	e7e4      	b.n	80044b0 <_puts_r+0x68>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	6022      	str	r2, [r4, #0]
 80044ec:	220a      	movs	r2, #10
 80044ee:	701a      	strb	r2, [r3, #0]
 80044f0:	e7ee      	b.n	80044d0 <_puts_r+0x88>
	...

080044f4 <puts>:
 80044f4:	4b02      	ldr	r3, [pc, #8]	@ (8004500 <puts+0xc>)
 80044f6:	4601      	mov	r1, r0
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f7ff bfa5 	b.w	8004448 <_puts_r>
 80044fe:	bf00      	nop
 8004500:	2000001c 	.word	0x2000001c

08004504 <__sread>:
 8004504:	b510      	push	{r4, lr}
 8004506:	460c      	mov	r4, r1
 8004508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450c:	f000 f8fc 	bl	8004708 <_read_r>
 8004510:	2800      	cmp	r0, #0
 8004512:	bfab      	itete	ge
 8004514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004516:	89a3      	ldrhlt	r3, [r4, #12]
 8004518:	181b      	addge	r3, r3, r0
 800451a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800451e:	bfac      	ite	ge
 8004520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004522:	81a3      	strhlt	r3, [r4, #12]
 8004524:	bd10      	pop	{r4, pc}

08004526 <__swrite>:
 8004526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800452a:	461f      	mov	r7, r3
 800452c:	898b      	ldrh	r3, [r1, #12]
 800452e:	05db      	lsls	r3, r3, #23
 8004530:	4605      	mov	r5, r0
 8004532:	460c      	mov	r4, r1
 8004534:	4616      	mov	r6, r2
 8004536:	d505      	bpl.n	8004544 <__swrite+0x1e>
 8004538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800453c:	2302      	movs	r3, #2
 800453e:	2200      	movs	r2, #0
 8004540:	f000 f8d0 	bl	80046e4 <_lseek_r>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800454a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800454e:	81a3      	strh	r3, [r4, #12]
 8004550:	4632      	mov	r2, r6
 8004552:	463b      	mov	r3, r7
 8004554:	4628      	mov	r0, r5
 8004556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	f000 b8f7 	b.w	800474c <_write_r>

0800455e <__sseek>:
 800455e:	b510      	push	{r4, lr}
 8004560:	460c      	mov	r4, r1
 8004562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004566:	f000 f8bd 	bl	80046e4 <_lseek_r>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	bf15      	itete	ne
 8004570:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800457a:	81a3      	strheq	r3, [r4, #12]
 800457c:	bf18      	it	ne
 800457e:	81a3      	strhne	r3, [r4, #12]
 8004580:	bd10      	pop	{r4, pc}

08004582 <__sclose>:
 8004582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004586:	f000 b89d 	b.w	80046c4 <_close_r>

0800458a <__swbuf_r>:
 800458a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458c:	460e      	mov	r6, r1
 800458e:	4614      	mov	r4, r2
 8004590:	4605      	mov	r5, r0
 8004592:	b118      	cbz	r0, 800459c <__swbuf_r+0x12>
 8004594:	6a03      	ldr	r3, [r0, #32]
 8004596:	b90b      	cbnz	r3, 800459c <__swbuf_r+0x12>
 8004598:	f7ff ff0e 	bl	80043b8 <__sinit>
 800459c:	69a3      	ldr	r3, [r4, #24]
 800459e:	60a3      	str	r3, [r4, #8]
 80045a0:	89a3      	ldrh	r3, [r4, #12]
 80045a2:	071a      	lsls	r2, r3, #28
 80045a4:	d501      	bpl.n	80045aa <__swbuf_r+0x20>
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	b943      	cbnz	r3, 80045bc <__swbuf_r+0x32>
 80045aa:	4621      	mov	r1, r4
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f82b 	bl	8004608 <__swsetup_r>
 80045b2:	b118      	cbz	r0, 80045bc <__swbuf_r+0x32>
 80045b4:	f04f 37ff 	mov.w	r7, #4294967295
 80045b8:	4638      	mov	r0, r7
 80045ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	6922      	ldr	r2, [r4, #16]
 80045c0:	1a98      	subs	r0, r3, r2
 80045c2:	6963      	ldr	r3, [r4, #20]
 80045c4:	b2f6      	uxtb	r6, r6
 80045c6:	4283      	cmp	r3, r0
 80045c8:	4637      	mov	r7, r6
 80045ca:	dc05      	bgt.n	80045d8 <__swbuf_r+0x4e>
 80045cc:	4621      	mov	r1, r4
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fca8 	bl	8004f24 <_fflush_r>
 80045d4:	2800      	cmp	r0, #0
 80045d6:	d1ed      	bne.n	80045b4 <__swbuf_r+0x2a>
 80045d8:	68a3      	ldr	r3, [r4, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	60a3      	str	r3, [r4, #8]
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	6022      	str	r2, [r4, #0]
 80045e4:	701e      	strb	r6, [r3, #0]
 80045e6:	6962      	ldr	r2, [r4, #20]
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d004      	beq.n	80045f8 <__swbuf_r+0x6e>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	07db      	lsls	r3, r3, #31
 80045f2:	d5e1      	bpl.n	80045b8 <__swbuf_r+0x2e>
 80045f4:	2e0a      	cmp	r6, #10
 80045f6:	d1df      	bne.n	80045b8 <__swbuf_r+0x2e>
 80045f8:	4621      	mov	r1, r4
 80045fa:	4628      	mov	r0, r5
 80045fc:	f000 fc92 	bl	8004f24 <_fflush_r>
 8004600:	2800      	cmp	r0, #0
 8004602:	d0d9      	beq.n	80045b8 <__swbuf_r+0x2e>
 8004604:	e7d6      	b.n	80045b4 <__swbuf_r+0x2a>
	...

08004608 <__swsetup_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	4b29      	ldr	r3, [pc, #164]	@ (80046b0 <__swsetup_r+0xa8>)
 800460c:	4605      	mov	r5, r0
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	460c      	mov	r4, r1
 8004612:	b118      	cbz	r0, 800461c <__swsetup_r+0x14>
 8004614:	6a03      	ldr	r3, [r0, #32]
 8004616:	b90b      	cbnz	r3, 800461c <__swsetup_r+0x14>
 8004618:	f7ff fece 	bl	80043b8 <__sinit>
 800461c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004620:	0719      	lsls	r1, r3, #28
 8004622:	d422      	bmi.n	800466a <__swsetup_r+0x62>
 8004624:	06da      	lsls	r2, r3, #27
 8004626:	d407      	bmi.n	8004638 <__swsetup_r+0x30>
 8004628:	2209      	movs	r2, #9
 800462a:	602a      	str	r2, [r5, #0]
 800462c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004630:	81a3      	strh	r3, [r4, #12]
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
 8004636:	e033      	b.n	80046a0 <__swsetup_r+0x98>
 8004638:	0758      	lsls	r0, r3, #29
 800463a:	d512      	bpl.n	8004662 <__swsetup_r+0x5a>
 800463c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800463e:	b141      	cbz	r1, 8004652 <__swsetup_r+0x4a>
 8004640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004644:	4299      	cmp	r1, r3
 8004646:	d002      	beq.n	800464e <__swsetup_r+0x46>
 8004648:	4628      	mov	r0, r5
 800464a:	f000 f8cd 	bl	80047e8 <_free_r>
 800464e:	2300      	movs	r3, #0
 8004650:	6363      	str	r3, [r4, #52]	@ 0x34
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	2300      	movs	r3, #0
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	6923      	ldr	r3, [r4, #16]
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	89a3      	ldrh	r3, [r4, #12]
 8004664:	f043 0308 	orr.w	r3, r3, #8
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	b94b      	cbnz	r3, 8004682 <__swsetup_r+0x7a>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004678:	d003      	beq.n	8004682 <__swsetup_r+0x7a>
 800467a:	4621      	mov	r1, r4
 800467c:	4628      	mov	r0, r5
 800467e:	f000 fc9f 	bl	8004fc0 <__smakebuf_r>
 8004682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004686:	f013 0201 	ands.w	r2, r3, #1
 800468a:	d00a      	beq.n	80046a2 <__swsetup_r+0x9a>
 800468c:	2200      	movs	r2, #0
 800468e:	60a2      	str	r2, [r4, #8]
 8004690:	6962      	ldr	r2, [r4, #20]
 8004692:	4252      	negs	r2, r2
 8004694:	61a2      	str	r2, [r4, #24]
 8004696:	6922      	ldr	r2, [r4, #16]
 8004698:	b942      	cbnz	r2, 80046ac <__swsetup_r+0xa4>
 800469a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800469e:	d1c5      	bne.n	800462c <__swsetup_r+0x24>
 80046a0:	bd38      	pop	{r3, r4, r5, pc}
 80046a2:	0799      	lsls	r1, r3, #30
 80046a4:	bf58      	it	pl
 80046a6:	6962      	ldrpl	r2, [r4, #20]
 80046a8:	60a2      	str	r2, [r4, #8]
 80046aa:	e7f4      	b.n	8004696 <__swsetup_r+0x8e>
 80046ac:	2000      	movs	r0, #0
 80046ae:	e7f7      	b.n	80046a0 <__swsetup_r+0x98>
 80046b0:	2000001c 	.word	0x2000001c

080046b4 <memset>:
 80046b4:	4402      	add	r2, r0
 80046b6:	4603      	mov	r3, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <_close_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4d06      	ldr	r5, [pc, #24]	@ (80046e0 <_close_r+0x1c>)
 80046c8:	2300      	movs	r3, #0
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc fa9f 	bl	8000c12 <_close>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_close_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_close_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000270 	.word	0x20000270

080046e4 <_lseek_r>:
 80046e4:	b538      	push	{r3, r4, r5, lr}
 80046e6:	4d07      	ldr	r5, [pc, #28]	@ (8004704 <_lseek_r+0x20>)
 80046e8:	4604      	mov	r4, r0
 80046ea:	4608      	mov	r0, r1
 80046ec:	4611      	mov	r1, r2
 80046ee:	2200      	movs	r2, #0
 80046f0:	602a      	str	r2, [r5, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	f7fc fab4 	bl	8000c60 <_lseek>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_lseek_r+0x1e>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_lseek_r+0x1e>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	20000270 	.word	0x20000270

08004708 <_read_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4d07      	ldr	r5, [pc, #28]	@ (8004728 <_read_r+0x20>)
 800470c:	4604      	mov	r4, r0
 800470e:	4608      	mov	r0, r1
 8004710:	4611      	mov	r1, r2
 8004712:	2200      	movs	r2, #0
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	f7fc fa42 	bl	8000ba0 <_read>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_read_r+0x1e>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_read_r+0x1e>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	20000270 	.word	0x20000270

0800472c <_sbrk_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4d06      	ldr	r5, [pc, #24]	@ (8004748 <_sbrk_r+0x1c>)
 8004730:	2300      	movs	r3, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	602b      	str	r3, [r5, #0]
 8004738:	f7fc faa0 	bl	8000c7c <_sbrk>
 800473c:	1c43      	adds	r3, r0, #1
 800473e:	d102      	bne.n	8004746 <_sbrk_r+0x1a>
 8004740:	682b      	ldr	r3, [r5, #0]
 8004742:	b103      	cbz	r3, 8004746 <_sbrk_r+0x1a>
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	bd38      	pop	{r3, r4, r5, pc}
 8004748:	20000270 	.word	0x20000270

0800474c <_write_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d07      	ldr	r5, [pc, #28]	@ (800476c <_write_r+0x20>)
 8004750:	4604      	mov	r4, r0
 8004752:	4608      	mov	r0, r1
 8004754:	4611      	mov	r1, r2
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	f7fc fa3d 	bl	8000bda <_write>
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	d102      	bne.n	800476a <_write_r+0x1e>
 8004764:	682b      	ldr	r3, [r5, #0]
 8004766:	b103      	cbz	r3, 800476a <_write_r+0x1e>
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	bd38      	pop	{r3, r4, r5, pc}
 800476c:	20000270 	.word	0x20000270

08004770 <__errno>:
 8004770:	4b01      	ldr	r3, [pc, #4]	@ (8004778 <__errno+0x8>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	2000001c 	.word	0x2000001c

0800477c <__libc_init_array>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	4d0d      	ldr	r5, [pc, #52]	@ (80047b4 <__libc_init_array+0x38>)
 8004780:	4c0d      	ldr	r4, [pc, #52]	@ (80047b8 <__libc_init_array+0x3c>)
 8004782:	1b64      	subs	r4, r4, r5
 8004784:	10a4      	asrs	r4, r4, #2
 8004786:	2600      	movs	r6, #0
 8004788:	42a6      	cmp	r6, r4
 800478a:	d109      	bne.n	80047a0 <__libc_init_array+0x24>
 800478c:	4d0b      	ldr	r5, [pc, #44]	@ (80047bc <__libc_init_array+0x40>)
 800478e:	4c0c      	ldr	r4, [pc, #48]	@ (80047c0 <__libc_init_array+0x44>)
 8004790:	f000 fc74 	bl	800507c <_init>
 8004794:	1b64      	subs	r4, r4, r5
 8004796:	10a4      	asrs	r4, r4, #2
 8004798:	2600      	movs	r6, #0
 800479a:	42a6      	cmp	r6, r4
 800479c:	d105      	bne.n	80047aa <__libc_init_array+0x2e>
 800479e:	bd70      	pop	{r4, r5, r6, pc}
 80047a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a4:	4798      	blx	r3
 80047a6:	3601      	adds	r6, #1
 80047a8:	e7ee      	b.n	8004788 <__libc_init_array+0xc>
 80047aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ae:	4798      	blx	r3
 80047b0:	3601      	adds	r6, #1
 80047b2:	e7f2      	b.n	800479a <__libc_init_array+0x1e>
 80047b4:	080073ec 	.word	0x080073ec
 80047b8:	080073ec 	.word	0x080073ec
 80047bc:	080073ec 	.word	0x080073ec
 80047c0:	080073f0 	.word	0x080073f0

080047c4 <__retarget_lock_init_recursive>:
 80047c4:	4770      	bx	lr

080047c6 <__retarget_lock_acquire_recursive>:
 80047c6:	4770      	bx	lr

080047c8 <__retarget_lock_release_recursive>:
 80047c8:	4770      	bx	lr

080047ca <memcpy>:
 80047ca:	440a      	add	r2, r1
 80047cc:	4291      	cmp	r1, r2
 80047ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80047d2:	d100      	bne.n	80047d6 <memcpy+0xc>
 80047d4:	4770      	bx	lr
 80047d6:	b510      	push	{r4, lr}
 80047d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e0:	4291      	cmp	r1, r2
 80047e2:	d1f9      	bne.n	80047d8 <memcpy+0xe>
 80047e4:	bd10      	pop	{r4, pc}
	...

080047e8 <_free_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4605      	mov	r5, r0
 80047ec:	2900      	cmp	r1, #0
 80047ee:	d041      	beq.n	8004874 <_free_r+0x8c>
 80047f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047f4:	1f0c      	subs	r4, r1, #4
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bfb8      	it	lt
 80047fa:	18e4      	addlt	r4, r4, r3
 80047fc:	f7ff fd44 	bl	8004288 <__malloc_lock>
 8004800:	4a1d      	ldr	r2, [pc, #116]	@ (8004878 <_free_r+0x90>)
 8004802:	6813      	ldr	r3, [r2, #0]
 8004804:	b933      	cbnz	r3, 8004814 <_free_r+0x2c>
 8004806:	6063      	str	r3, [r4, #4]
 8004808:	6014      	str	r4, [r2, #0]
 800480a:	4628      	mov	r0, r5
 800480c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004810:	f7ff bd40 	b.w	8004294 <__malloc_unlock>
 8004814:	42a3      	cmp	r3, r4
 8004816:	d908      	bls.n	800482a <_free_r+0x42>
 8004818:	6820      	ldr	r0, [r4, #0]
 800481a:	1821      	adds	r1, r4, r0
 800481c:	428b      	cmp	r3, r1
 800481e:	bf01      	itttt	eq
 8004820:	6819      	ldreq	r1, [r3, #0]
 8004822:	685b      	ldreq	r3, [r3, #4]
 8004824:	1809      	addeq	r1, r1, r0
 8004826:	6021      	streq	r1, [r4, #0]
 8004828:	e7ed      	b.n	8004806 <_free_r+0x1e>
 800482a:	461a      	mov	r2, r3
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	b10b      	cbz	r3, 8004834 <_free_r+0x4c>
 8004830:	42a3      	cmp	r3, r4
 8004832:	d9fa      	bls.n	800482a <_free_r+0x42>
 8004834:	6811      	ldr	r1, [r2, #0]
 8004836:	1850      	adds	r0, r2, r1
 8004838:	42a0      	cmp	r0, r4
 800483a:	d10b      	bne.n	8004854 <_free_r+0x6c>
 800483c:	6820      	ldr	r0, [r4, #0]
 800483e:	4401      	add	r1, r0
 8004840:	1850      	adds	r0, r2, r1
 8004842:	4283      	cmp	r3, r0
 8004844:	6011      	str	r1, [r2, #0]
 8004846:	d1e0      	bne.n	800480a <_free_r+0x22>
 8004848:	6818      	ldr	r0, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	6053      	str	r3, [r2, #4]
 800484e:	4408      	add	r0, r1
 8004850:	6010      	str	r0, [r2, #0]
 8004852:	e7da      	b.n	800480a <_free_r+0x22>
 8004854:	d902      	bls.n	800485c <_free_r+0x74>
 8004856:	230c      	movs	r3, #12
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	e7d6      	b.n	800480a <_free_r+0x22>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	1821      	adds	r1, r4, r0
 8004860:	428b      	cmp	r3, r1
 8004862:	bf04      	itt	eq
 8004864:	6819      	ldreq	r1, [r3, #0]
 8004866:	685b      	ldreq	r3, [r3, #4]
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	bf04      	itt	eq
 800486c:	1809      	addeq	r1, r1, r0
 800486e:	6021      	streq	r1, [r4, #0]
 8004870:	6054      	str	r4, [r2, #4]
 8004872:	e7ca      	b.n	800480a <_free_r+0x22>
 8004874:	bd38      	pop	{r3, r4, r5, pc}
 8004876:	bf00      	nop
 8004878:	20000130 	.word	0x20000130

0800487c <__sfputc_r>:
 800487c:	6893      	ldr	r3, [r2, #8]
 800487e:	3b01      	subs	r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	b410      	push	{r4}
 8004884:	6093      	str	r3, [r2, #8]
 8004886:	da08      	bge.n	800489a <__sfputc_r+0x1e>
 8004888:	6994      	ldr	r4, [r2, #24]
 800488a:	42a3      	cmp	r3, r4
 800488c:	db01      	blt.n	8004892 <__sfputc_r+0x16>
 800488e:	290a      	cmp	r1, #10
 8004890:	d103      	bne.n	800489a <__sfputc_r+0x1e>
 8004892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004896:	f7ff be78 	b.w	800458a <__swbuf_r>
 800489a:	6813      	ldr	r3, [r2, #0]
 800489c:	1c58      	adds	r0, r3, #1
 800489e:	6010      	str	r0, [r2, #0]
 80048a0:	7019      	strb	r1, [r3, #0]
 80048a2:	4608      	mov	r0, r1
 80048a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <__sfputs_r>:
 80048aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ac:	4606      	mov	r6, r0
 80048ae:	460f      	mov	r7, r1
 80048b0:	4614      	mov	r4, r2
 80048b2:	18d5      	adds	r5, r2, r3
 80048b4:	42ac      	cmp	r4, r5
 80048b6:	d101      	bne.n	80048bc <__sfputs_r+0x12>
 80048b8:	2000      	movs	r0, #0
 80048ba:	e007      	b.n	80048cc <__sfputs_r+0x22>
 80048bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c0:	463a      	mov	r2, r7
 80048c2:	4630      	mov	r0, r6
 80048c4:	f7ff ffda 	bl	800487c <__sfputc_r>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d1f3      	bne.n	80048b4 <__sfputs_r+0xa>
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048d0 <_vfiprintf_r>:
 80048d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d4:	460d      	mov	r5, r1
 80048d6:	b09d      	sub	sp, #116	@ 0x74
 80048d8:	4614      	mov	r4, r2
 80048da:	4698      	mov	r8, r3
 80048dc:	4606      	mov	r6, r0
 80048de:	b118      	cbz	r0, 80048e8 <_vfiprintf_r+0x18>
 80048e0:	6a03      	ldr	r3, [r0, #32]
 80048e2:	b90b      	cbnz	r3, 80048e8 <_vfiprintf_r+0x18>
 80048e4:	f7ff fd68 	bl	80043b8 <__sinit>
 80048e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80048ea:	07d9      	lsls	r1, r3, #31
 80048ec:	d405      	bmi.n	80048fa <_vfiprintf_r+0x2a>
 80048ee:	89ab      	ldrh	r3, [r5, #12]
 80048f0:	059a      	lsls	r2, r3, #22
 80048f2:	d402      	bmi.n	80048fa <_vfiprintf_r+0x2a>
 80048f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048f6:	f7ff ff66 	bl	80047c6 <__retarget_lock_acquire_recursive>
 80048fa:	89ab      	ldrh	r3, [r5, #12]
 80048fc:	071b      	lsls	r3, r3, #28
 80048fe:	d501      	bpl.n	8004904 <_vfiprintf_r+0x34>
 8004900:	692b      	ldr	r3, [r5, #16]
 8004902:	b99b      	cbnz	r3, 800492c <_vfiprintf_r+0x5c>
 8004904:	4629      	mov	r1, r5
 8004906:	4630      	mov	r0, r6
 8004908:	f7ff fe7e 	bl	8004608 <__swsetup_r>
 800490c:	b170      	cbz	r0, 800492c <_vfiprintf_r+0x5c>
 800490e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004910:	07dc      	lsls	r4, r3, #31
 8004912:	d504      	bpl.n	800491e <_vfiprintf_r+0x4e>
 8004914:	f04f 30ff 	mov.w	r0, #4294967295
 8004918:	b01d      	add	sp, #116	@ 0x74
 800491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	0598      	lsls	r0, r3, #22
 8004922:	d4f7      	bmi.n	8004914 <_vfiprintf_r+0x44>
 8004924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004926:	f7ff ff4f 	bl	80047c8 <__retarget_lock_release_recursive>
 800492a:	e7f3      	b.n	8004914 <_vfiprintf_r+0x44>
 800492c:	2300      	movs	r3, #0
 800492e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004930:	2320      	movs	r3, #32
 8004932:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004936:	f8cd 800c 	str.w	r8, [sp, #12]
 800493a:	2330      	movs	r3, #48	@ 0x30
 800493c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004aec <_vfiprintf_r+0x21c>
 8004940:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004944:	f04f 0901 	mov.w	r9, #1
 8004948:	4623      	mov	r3, r4
 800494a:	469a      	mov	sl, r3
 800494c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004950:	b10a      	cbz	r2, 8004956 <_vfiprintf_r+0x86>
 8004952:	2a25      	cmp	r2, #37	@ 0x25
 8004954:	d1f9      	bne.n	800494a <_vfiprintf_r+0x7a>
 8004956:	ebba 0b04 	subs.w	fp, sl, r4
 800495a:	d00b      	beq.n	8004974 <_vfiprintf_r+0xa4>
 800495c:	465b      	mov	r3, fp
 800495e:	4622      	mov	r2, r4
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff ffa1 	bl	80048aa <__sfputs_r>
 8004968:	3001      	adds	r0, #1
 800496a:	f000 80a7 	beq.w	8004abc <_vfiprintf_r+0x1ec>
 800496e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004970:	445a      	add	r2, fp
 8004972:	9209      	str	r2, [sp, #36]	@ 0x24
 8004974:	f89a 3000 	ldrb.w	r3, [sl]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 809f 	beq.w	8004abc <_vfiprintf_r+0x1ec>
 800497e:	2300      	movs	r3, #0
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004988:	f10a 0a01 	add.w	sl, sl, #1
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	9307      	str	r3, [sp, #28]
 8004990:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004994:	931a      	str	r3, [sp, #104]	@ 0x68
 8004996:	4654      	mov	r4, sl
 8004998:	2205      	movs	r2, #5
 800499a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499e:	4853      	ldr	r0, [pc, #332]	@ (8004aec <_vfiprintf_r+0x21c>)
 80049a0:	f7fb fc26 	bl	80001f0 <memchr>
 80049a4:	9a04      	ldr	r2, [sp, #16]
 80049a6:	b9d8      	cbnz	r0, 80049e0 <_vfiprintf_r+0x110>
 80049a8:	06d1      	lsls	r1, r2, #27
 80049aa:	bf44      	itt	mi
 80049ac:	2320      	movmi	r3, #32
 80049ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049b2:	0713      	lsls	r3, r2, #28
 80049b4:	bf44      	itt	mi
 80049b6:	232b      	movmi	r3, #43	@ 0x2b
 80049b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049bc:	f89a 3000 	ldrb.w	r3, [sl]
 80049c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c2:	d015      	beq.n	80049f0 <_vfiprintf_r+0x120>
 80049c4:	9a07      	ldr	r2, [sp, #28]
 80049c6:	4654      	mov	r4, sl
 80049c8:	2000      	movs	r0, #0
 80049ca:	f04f 0c0a 	mov.w	ip, #10
 80049ce:	4621      	mov	r1, r4
 80049d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049d4:	3b30      	subs	r3, #48	@ 0x30
 80049d6:	2b09      	cmp	r3, #9
 80049d8:	d94b      	bls.n	8004a72 <_vfiprintf_r+0x1a2>
 80049da:	b1b0      	cbz	r0, 8004a0a <_vfiprintf_r+0x13a>
 80049dc:	9207      	str	r2, [sp, #28]
 80049de:	e014      	b.n	8004a0a <_vfiprintf_r+0x13a>
 80049e0:	eba0 0308 	sub.w	r3, r0, r8
 80049e4:	fa09 f303 	lsl.w	r3, r9, r3
 80049e8:	4313      	orrs	r3, r2
 80049ea:	9304      	str	r3, [sp, #16]
 80049ec:	46a2      	mov	sl, r4
 80049ee:	e7d2      	b.n	8004996 <_vfiprintf_r+0xc6>
 80049f0:	9b03      	ldr	r3, [sp, #12]
 80049f2:	1d19      	adds	r1, r3, #4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	9103      	str	r1, [sp, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	bfbb      	ittet	lt
 80049fc:	425b      	neglt	r3, r3
 80049fe:	f042 0202 	orrlt.w	r2, r2, #2
 8004a02:	9307      	strge	r3, [sp, #28]
 8004a04:	9307      	strlt	r3, [sp, #28]
 8004a06:	bfb8      	it	lt
 8004a08:	9204      	strlt	r2, [sp, #16]
 8004a0a:	7823      	ldrb	r3, [r4, #0]
 8004a0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a0e:	d10a      	bne.n	8004a26 <_vfiprintf_r+0x156>
 8004a10:	7863      	ldrb	r3, [r4, #1]
 8004a12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a14:	d132      	bne.n	8004a7c <_vfiprintf_r+0x1ac>
 8004a16:	9b03      	ldr	r3, [sp, #12]
 8004a18:	1d1a      	adds	r2, r3, #4
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	9203      	str	r2, [sp, #12]
 8004a1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a22:	3402      	adds	r4, #2
 8004a24:	9305      	str	r3, [sp, #20]
 8004a26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004afc <_vfiprintf_r+0x22c>
 8004a2a:	7821      	ldrb	r1, [r4, #0]
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4650      	mov	r0, sl
 8004a30:	f7fb fbde 	bl	80001f0 <memchr>
 8004a34:	b138      	cbz	r0, 8004a46 <_vfiprintf_r+0x176>
 8004a36:	9b04      	ldr	r3, [sp, #16]
 8004a38:	eba0 000a 	sub.w	r0, r0, sl
 8004a3c:	2240      	movs	r2, #64	@ 0x40
 8004a3e:	4082      	lsls	r2, r0
 8004a40:	4313      	orrs	r3, r2
 8004a42:	3401      	adds	r4, #1
 8004a44:	9304      	str	r3, [sp, #16]
 8004a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a4a:	4829      	ldr	r0, [pc, #164]	@ (8004af0 <_vfiprintf_r+0x220>)
 8004a4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a50:	2206      	movs	r2, #6
 8004a52:	f7fb fbcd 	bl	80001f0 <memchr>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d03f      	beq.n	8004ada <_vfiprintf_r+0x20a>
 8004a5a:	4b26      	ldr	r3, [pc, #152]	@ (8004af4 <_vfiprintf_r+0x224>)
 8004a5c:	bb1b      	cbnz	r3, 8004aa6 <_vfiprintf_r+0x1d6>
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	3307      	adds	r3, #7
 8004a62:	f023 0307 	bic.w	r3, r3, #7
 8004a66:	3308      	adds	r3, #8
 8004a68:	9303      	str	r3, [sp, #12]
 8004a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a6c:	443b      	add	r3, r7
 8004a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a70:	e76a      	b.n	8004948 <_vfiprintf_r+0x78>
 8004a72:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a76:	460c      	mov	r4, r1
 8004a78:	2001      	movs	r0, #1
 8004a7a:	e7a8      	b.n	80049ce <_vfiprintf_r+0xfe>
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	3401      	adds	r4, #1
 8004a80:	9305      	str	r3, [sp, #20]
 8004a82:	4619      	mov	r1, r3
 8004a84:	f04f 0c0a 	mov.w	ip, #10
 8004a88:	4620      	mov	r0, r4
 8004a8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a8e:	3a30      	subs	r2, #48	@ 0x30
 8004a90:	2a09      	cmp	r2, #9
 8004a92:	d903      	bls.n	8004a9c <_vfiprintf_r+0x1cc>
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0c6      	beq.n	8004a26 <_vfiprintf_r+0x156>
 8004a98:	9105      	str	r1, [sp, #20]
 8004a9a:	e7c4      	b.n	8004a26 <_vfiprintf_r+0x156>
 8004a9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e7f0      	b.n	8004a88 <_vfiprintf_r+0x1b8>
 8004aa6:	ab03      	add	r3, sp, #12
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	462a      	mov	r2, r5
 8004aac:	4b12      	ldr	r3, [pc, #72]	@ (8004af8 <_vfiprintf_r+0x228>)
 8004aae:	a904      	add	r1, sp, #16
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f3af 8000 	nop.w
 8004ab6:	4607      	mov	r7, r0
 8004ab8:	1c78      	adds	r0, r7, #1
 8004aba:	d1d6      	bne.n	8004a6a <_vfiprintf_r+0x19a>
 8004abc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004abe:	07d9      	lsls	r1, r3, #31
 8004ac0:	d405      	bmi.n	8004ace <_vfiprintf_r+0x1fe>
 8004ac2:	89ab      	ldrh	r3, [r5, #12]
 8004ac4:	059a      	lsls	r2, r3, #22
 8004ac6:	d402      	bmi.n	8004ace <_vfiprintf_r+0x1fe>
 8004ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004aca:	f7ff fe7d 	bl	80047c8 <__retarget_lock_release_recursive>
 8004ace:	89ab      	ldrh	r3, [r5, #12]
 8004ad0:	065b      	lsls	r3, r3, #25
 8004ad2:	f53f af1f 	bmi.w	8004914 <_vfiprintf_r+0x44>
 8004ad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ad8:	e71e      	b.n	8004918 <_vfiprintf_r+0x48>
 8004ada:	ab03      	add	r3, sp, #12
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	462a      	mov	r2, r5
 8004ae0:	4b05      	ldr	r3, [pc, #20]	@ (8004af8 <_vfiprintf_r+0x228>)
 8004ae2:	a904      	add	r1, sp, #16
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f000 f879 	bl	8004bdc <_printf_i>
 8004aea:	e7e4      	b.n	8004ab6 <_vfiprintf_r+0x1e6>
 8004aec:	080073b0 	.word	0x080073b0
 8004af0:	080073ba 	.word	0x080073ba
 8004af4:	00000000 	.word	0x00000000
 8004af8:	080048ab 	.word	0x080048ab
 8004afc:	080073b6 	.word	0x080073b6

08004b00 <_printf_common>:
 8004b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b04:	4616      	mov	r6, r2
 8004b06:	4698      	mov	r8, r3
 8004b08:	688a      	ldr	r2, [r1, #8]
 8004b0a:	690b      	ldr	r3, [r1, #16]
 8004b0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b10:	4293      	cmp	r3, r2
 8004b12:	bfb8      	it	lt
 8004b14:	4613      	movlt	r3, r2
 8004b16:	6033      	str	r3, [r6, #0]
 8004b18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b1c:	4607      	mov	r7, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	b10a      	cbz	r2, 8004b26 <_printf_common+0x26>
 8004b22:	3301      	adds	r3, #1
 8004b24:	6033      	str	r3, [r6, #0]
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	0699      	lsls	r1, r3, #26
 8004b2a:	bf42      	ittt	mi
 8004b2c:	6833      	ldrmi	r3, [r6, #0]
 8004b2e:	3302      	addmi	r3, #2
 8004b30:	6033      	strmi	r3, [r6, #0]
 8004b32:	6825      	ldr	r5, [r4, #0]
 8004b34:	f015 0506 	ands.w	r5, r5, #6
 8004b38:	d106      	bne.n	8004b48 <_printf_common+0x48>
 8004b3a:	f104 0a19 	add.w	sl, r4, #25
 8004b3e:	68e3      	ldr	r3, [r4, #12]
 8004b40:	6832      	ldr	r2, [r6, #0]
 8004b42:	1a9b      	subs	r3, r3, r2
 8004b44:	42ab      	cmp	r3, r5
 8004b46:	dc26      	bgt.n	8004b96 <_printf_common+0x96>
 8004b48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b4c:	6822      	ldr	r2, [r4, #0]
 8004b4e:	3b00      	subs	r3, #0
 8004b50:	bf18      	it	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	0692      	lsls	r2, r2, #26
 8004b56:	d42b      	bmi.n	8004bb0 <_printf_common+0xb0>
 8004b58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	4638      	mov	r0, r7
 8004b60:	47c8      	blx	r9
 8004b62:	3001      	adds	r0, #1
 8004b64:	d01e      	beq.n	8004ba4 <_printf_common+0xa4>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	6922      	ldr	r2, [r4, #16]
 8004b6a:	f003 0306 	and.w	r3, r3, #6
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	bf02      	ittt	eq
 8004b72:	68e5      	ldreq	r5, [r4, #12]
 8004b74:	6833      	ldreq	r3, [r6, #0]
 8004b76:	1aed      	subeq	r5, r5, r3
 8004b78:	68a3      	ldr	r3, [r4, #8]
 8004b7a:	bf0c      	ite	eq
 8004b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b80:	2500      	movne	r5, #0
 8004b82:	4293      	cmp	r3, r2
 8004b84:	bfc4      	itt	gt
 8004b86:	1a9b      	subgt	r3, r3, r2
 8004b88:	18ed      	addgt	r5, r5, r3
 8004b8a:	2600      	movs	r6, #0
 8004b8c:	341a      	adds	r4, #26
 8004b8e:	42b5      	cmp	r5, r6
 8004b90:	d11a      	bne.n	8004bc8 <_printf_common+0xc8>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e008      	b.n	8004ba8 <_printf_common+0xa8>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4652      	mov	r2, sl
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	47c8      	blx	r9
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d103      	bne.n	8004bac <_printf_common+0xac>
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bac:	3501      	adds	r5, #1
 8004bae:	e7c6      	b.n	8004b3e <_printf_common+0x3e>
 8004bb0:	18e1      	adds	r1, r4, r3
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	2030      	movs	r0, #48	@ 0x30
 8004bb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004bba:	4422      	add	r2, r4
 8004bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004bc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	e7c7      	b.n	8004b58 <_printf_common+0x58>
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4622      	mov	r2, r4
 8004bcc:	4641      	mov	r1, r8
 8004bce:	4638      	mov	r0, r7
 8004bd0:	47c8      	blx	r9
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d0e6      	beq.n	8004ba4 <_printf_common+0xa4>
 8004bd6:	3601      	adds	r6, #1
 8004bd8:	e7d9      	b.n	8004b8e <_printf_common+0x8e>
	...

08004bdc <_printf_i>:
 8004bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be0:	7e0f      	ldrb	r7, [r1, #24]
 8004be2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004be4:	2f78      	cmp	r7, #120	@ 0x78
 8004be6:	4691      	mov	r9, r2
 8004be8:	4680      	mov	r8, r0
 8004bea:	460c      	mov	r4, r1
 8004bec:	469a      	mov	sl, r3
 8004bee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004bf2:	d807      	bhi.n	8004c04 <_printf_i+0x28>
 8004bf4:	2f62      	cmp	r7, #98	@ 0x62
 8004bf6:	d80a      	bhi.n	8004c0e <_printf_i+0x32>
 8004bf8:	2f00      	cmp	r7, #0
 8004bfa:	f000 80d2 	beq.w	8004da2 <_printf_i+0x1c6>
 8004bfe:	2f58      	cmp	r7, #88	@ 0x58
 8004c00:	f000 80b9 	beq.w	8004d76 <_printf_i+0x19a>
 8004c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c0c:	e03a      	b.n	8004c84 <_printf_i+0xa8>
 8004c0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c12:	2b15      	cmp	r3, #21
 8004c14:	d8f6      	bhi.n	8004c04 <_printf_i+0x28>
 8004c16:	a101      	add	r1, pc, #4	@ (adr r1, 8004c1c <_printf_i+0x40>)
 8004c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c1c:	08004c75 	.word	0x08004c75
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c05 	.word	0x08004c05
 8004c28:	08004c05 	.word	0x08004c05
 8004c2c:	08004c05 	.word	0x08004c05
 8004c30:	08004c05 	.word	0x08004c05
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004c05 	.word	0x08004c05
 8004c3c:	08004c05 	.word	0x08004c05
 8004c40:	08004c05 	.word	0x08004c05
 8004c44:	08004c05 	.word	0x08004c05
 8004c48:	08004d89 	.word	0x08004d89
 8004c4c:	08004cb3 	.word	0x08004cb3
 8004c50:	08004d43 	.word	0x08004d43
 8004c54:	08004c05 	.word	0x08004c05
 8004c58:	08004c05 	.word	0x08004c05
 8004c5c:	08004dab 	.word	0x08004dab
 8004c60:	08004c05 	.word	0x08004c05
 8004c64:	08004cb3 	.word	0x08004cb3
 8004c68:	08004c05 	.word	0x08004c05
 8004c6c:	08004c05 	.word	0x08004c05
 8004c70:	08004d4b 	.word	0x08004d4b
 8004c74:	6833      	ldr	r3, [r6, #0]
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6032      	str	r2, [r6, #0]
 8004c7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c84:	2301      	movs	r3, #1
 8004c86:	e09d      	b.n	8004dc4 <_printf_i+0x1e8>
 8004c88:	6833      	ldr	r3, [r6, #0]
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	1d19      	adds	r1, r3, #4
 8004c8e:	6031      	str	r1, [r6, #0]
 8004c90:	0606      	lsls	r6, r0, #24
 8004c92:	d501      	bpl.n	8004c98 <_printf_i+0xbc>
 8004c94:	681d      	ldr	r5, [r3, #0]
 8004c96:	e003      	b.n	8004ca0 <_printf_i+0xc4>
 8004c98:	0645      	lsls	r5, r0, #25
 8004c9a:	d5fb      	bpl.n	8004c94 <_printf_i+0xb8>
 8004c9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	da03      	bge.n	8004cac <_printf_i+0xd0>
 8004ca4:	232d      	movs	r3, #45	@ 0x2d
 8004ca6:	426d      	negs	r5, r5
 8004ca8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cac:	4859      	ldr	r0, [pc, #356]	@ (8004e14 <_printf_i+0x238>)
 8004cae:	230a      	movs	r3, #10
 8004cb0:	e011      	b.n	8004cd6 <_printf_i+0xfa>
 8004cb2:	6821      	ldr	r1, [r4, #0]
 8004cb4:	6833      	ldr	r3, [r6, #0]
 8004cb6:	0608      	lsls	r0, r1, #24
 8004cb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004cbc:	d402      	bmi.n	8004cc4 <_printf_i+0xe8>
 8004cbe:	0649      	lsls	r1, r1, #25
 8004cc0:	bf48      	it	mi
 8004cc2:	b2ad      	uxthmi	r5, r5
 8004cc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004cc6:	4853      	ldr	r0, [pc, #332]	@ (8004e14 <_printf_i+0x238>)
 8004cc8:	6033      	str	r3, [r6, #0]
 8004cca:	bf14      	ite	ne
 8004ccc:	230a      	movne	r3, #10
 8004cce:	2308      	moveq	r3, #8
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004cd6:	6866      	ldr	r6, [r4, #4]
 8004cd8:	60a6      	str	r6, [r4, #8]
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	bfa2      	ittt	ge
 8004cde:	6821      	ldrge	r1, [r4, #0]
 8004ce0:	f021 0104 	bicge.w	r1, r1, #4
 8004ce4:	6021      	strge	r1, [r4, #0]
 8004ce6:	b90d      	cbnz	r5, 8004cec <_printf_i+0x110>
 8004ce8:	2e00      	cmp	r6, #0
 8004cea:	d04b      	beq.n	8004d84 <_printf_i+0x1a8>
 8004cec:	4616      	mov	r6, r2
 8004cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8004cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8004cf6:	5dc7      	ldrb	r7, [r0, r7]
 8004cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004cfc:	462f      	mov	r7, r5
 8004cfe:	42bb      	cmp	r3, r7
 8004d00:	460d      	mov	r5, r1
 8004d02:	d9f4      	bls.n	8004cee <_printf_i+0x112>
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d10b      	bne.n	8004d20 <_printf_i+0x144>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	07df      	lsls	r7, r3, #31
 8004d0c:	d508      	bpl.n	8004d20 <_printf_i+0x144>
 8004d0e:	6923      	ldr	r3, [r4, #16]
 8004d10:	6861      	ldr	r1, [r4, #4]
 8004d12:	4299      	cmp	r1, r3
 8004d14:	bfde      	ittt	le
 8004d16:	2330      	movle	r3, #48	@ 0x30
 8004d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d20:	1b92      	subs	r2, r2, r6
 8004d22:	6122      	str	r2, [r4, #16]
 8004d24:	f8cd a000 	str.w	sl, [sp]
 8004d28:	464b      	mov	r3, r9
 8004d2a:	aa03      	add	r2, sp, #12
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	4640      	mov	r0, r8
 8004d30:	f7ff fee6 	bl	8004b00 <_printf_common>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d14a      	bne.n	8004dce <_printf_i+0x1f2>
 8004d38:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3c:	b004      	add	sp, #16
 8004d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	f043 0320 	orr.w	r3, r3, #32
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	4833      	ldr	r0, [pc, #204]	@ (8004e18 <_printf_i+0x23c>)
 8004d4c:	2778      	movs	r7, #120	@ 0x78
 8004d4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	6831      	ldr	r1, [r6, #0]
 8004d56:	061f      	lsls	r7, r3, #24
 8004d58:	f851 5b04 	ldr.w	r5, [r1], #4
 8004d5c:	d402      	bmi.n	8004d64 <_printf_i+0x188>
 8004d5e:	065f      	lsls	r7, r3, #25
 8004d60:	bf48      	it	mi
 8004d62:	b2ad      	uxthmi	r5, r5
 8004d64:	6031      	str	r1, [r6, #0]
 8004d66:	07d9      	lsls	r1, r3, #31
 8004d68:	bf44      	itt	mi
 8004d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6e:	6023      	strmi	r3, [r4, #0]
 8004d70:	b11d      	cbz	r5, 8004d7a <_printf_i+0x19e>
 8004d72:	2310      	movs	r3, #16
 8004d74:	e7ac      	b.n	8004cd0 <_printf_i+0xf4>
 8004d76:	4827      	ldr	r0, [pc, #156]	@ (8004e14 <_printf_i+0x238>)
 8004d78:	e7e9      	b.n	8004d4e <_printf_i+0x172>
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	f023 0320 	bic.w	r3, r3, #32
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	e7f6      	b.n	8004d72 <_printf_i+0x196>
 8004d84:	4616      	mov	r6, r2
 8004d86:	e7bd      	b.n	8004d04 <_printf_i+0x128>
 8004d88:	6833      	ldr	r3, [r6, #0]
 8004d8a:	6825      	ldr	r5, [r4, #0]
 8004d8c:	6961      	ldr	r1, [r4, #20]
 8004d8e:	1d18      	adds	r0, r3, #4
 8004d90:	6030      	str	r0, [r6, #0]
 8004d92:	062e      	lsls	r6, r5, #24
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	d501      	bpl.n	8004d9c <_printf_i+0x1c0>
 8004d98:	6019      	str	r1, [r3, #0]
 8004d9a:	e002      	b.n	8004da2 <_printf_i+0x1c6>
 8004d9c:	0668      	lsls	r0, r5, #25
 8004d9e:	d5fb      	bpl.n	8004d98 <_printf_i+0x1bc>
 8004da0:	8019      	strh	r1, [r3, #0]
 8004da2:	2300      	movs	r3, #0
 8004da4:	6123      	str	r3, [r4, #16]
 8004da6:	4616      	mov	r6, r2
 8004da8:	e7bc      	b.n	8004d24 <_printf_i+0x148>
 8004daa:	6833      	ldr	r3, [r6, #0]
 8004dac:	1d1a      	adds	r2, r3, #4
 8004dae:	6032      	str	r2, [r6, #0]
 8004db0:	681e      	ldr	r6, [r3, #0]
 8004db2:	6862      	ldr	r2, [r4, #4]
 8004db4:	2100      	movs	r1, #0
 8004db6:	4630      	mov	r0, r6
 8004db8:	f7fb fa1a 	bl	80001f0 <memchr>
 8004dbc:	b108      	cbz	r0, 8004dc2 <_printf_i+0x1e6>
 8004dbe:	1b80      	subs	r0, r0, r6
 8004dc0:	6060      	str	r0, [r4, #4]
 8004dc2:	6863      	ldr	r3, [r4, #4]
 8004dc4:	6123      	str	r3, [r4, #16]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dcc:	e7aa      	b.n	8004d24 <_printf_i+0x148>
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	47d0      	blx	sl
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d0ad      	beq.n	8004d38 <_printf_i+0x15c>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	079b      	lsls	r3, r3, #30
 8004de0:	d413      	bmi.n	8004e0a <_printf_i+0x22e>
 8004de2:	68e0      	ldr	r0, [r4, #12]
 8004de4:	9b03      	ldr	r3, [sp, #12]
 8004de6:	4298      	cmp	r0, r3
 8004de8:	bfb8      	it	lt
 8004dea:	4618      	movlt	r0, r3
 8004dec:	e7a6      	b.n	8004d3c <_printf_i+0x160>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4632      	mov	r2, r6
 8004df2:	4649      	mov	r1, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	47d0      	blx	sl
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d09d      	beq.n	8004d38 <_printf_i+0x15c>
 8004dfc:	3501      	adds	r5, #1
 8004dfe:	68e3      	ldr	r3, [r4, #12]
 8004e00:	9903      	ldr	r1, [sp, #12]
 8004e02:	1a5b      	subs	r3, r3, r1
 8004e04:	42ab      	cmp	r3, r5
 8004e06:	dcf2      	bgt.n	8004dee <_printf_i+0x212>
 8004e08:	e7eb      	b.n	8004de2 <_printf_i+0x206>
 8004e0a:	2500      	movs	r5, #0
 8004e0c:	f104 0619 	add.w	r6, r4, #25
 8004e10:	e7f5      	b.n	8004dfe <_printf_i+0x222>
 8004e12:	bf00      	nop
 8004e14:	080073c1 	.word	0x080073c1
 8004e18:	080073d2 	.word	0x080073d2

08004e1c <__sflush_r>:
 8004e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	0716      	lsls	r6, r2, #28
 8004e26:	4605      	mov	r5, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	d454      	bmi.n	8004ed6 <__sflush_r+0xba>
 8004e2c:	684b      	ldr	r3, [r1, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	dc02      	bgt.n	8004e38 <__sflush_r+0x1c>
 8004e32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	dd48      	ble.n	8004eca <__sflush_r+0xae>
 8004e38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e3a:	2e00      	cmp	r6, #0
 8004e3c:	d045      	beq.n	8004eca <__sflush_r+0xae>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e44:	682f      	ldr	r7, [r5, #0]
 8004e46:	6a21      	ldr	r1, [r4, #32]
 8004e48:	602b      	str	r3, [r5, #0]
 8004e4a:	d030      	beq.n	8004eae <__sflush_r+0x92>
 8004e4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	0759      	lsls	r1, r3, #29
 8004e52:	d505      	bpl.n	8004e60 <__sflush_r+0x44>
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	1ad2      	subs	r2, r2, r3
 8004e58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004e5a:	b10b      	cbz	r3, 8004e60 <__sflush_r+0x44>
 8004e5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	2300      	movs	r3, #0
 8004e62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e64:	6a21      	ldr	r1, [r4, #32]
 8004e66:	4628      	mov	r0, r5
 8004e68:	47b0      	blx	r6
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	89a3      	ldrh	r3, [r4, #12]
 8004e6e:	d106      	bne.n	8004e7e <__sflush_r+0x62>
 8004e70:	6829      	ldr	r1, [r5, #0]
 8004e72:	291d      	cmp	r1, #29
 8004e74:	d82b      	bhi.n	8004ece <__sflush_r+0xb2>
 8004e76:	4a2a      	ldr	r2, [pc, #168]	@ (8004f20 <__sflush_r+0x104>)
 8004e78:	410a      	asrs	r2, r1
 8004e7a:	07d6      	lsls	r6, r2, #31
 8004e7c:	d427      	bmi.n	8004ece <__sflush_r+0xb2>
 8004e7e:	2200      	movs	r2, #0
 8004e80:	6062      	str	r2, [r4, #4]
 8004e82:	04d9      	lsls	r1, r3, #19
 8004e84:	6922      	ldr	r2, [r4, #16]
 8004e86:	6022      	str	r2, [r4, #0]
 8004e88:	d504      	bpl.n	8004e94 <__sflush_r+0x78>
 8004e8a:	1c42      	adds	r2, r0, #1
 8004e8c:	d101      	bne.n	8004e92 <__sflush_r+0x76>
 8004e8e:	682b      	ldr	r3, [r5, #0]
 8004e90:	b903      	cbnz	r3, 8004e94 <__sflush_r+0x78>
 8004e92:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e96:	602f      	str	r7, [r5, #0]
 8004e98:	b1b9      	cbz	r1, 8004eca <__sflush_r+0xae>
 8004e9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e9e:	4299      	cmp	r1, r3
 8004ea0:	d002      	beq.n	8004ea8 <__sflush_r+0x8c>
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f7ff fca0 	bl	80047e8 <_free_r>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6363      	str	r3, [r4, #52]	@ 0x34
 8004eac:	e00d      	b.n	8004eca <__sflush_r+0xae>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	47b0      	blx	r6
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	1c50      	adds	r0, r2, #1
 8004eb8:	d1c9      	bne.n	8004e4e <__sflush_r+0x32>
 8004eba:	682b      	ldr	r3, [r5, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0c6      	beq.n	8004e4e <__sflush_r+0x32>
 8004ec0:	2b1d      	cmp	r3, #29
 8004ec2:	d001      	beq.n	8004ec8 <__sflush_r+0xac>
 8004ec4:	2b16      	cmp	r3, #22
 8004ec6:	d11e      	bne.n	8004f06 <__sflush_r+0xea>
 8004ec8:	602f      	str	r7, [r5, #0]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	e022      	b.n	8004f14 <__sflush_r+0xf8>
 8004ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ed2:	b21b      	sxth	r3, r3
 8004ed4:	e01b      	b.n	8004f0e <__sflush_r+0xf2>
 8004ed6:	690f      	ldr	r7, [r1, #16]
 8004ed8:	2f00      	cmp	r7, #0
 8004eda:	d0f6      	beq.n	8004eca <__sflush_r+0xae>
 8004edc:	0793      	lsls	r3, r2, #30
 8004ede:	680e      	ldr	r6, [r1, #0]
 8004ee0:	bf08      	it	eq
 8004ee2:	694b      	ldreq	r3, [r1, #20]
 8004ee4:	600f      	str	r7, [r1, #0]
 8004ee6:	bf18      	it	ne
 8004ee8:	2300      	movne	r3, #0
 8004eea:	eba6 0807 	sub.w	r8, r6, r7
 8004eee:	608b      	str	r3, [r1, #8]
 8004ef0:	f1b8 0f00 	cmp.w	r8, #0
 8004ef4:	dde9      	ble.n	8004eca <__sflush_r+0xae>
 8004ef6:	6a21      	ldr	r1, [r4, #32]
 8004ef8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004efa:	4643      	mov	r3, r8
 8004efc:	463a      	mov	r2, r7
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b0      	blx	r6
 8004f02:	2800      	cmp	r0, #0
 8004f04:	dc08      	bgt.n	8004f18 <__sflush_r+0xfc>
 8004f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f0e:	81a3      	strh	r3, [r4, #12]
 8004f10:	f04f 30ff 	mov.w	r0, #4294967295
 8004f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f18:	4407      	add	r7, r0
 8004f1a:	eba8 0800 	sub.w	r8, r8, r0
 8004f1e:	e7e7      	b.n	8004ef0 <__sflush_r+0xd4>
 8004f20:	dfbffffe 	.word	0xdfbffffe

08004f24 <_fflush_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	690b      	ldr	r3, [r1, #16]
 8004f28:	4605      	mov	r5, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	b913      	cbnz	r3, 8004f34 <_fflush_r+0x10>
 8004f2e:	2500      	movs	r5, #0
 8004f30:	4628      	mov	r0, r5
 8004f32:	bd38      	pop	{r3, r4, r5, pc}
 8004f34:	b118      	cbz	r0, 8004f3e <_fflush_r+0x1a>
 8004f36:	6a03      	ldr	r3, [r0, #32]
 8004f38:	b90b      	cbnz	r3, 8004f3e <_fflush_r+0x1a>
 8004f3a:	f7ff fa3d 	bl	80043b8 <__sinit>
 8004f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f3      	beq.n	8004f2e <_fflush_r+0xa>
 8004f46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f48:	07d0      	lsls	r0, r2, #31
 8004f4a:	d404      	bmi.n	8004f56 <_fflush_r+0x32>
 8004f4c:	0599      	lsls	r1, r3, #22
 8004f4e:	d402      	bmi.n	8004f56 <_fflush_r+0x32>
 8004f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f52:	f7ff fc38 	bl	80047c6 <__retarget_lock_acquire_recursive>
 8004f56:	4628      	mov	r0, r5
 8004f58:	4621      	mov	r1, r4
 8004f5a:	f7ff ff5f 	bl	8004e1c <__sflush_r>
 8004f5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f60:	07da      	lsls	r2, r3, #31
 8004f62:	4605      	mov	r5, r0
 8004f64:	d4e4      	bmi.n	8004f30 <_fflush_r+0xc>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	059b      	lsls	r3, r3, #22
 8004f6a:	d4e1      	bmi.n	8004f30 <_fflush_r+0xc>
 8004f6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f6e:	f7ff fc2b 	bl	80047c8 <__retarget_lock_release_recursive>
 8004f72:	e7dd      	b.n	8004f30 <_fflush_r+0xc>

08004f74 <__swhatbuf_r>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	460c      	mov	r4, r1
 8004f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	b096      	sub	sp, #88	@ 0x58
 8004f80:	4615      	mov	r5, r2
 8004f82:	461e      	mov	r6, r3
 8004f84:	da0d      	bge.n	8004fa2 <__swhatbuf_r+0x2e>
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f8c:	f04f 0100 	mov.w	r1, #0
 8004f90:	bf14      	ite	ne
 8004f92:	2340      	movne	r3, #64	@ 0x40
 8004f94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f98:	2000      	movs	r0, #0
 8004f9a:	6031      	str	r1, [r6, #0]
 8004f9c:	602b      	str	r3, [r5, #0]
 8004f9e:	b016      	add	sp, #88	@ 0x58
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	466a      	mov	r2, sp
 8004fa4:	f000 f848 	bl	8005038 <_fstat_r>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	dbec      	blt.n	8004f86 <__swhatbuf_r+0x12>
 8004fac:	9901      	ldr	r1, [sp, #4]
 8004fae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004fb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004fb6:	4259      	negs	r1, r3
 8004fb8:	4159      	adcs	r1, r3
 8004fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fbe:	e7eb      	b.n	8004f98 <__swhatbuf_r+0x24>

08004fc0 <__smakebuf_r>:
 8004fc0:	898b      	ldrh	r3, [r1, #12]
 8004fc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fc4:	079d      	lsls	r5, r3, #30
 8004fc6:	4606      	mov	r6, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	d507      	bpl.n	8004fdc <__smakebuf_r+0x1c>
 8004fcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	6123      	str	r3, [r4, #16]
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	6163      	str	r3, [r4, #20]
 8004fd8:	b003      	add	sp, #12
 8004fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fdc:	ab01      	add	r3, sp, #4
 8004fde:	466a      	mov	r2, sp
 8004fe0:	f7ff ffc8 	bl	8004f74 <__swhatbuf_r>
 8004fe4:	9f00      	ldr	r7, [sp, #0]
 8004fe6:	4605      	mov	r5, r0
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7ff f8cc 	bl	8004188 <_malloc_r>
 8004ff0:	b948      	cbnz	r0, 8005006 <__smakebuf_r+0x46>
 8004ff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ff6:	059a      	lsls	r2, r3, #22
 8004ff8:	d4ee      	bmi.n	8004fd8 <__smakebuf_r+0x18>
 8004ffa:	f023 0303 	bic.w	r3, r3, #3
 8004ffe:	f043 0302 	orr.w	r3, r3, #2
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	e7e2      	b.n	8004fcc <__smakebuf_r+0xc>
 8005006:	89a3      	ldrh	r3, [r4, #12]
 8005008:	6020      	str	r0, [r4, #0]
 800500a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800500e:	81a3      	strh	r3, [r4, #12]
 8005010:	9b01      	ldr	r3, [sp, #4]
 8005012:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005016:	b15b      	cbz	r3, 8005030 <__smakebuf_r+0x70>
 8005018:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f81d 	bl	800505c <_isatty_r>
 8005022:	b128      	cbz	r0, 8005030 <__smakebuf_r+0x70>
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	81a3      	strh	r3, [r4, #12]
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	431d      	orrs	r5, r3
 8005034:	81a5      	strh	r5, [r4, #12]
 8005036:	e7cf      	b.n	8004fd8 <__smakebuf_r+0x18>

08005038 <_fstat_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4d07      	ldr	r5, [pc, #28]	@ (8005058 <_fstat_r+0x20>)
 800503c:	2300      	movs	r3, #0
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	602b      	str	r3, [r5, #0]
 8005046:	f7fb fdf0 	bl	8000c2a <_fstat>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d102      	bne.n	8005054 <_fstat_r+0x1c>
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	b103      	cbz	r3, 8005054 <_fstat_r+0x1c>
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	bd38      	pop	{r3, r4, r5, pc}
 8005056:	bf00      	nop
 8005058:	20000270 	.word	0x20000270

0800505c <_isatty_r>:
 800505c:	b538      	push	{r3, r4, r5, lr}
 800505e:	4d06      	ldr	r5, [pc, #24]	@ (8005078 <_isatty_r+0x1c>)
 8005060:	2300      	movs	r3, #0
 8005062:	4604      	mov	r4, r0
 8005064:	4608      	mov	r0, r1
 8005066:	602b      	str	r3, [r5, #0]
 8005068:	f7fb fdef 	bl	8000c4a <_isatty>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d102      	bne.n	8005076 <_isatty_r+0x1a>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	b103      	cbz	r3, 8005076 <_isatty_r+0x1a>
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	bd38      	pop	{r3, r4, r5, pc}
 8005078:	20000270 	.word	0x20000270

0800507c <_init>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	bf00      	nop
 8005080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005082:	bc08      	pop	{r3}
 8005084:	469e      	mov	lr, r3
 8005086:	4770      	bx	lr

08005088 <_fini>:
 8005088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508a:	bf00      	nop
 800508c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508e:	bc08      	pop	{r3}
 8005090:	469e      	mov	lr, r3
 8005092:	4770      	bx	lr
