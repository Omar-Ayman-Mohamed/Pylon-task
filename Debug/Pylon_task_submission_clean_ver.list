
Pylon_task_submission_clean_ver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d944  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003198  0800dae0  0800dae0  0000eae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c78  08010c78  00012074  2**0
                  CONTENTS
  4 .ARM          00000008  08010c78  08010c78  00011c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c80  08010c80  00012074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c80  08010c80  00011c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010c84  08010c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08010c88  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000074  08010cfc  00012074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08010cfc  00012280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013477  00000000  00000000  000120a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000395a  00000000  00000000  0002551b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00028e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb7  00000000  00000000  00029f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019116  00000000  00000000  0002abc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e0d  00000000  00000000  00043cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091075  00000000  00000000  0005baea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ecb5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a88  00000000  00000000  000ecba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000f162c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800dac4 	.word	0x0800dac4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	0800dac4 	.word	0x0800dac4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <padding_data_for_AES_CBC_encryption>:
/**
 * function to pad data for AES-CBC encryption , as this format deals with data blocks of 16 bytes
 * if the data is shorter , we will need padding
 * this padding is inspired by PKCS#7 , but i padded the values with zero's instead
 * */
void padding_data_for_AES_CBC_encryption(unsigned char*original_text,size_t original_text_length,unsigned char * output){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
    memcpy(output, original_text, original_text_length);
 80004e4:	68ba      	ldr	r2, [r7, #8]
 80004e6:	68f9      	ldr	r1, [r7, #12]
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f00d f962 	bl	800d7b2 <memcpy>
    memset(output + original_text_length, 0x00, 128 - original_text_length);  //padding
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	18d0      	adds	r0, r2, r3
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80004fa:	461a      	mov	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f00d f8cd 	bl	800d69c <memset>
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <AES_Encryption>:
 *  padded_message_len length of message to be encrypted after padding
 * padded_clear_message : padded message to be encrypted
 * padded_encrypted_message : output buffer for data after encryption
 *
 *  */
void AES_Encryption(unsigned char *key,unsigned char *iv,size_t padded_message_len ,  unsigned char * padded_clear_message, unsigned char*padded_encrypted_message){
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b0cd      	sub	sp, #308	@ 0x134
 8000510:	af02      	add	r7, sp, #8
 8000512:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8000516:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800051a:	6020      	str	r0, [r4, #0]
 800051c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8000520:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8000524:	6001      	str	r1, [r0, #0]
 8000526:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800052a:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 800052e:	600a      	str	r2, [r1, #0]
 8000530:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000534:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000538:	6013      	str	r3, [r2, #0]
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4618      	mov	r0, r3
 8000540:	f003 f9d3 	bl	80038ea <mbedtls_aes_init>
	if (mbedtls_aes_setkey_enc(&aes, key, 256) != 0) {
 8000544:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000548:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800054c:	f107 0010 	add.w	r0, r7, #16
 8000550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	f003 fa0f 	bl	8003978 <mbedtls_aes_setkey_enc>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d003      	beq.n	8000568 <AES_Encryption+0x5c>
    printf("Failed to set AES encryption key\n");
 8000560:	4815      	ldr	r0, [pc, #84]	@ (80005b8 <AES_Encryption+0xac>)
 8000562:	f00c ffbb 	bl	800d4dc <puts>
    return 1;
 8000566:	e023      	b.n	80005b0 <AES_Encryption+0xa4>
}

if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, padded_message_len, iv, padded_clear_message, padded_encrypted_message) != 0) {
 8000568:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800056c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000570:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000574:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8000578:	f107 0010 	add.w	r0, r7, #16
 800057c:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8000586:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 800058a:	6809      	ldr	r1, [r1, #0]
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	2101      	movs	r1, #1
 8000594:	f004 fb6d 	bl	8004c72 <mbedtls_aes_crypt_cbc>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d003      	beq.n	80005a6 <AES_Encryption+0x9a>
    printf("Encryption failed\n");
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <AES_Encryption+0xb0>)
 80005a0:	f00c ff9c 	bl	800d4dc <puts>
    return 1;
 80005a4:	e004      	b.n	80005b0 <AES_Encryption+0xa4>
}
/*always make sure to free resources after finishing*/
mbedtls_aes_free(&aes);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4618      	mov	r0, r3
 80005ac:	f003 f9ab 	bl	8003906 <mbedtls_aes_free>
}
 80005b0:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	0800dae0 	.word	0x0800dae0
 80005bc:	0800db04 	.word	0x0800db04

080005c0 <AES_Decryption>:
 *  padded_message_len length of message to be encrypted after padding
 * padded_clear_message : padded message to be encrypted
 * padded_encrypted_message : output buffer for data after encryption
 *
 *  */
void AES_Decryption(unsigned char *key,unsigned char *iv,size_t padded_message_len ,unsigned char * padded_Encrypted_message,unsigned char*padded_decrytped_message){
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b0cd      	sub	sp, #308	@ 0x134
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80005ca:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80005ce:	6020      	str	r0, [r4, #0]
 80005d0:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80005d4:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80005d8:	6001      	str	r1, [r0, #0]
 80005da:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80005de:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 80005e2:	600a      	str	r2, [r1, #0]
 80005e4:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80005e8:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80005ec:	6013      	str	r3, [r2, #0]
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 f979 	bl	80038ea <mbedtls_aes_init>
if (mbedtls_aes_setkey_dec(&aes, key, 256) != 0) {
 80005f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000600:	f107 0010 	add.w	r0, r7, #16
 8000604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000608:	6819      	ldr	r1, [r3, #0]
 800060a:	f003 fb8b 	bl	8003d24 <mbedtls_aes_setkey_dec>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <AES_Decryption+0x5c>
    printf("Failed to set AES decryption key\n");
 8000614:	4815      	ldr	r0, [pc, #84]	@ (800066c <AES_Decryption+0xac>)
 8000616:	f00c ff61 	bl	800d4dc <puts>
    return 1;
 800061a:	e023      	b.n	8000664 <AES_Decryption+0xa4>
}

if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, padded_message_len, iv, padded_Encrypted_message, padded_decrytped_message) != 0) {
 800061c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000620:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000624:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000628:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800062c:	f107 0010 	add.w	r0, r7, #16
 8000630:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8000634:	9101      	str	r1, [sp, #4]
 8000636:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800063a:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 800063e:	6809      	ldr	r1, [r1, #0]
 8000640:	9100      	str	r1, [sp, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6812      	ldr	r2, [r2, #0]
 8000646:	2100      	movs	r1, #0
 8000648:	f004 fb13 	bl	8004c72 <mbedtls_aes_crypt_cbc>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <AES_Decryption+0x9a>
    printf("Decryption failed\n");
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <AES_Decryption+0xb0>)
 8000654:	f00c ff42 	bl	800d4dc <puts>
    return 1;
 8000658:	e004      	b.n	8000664 <AES_Decryption+0xa4>
}
/*always make sure to free resources after finishing*/
mbedtls_aes_free(&aes);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f951 	bl	8003906 <mbedtls_aes_free>
}
 8000664:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8000668:	46bd      	mov	sp, r7
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	0800db18 	.word	0x0800db18
 8000670:	0800db3c 	.word	0x0800db3c

08000674 <aes_gcm_encrypt>:
 * tag : for data integurity check
 *  */

int aes_gcm_encrypt(unsigned char *key,size_t KEY_SIZE,unsigned char *iv,size_t IV_SIZE,unsigned char * input, size_t input_len,
		 unsigned char * output,unsigned char *aad,size_t aad_len, unsigned char * tag)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b0f1      	sub	sp, #452	@ 0x1c4
 8000678:	af08      	add	r7, sp, #32
 800067a:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 800067e:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 8000682:	6020      	str	r0, [r4, #0]
 8000684:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8000688:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 800068c:	6001      	str	r1, [r0, #0]
 800068e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8000692:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8000696:	600a      	str	r2, [r1, #0]
 8000698:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800069c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80006a0:	6013      	str	r3, [r2, #0]
    mbedtls_gcm_context gcm;
    mbedtls_gcm_init(&gcm);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4618      	mov	r0, r3
 80006a8:	f008 f9bf 	bl	8008a2a <mbedtls_gcm_init>
    mbedtls_gcm_setkey(&gcm, MBEDTLS_CIPHER_ID_AES, key, KEY_SIZE * 8);
 80006ac:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80006b0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80006bc:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80006c0:	f107 0010 	add.w	r0, r7, #16
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	2102      	movs	r1, #2
 80006c8:	f008 fb37 	bl	8008d3a <mbedtls_gcm_setkey>
    int ret = mbedtls_gcm_crypt_and_tag(&gcm, MBEDTLS_GCM_ENCRYPT, input_len, iv, IV_SIZE,
 80006cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80006d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80006d4:	f107 0010 	add.w	r0, r7, #16
 80006d8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80006dc:	9206      	str	r2, [sp, #24]
 80006de:	2210      	movs	r2, #16
 80006e0:	9205      	str	r2, [sp, #20]
 80006e2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80006e6:	9204      	str	r2, [sp, #16]
 80006e8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 80006ec:	9203      	str	r2, [sp, #12]
 80006ee:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 80006f2:	9202      	str	r2, [sp, #8]
 80006f4:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80006f8:	9201      	str	r2, [sp, #4]
 80006fa:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80006fe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8000702:	6812      	ldr	r2, [r2, #0]
 8000704:	9200      	str	r2, [sp, #0]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800070c:	2101      	movs	r1, #1
 800070e:	f009 f885 	bl	800981c <mbedtls_gcm_crypt_and_tag>
 8000712:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
                              aad, aad_len, input, output, TAG_SIZE, tag);
    /*always make sure to free resources after finishing*/
    mbedtls_gcm_free(&gcm);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4618      	mov	r0, r3
 800071c:	f009 f8fd 	bl	800991a <mbedtls_gcm_free>
    return ret;
 8000720:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 8000724:	4618      	mov	r0, r3
 8000726:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800072a:	46bd      	mov	sp, r7
 800072c:	bd90      	pop	{r4, r7, pc}

0800072e <aes_gcm_decrypt>:
 * aad : addtive authentication data
 * tag : for data integurity check
 *  */
int aes_gcm_decrypt(unsigned char *key,size_t KEY_SIZE,unsigned char *iv,size_t IV_SIZE,unsigned char *input, size_t input_len,
		unsigned char *output,unsigned char *aad,size_t aad_len ,unsigned char *tag)
{
 800072e:	b590      	push	{r4, r7, lr}
 8000730:	b0ef      	sub	sp, #444	@ 0x1bc
 8000732:	af06      	add	r7, sp, #24
 8000734:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8000738:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 800073c:	6020      	str	r0, [r4, #0]
 800073e:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8000742:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 8000746:	6001      	str	r1, [r0, #0]
 8000748:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800074c:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8000750:	600a      	str	r2, [r1, #0]
 8000752:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8000756:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800075a:	6013      	str	r3, [r2, #0]
    mbedtls_gcm_context gcm;
    mbedtls_gcm_init(&gcm);
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	4618      	mov	r0, r3
 8000762:	f008 f962 	bl	8008a2a <mbedtls_gcm_init>
    mbedtls_gcm_setkey(&gcm, MBEDTLS_CIPHER_ID_AES, key, KEY_SIZE * 8);
 8000766:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800076a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8000776:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 800077a:	f107 0010 	add.w	r0, r7, #16
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	2102      	movs	r1, #2
 8000782:	f008 fada 	bl	8008d3a <mbedtls_gcm_setkey>
    int ret = mbedtls_gcm_auth_decrypt(&gcm, input_len, iv,IV_SIZE, aad, aad_len,
 8000786:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800078a:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800078e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8000792:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 8000796:	f107 0010 	add.w	r0, r7, #16
 800079a:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 800079e:	9105      	str	r1, [sp, #20]
 80007a0:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 80007a4:	9104      	str	r1, [sp, #16]
 80007a6:	2110      	movs	r1, #16
 80007a8:	9103      	str	r1, [sp, #12]
 80007aa:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 80007ae:	9102      	str	r1, [sp, #8]
 80007b0:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 80007b4:	9101      	str	r1, [sp, #4]
 80007b6:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 80007ba:	9100      	str	r1, [sp, #0]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 80007c4:	f009 f85d 	bl	8009882 <mbedtls_gcm_auth_decrypt>
 80007c8:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
                                    tag, TAG_SIZE, input, output);
    mbedtls_gcm_free(&gcm);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4618      	mov	r0, r3
 80007d2:	f009 f8a2 	bl	800991a <mbedtls_gcm_free>
    return ret;
 80007d6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 80007da:	4618      	mov	r0, r3
 80007dc:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd90      	pop	{r4, r7, pc}

080007e4 <generate_random>:
 *  personalized_text_len : length of personalized string
 *
 *
 * */

void generate_random(unsigned char *buffer, size_t length,unsigned char*personalized_text,size_t personalized_text_len) {
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 80007ea:	af02      	add	r7, sp, #8
 80007ec:	f507 7418 	add.w	r4, r7, #608	@ 0x260
 80007f0:	f5a4 7415 	sub.w	r4, r4, #596	@ 0x254
 80007f4:	6020      	str	r0, [r4, #0]
 80007f6:	f507 7018 	add.w	r0, r7, #608	@ 0x260
 80007fa:	f5a0 7016 	sub.w	r0, r0, #600	@ 0x258
 80007fe:	6001      	str	r1, [r0, #0]
 8000800:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8000804:	f5a1 7117 	sub.w	r1, r1, #604	@ 0x25c
 8000808:	600a      	str	r2, [r1, #0]
 800080a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800080e:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8000812:	6013      	str	r3, [r2, #0]
    mbedtls_entropy_context entropy;
    mbedtls_ctr_drbg_context ctr_drbg;
    /*intilization*/
    mbedtls_entropy_init(&entropy);
 8000814:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000818:	4618      	mov	r0, r3
 800081a:	f007 ff24 	bl	8008666 <mbedtls_entropy_init>
    mbedtls_ctr_drbg_init(&ctr_drbg);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4618      	mov	r0, r3
 8000824:	f007 fae2 	bl	8007dec <mbedtls_ctr_drbg_init>
    /*seed generation*/
    mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, personalized_text, personalized_text_len);
 8000828:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800082c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8000830:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000834:	f107 0010 	add.w	r0, r7, #16
 8000838:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800083c:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	460a      	mov	r2, r1
 8000848:	490f      	ldr	r1, [pc, #60]	@ (8000888 <generate_random+0xa4>)
 800084a:	f007 fb1e 	bl	8007e8a <mbedtls_ctr_drbg_seed>
   /*random data generation*/
    mbedtls_ctr_drbg_random(&ctr_drbg, buffer, length);
 800084e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000852:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 8000856:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800085a:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800085e:	f107 0010 	add.w	r0, r7, #16
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	f007 fee8 	bl	800863a <mbedtls_ctr_drbg_random>
    /*freeing resources after finishing*/
    mbedtls_ctr_drbg_free(&ctr_drbg);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4618      	mov	r0, r3
 8000870:	f007 fb21 	bl	8007eb6 <mbedtls_ctr_drbg_free>
    mbedtls_entropy_free(&entropy);
 8000874:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000878:	4618      	mov	r0, r3
 800087a:	f007 ff0f 	bl	800869c <mbedtls_entropy_free>
}
 800087e:	bf00      	nop
 8000880:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8000884:	46bd      	mov	sp, r7
 8000886:	bd90      	pop	{r4, r7, pc}
 8000888:	080088b3 	.word	0x080088b3

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8000892:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	  unsigned char plaintext[] = "This is a secret message";
 8000894:	4b5b      	ldr	r3, [pc, #364]	@ (8000a04 <main+0x178>)
 8000896:	f507 740d 	add.w	r4, r7, #564	@ 0x234
 800089a:	461d      	mov	r5, r3
 800089c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008a4:	c403      	stmia	r4!, {r0, r1}
 80008a6:	7022      	strb	r2, [r4, #0]
	    unsigned char ciphertext[128];
	    unsigned char decrypted[128];
	    unsigned char padded_plaintext[128];/*padded buffer for use with AES-CBC encryption*/
	    unsigned char Recieved_encrypted_data[128];
	    unsigned char Tag[TAG_SIZE];/*tag for AES-GCM encryption*/
	    size_t plaintext_len = strlen((char *)plaintext);
 80008a8:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fc93 	bl	80001d8 <strlen>
 80008b2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254

	    /*for testing purposes*/
	    unsigned char rand_key[16] = "0123456789123456";
 80008b6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80008ba:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008be:	4a52      	ldr	r2, [pc, #328]	@ (8000a08 <main+0x17c>)
 80008c0:	461c      	mov	r4, r3
 80008c2:	4613      	mov	r3, r2
 80008c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    unsigned char rand_iv[16] = "aasd1245anmios78";
 80008ca:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 80008ce:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80008d2:	4a4e      	ldr	r2, [pc, #312]	@ (8000a0c <main+0x180>)
 80008d4:	461c      	mov	r4, r3
 80008d6:	4613      	mov	r3, r2
 80008d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    generate_random(rand_key,16,pers,pers_len);
 80008de:	4b4c      	ldr	r3, [pc, #304]	@ (8000a10 <main+0x184>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f107 0014 	add.w	r0, r7, #20
 80008e6:	4a4b      	ldr	r2, [pc, #300]	@ (8000a14 <main+0x188>)
 80008e8:	2110      	movs	r1, #16
 80008ea:	f7ff ff7b 	bl	80007e4 <generate_random>
	    generate_random(rand_iv,16,pers,pers_len);
 80008ee:	4b48      	ldr	r3, [pc, #288]	@ (8000a10 <main+0x184>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	1d38      	adds	r0, r7, #4
 80008f4:	4a47      	ldr	r2, [pc, #284]	@ (8000a14 <main+0x188>)
 80008f6:	2110      	movs	r1, #16
 80008f8:	f7ff ff74 	bl	80007e4 <generate_random>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 fb5c 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f89a 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000904:	f000 f950 	bl	8000ba8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000908:	f000 f8f6 	bl	8000af8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800090c:	f000 f922 	bl	8000b54 <MX_USART1_UART_Init>
  MX_MBEDTLS_Init();
 8000910:	f002 ffe4 	bl	80038dc <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */
  aes_gcm_encrypt(GCM_key,AES_GCM_KEY_SIZE,GCM_iv,AES_GCM_IV_SIZE,plaintext,plaintext_len,ciphertext,aad,aad_len,Tag);
 8000914:	4b40      	ldr	r3, [pc, #256]	@ (8000a18 <main+0x18c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800091c:	9205      	str	r2, [sp, #20]
 800091e:	9304      	str	r3, [sp, #16]
 8000920:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <main+0x190>)
 8000922:	9303      	str	r3, [sp, #12]
 8000924:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8000928:	9302      	str	r3, [sp, #8]
 800092a:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	230c      	movs	r3, #12
 8000938:	4a39      	ldr	r2, [pc, #228]	@ (8000a20 <main+0x194>)
 800093a:	2120      	movs	r1, #32
 800093c:	4839      	ldr	r0, [pc, #228]	@ (8000a24 <main+0x198>)
 800093e:	f7ff fe99 	bl	8000674 <aes_gcm_encrypt>
  HAL_UART_Transmit(&huart1,ciphertext,plaintext_len,HAL_MAX_DELAY);
 8000942:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8000946:	b29a      	uxth	r2, r3
 8000948:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
 8000950:	4835      	ldr	r0, [pc, #212]	@ (8000a28 <main+0x19c>)
 8000952:	f002 f811 	bl	8002978 <HAL_UART_Transmit>
  /*uart here is for demonstration purpose , really any communication protcol will work*/
  aes_gcm_decrypt(GCM_key,AES_GCM_KEY_SIZE,GCM_iv,AES_GCM_IV_SIZE,ciphertext,plaintext_len,decrypted,aad,aad_len,Tag);
 8000956:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <main+0x18c>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800095e:	9205      	str	r2, [sp, #20]
 8000960:	9304      	str	r3, [sp, #16]
 8000962:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <main+0x190>)
 8000964:	9303      	str	r3, [sp, #12]
 8000966:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800096a:	9302      	str	r3, [sp, #8]
 800096c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	230c      	movs	r3, #12
 800097a:	4a29      	ldr	r2, [pc, #164]	@ (8000a20 <main+0x194>)
 800097c:	2120      	movs	r1, #32
 800097e:	4829      	ldr	r0, [pc, #164]	@ (8000a24 <main+0x198>)
 8000980:	f7ff fed5 	bl	800072e <aes_gcm_decrypt>


  size_t padded_len = ((plaintext_len + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE; // Pad to block size
 8000984:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8000988:	330f      	adds	r3, #15
 800098a:	f023 030f 	bic.w	r3, r3, #15
 800098e:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  padding_data_for_AES_CBC_encryption(plaintext,plaintext_len,padded_plaintext);
 8000992:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 8000996:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800099a:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff fd9a 	bl	80004d8 <padding_data_for_AES_CBC_encryption>
  AES_Encryption(key,iv,padded_len,padded_plaintext,ciphertext);
 80009a4:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80009a8:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	4613      	mov	r3, r2
 80009b0:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80009b4:	491d      	ldr	r1, [pc, #116]	@ (8000a2c <main+0x1a0>)
 80009b6:	481e      	ldr	r0, [pc, #120]	@ (8000a30 <main+0x1a4>)
 80009b8:	f7ff fda8 	bl	800050c <AES_Encryption>

  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS << 1, iv, AES_BLOCK_SIZE, HAL_MAX_DELAY);
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	2310      	movs	r3, #16
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <main+0x1a0>)
 80009c6:	2120      	movs	r1, #32
 80009c8:	481a      	ldr	r0, [pc, #104]	@ (8000a34 <main+0x1a8>)
 80009ca:	f000 ffd3 	bl	8001974 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS << 1, ciphertext, padded_len, HAL_MAX_DELAY);
 80009ce:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	f507 72da 	add.w	r2, r7, #436	@ 0x1b4
 80009d8:	f04f 31ff 	mov.w	r1, #4294967295
 80009dc:	9100      	str	r1, [sp, #0]
 80009de:	2120      	movs	r1, #32
 80009e0:	4814      	ldr	r0, [pc, #80]	@ (8000a34 <main+0x1a8>)
 80009e2:	f000 ffc7 	bl	8001974 <HAL_I2C_Master_Transmit>


  AES_Decryption(key,iv,padded_len,ciphertext,decrypted);
 80009e6:	f507 72da 	add.w	r2, r7, #436	@ 0x1b4
 80009ea:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80009ee:	9300      	str	r3, [sp, #0]
 80009f0:	4613      	mov	r3, r2
 80009f2:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80009f6:	490d      	ldr	r1, [pc, #52]	@ (8000a2c <main+0x1a0>)
 80009f8:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <main+0x1a4>)
 80009fa:	f7ff fde1 	bl	80005c0 <AES_Decryption>
*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009fe:	bf00      	nop
 8000a00:	e7fd      	b.n	80009fe <main+0x172>
 8000a02:	bf00      	nop
 8000a04:	0800db50 	.word	0x0800db50
 8000a08:	0800db6c 	.word	0x0800db6c
 8000a0c:	0800db7c 	.word	0x0800db7c
 8000a10:	20000004 	.word	0x20000004
 8000a14:	0800dd70 	.word	0x0800dd70
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	0800dd38 	.word	0x0800dd38
 8000a20:	0800dd64 	.word	0x0800dd64
 8000a24:	0800dd44 	.word	0x0800dd44
 8000a28:	200000e4 	.word	0x200000e4
 8000a2c:	0800dd28 	.word	0x0800dd28
 8000a30:	0800dd08 	.word	0x0800dd08
 8000a34:	20000090 	.word	0x20000090

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b094      	sub	sp, #80	@ 0x50
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0320 	add.w	r3, r7, #32
 8000a42:	2230      	movs	r2, #48	@ 0x30
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00c fe28 	bl	800d69c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b23      	ldr	r3, [pc, #140]	@ (8000af0 <SystemClock_Config+0xb8>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	4a22      	ldr	r2, [pc, #136]	@ (8000af0 <SystemClock_Config+0xb8>)
 8000a66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6c:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <SystemClock_Config+0xb8>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <SystemClock_Config+0xbc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a84:	4a1b      	ldr	r2, [pc, #108]	@ (8000af4 <SystemClock_Config+0xbc>)
 8000a86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <SystemClock_Config+0xbc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa0:	2310      	movs	r3, #16
 8000aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fabb 	bl	8002028 <HAL_RCC_OscConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000ab8:	f000 f89e 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abc:	230f      	movs	r3, #15
 8000abe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 fd1e 	bl	8002518 <HAL_RCC_ClockConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ae2:	f000 f889 	bl	8000bf8 <Error_Handler>
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	3750      	adds	r7, #80	@ 0x50
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40007000 	.word	0x40007000

08000af8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000afe:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <MX_I2C1_Init+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b04:	4a12      	ldr	r2, [pc, #72]	@ (8000b50 <MX_I2C1_Init+0x58>)
 8000b06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b16:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_I2C1_Init+0x50>)
 8000b36:	f000 fdd9 	bl	80016ec <HAL_I2C_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b40:	f000 f85a 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000090 	.word	0x20000090
 8000b4c:	40005400 	.word	0x40005400
 8000b50:	000186a0 	.word	0x000186a0

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_USART1_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	f001 fea4 	bl	80028d8 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f82f 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000e4 	.word	0x200000e4
 8000ba4:	40011000 	.word	0x40011000

08000ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_GPIO_Init+0x4c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	@ (8000bf4 <MX_GPIO_Init+0x4c>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_GPIO_Init+0x4c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	603b      	str	r3, [r7, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_GPIO_Init+0x4c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <MX_GPIO_Init+0x4c>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_GPIO_Init+0x4c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a19      	ldr	r2, [pc, #100]	@ (8000cd8 <HAL_I2C_MspInit+0x84>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d12b      	bne.n	8000cce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c92:	23c0      	movs	r3, #192	@ 0xc0
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca2:	2304      	movs	r3, #4
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	480c      	ldr	r0, [pc, #48]	@ (8000ce0 <HAL_I2C_MspInit+0x8c>)
 8000cae:	f000 fb99 	bl	80013e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_I2C_MspInit+0x88>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	@ 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	@ 0x28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <HAL_UART_MspInit+0x94>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d134      	bne.n	8000d70 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_UART_MspInit+0x98>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d7c <HAL_UART_MspInit+0x98>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_UART_MspInit+0x98>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_UART_MspInit+0x98>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <HAL_UART_MspInit+0x98>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_UART_MspInit+0x98>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d3e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d50:	2307      	movs	r3, #7
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4809      	ldr	r0, [pc, #36]	@ (8000d80 <HAL_UART_MspInit+0x9c>)
 8000d5c:	f000 fb42 	bl	80013e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	2025      	movs	r0, #37	@ 0x25
 8000d66:	f000 fa74 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6a:	2025      	movs	r0, #37	@ 0x25
 8000d6c:	f000 fa8d 	bl	800128a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40011000 	.word	0x40011000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 f93f 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <USART1_IRQHandler+0x10>)
 8000dea:	f001 fe51 	bl	8002a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000e4 	.word	0x200000e4

08000df8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	e00a      	b.n	8000e20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e0a:	f3af 8000 	nop.w
 8000e0e:	4601      	mov	r1, r0
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	1c5a      	adds	r2, r3, #1
 8000e14:	60ba      	str	r2, [r7, #8]
 8000e16:	b2ca      	uxtb	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	dbf0      	blt.n	8000e0a <_read+0x12>
  }

  return len;
 8000e28:	687b      	ldr	r3, [r7, #4]
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b086      	sub	sp, #24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	e009      	b.n	8000e58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	60ba      	str	r2, [r7, #8]
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	dbf1      	blt.n	8000e44 <_write+0x12>
  }
  return len;
 8000e60:	687b      	ldr	r3, [r7, #4]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_close>:

int _close(int file)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
 8000e8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e92:	605a      	str	r2, [r3, #4]
  return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_isatty>:

int _isatty(int file)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000edc:	4a14      	ldr	r2, [pc, #80]	@ (8000f30 <_sbrk+0x5c>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <_sbrk+0x60>)
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee8:	4b13      	ldr	r3, [pc, #76]	@ (8000f38 <_sbrk+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	@ (8000f38 <_sbrk+0x64>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <_sbrk+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef6:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <_sbrk+0x64>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d207      	bcs.n	8000f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f04:	f00c fc28 	bl	800d758 <__errno>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e009      	b.n	8000f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <_sbrk+0x64>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	4a05      	ldr	r2, [pc, #20]	@ (8000f38 <_sbrk+0x64>)
 8000f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f26:	68fb      	ldr	r3, [r7, #12]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20010000 	.word	0x20010000
 8000f34:	00000400 	.word	0x00000400
 8000f38:	2000012c 	.word	0x2000012c
 8000f3c:	20000280 	.word	0x20000280

08000f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <SystemInit+0x20>)
 8000f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f4a:	4a05      	ldr	r2, [pc, #20]	@ (8000f60 <SystemInit+0x20>)
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f68:	f7ff ffea 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	@ (8000fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f92:	f00c fbe7 	bl	800d764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fc79 	bl	800088c <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fa8:	08010c88 	.word	0x08010c88
  ldr r2, =_sbss
 8000fac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fb0:	20000280 	.word	0x20000280

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	@ (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	@ (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f92b 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fe0a 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f943 	bl	80012a6 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f000 f90b 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	@ (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000008 	.word	0x20000008
 8001054:	20000010 	.word	0x20000010
 8001058:	2000000c 	.word	0x2000000c

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000010 	.word	0x20000010
 8001080:	20000130 	.word	0x20000130

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000130 	.word	0x20000130

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	@ (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	@ (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff3e 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff31 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff feda 	bl	8001084 <HAL_GetTick>
 80012d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d008      	beq.n	80012f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e052      	b.n	8001396 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0216 	bic.w	r2, r2, #22
 80012fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800130e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	2b00      	cmp	r3, #0
 8001316:	d103      	bne.n	8001320 <HAL_DMA_Abort+0x62>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0208 	bic.w	r2, r2, #8
 800132e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001340:	e013      	b.n	800136a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001342:	f7ff fe9f 	bl	8001084 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b05      	cmp	r3, #5
 800134e:	d90c      	bls.n	800136a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2220      	movs	r2, #32
 8001354:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e015      	b.n	8001396 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1e4      	bne.n	8001342 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137c:	223f      	movs	r2, #63	@ 0x3f
 800137e:	409a      	lsls	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800139e:	b480      	push	{r7}
 80013a0:	b083      	sub	sp, #12
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d004      	beq.n	80013bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2280      	movs	r2, #128	@ 0x80
 80013b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e00c      	b.n	80013d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2205      	movs	r2, #5
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0201 	bic.w	r2, r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	@ 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e159      	b.n	80016b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8148 	bne.w	80016ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	2b02      	cmp	r3, #2
 8001434:	d130      	bne.n	8001498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d017      	beq.n	80014d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d123      	bne.n	8001528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	69b9      	ldr	r1, [r7, #24]
 8001524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0203 	and.w	r2, r3, #3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a2 	beq.w	80016ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b57      	ldr	r3, [pc, #348]	@ (80016cc <HAL_GPIO_Init+0x2e8>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a56      	ldr	r2, [pc, #344]	@ (80016cc <HAL_GPIO_Init+0x2e8>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b54      	ldr	r3, [pc, #336]	@ (80016cc <HAL_GPIO_Init+0x2e8>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001586:	4a52      	ldr	r2, [pc, #328]	@ (80016d0 <HAL_GPIO_Init+0x2ec>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a49      	ldr	r2, [pc, #292]	@ (80016d4 <HAL_GPIO_Init+0x2f0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d019      	beq.n	80015e6 <HAL_GPIO_Init+0x202>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a48      	ldr	r2, [pc, #288]	@ (80016d8 <HAL_GPIO_Init+0x2f4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d013      	beq.n	80015e2 <HAL_GPIO_Init+0x1fe>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a47      	ldr	r2, [pc, #284]	@ (80016dc <HAL_GPIO_Init+0x2f8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d00d      	beq.n	80015de <HAL_GPIO_Init+0x1fa>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a46      	ldr	r2, [pc, #280]	@ (80016e0 <HAL_GPIO_Init+0x2fc>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d007      	beq.n	80015da <HAL_GPIO_Init+0x1f6>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a45      	ldr	r2, [pc, #276]	@ (80016e4 <HAL_GPIO_Init+0x300>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d101      	bne.n	80015d6 <HAL_GPIO_Init+0x1f2>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e008      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015d6:	2307      	movs	r3, #7
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015da:	2303      	movs	r3, #3
 80015dc:	e004      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015de:	2302      	movs	r3, #2
 80015e0:	e002      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <HAL_GPIO_Init+0x204>
 80015e6:	2300      	movs	r3, #0
 80015e8:	69fa      	ldr	r2, [r7, #28]
 80015ea:	f002 0203 	and.w	r2, r2, #3
 80015ee:	0092      	lsls	r2, r2, #2
 80015f0:	4093      	lsls	r3, r2
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015f8:	4935      	ldr	r1, [pc, #212]	@ (80016d0 <HAL_GPIO_Init+0x2ec>)
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001606:	4b38      	ldr	r3, [pc, #224]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800162a:	4a2f      	ldr	r2, [pc, #188]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001630:	4b2d      	ldr	r3, [pc, #180]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001654:	4a24      	ldr	r2, [pc, #144]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800167e:	4a1a      	ldr	r2, [pc, #104]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001684:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016a8:	4a0f      	ldr	r2, [pc, #60]	@ (80016e8 <HAL_GPIO_Init+0x304>)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61fb      	str	r3, [r7, #28]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	f67f aea2 	bls.w	8001400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40013800 	.word	0x40013800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40013c00 	.word	0x40013c00

080016ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d101      	bne.n	80016fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e12b      	b.n	8001956 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d106      	bne.n	8001718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fa9e 	bl	8000c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800173e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800174e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001750:	f001 f89a 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 8001754:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	4a81      	ldr	r2, [pc, #516]	@ (8001960 <HAL_I2C_Init+0x274>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d807      	bhi.n	8001770 <HAL_I2C_Init+0x84>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4a80      	ldr	r2, [pc, #512]	@ (8001964 <HAL_I2C_Init+0x278>)
 8001764:	4293      	cmp	r3, r2
 8001766:	bf94      	ite	ls
 8001768:	2301      	movls	r3, #1
 800176a:	2300      	movhi	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	e006      	b.n	800177e <HAL_I2C_Init+0x92>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4a7d      	ldr	r2, [pc, #500]	@ (8001968 <HAL_I2C_Init+0x27c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	bf94      	ite	ls
 8001778:	2301      	movls	r3, #1
 800177a:	2300      	movhi	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0e7      	b.n	8001956 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4a78      	ldr	r2, [pc, #480]	@ (800196c <HAL_I2C_Init+0x280>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001960 <HAL_I2C_Init+0x274>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d802      	bhi.n	80017c0 <HAL_I2C_Init+0xd4>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	3301      	adds	r3, #1
 80017be:	e009      	b.n	80017d4 <HAL_I2C_Init+0xe8>
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	4a69      	ldr	r2, [pc, #420]	@ (8001970 <HAL_I2C_Init+0x284>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	099b      	lsrs	r3, r3, #6
 80017d2:	3301      	adds	r3, #1
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	430b      	orrs	r3, r1
 80017da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	495c      	ldr	r1, [pc, #368]	@ (8001960 <HAL_I2C_Init+0x274>)
 80017f0:	428b      	cmp	r3, r1
 80017f2:	d819      	bhi.n	8001828 <HAL_I2C_Init+0x13c>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e59      	subs	r1, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001802:	1c59      	adds	r1, r3, #1
 8001804:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001808:	400b      	ands	r3, r1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00a      	beq.n	8001824 <HAL_I2C_Init+0x138>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1e59      	subs	r1, r3, #1
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fbb1 f3f3 	udiv	r3, r1, r3
 800181c:	3301      	adds	r3, #1
 800181e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001822:	e051      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 8001824:	2304      	movs	r3, #4
 8001826:	e04f      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d111      	bne.n	8001854 <HAL_I2C_Init+0x168>
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1e58      	subs	r0, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6859      	ldr	r1, [r3, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	440b      	add	r3, r1
 800183e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001842:	3301      	adds	r3, #1
 8001844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf0c      	ite	eq
 800184c:	2301      	moveq	r3, #1
 800184e:	2300      	movne	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	e012      	b.n	800187a <HAL_I2C_Init+0x18e>
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1e58      	subs	r0, r3, #1
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6859      	ldr	r1, [r3, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	0099      	lsls	r1, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	fbb0 f3f3 	udiv	r3, r0, r3
 800186a:	3301      	adds	r3, #1
 800186c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Init+0x196>
 800187e:	2301      	movs	r3, #1
 8001880:	e022      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10e      	bne.n	80018a8 <HAL_I2C_Init+0x1bc>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1e58      	subs	r0, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	440b      	add	r3, r1
 8001898:	fbb0 f3f3 	udiv	r3, r0, r3
 800189c:	3301      	adds	r3, #1
 800189e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018a6:	e00f      	b.n	80018c8 <HAL_I2C_Init+0x1dc>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1e58      	subs	r0, r3, #1
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	0099      	lsls	r1, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	6809      	ldr	r1, [r1, #0]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69da      	ldr	r2, [r3, #28]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6911      	ldr	r1, [r2, #16]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68d2      	ldr	r2, [r2, #12]
 8001902:	4311      	orrs	r1, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	430b      	orrs	r3, r1
 800190a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	000186a0 	.word	0x000186a0
 8001964:	001e847f 	.word	0x001e847f
 8001968:	003d08ff 	.word	0x003d08ff
 800196c:	431bde83 	.word	0x431bde83
 8001970:	10624dd3 	.word	0x10624dd3

08001974 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	461a      	mov	r2, r3
 8001980:	460b      	mov	r3, r1
 8001982:	817b      	strh	r3, [r7, #10]
 8001984:	4613      	mov	r3, r2
 8001986:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff fb7c 	bl	8001084 <HAL_GetTick>
 800198c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b20      	cmp	r3, #32
 8001998:	f040 80e0 	bne.w	8001b5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	2319      	movs	r3, #25
 80019a2:	2201      	movs	r2, #1
 80019a4:	4970      	ldr	r1, [pc, #448]	@ (8001b68 <HAL_I2C_Master_Transmit+0x1f4>)
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f964 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	e0d3      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d101      	bne.n	80019c4 <HAL_I2C_Master_Transmit+0x50>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e0cc      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d007      	beq.n	80019ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2221      	movs	r2, #33	@ 0x21
 80019fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2210      	movs	r2, #16
 8001a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	893a      	ldrh	r2, [r7, #8]
 8001a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4a50      	ldr	r2, [pc, #320]	@ (8001b6c <HAL_I2C_Master_Transmit+0x1f8>)
 8001a2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a2c:	8979      	ldrh	r1, [r7, #10]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	6a3a      	ldr	r2, [r7, #32]
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f89c 	bl	8001b70 <I2C_MasterRequestWrite>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e08d      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a58:	e066      	b.n	8001b28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	6a39      	ldr	r1, [r7, #32]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fa22 	bl	8001ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00d      	beq.n	8001a86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d107      	bne.n	8001a82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06b      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d11b      	bne.n	8001afc <HAL_I2C_Master_Transmit+0x188>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d017      	beq.n	8001afc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad0:	781a      	ldrb	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001adc:	1c5a      	adds	r2, r3, #1
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	6a39      	ldr	r1, [r7, #32]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 fa19 	bl	8001f38 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00d      	beq.n	8001b28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d107      	bne.n	8001b24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e01a      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d194      	bne.n	8001a5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e000      	b.n	8001b5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b5c:	2302      	movs	r3, #2
  }
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	00100002 	.word	0x00100002
 8001b6c:	ffff0000 	.word	0xffff0000

08001b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af02      	add	r7, sp, #8
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d006      	beq.n	8001b9a <I2C_MasterRequestWrite+0x2a>
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d003      	beq.n	8001b9a <I2C_MasterRequestWrite+0x2a>
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b98:	d108      	bne.n	8001bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e00b      	b.n	8001bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb0:	2b12      	cmp	r3, #18
 8001bb2:	d107      	bne.n	8001bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f84f 	bl	8001c74 <I2C_WaitOnFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bea:	d103      	bne.n	8001bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e035      	b.n	8001c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001c00:	d108      	bne.n	8001c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c02:	897b      	ldrh	r3, [r7, #10]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	e01b      	b.n	8001c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c14:	897b      	ldrh	r3, [r7, #10]
 8001c16:	11db      	asrs	r3, r3, #7
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0306 	and.w	r3, r3, #6
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f063 030f 	orn	r3, r3, #15
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	490e      	ldr	r1, [pc, #56]	@ (8001c6c <I2C_MasterRequestWrite+0xfc>)
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f000 f898 	bl	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e010      	b.n	8001c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	4907      	ldr	r1, [pc, #28]	@ (8001c70 <I2C_MasterRequestWrite+0x100>)
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f000 f888 	bl	8001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	00010008 	.word	0x00010008
 8001c70:	00010002 	.word	0x00010002

08001c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	603b      	str	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c84:	e048      	b.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8c:	d044      	beq.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8e:	f7ff f9f9 	bl	8001084 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d302      	bcc.n	8001ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d139      	bne.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	0c1b      	lsrs	r3, r3, #16
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d10d      	bne.n	8001cca <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	e00c      	b.n	8001ce4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d116      	bne.n	8001d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f043 0220 	orr.w	r2, r3, #32
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e023      	b.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	0c1b      	lsrs	r3, r3, #16
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10d      	bne.n	8001d3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf0c      	ite	eq
 8001d34:	2301      	moveq	r3, #1
 8001d36:	2300      	movne	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	e00c      	b.n	8001d58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	43da      	mvns	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d093      	beq.n	8001c86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d76:	e071      	b.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d86:	d123      	bne.n	8001dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001da0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2220      	movs	r2, #32
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbc:	f043 0204 	orr.w	r2, r3, #4
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e067      	b.n	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd6:	d041      	beq.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd8:	f7ff f954 	bl	8001084 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d302      	bcc.n	8001dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d136      	bne.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	0c1b      	lsrs	r3, r3, #16
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10c      	bne.n	8001e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4013      	ands	r3, r2
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf14      	ite	ne
 8001e0a:	2301      	movne	r3, #1
 8001e0c:	2300      	moveq	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	e00b      	b.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	43da      	mvns	r2, r3
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d016      	beq.n	8001e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	f043 0220 	orr.w	r2, r3, #32
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e021      	b.n	8001ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	0c1b      	lsrs	r3, r3, #16
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d10c      	bne.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	43da      	mvns	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	4013      	ands	r3, r2
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf14      	ite	ne
 8001e78:	2301      	movne	r3, #1
 8001e7a:	2300      	moveq	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	e00b      	b.n	8001e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f af6d 	bne.w	8001d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eb4:	e034      	b.n	8001f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f000 f886 	bl	8001fc8 <I2C_IsAcknowledgeFailed>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e034      	b.n	8001f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ecc:	d028      	beq.n	8001f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ece:	f7ff f8d9 	bl	8001084 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d11d      	bne.n	8001f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b80      	cmp	r3, #128	@ 0x80
 8001ef0:	d016      	beq.n	8001f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e007      	b.n	8001f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	2b80      	cmp	r3, #128	@ 0x80
 8001f2c:	d1c3      	bne.n	8001eb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f44:	e034      	b.n	8001fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 f83e 	bl	8001fc8 <I2C_IsAcknowledgeFailed>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e034      	b.n	8001fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f5c:	d028      	beq.n	8001fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5e:	f7ff f891 	bl	8001084 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d302      	bcc.n	8001f74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11d      	bne.n	8001fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d016      	beq.n	8001fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9c:	f043 0220 	orr.w	r2, r3, #32
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e007      	b.n	8001fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d1c3      	bne.n	8001f46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fde:	d11b      	bne.n	8002018 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fe8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002004:	f043 0204 	orr.w	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e267      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002046:	4b88      	ldr	r3, [pc, #544]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00c      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4b85      	ldr	r3, [pc, #532]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800205a:	2b08      	cmp	r3, #8
 800205c:	d112      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b82      	ldr	r3, [pc, #520]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b7e      	ldr	r3, [pc, #504]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d157      	bne.n	8002130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e242      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b76      	ldr	r3, [pc, #472]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a75      	ldr	r2, [pc, #468]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b70      	ldr	r3, [pc, #448]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a6f      	ldr	r2, [pc, #444]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a6c      	ldr	r2, [pc, #432]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b69      	ldr	r3, [pc, #420]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a68      	ldr	r2, [pc, #416]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b66      	ldr	r3, [pc, #408]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a65      	ldr	r2, [pc, #404]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe ffd0 	bl	8001084 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7fe ffcc 	bl	8001084 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	@ 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e207      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7fe ffbc 	bl	8001084 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7fe ffb8 	bl	8001084 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	@ 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1f3      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b51      	ldr	r3, [pc, #324]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0xe8>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800213e:	4b4a      	ldr	r3, [pc, #296]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b47      	ldr	r3, [pc, #284]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b44      	ldr	r3, [pc, #272]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b41      	ldr	r3, [pc, #260]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b3b      	ldr	r3, [pc, #236]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4937      	ldr	r1, [pc, #220]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b34      	ldr	r3, [pc, #208]	@ (800226c <HAL_RCC_OscConfig+0x244>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7fe ff71 	bl	8001084 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a6:	f7fe ff6d 	bl	8001084 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e1a8      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b28      	ldr	r3, [pc, #160]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4925      	ldr	r1, [pc, #148]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b24      	ldr	r3, [pc, #144]	@ (800226c <HAL_RCC_OscConfig+0x244>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff50 	bl	8001084 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e8:	f7fe ff4c 	bl	8001084 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e187      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d036      	beq.n	8002280 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_RCC_OscConfig+0x248>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7fe ff30 	bl	8001084 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7fe ff2c 	bl	8001084 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e167      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_RCC_OscConfig+0x240>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <HAL_RCC_OscConfig+0x248>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7fe ff19 	bl	8001084 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	e00e      	b.n	8002274 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002256:	f7fe ff15 	bl	8001084 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d907      	bls.n	8002274 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e150      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002274:	4b88      	ldr	r3, [pc, #544]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ea      	bne.n	8002256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 8097 	beq.w	80023bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800228e:	2300      	movs	r3, #0
 8002290:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002292:	4b81      	ldr	r3, [pc, #516]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60bb      	str	r3, [r7, #8]
 80022a2:	4b7d      	ldr	r3, [pc, #500]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	4a7c      	ldr	r2, [pc, #496]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022be:	4b77      	ldr	r3, [pc, #476]	@ (800249c <HAL_RCC_OscConfig+0x474>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d118      	bne.n	80022fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ca:	4b74      	ldr	r3, [pc, #464]	@ (800249c <HAL_RCC_OscConfig+0x474>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a73      	ldr	r2, [pc, #460]	@ (800249c <HAL_RCC_OscConfig+0x474>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d6:	f7fe fed5 	bl	8001084 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7fe fed1 	bl	8001084 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e10c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f0:	4b6a      	ldr	r3, [pc, #424]	@ (800249c <HAL_RCC_OscConfig+0x474>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0f0      	beq.n	80022de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x2ea>
 8002304:	4b64      	ldr	r3, [pc, #400]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002308:	4a63      	ldr	r2, [pc, #396]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002310:	e01c      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	2b05      	cmp	r3, #5
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x30c>
 800231a:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231e:	4a5e      	ldr	r2, [pc, #376]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6713      	str	r3, [r2, #112]	@ 0x70
 8002326:	4b5c      	ldr	r3, [pc, #368]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232a:	4a5b      	ldr	r2, [pc, #364]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	6713      	str	r3, [r2, #112]	@ 0x70
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0x324>
 8002334:	4b58      	ldr	r3, [pc, #352]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002338:	4a57      	ldr	r2, [pc, #348]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 800233a:	f023 0301 	bic.w	r3, r3, #1
 800233e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002340:	4b55      	ldr	r3, [pc, #340]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002344:	4a54      	ldr	r2, [pc, #336]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d015      	beq.n	8002380 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7fe fe96 	bl	8001084 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe fe92 	bl	8001084 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e0cb      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002372:	4b49      	ldr	r3, [pc, #292]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0ee      	beq.n	800235c <HAL_RCC_OscConfig+0x334>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe fe80 	bl	8001084 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7fe fe7c 	bl	8001084 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e0b5      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800239e:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ee      	bne.n	8002388 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023aa:	7dfb      	ldrb	r3, [r7, #23]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b0:	4b39      	ldr	r3, [pc, #228]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	4a38      	ldr	r2, [pc, #224]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 80a1 	beq.w	8002508 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023c6:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d05c      	beq.n	800248c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d141      	bne.n	800245e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b31      	ldr	r3, [pc, #196]	@ (80024a0 <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fe50 	bl	8001084 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7fe fe4c 	bl	8001084 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e087      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69da      	ldr	r2, [r3, #28]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	019b      	lsls	r3, r3, #6
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	061b      	lsls	r3, r3, #24
 800242a:	491b      	ldr	r1, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b1b      	ldr	r3, [pc, #108]	@ (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002432:	2201      	movs	r2, #1
 8002434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe fe25 	bl	8001084 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	e008      	b.n	8002450 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243e:	f7fe fe21 	bl	8001084 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e05c      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	4b11      	ldr	r3, [pc, #68]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f0      	beq.n	800243e <HAL_RCC_OscConfig+0x416>
 800245c:	e054      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_RCC_OscConfig+0x478>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fe0e 	bl	8001084 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fe0a 	bl	8001084 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_OscConfig+0x470>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x444>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e038      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
 8002498:	40023800 	.word	0x40023800
 800249c:	40007000 	.word	0x40007000
 80024a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_RCC_OscConfig+0x4ec>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d028      	beq.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d121      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11a      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024dc:	4293      	cmp	r3, r2
 80024de:	d111      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	085b      	lsrs	r3, r3, #1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e0cc      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800252c:	4b68      	ldr	r3, [pc, #416]	@ (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d90c      	bls.n	8002554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b65      	ldr	r3, [pc, #404]	@ (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002542:	4b63      	ldr	r3, [pc, #396]	@ (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d001      	beq.n	8002554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0b8      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d020      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d005      	beq.n	8002578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800256c:	4b59      	ldr	r3, [pc, #356]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4a58      	ldr	r2, [pc, #352]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002576:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002584:	4b53      	ldr	r3, [pc, #332]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a52      	ldr	r2, [pc, #328]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800258e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002590:	4b50      	ldr	r3, [pc, #320]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	494d      	ldr	r1, [pc, #308]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d044      	beq.n	8002638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d119      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e07f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d107      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	4b3f      	ldr	r3, [pc, #252]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e06f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e6:	4b3b      	ldr	r3, [pc, #236]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e067      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f6:	4b37      	ldr	r3, [pc, #220]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0203 	bic.w	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4934      	ldr	r1, [pc, #208]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002608:	f7fe fd3c 	bl	8001084 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	e00a      	b.n	8002626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe fd38 	bl	8001084 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800261e:	4293      	cmp	r3, r2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e04f      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	4b2b      	ldr	r3, [pc, #172]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 020c 	and.w	r2, r3, #12
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	429a      	cmp	r2, r3
 8002636:	d1eb      	bne.n	8002610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002638:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d20c      	bcs.n	8002660 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b20      	ldr	r3, [pc, #128]	@ (80026d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e032      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800266c:	4b19      	ldr	r3, [pc, #100]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4916      	ldr	r1, [pc, #88]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268a:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	490e      	ldr	r1, [pc, #56]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269e:	f000 f821 	bl	80026e4 <HAL_RCC_GetSysClockFreq>
 80026a2:	4602      	mov	r2, r0
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	490a      	ldr	r1, [pc, #40]	@ (80026d8 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	5ccb      	ldrb	r3, [r1, r3]
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	4a09      	ldr	r2, [pc, #36]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026ba:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fc9c 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	0800dd7c 	.word	0x0800dd7c
 80026dc:	20000008 	.word	0x20000008
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e8:	b090      	sub	sp, #64	@ 0x40
 80026ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fc:	4b59      	ldr	r3, [pc, #356]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d00d      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x40>
 8002708:	2b08      	cmp	r3, #8
 800270a:	f200 80a1 	bhi.w	8002850 <HAL_RCC_GetSysClockFreq+0x16c>
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_RCC_GetSysClockFreq+0x34>
 8002712:	2b04      	cmp	r3, #4
 8002714:	d003      	beq.n	800271e <HAL_RCC_GetSysClockFreq+0x3a>
 8002716:	e09b      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002718:	4b53      	ldr	r3, [pc, #332]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x184>)
 800271a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800271c:	e09b      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271e:	4b53      	ldr	r3, [pc, #332]	@ (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 8002720:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002722:	e098      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002724:	4b4f      	ldr	r3, [pc, #316]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800272e:	4b4d      	ldr	r3, [pc, #308]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273a:	4b4a      	ldr	r3, [pc, #296]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	099b      	lsrs	r3, r3, #6
 8002740:	2200      	movs	r2, #0
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	627a      	str	r2, [r7, #36]	@ 0x24
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800274c:	2100      	movs	r1, #0
 800274e:	4b47      	ldr	r3, [pc, #284]	@ (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 8002750:	fb03 f201 	mul.w	r2, r3, r1
 8002754:	2300      	movs	r3, #0
 8002756:	fb00 f303 	mul.w	r3, r0, r3
 800275a:	4413      	add	r3, r2
 800275c:	4a43      	ldr	r2, [pc, #268]	@ (800286c <HAL_RCC_GetSysClockFreq+0x188>)
 800275e:	fba0 1202 	umull	r1, r2, r0, r2
 8002762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002764:	460a      	mov	r2, r1
 8002766:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800276a:	4413      	add	r3, r2
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800276e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002770:	2200      	movs	r2, #0
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	61fa      	str	r2, [r7, #28]
 8002776:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800277e:	f7fd fd33 	bl	80001e8 <__aeabi_uldivmod>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4613      	mov	r3, r2
 8002788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800278a:	e053      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800278c:	4b35      	ldr	r3, [pc, #212]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	2200      	movs	r2, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	617a      	str	r2, [r7, #20]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800279e:	f04f 0b00 	mov.w	fp, #0
 80027a2:	4652      	mov	r2, sl
 80027a4:	465b      	mov	r3, fp
 80027a6:	f04f 0000 	mov.w	r0, #0
 80027aa:	f04f 0100 	mov.w	r1, #0
 80027ae:	0159      	lsls	r1, r3, #5
 80027b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b4:	0150      	lsls	r0, r2, #5
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	ebb2 080a 	subs.w	r8, r2, sl
 80027be:	eb63 090b 	sbc.w	r9, r3, fp
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027d6:	ebb2 0408 	subs.w	r4, r2, r8
 80027da:	eb63 0509 	sbc.w	r5, r3, r9
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	00eb      	lsls	r3, r5, #3
 80027e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ec:	00e2      	lsls	r2, r4, #3
 80027ee:	4614      	mov	r4, r2
 80027f0:	461d      	mov	r5, r3
 80027f2:	eb14 030a 	adds.w	r3, r4, sl
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	eb45 030b 	adc.w	r3, r5, fp
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280a:	4629      	mov	r1, r5
 800280c:	028b      	lsls	r3, r1, #10
 800280e:	4621      	mov	r1, r4
 8002810:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002814:	4621      	mov	r1, r4
 8002816:	028a      	lsls	r2, r1, #10
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281e:	2200      	movs	r2, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	60fa      	str	r2, [r7, #12]
 8002824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002828:	f7fd fcde 	bl	80001e8 <__aeabi_uldivmod>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4613      	mov	r3, r2
 8002832:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x180>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0c1b      	lsrs	r3, r3, #16
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002844:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x184>)
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002858:	4618      	mov	r0, r3
 800285a:	3740      	adds	r7, #64	@ 0x40
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800
 8002868:	00f42400 	.word	0x00f42400
 800286c:	017d7840 	.word	0x017d7840

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002874:	4b03      	ldr	r3, [pc, #12]	@ (8002884 <HAL_RCC_GetHCLKFreq+0x14>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	20000008 	.word	0x20000008

08002888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800288c:	f7ff fff0 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	@ (80028ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	0800dd8c 	.word	0x0800dd8c

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b4:	f7ff ffdc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b05      	ldr	r3, [pc, #20]	@ (80028d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0b5b      	lsrs	r3, r3, #13
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4903      	ldr	r1, [pc, #12]	@ (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	0800dd8c 	.word	0x0800dd8c

080028d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e042      	b.n	8002970 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7fe f9f0 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	@ 0x24
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800291a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 fd69 	bl	80033f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	@ 0x28
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	4613      	mov	r3, r2
 8002986:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b20      	cmp	r3, #32
 8002996:	d175      	bne.n	8002a84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <HAL_UART_Transmit+0x2c>
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e06e      	b.n	8002a86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2221      	movs	r2, #33	@ 0x21
 80029b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b6:	f7fe fb65 	bl	8001084 <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d0:	d108      	bne.n	80029e4 <HAL_UART_Transmit+0x6c>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	e003      	b.n	80029ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029ec:	e02e      	b.n	8002a4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	@ 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 fb05 	bl	8003008 <UART_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e03a      	b.n	8002a86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10b      	bne.n	8002a2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	3302      	adds	r3, #2
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	e007      	b.n	8002a3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1cb      	bne.n	80029ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2140      	movs	r1, #64	@ 0x40
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fad1 	bl	8003008 <UART_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e006      	b.n	8002a86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3720      	adds	r7, #32
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0ba      	sub	sp, #232	@ 0xe8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_UART_IRQHandler+0x66>
 8002ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fbc2 	bl	8003278 <UART_Receive_IT>
      return;
 8002af4:	e25b      	b.n	8002fae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80de 	beq.w	8002cbc <HAL_UART_IRQHandler+0x22c>
 8002b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d106      	bne.n	8002b1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b10:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80d1 	beq.w	8002cbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_UART_IRQHandler+0xae>
 8002b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b36:	f043 0201 	orr.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_UART_IRQHandler+0xd2>
 8002b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f043 0202 	orr.w	r2, r3, #2
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00b      	beq.n	8002b86 <HAL_UART_IRQHandler+0xf6>
 8002b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f043 0204 	orr.w	r2, r3, #4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d011      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x126>
 8002b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bae:	f043 0208 	orr.w	r2, r3, #8
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 81f2 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_UART_IRQHandler+0x14e>
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fb4d 	bl	8003278 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	695b      	ldr	r3, [r3, #20]
 8002be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be8:	2b40      	cmp	r3, #64	@ 0x40
 8002bea:	bf0c      	ite	eq
 8002bec:	2301      	moveq	r3, #1
 8002bee:	2300      	movne	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d103      	bne.n	8002c0a <HAL_UART_IRQHandler+0x17a>
 8002c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d04f      	beq.n	8002caa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa55 	bl	80030ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1a:	2b40      	cmp	r3, #64	@ 0x40
 8002c1c:	d141      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	3314      	adds	r3, #20
 8002c24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c2c:	e853 3f00 	ldrex	r3, [r3]
 8002c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3314      	adds	r3, #20
 8002c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1d9      	bne.n	8002c1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d013      	beq.n	8002c9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c76:	4a7e      	ldr	r2, [pc, #504]	@ (8002e70 <HAL_UART_IRQHandler+0x3e0>)
 8002c78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fb8d 	bl	800139e <HAL_DMA_Abort_IT>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c94:	4610      	mov	r0, r2
 8002c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c98:	e00e      	b.n	8002cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f99e 	bl	8002fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca0:	e00a      	b.n	8002cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f99a 	bl	8002fdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	e006      	b.n	8002cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f996 	bl	8002fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002cb6:	e175      	b.n	8002fa4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb8:	bf00      	nop
    return;
 8002cba:	e173      	b.n	8002fa4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 814f 	bne.w	8002f64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f000 8148 	beq.w	8002f64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8141 	beq.w	8002f64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d02:	2b40      	cmp	r3, #64	@ 0x40
 8002d04:	f040 80b6 	bne.w	8002e74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 8145 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d26:	429a      	cmp	r2, r3
 8002d28:	f080 813e 	bcs.w	8002fa8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d3e:	f000 8088 	beq.w	8002e52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d50:	e853 3f00 	ldrex	r3, [r3]
 8002d54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	330c      	adds	r3, #12
 8002d6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1d9      	bne.n	8002d42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3314      	adds	r3, #20
 8002dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002db2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002db6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002dba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dbe:	e841 2300 	strex	r3, r2, [r1]
 8002dc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002dc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1e1      	bne.n	8002d8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	3314      	adds	r3, #20
 8002dd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd4:	e853 3f00 	ldrex	r3, [r3]
 8002dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002dda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ddc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002de0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3314      	adds	r3, #20
 8002dea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002dee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002df0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002df4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002df6:	e841 2300 	strex	r3, r2, [r1]
 8002dfa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e3      	bne.n	8002dca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e1a:	e853 3f00 	ldrex	r3, [r3]
 8002e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e22:	f023 0310 	bic.w	r3, r3, #16
 8002e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	330c      	adds	r3, #12
 8002e30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e3      	bne.n	8002e10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fa36 	bl	80012be <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f8c1 	bl	8002ff0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e6e:	e09b      	b.n	8002fa8 <HAL_UART_IRQHandler+0x518>
 8002e70:	08003181 	.word	0x08003181
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 808e 	beq.w	8002fac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8089 	beq.w	8002fac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	330c      	adds	r3, #12
 8002ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002ebe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ec0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ec4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e3      	bne.n	8002e9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3314      	adds	r3, #20
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	e853 3f00 	ldrex	r3, [r3]
 8002ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ef6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002efe:	e841 2300 	strex	r3, r2, [r1]
 8002f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e3      	bne.n	8002ed2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	e853 3f00 	ldrex	r3, [r3]
 8002f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0310 	bic.w	r3, r3, #16
 8002f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f3c:	61fa      	str	r2, [r7, #28]
 8002f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	617b      	str	r3, [r7, #20]
   return(result);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1e3      	bne.n	8002f18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f847 	bl	8002ff0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f62:	e023      	b.n	8002fac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_UART_IRQHandler+0x4f4>
 8002f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f913 	bl	80031a8 <UART_Transmit_IT>
    return;
 8002f82:	e014      	b.n	8002fae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00e      	beq.n	8002fae <HAL_UART_IRQHandler+0x51e>
 8002f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f953 	bl	8003248 <UART_EndTransmit_IT>
    return;
 8002fa2:	e004      	b.n	8002fae <HAL_UART_IRQHandler+0x51e>
    return;
 8002fa4:	bf00      	nop
 8002fa6:	e002      	b.n	8002fae <HAL_UART_IRQHandler+0x51e>
      return;
 8002fa8:	bf00      	nop
 8002faa:	e000      	b.n	8002fae <HAL_UART_IRQHandler+0x51e>
      return;
 8002fac:	bf00      	nop
  }
}
 8002fae:	37e8      	adds	r7, #232	@ 0xe8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003018:	e03b      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d037      	beq.n	8003092 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe f82f 	bl	8001084 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	6a3a      	ldr	r2, [r7, #32]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <UART_WaitOnFlagUntilTimeout+0x30>
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e03a      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d023      	beq.n	8003092 <UART_WaitOnFlagUntilTimeout+0x8a>
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b80      	cmp	r3, #128	@ 0x80
 800304e:	d020      	beq.n	8003092 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b40      	cmp	r3, #64	@ 0x40
 8003054:	d01d      	beq.n	8003092 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b08      	cmp	r3, #8
 8003062:	d116      	bne.n	8003092 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f81d 	bl	80030ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2208      	movs	r2, #8
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e00f      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4013      	ands	r3, r2
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	bf0c      	ite	eq
 80030a2:	2301      	moveq	r3, #1
 80030a4:	2300      	movne	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d0b4      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b095      	sub	sp, #84	@ 0x54
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	330c      	adds	r3, #12
 80030c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	e853 3f00 	ldrex	r3, [r3]
 80030d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	330c      	adds	r3, #12
 80030e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80030e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030ea:	e841 2300 	strex	r3, r2, [r1]
 80030ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1e5      	bne.n	80030c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	61fb      	str	r3, [r7, #28]
   return(result);
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3314      	adds	r3, #20
 8003114:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003118:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800311e:	e841 2300 	strex	r3, r2, [r1]
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e5      	bne.n	80030f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	2b01      	cmp	r3, #1
 8003130:	d119      	bne.n	8003166 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	330c      	adds	r3, #12
 8003138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	60bb      	str	r3, [r7, #8]
   return(result);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f023 0310 	bic.w	r3, r3, #16
 8003148:	647b      	str	r3, [r7, #68]	@ 0x44
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	330c      	adds	r3, #12
 8003150:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003152:	61ba      	str	r2, [r7, #24]
 8003154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	613b      	str	r3, [r7, #16]
   return(result);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e5      	bne.n	8003132 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003174:	bf00      	nop
 8003176:	3754      	adds	r7, #84	@ 0x54
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7ff ff1e 	bl	8002fdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b21      	cmp	r3, #33	@ 0x21
 80031ba:	d13e      	bne.n	800323a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031c4:	d114      	bne.n	80031f0 <UART_Transmit_IT+0x48>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d110      	bne.n	80031f0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	1c9a      	adds	r2, r3, #2
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	621a      	str	r2, [r3, #32]
 80031ee:	e008      	b.n	8003202 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	1c59      	adds	r1, r3, #1
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6211      	str	r1, [r2, #32]
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29b      	uxth	r3, r3
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4619      	mov	r1, r3
 8003210:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10f      	bne.n	8003236 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003224:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003234:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	e000      	b.n	800323c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800323a:	2302      	movs	r3, #2
  }
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800325e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff fea3 	bl	8002fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08c      	sub	sp, #48	@ 0x30
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b22      	cmp	r3, #34	@ 0x22
 800328a:	f040 80ae 	bne.w	80033ea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003296:	d117      	bne.n	80032c8 <UART_Receive_IT+0x50>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d113      	bne.n	80032c8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032a0:	2300      	movs	r3, #0
 80032a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	1c9a      	adds	r2, r3, #2
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80032c6:	e026      	b.n	8003316 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032da:	d007      	beq.n	80032ec <UART_Receive_IT+0x74>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <UART_Receive_IT+0x82>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d106      	bne.n	80032fa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f6:	701a      	strb	r2, [r3, #0]
 80032f8:	e008      	b.n	800330c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003306:	b2da      	uxtb	r2, r3
 8003308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800330a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29b      	uxth	r3, r3
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	4619      	mov	r1, r3
 8003324:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003326:	2b00      	cmp	r3, #0
 8003328:	d15d      	bne.n	80033e6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0220 	bic.w	r2, r2, #32
 8003338:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336c:	2b01      	cmp	r3, #1
 800336e:	d135      	bne.n	80033dc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	613b      	str	r3, [r7, #16]
   return(result);
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	f023 0310 	bic.w	r3, r3, #16
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	330c      	adds	r3, #12
 8003394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003396:	623a      	str	r2, [r7, #32]
 8003398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339a:	69f9      	ldr	r1, [r7, #28]
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	e841 2300 	strex	r3, r2, [r1]
 80033a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1e5      	bne.n	8003376 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	2b10      	cmp	r3, #16
 80033b6:	d10a      	bne.n	80033ce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033d2:	4619      	mov	r1, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff fe0b 	bl	8002ff0 <HAL_UARTEx_RxEventCallback>
 80033da:	e002      	b.n	80033e2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fdf3 	bl	8002fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e002      	b.n	80033ec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3730      	adds	r7, #48	@ 0x30
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f8:	b0c0      	sub	sp, #256	@ 0x100
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003410:	68d9      	ldr	r1, [r3, #12]
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	ea40 0301 	orr.w	r3, r0, r1
 800341c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800341e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	431a      	orrs	r2, r3
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	431a      	orrs	r2, r3
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800344c:	f021 010c 	bic.w	r1, r1, #12
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800345a:	430b      	orrs	r3, r1
 800345c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346e:	6999      	ldr	r1, [r3, #24]
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	ea40 0301 	orr.w	r3, r0, r1
 800347a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b8f      	ldr	r3, [pc, #572]	@ (80036c0 <UART_SetConfig+0x2cc>)
 8003484:	429a      	cmp	r2, r3
 8003486:	d005      	beq.n	8003494 <UART_SetConfig+0xa0>
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4b8d      	ldr	r3, [pc, #564]	@ (80036c4 <UART_SetConfig+0x2d0>)
 8003490:	429a      	cmp	r2, r3
 8003492:	d104      	bne.n	800349e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003494:	f7ff fa0c 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
 8003498:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800349c:	e003      	b.n	80034a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800349e:	f7ff f9f3 	bl	8002888 <HAL_RCC_GetPCLK1Freq>
 80034a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034b0:	f040 810c 	bne.w	80036cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034b8:	2200      	movs	r2, #0
 80034ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034c6:	4622      	mov	r2, r4
 80034c8:	462b      	mov	r3, r5
 80034ca:	1891      	adds	r1, r2, r2
 80034cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034ce:	415b      	adcs	r3, r3
 80034d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034d6:	4621      	mov	r1, r4
 80034d8:	eb12 0801 	adds.w	r8, r2, r1
 80034dc:	4629      	mov	r1, r5
 80034de:	eb43 0901 	adc.w	r9, r3, r1
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034f6:	4690      	mov	r8, r2
 80034f8:	4699      	mov	r9, r3
 80034fa:	4623      	mov	r3, r4
 80034fc:	eb18 0303 	adds.w	r3, r8, r3
 8003500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003504:	462b      	mov	r3, r5
 8003506:	eb49 0303 	adc.w	r3, r9, r3
 800350a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800351a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800351e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003522:	460b      	mov	r3, r1
 8003524:	18db      	adds	r3, r3, r3
 8003526:	653b      	str	r3, [r7, #80]	@ 0x50
 8003528:	4613      	mov	r3, r2
 800352a:	eb42 0303 	adc.w	r3, r2, r3
 800352e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003538:	f7fc fe56 	bl	80001e8 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4b61      	ldr	r3, [pc, #388]	@ (80036c8 <UART_SetConfig+0x2d4>)
 8003542:	fba3 2302 	umull	r2, r3, r3, r2
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	011c      	lsls	r4, r3, #4
 800354a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800354e:	2200      	movs	r2, #0
 8003550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003554:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	1891      	adds	r1, r2, r2
 8003562:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003564:	415b      	adcs	r3, r3
 8003566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800356c:	4641      	mov	r1, r8
 800356e:	eb12 0a01 	adds.w	sl, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb43 0b01 	adc.w	fp, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800358c:	4692      	mov	sl, r2
 800358e:	469b      	mov	fp, r3
 8003590:	4643      	mov	r3, r8
 8003592:	eb1a 0303 	adds.w	r3, sl, r3
 8003596:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800359a:	464b      	mov	r3, r9
 800359c:	eb4b 0303 	adc.w	r3, fp, r3
 80035a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035b8:	460b      	mov	r3, r1
 80035ba:	18db      	adds	r3, r3, r3
 80035bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80035be:	4613      	mov	r3, r2
 80035c0:	eb42 0303 	adc.w	r3, r2, r3
 80035c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80035c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035ce:	f7fc fe0b 	bl	80001e8 <__aeabi_uldivmod>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	4b3b      	ldr	r3, [pc, #236]	@ (80036c8 <UART_SetConfig+0x2d4>)
 80035da:	fba3 2301 	umull	r2, r3, r3, r1
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	2264      	movs	r2, #100	@ 0x64
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	1acb      	subs	r3, r1, r3
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035ee:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <UART_SetConfig+0x2d4>)
 80035f0:	fba3 2302 	umull	r2, r3, r3, r2
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035fc:	441c      	add	r4, r3
 80035fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003608:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800360c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	1891      	adds	r1, r2, r2
 8003616:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003618:	415b      	adcs	r3, r3
 800361a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800361c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003620:	4641      	mov	r1, r8
 8003622:	1851      	adds	r1, r2, r1
 8003624:	6339      	str	r1, [r7, #48]	@ 0x30
 8003626:	4649      	mov	r1, r9
 8003628:	414b      	adcs	r3, r1
 800362a:	637b      	str	r3, [r7, #52]	@ 0x34
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003638:	4659      	mov	r1, fp
 800363a:	00cb      	lsls	r3, r1, #3
 800363c:	4651      	mov	r1, sl
 800363e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003642:	4651      	mov	r1, sl
 8003644:	00ca      	lsls	r2, r1, #3
 8003646:	4610      	mov	r0, r2
 8003648:	4619      	mov	r1, r3
 800364a:	4603      	mov	r3, r0
 800364c:	4642      	mov	r2, r8
 800364e:	189b      	adds	r3, r3, r2
 8003650:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003654:	464b      	mov	r3, r9
 8003656:	460a      	mov	r2, r1
 8003658:	eb42 0303 	adc.w	r3, r2, r3
 800365c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800366c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003674:	460b      	mov	r3, r1
 8003676:	18db      	adds	r3, r3, r3
 8003678:	62bb      	str	r3, [r7, #40]	@ 0x28
 800367a:	4613      	mov	r3, r2
 800367c:	eb42 0303 	adc.w	r3, r2, r3
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800368a:	f7fc fdad 	bl	80001e8 <__aeabi_uldivmod>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <UART_SetConfig+0x2d4>)
 8003694:	fba3 1302 	umull	r1, r3, r3, r2
 8003698:	095b      	lsrs	r3, r3, #5
 800369a:	2164      	movs	r1, #100	@ 0x64
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	3332      	adds	r3, #50	@ 0x32
 80036a6:	4a08      	ldr	r2, [pc, #32]	@ (80036c8 <UART_SetConfig+0x2d4>)
 80036a8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ac:	095b      	lsrs	r3, r3, #5
 80036ae:	f003 0207 	and.w	r2, r3, #7
 80036b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4422      	add	r2, r4
 80036ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036bc:	e106      	b.n	80038cc <UART_SetConfig+0x4d8>
 80036be:	bf00      	nop
 80036c0:	40011000 	.word	0x40011000
 80036c4:	40011400 	.word	0x40011400
 80036c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036de:	4642      	mov	r2, r8
 80036e0:	464b      	mov	r3, r9
 80036e2:	1891      	adds	r1, r2, r2
 80036e4:	6239      	str	r1, [r7, #32]
 80036e6:	415b      	adcs	r3, r3
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036ee:	4641      	mov	r1, r8
 80036f0:	1854      	adds	r4, r2, r1
 80036f2:	4649      	mov	r1, r9
 80036f4:	eb43 0501 	adc.w	r5, r3, r1
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	00eb      	lsls	r3, r5, #3
 8003702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003706:	00e2      	lsls	r2, r4, #3
 8003708:	4614      	mov	r4, r2
 800370a:	461d      	mov	r5, r3
 800370c:	4643      	mov	r3, r8
 800370e:	18e3      	adds	r3, r4, r3
 8003710:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003714:	464b      	mov	r3, r9
 8003716:	eb45 0303 	adc.w	r3, r5, r3
 800371a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800372a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	f04f 0300 	mov.w	r3, #0
 8003736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800373a:	4629      	mov	r1, r5
 800373c:	008b      	lsls	r3, r1, #2
 800373e:	4621      	mov	r1, r4
 8003740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003744:	4621      	mov	r1, r4
 8003746:	008a      	lsls	r2, r1, #2
 8003748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800374c:	f7fc fd4c 	bl	80001e8 <__aeabi_uldivmod>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4b60      	ldr	r3, [pc, #384]	@ (80038d8 <UART_SetConfig+0x4e4>)
 8003756:	fba3 2302 	umull	r2, r3, r3, r2
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	011c      	lsls	r4, r3, #4
 800375e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003768:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800376c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003770:	4642      	mov	r2, r8
 8003772:	464b      	mov	r3, r9
 8003774:	1891      	adds	r1, r2, r2
 8003776:	61b9      	str	r1, [r7, #24]
 8003778:	415b      	adcs	r3, r3
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003780:	4641      	mov	r1, r8
 8003782:	1851      	adds	r1, r2, r1
 8003784:	6139      	str	r1, [r7, #16]
 8003786:	4649      	mov	r1, r9
 8003788:	414b      	adcs	r3, r1
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003798:	4659      	mov	r1, fp
 800379a:	00cb      	lsls	r3, r1, #3
 800379c:	4651      	mov	r1, sl
 800379e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a2:	4651      	mov	r1, sl
 80037a4:	00ca      	lsls	r2, r1, #3
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	4603      	mov	r3, r0
 80037ac:	4642      	mov	r2, r8
 80037ae:	189b      	adds	r3, r3, r2
 80037b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037b4:	464b      	mov	r3, r9
 80037b6:	460a      	mov	r2, r1
 80037b8:	eb42 0303 	adc.w	r3, r2, r3
 80037bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037d8:	4649      	mov	r1, r9
 80037da:	008b      	lsls	r3, r1, #2
 80037dc:	4641      	mov	r1, r8
 80037de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037e2:	4641      	mov	r1, r8
 80037e4:	008a      	lsls	r2, r1, #2
 80037e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037ea:	f7fc fcfd 	bl	80001e8 <__aeabi_uldivmod>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4611      	mov	r1, r2
 80037f4:	4b38      	ldr	r3, [pc, #224]	@ (80038d8 <UART_SetConfig+0x4e4>)
 80037f6:	fba3 2301 	umull	r2, r3, r3, r1
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2264      	movs	r2, #100	@ 0x64
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	1acb      	subs	r3, r1, r3
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	3332      	adds	r3, #50	@ 0x32
 8003808:	4a33      	ldr	r2, [pc, #204]	@ (80038d8 <UART_SetConfig+0x4e4>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003814:	441c      	add	r4, r3
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800381a:	2200      	movs	r2, #0
 800381c:	673b      	str	r3, [r7, #112]	@ 0x70
 800381e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003820:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	1891      	adds	r1, r2, r2
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	415b      	adcs	r3, r3
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003834:	4641      	mov	r1, r8
 8003836:	1851      	adds	r1, r2, r1
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	4649      	mov	r1, r9
 800383c:	414b      	adcs	r3, r1
 800383e:	607b      	str	r3, [r7, #4]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800384c:	4659      	mov	r1, fp
 800384e:	00cb      	lsls	r3, r1, #3
 8003850:	4651      	mov	r1, sl
 8003852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003856:	4651      	mov	r1, sl
 8003858:	00ca      	lsls	r2, r1, #3
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	4603      	mov	r3, r0
 8003860:	4642      	mov	r2, r8
 8003862:	189b      	adds	r3, r3, r2
 8003864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003866:	464b      	mov	r3, r9
 8003868:	460a      	mov	r2, r1
 800386a:	eb42 0303 	adc.w	r3, r2, r3
 800386e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	663b      	str	r3, [r7, #96]	@ 0x60
 800387a:	667a      	str	r2, [r7, #100]	@ 0x64
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003888:	4649      	mov	r1, r9
 800388a:	008b      	lsls	r3, r1, #2
 800388c:	4641      	mov	r1, r8
 800388e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003892:	4641      	mov	r1, r8
 8003894:	008a      	lsls	r2, r1, #2
 8003896:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800389a:	f7fc fca5 	bl	80001e8 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4b0d      	ldr	r3, [pc, #52]	@ (80038d8 <UART_SetConfig+0x4e4>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2164      	movs	r1, #100	@ 0x64
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	3332      	adds	r3, #50	@ 0x32
 80038b6:	4a08      	ldr	r2, [pc, #32]	@ (80038d8 <UART_SetConfig+0x4e4>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4422      	add	r2, r4
 80038ca:	609a      	str	r2, [r3, #8]
}
 80038cc:	bf00      	nop
 80038ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038d2:	46bd      	mov	sp, r7
 80038d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038d8:	51eb851f 	.word	0x51eb851f

080038dc <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80038e0:	bf00      	nop
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b082      	sub	sp, #8
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 80038f2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80038f6:	2100      	movs	r1, #0
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f009 fecf 	bl	800d69c <memset>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8003914:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f006 f813 	bl	8009944 <mbedtls_platform_zeroize>
 800391e:	e000      	b.n	8003922 <mbedtls_aes_free+0x1c>
        return;
 8003920:	bf00      	nop
}
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init( mbedtls_aes_xts_context *ctx )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    mbedtls_aes_init( &ctx->crypt );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ffd9 	bl	80038ea <mbedtls_aes_init>
    mbedtls_aes_init( &ctx->tweak );
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ffd3 	bl	80038ea <mbedtls_aes_init>
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free( mbedtls_aes_xts_context *ctx )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <mbedtls_aes_xts_free+0x24>
        return;

    mbedtls_aes_free( &ctx->crypt );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4618      	mov	r0, r3
 800395e:	f7ff ffd2 	bl	8003906 <mbedtls_aes_free>
    mbedtls_aes_free( &ctx->tweak );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff ffcc 	bl	8003906 <mbedtls_aes_free>
 800396e:	e000      	b.n	8003972 <mbedtls_aes_xts_free+0x26>
        return;
 8003970:	bf00      	nop
}
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398a:	d012      	beq.n	80039b2 <mbedtls_aes_setkey_enc+0x3a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003992:	d812      	bhi.n	80039ba <mbedtls_aes_setkey_enc+0x42>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b80      	cmp	r3, #128	@ 0x80
 8003998:	d003      	beq.n	80039a2 <mbedtls_aes_setkey_enc+0x2a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2bc0      	cmp	r3, #192	@ 0xc0
 800399e:	d004      	beq.n	80039aa <mbedtls_aes_setkey_enc+0x32>
 80039a0:	e00b      	b.n	80039ba <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	220a      	movs	r2, #10
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	e00a      	b.n	80039c0 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	220c      	movs	r2, #12
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e006      	b.n	80039c0 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	220e      	movs	r2, #14
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e002      	b.n	80039c0 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80039ba:	f06f 031f 	mvn.w	r3, #31
 80039be:	e1a7      	b.n	8003d10 <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	3308      	adds	r3, #8
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	e027      	b.n	8003a22 <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	4619      	mov	r1, r3
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	3301      	adds	r3, #1
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	4413      	add	r3, r2
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	021b      	lsls	r3, r3, #8
 80039ec:	ea41 0203 	orr.w	r2, r1, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	3302      	adds	r3, #2
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	440b      	add	r3, r1
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	041b      	lsls	r3, r3, #16
 80039fe:	ea42 0103 	orr.w	r1, r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	3303      	adds	r3, #3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	061a      	lsls	r2, r3, #24
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	6938      	ldr	r0, [r7, #16]
 8003a16:	4403      	add	r3, r0
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d3d2      	bcc.n	80039d2 <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b0e      	cmp	r3, #14
 8003a32:	f000 80ca 	beq.w	8003bca <mbedtls_aes_setkey_enc+0x252>
 8003a36:	2b0e      	cmp	r3, #14
 8003a38:	f300 8169 	bgt.w	8003d0e <mbedtls_aes_setkey_enc+0x396>
 8003a3c:	2b0a      	cmp	r3, #10
 8003a3e:	d002      	beq.n	8003a46 <mbedtls_aes_setkey_enc+0xce>
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	d057      	beq.n	8003af4 <mbedtls_aes_setkey_enc+0x17c>
 8003a44:	e163      	b.n	8003d0e <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e04f      	b.n	8003aec <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	495f      	ldr	r1, [pc, #380]	@ (8003bd0 <mbedtls_aes_setkey_enc+0x258>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a58:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	320c      	adds	r2, #12
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	0a12      	lsrs	r2, r2, #8
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	495b      	ldr	r1, [pc, #364]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003a66:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8003a68:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4957      	ldr	r1, [pc, #348]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8003a7a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	0e1b      	lsrs	r3, r3, #24
 8003a84:	4953      	ldr	r1, [pc, #332]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8003a8a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	330c      	adds	r3, #12
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4a4f      	ldr	r2, [pc, #316]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003a98:	5cd3      	ldrb	r3, [r2, r3]
 8003a9a:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003aa0:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8003aa2:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3310      	adds	r3, #16
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	3314      	adds	r3, #20
 8003ab4:	404a      	eors	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	3308      	adds	r3, #8
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	3314      	adds	r3, #20
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	3318      	adds	r3, #24
 8003ac8:	404a      	eors	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	330c      	adds	r3, #12
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	331c      	adds	r3, #28
 8003adc:	404a      	eors	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	3310      	adds	r3, #16
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b09      	cmp	r3, #9
 8003af0:	d9ac      	bls.n	8003a4c <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 8003af2:	e10c      	b.n	8003d0e <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e063      	b.n	8003bc2 <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	4934      	ldr	r1, [pc, #208]	@ (8003bd0 <mbedtls_aes_setkey_enc+0x258>)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b06:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	3214      	adds	r2, #20
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	0a12      	lsrs	r2, r2, #8
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	4930      	ldr	r1, [pc, #192]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003b14:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8003b16:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3314      	adds	r3, #20
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	492c      	ldr	r1, [pc, #176]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003b28:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	3314      	adds	r3, #20
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	0e1b      	lsrs	r3, r3, #24
 8003b32:	4928      	ldr	r1, [pc, #160]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003b34:	5ccb      	ldrb	r3, [r1, r3]
 8003b36:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003b38:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3314      	adds	r3, #20
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	4a23      	ldr	r2, [pc, #140]	@ (8003bd4 <mbedtls_aes_setkey_enc+0x25c>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003b4e:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8003b50:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	3304      	adds	r3, #4
 8003b56:	6819      	ldr	r1, [r3, #0]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	3318      	adds	r3, #24
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	331c      	adds	r3, #28
 8003b62:	404a      	eors	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	6819      	ldr	r1, [r3, #0]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	331c      	adds	r3, #28
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	3320      	adds	r3, #32
 8003b76:	404a      	eors	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	330c      	adds	r3, #12
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	3320      	adds	r3, #32
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	3324      	adds	r3, #36	@ 0x24
 8003b8a:	404a      	eors	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	3310      	adds	r3, #16
 8003b92:	6819      	ldr	r1, [r3, #0]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	3324      	adds	r3, #36	@ 0x24
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3328      	adds	r3, #40	@ 0x28
 8003b9e:	404a      	eors	r2, r1
 8003ba0:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	3314      	adds	r3, #20
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	3328      	adds	r3, #40	@ 0x28
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	332c      	adds	r3, #44	@ 0x2c
 8003bb2:	404a      	eors	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	3318      	adds	r3, #24
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b07      	cmp	r3, #7
 8003bc6:	d998      	bls.n	8003afa <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 8003bc8:	e0a1      	b.n	8003d0e <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e099      	b.n	8003d04 <mbedtls_aes_setkey_enc+0x38c>
 8003bd0:	0800ff94 	.word	0x0800ff94
 8003bd4:	0800dd94 	.word	0x0800dd94
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	494f      	ldr	r1, [pc, #316]	@ (8003d1c <mbedtls_aes_setkey_enc+0x3a4>)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003be4:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	321c      	adds	r2, #28
 8003bea:	6812      	ldr	r2, [r2, #0]
 8003bec:	0a12      	lsrs	r2, r2, #8
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	494b      	ldr	r1, [pc, #300]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003bf2:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8003bf4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	331c      	adds	r3, #28
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	0c1b      	lsrs	r3, r3, #16
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4947      	ldr	r1, [pc, #284]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003c02:	5ccb      	ldrb	r3, [r1, r3]
 8003c04:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003c06:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	331c      	adds	r3, #28
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	0e1b      	lsrs	r3, r3, #24
 8003c10:	4943      	ldr	r1, [pc, #268]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003c16:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	331c      	adds	r3, #28
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	4a3f      	ldr	r2, [pc, #252]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003c24:	5cd3      	ldrb	r3, [r2, r3]
 8003c26:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003c2c:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8003c2e:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	3304      	adds	r3, #4
 8003c34:	6819      	ldr	r1, [r3, #0]
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	3320      	adds	r3, #32
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	3324      	adds	r3, #36	@ 0x24
 8003c40:	404a      	eors	r2, r1
 8003c42:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	3308      	adds	r3, #8
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	3324      	adds	r3, #36	@ 0x24
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	3328      	adds	r3, #40	@ 0x28
 8003c54:	404a      	eors	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	330c      	adds	r3, #12
 8003c5c:	6819      	ldr	r1, [r3, #0]
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	3328      	adds	r3, #40	@ 0x28
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	332c      	adds	r3, #44	@ 0x2c
 8003c68:	404a      	eors	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	3310      	adds	r3, #16
 8003c70:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	322c      	adds	r2, #44	@ 0x2c
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	4929      	ldr	r1, [pc, #164]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003c7c:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 8003c7e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	332c      	adds	r3, #44	@ 0x2c
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	4925      	ldr	r1, [pc, #148]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8003c90:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	332c      	adds	r3, #44	@ 0x2c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	0c1b      	lsrs	r3, r3, #16
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	4920      	ldr	r1, [pc, #128]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8003ca2:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	332c      	adds	r3, #44	@ 0x2c
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	0e1b      	lsrs	r3, r3, #24
 8003cae:	4a1c      	ldr	r2, [pc, #112]	@ (8003d20 <mbedtls_aes_setkey_enc+0x3a8>)
 8003cb0:	5cd3      	ldrb	r3, [r2, r3]
 8003cb2:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003cb8:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8003cba:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	3314      	adds	r3, #20
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	3330      	adds	r3, #48	@ 0x30
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	3334      	adds	r3, #52	@ 0x34
 8003ccc:	404a      	eors	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3334      	adds	r3, #52	@ 0x34
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	3338      	adds	r3, #56	@ 0x38
 8003ce0:	404a      	eors	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	331c      	adds	r3, #28
 8003ce8:	6819      	ldr	r1, [r3, #0]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	3338      	adds	r3, #56	@ 0x38
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	333c      	adds	r3, #60	@ 0x3c
 8003cf4:	404a      	eors	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	3320      	adds	r3, #32
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	f67f af66 	bls.w	8003bd8 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 8003d0c:	bf00      	nop
    }

    return( 0 );
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	0800ff94 	.word	0x0800ff94
 8003d20:	0800dd94 	.word	0x0800dd94

08003d24 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b0d0      	sub	sp, #320	@ 0x140
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d32:	6018      	str	r0, [r3, #0]
 8003d34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d3c:	6019      	str	r1, [r3, #0]
 8003d3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003d46:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fdcc 	bl	80038ea <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8003d52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d56:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003d62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d66:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003d70:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8003d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d76:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8003d7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003d7e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003d82:	f107 0014 	add.w	r0, r7, #20
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	f7ff fdf5 	bl	8003978 <mbedtls_aes_setkey_enc>
 8003d8e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8003d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f040 80dd 	bne.w	8003f56 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 8003d9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003da0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003daa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8003db2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003db6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003dc0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	4413      	add	r3, r2
 8003dca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 8003dce:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003dd2:	1d13      	adds	r3, r2, #4
 8003dd4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003dd8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ddc:	1d19      	adds	r1, r3, #4
 8003dde:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003de6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003dea:	1d13      	adds	r3, r2, #4
 8003dec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003df0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003df4:	1d19      	adds	r1, r3, #4
 8003df6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003dfe:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003e02:	1d13      	adds	r3, r2, #4
 8003e04:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003e08:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e0c:	1d19      	adds	r1, r3, #4
 8003e0e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003e16:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003e1a:	1d13      	adds	r3, r2, #4
 8003e1c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003e20:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003e2a:	6812      	ldr	r2, [r2, #0]
 8003e2c:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8003e2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003e32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003e40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e44:	3b20      	subs	r3, #32
 8003e46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003e4a:	e04f      	b.n	8003eec <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003e52:	e03d      	b.n	8003ed0 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003e54:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4a44      	ldr	r2, [pc, #272]	@ (8003f70 <mbedtls_aes_setkey_dec+0x24c>)
 8003e5e:	5cd3      	ldrb	r3, [r2, r3]
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b44      	ldr	r3, [pc, #272]	@ (8003f74 <mbedtls_aes_setkey_dec+0x250>)
 8003e64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003e68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	493f      	ldr	r1, [pc, #252]	@ (8003f70 <mbedtls_aes_setkey_dec+0x24c>)
 8003e74:	5ccb      	ldrb	r3, [r1, r3]
 8003e76:	4619      	mov	r1, r3
 8003e78:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <mbedtls_aes_setkey_dec+0x254>)
 8003e7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003e7e:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003e80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	4939      	ldr	r1, [pc, #228]	@ (8003f70 <mbedtls_aes_setkey_dec+0x24c>)
 8003e8c:	5ccb      	ldrb	r3, [r1, r3]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4b3a      	ldr	r3, [pc, #232]	@ (8003f7c <mbedtls_aes_setkey_dec+0x258>)
 8003e92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003e96:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 8003e9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	0e1b      	lsrs	r3, r3, #24
 8003ea2:	4a33      	ldr	r2, [pc, #204]	@ (8003f70 <mbedtls_aes_setkey_dec+0x24c>)
 8003ea4:	5cd3      	ldrb	r3, [r2, r3]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <mbedtls_aes_setkey_dec+0x25c>)
 8003eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003eb2:	1d18      	adds	r0, r3, #4
 8003eb4:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003eb8:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003eba:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8003ebc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003ec6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003eca:	3304      	adds	r3, #4
 8003ecc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003ed0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003ed4:	2b03      	cmp	r3, #3
 8003ed6:	ddbd      	ble.n	8003e54 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8003ed8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003edc:	3b01      	subs	r3, #1
 8003ede:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003ee2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003ee6:	3b20      	subs	r3, #32
 8003ee8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003eec:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	dcab      	bgt.n	8003e4c <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8003ef4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003ef8:	1d13      	adds	r3, r2, #4
 8003efa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003efe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f02:	1d19      	adds	r1, r3, #4
 8003f04:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003f0c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003f10:	1d13      	adds	r3, r2, #4
 8003f12:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f1a:	1d19      	adds	r1, r3, #4
 8003f1c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003f20:	6812      	ldr	r2, [r2, #0]
 8003f22:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003f24:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003f28:	1d13      	adds	r3, r2, #4
 8003f2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003f2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f32:	1d19      	adds	r1, r3, #4
 8003f34:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003f3c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003f40:	1d13      	adds	r3, r2, #4
 8003f42:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003f46:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003f4a:	1d19      	adds	r1, r3, #4
 8003f4c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003f50:	6812      	ldr	r2, [r2, #0]
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e000      	b.n	8003f58 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 8003f56:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fcd2 	bl	8003906 <mbedtls_aes_free>

    return( ret );
 8003f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	0800dd94 	.word	0x0800dd94
 8003f74:	0800ef94 	.word	0x0800ef94
 8003f78:	0800f394 	.word	0x0800f394
 8003f7c:	0800f794 	.word	0x0800f794
 8003f80:	0800fb94 	.word	0x0800fb94

08003f84 <mbedtls_aes_xts_decode_keys>:
                                        unsigned int keybits,
                                        const unsigned char **key1,
                                        unsigned int *key1bits,
                                        const unsigned char **key2,
                                        unsigned int *key2bits )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	085b      	lsrs	r3, r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	08db      	lsrs	r3, r3, #3
 8003f9c:	613b      	str	r3, [r7, #16]

    switch( keybits )
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fa4:	d006      	beq.n	8003fb4 <mbedtls_aes_xts_decode_keys+0x30>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fac:	d004      	beq.n	8003fb8 <mbedtls_aes_xts_decode_keys+0x34>
    {
        case 256: break;
        case 512: break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8003fae:	f06f 031f 	mvn.w	r3, #31
 8003fb2:	e011      	b.n	8003fd8 <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 8003fb4:	bf00      	nop
 8003fb6:	e000      	b.n	8003fba <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 8003fb8:	bf00      	nop
    }

    *key1bits = half_keybits;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	601a      	str	r2, [r3, #0]

    return 0;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	@ 0x30
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 8003ff0:	f107 0118 	add.w	r1, r7, #24
 8003ff4:	f107 0220 	add.w	r2, r7, #32
 8003ff8:	f107 0314 	add.w	r3, r7, #20
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	f107 031c 	add.w	r3, r7, #28
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	460b      	mov	r3, r1
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	68b8      	ldr	r0, [r7, #8]
 800400a:	f7ff ffbb 	bl	8003f84 <mbedtls_aes_xts_decode_keys>
 800400e:	6278      	str	r0, [r7, #36]	@ 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 8004010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <mbedtls_aes_xts_setkey_enc+0x36>
        return( ret );
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004018:	e014      	b.n	8004044 <mbedtls_aes_xts_setkey_enc+0x60>

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004020:	69f9      	ldr	r1, [r7, #28]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff fca7 	bl	8003978 <mbedtls_aes_setkey_enc>
 800402a:	6278      	str	r0, [r7, #36]	@ 0x24
    if( ret != 0 )
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <mbedtls_aes_xts_setkey_enc+0x52>
        return( ret );
 8004032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004034:	e006      	b.n	8004044 <mbedtls_aes_xts_setkey_enc+0x60>

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a39      	ldr	r1, [r7, #32]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fc9b 	bl	8003978 <mbedtls_aes_setkey_enc>
 8004042:	4603      	mov	r3, r0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3728      	adds	r7, #40	@ 0x28
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	@ 0x30
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 8004058:	f107 0118 	add.w	r1, r7, #24
 800405c:	f107 0220 	add.w	r2, r7, #32
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	f107 031c 	add.w	r3, r7, #28
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	68b8      	ldr	r0, [r7, #8]
 8004072:	f7ff ff87 	bl	8003f84 <mbedtls_aes_xts_decode_keys>
 8004076:	6278      	str	r0, [r7, #36]	@ 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <mbedtls_aes_xts_setkey_dec+0x36>
        return( ret );
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	e014      	b.n	80040ac <mbedtls_aes_xts_setkey_dec+0x60>

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004088:	69f9      	ldr	r1, [r7, #28]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fc73 	bl	8003978 <mbedtls_aes_setkey_enc>
 8004092:	6278      	str	r0, [r7, #36]	@ 0x24
    if( ret != 0 )
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <mbedtls_aes_xts_setkey_dec+0x52>
        return( ret );
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	e006      	b.n	80040ac <mbedtls_aes_xts_setkey_dec+0x60>

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec( &ctx->crypt, key1, key1bits );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a39      	ldr	r1, [r7, #32]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fe3d 	bl	8003d24 <mbedtls_aes_setkey_dec>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3728      	adds	r7, #40	@ 0x28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b08f      	sub	sp, #60	@ 0x3c
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3301      	adds	r3, #1
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3302      	adds	r3, #2
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	431a      	orrs	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	3303      	adds	r3, #3
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	4313      	orrs	r3, r2
 80040ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ee:	1d1a      	adds	r2, r3, #4
 80040f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f6:	4053      	eors	r3, r2
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3304      	adds	r3, #4
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3305      	adds	r3, #5
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	431a      	orrs	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3306      	adds	r3, #6
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	041b      	lsls	r3, r3, #16
 8004114:	431a      	orrs	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	3307      	adds	r3, #7
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	4313      	orrs	r3, r2
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004124:	1d1a      	adds	r2, r3, #4
 8004126:	633a      	str	r2, [r7, #48]	@ 0x30
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800412c:	4053      	eors	r3, r2
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	3308      	adds	r3, #8
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	3309      	adds	r3, #9
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	431a      	orrs	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	330a      	adds	r3, #10
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	330b      	adds	r3, #11
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	061b      	lsls	r3, r3, #24
 8004154:	4313      	orrs	r3, r2
 8004156:	627b      	str	r3, [r7, #36]	@ 0x24
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	1d1a      	adds	r2, r3, #4
 800415c:	633a      	str	r2, [r7, #48]	@ 0x30
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004162:	4053      	eors	r3, r2
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	330c      	adds	r3, #12
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	330d      	adds	r3, #13
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	431a      	orrs	r2, r3
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	330e      	adds	r3, #14
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	431a      	orrs	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	330f      	adds	r3, #15
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	061b      	lsls	r3, r3, #24
 800418a:	4313      	orrs	r3, r2
 800418c:	623b      	str	r3, [r7, #32]
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	1d1a      	adds	r2, r3, #4
 8004192:	633a      	str	r2, [r7, #48]	@ 0x30
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	4053      	eors	r3, r2
 800419a:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	105b      	asrs	r3, r3, #1
 80041a2:	3b01      	subs	r3, #1
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80041a6:	e0fa      	b.n	800439e <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80041a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041aa:	1d1a      	adds	r2, r3, #4
 80041ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	49ab      	ldr	r1, [pc, #684]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 80041b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041ba:	405a      	eors	r2, r3
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	49a9      	ldr	r1, [pc, #676]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 80041c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041c8:	405a      	eors	r2, r3
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	49a6      	ldr	r1, [pc, #664]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 80041d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041d6:	405a      	eors	r2, r3
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	0e1b      	lsrs	r3, r3, #24
 80041dc:	49a4      	ldr	r1, [pc, #656]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 80041de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041e2:	4053      	eors	r3, r2
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	1d1a      	adds	r2, r3, #4
 80041ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	499c      	ldr	r1, [pc, #624]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 80041f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041f8:	405a      	eors	r2, r3
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4999      	ldr	r1, [pc, #612]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004202:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004206:	405a      	eors	r2, r3
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	b2db      	uxtb	r3, r3
 800420e:	4997      	ldr	r1, [pc, #604]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 8004210:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004214:	405a      	eors	r2, r3
 8004216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004218:	0e1b      	lsrs	r3, r3, #24
 800421a:	4995      	ldr	r1, [pc, #596]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 800421c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004220:	4053      	eors	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	633a      	str	r2, [r7, #48]	@ 0x30
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	b2db      	uxtb	r3, r3
 8004230:	498c      	ldr	r1, [pc, #560]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 8004232:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004236:	405a      	eors	r2, r3
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	b2db      	uxtb	r3, r3
 800423e:	498a      	ldr	r1, [pc, #552]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004240:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004244:	405a      	eors	r2, r3
 8004246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4987      	ldr	r1, [pc, #540]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 800424e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004252:	405a      	eors	r2, r3
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	0e1b      	lsrs	r3, r3, #24
 8004258:	4985      	ldr	r1, [pc, #532]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 800425a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800425e:	4053      	eors	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004264:	1d1a      	adds	r2, r3, #4
 8004266:	633a      	str	r2, [r7, #48]	@ 0x30
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	497d      	ldr	r1, [pc, #500]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 8004270:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004274:	405a      	eors	r2, r3
 8004276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004278:	0a1b      	lsrs	r3, r3, #8
 800427a:	b2db      	uxtb	r3, r3
 800427c:	497a      	ldr	r1, [pc, #488]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 800427e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004282:	405a      	eors	r2, r3
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4978      	ldr	r1, [pc, #480]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 800428c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004290:	405a      	eors	r2, r3
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	0e1b      	lsrs	r3, r3, #24
 8004296:	4976      	ldr	r1, [pc, #472]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800429c:	4053      	eors	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	1d1a      	adds	r2, r3, #4
 80042a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	496d      	ldr	r1, [pc, #436]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 80042ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042b2:	405a      	eors	r2, r3
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	0a1b      	lsrs	r3, r3, #8
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	496b      	ldr	r1, [pc, #428]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 80042bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042c0:	405a      	eors	r2, r3
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	4968      	ldr	r1, [pc, #416]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 80042ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042ce:	405a      	eors	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	0e1b      	lsrs	r3, r3, #24
 80042d4:	4966      	ldr	r1, [pc, #408]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 80042d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042da:	4053      	eors	r3, r2
 80042dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	1d1a      	adds	r2, r3, #4
 80042e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	495e      	ldr	r1, [pc, #376]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 80042ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042f0:	405a      	eors	r2, r3
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	0a1b      	lsrs	r3, r3, #8
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	495b      	ldr	r1, [pc, #364]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 80042fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042fe:	405a      	eors	r2, r3
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	0c1b      	lsrs	r3, r3, #16
 8004304:	b2db      	uxtb	r3, r3
 8004306:	4959      	ldr	r1, [pc, #356]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 8004308:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800430c:	405a      	eors	r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	0e1b      	lsrs	r3, r3, #24
 8004312:	4957      	ldr	r1, [pc, #348]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004318:	4053      	eors	r3, r2
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	633a      	str	r2, [r7, #48]	@ 0x30
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	494e      	ldr	r1, [pc, #312]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 800432a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800432e:	405a      	eors	r2, r3
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	0a1b      	lsrs	r3, r3, #8
 8004334:	b2db      	uxtb	r3, r3
 8004336:	494c      	ldr	r1, [pc, #304]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800433c:	405a      	eors	r2, r3
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	0c1b      	lsrs	r3, r3, #16
 8004342:	b2db      	uxtb	r3, r3
 8004344:	4949      	ldr	r1, [pc, #292]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 8004346:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800434a:	405a      	eors	r2, r3
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	0e1b      	lsrs	r3, r3, #24
 8004350:	4947      	ldr	r1, [pc, #284]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004356:	4053      	eors	r3, r2
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
 800435a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800435c:	1d1a      	adds	r2, r3, #4
 800435e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	493f      	ldr	r1, [pc, #252]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 8004368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800436c:	405a      	eors	r2, r3
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	b2db      	uxtb	r3, r3
 8004374:	493c      	ldr	r1, [pc, #240]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004376:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800437a:	405a      	eors	r2, r3
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	0c1b      	lsrs	r3, r3, #16
 8004380:	b2db      	uxtb	r3, r3
 8004382:	493a      	ldr	r1, [pc, #232]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 8004384:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004388:	405a      	eors	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	0e1b      	lsrs	r3, r3, #24
 800438e:	4938      	ldr	r1, [pc, #224]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004390:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004394:	4053      	eors	r3, r2
 8004396:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439a:	3b01      	subs	r3, #1
 800439c:	637b      	str	r3, [r7, #52]	@ 0x34
 800439e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f73f af01 	bgt.w	80041a8 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	492c      	ldr	r1, [pc, #176]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 80043b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043b8:	405a      	eors	r2, r3
 80043ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043bc:	0a1b      	lsrs	r3, r3, #8
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	4929      	ldr	r1, [pc, #164]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 80043c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043c6:	405a      	eors	r2, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	4927      	ldr	r1, [pc, #156]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 80043d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043d4:	405a      	eors	r2, r3
 80043d6:	6a3b      	ldr	r3, [r7, #32]
 80043d8:	0e1b      	lsrs	r3, r3, #24
 80043da:	4925      	ldr	r1, [pc, #148]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 80043dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043e0:	4053      	eors	r3, r2
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	491c      	ldr	r1, [pc, #112]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 80043f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80043f6:	405a      	eors	r2, r3
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	491a      	ldr	r1, [pc, #104]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 8004400:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004404:	405a      	eors	r2, r3
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	b2db      	uxtb	r3, r3
 800440c:	4917      	ldr	r1, [pc, #92]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 800440e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004412:	405a      	eors	r2, r3
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	0e1b      	lsrs	r3, r3, #24
 8004418:	4915      	ldr	r1, [pc, #84]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 800441a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800441e:	4053      	eors	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	1d1a      	adds	r2, r3, #4
 8004426:	633a      	str	r2, [r7, #48]	@ 0x30
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	b2db      	uxtb	r3, r3
 800442e:	490d      	ldr	r1, [pc, #52]	@ (8004464 <mbedtls_internal_aes_encrypt+0x3b0>)
 8004430:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004434:	405a      	eors	r2, r3
 8004436:	6a3b      	ldr	r3, [r7, #32]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	b2db      	uxtb	r3, r3
 800443c:	490a      	ldr	r1, [pc, #40]	@ (8004468 <mbedtls_internal_aes_encrypt+0x3b4>)
 800443e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004442:	405a      	eors	r2, r3
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	b2db      	uxtb	r3, r3
 800444a:	4908      	ldr	r1, [pc, #32]	@ (800446c <mbedtls_internal_aes_encrypt+0x3b8>)
 800444c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004450:	405a      	eors	r2, r3
 8004452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	4906      	ldr	r1, [pc, #24]	@ (8004470 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004458:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800445c:	4053      	eors	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	e007      	b.n	8004474 <mbedtls_internal_aes_encrypt+0x3c0>
 8004464:	0800de94 	.word	0x0800de94
 8004468:	0800e294 	.word	0x0800e294
 800446c:	0800e694 	.word	0x0800e694
 8004470:	0800ea94 	.word	0x0800ea94
 8004474:	1d1a      	adds	r2, r3, #4
 8004476:	633a      	str	r2, [r7, #48]	@ 0x30
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	4979      	ldr	r1, [pc, #484]	@ (8004664 <mbedtls_internal_aes_encrypt+0x5b0>)
 8004480:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004484:	405a      	eors	r2, r3
 8004486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4976      	ldr	r1, [pc, #472]	@ (8004668 <mbedtls_internal_aes_encrypt+0x5b4>)
 800448e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004492:	405a      	eors	r2, r3
 8004494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4974      	ldr	r1, [pc, #464]	@ (800466c <mbedtls_internal_aes_encrypt+0x5b8>)
 800449c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044a0:	405a      	eors	r2, r3
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	0e1b      	lsrs	r3, r3, #24
 80044a6:	4972      	ldr	r1, [pc, #456]	@ (8004670 <mbedtls_internal_aes_encrypt+0x5bc>)
 80044a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80044ac:	4053      	eors	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80044b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b2:	1d1a      	adds	r2, r3, #4
 80044b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80044b6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	496d      	ldr	r1, [pc, #436]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 80044be:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80044c0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	0a1b      	lsrs	r3, r3, #8
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	496a      	ldr	r1, [pc, #424]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80044ce:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	0c1b      	lsrs	r3, r3, #16
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	4967      	ldr	r1, [pc, #412]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80044dc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	0e1b      	lsrs	r3, r3, #24
 80044e2:	4964      	ldr	r1, [pc, #400]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 80044e4:	5ccb      	ldrb	r3, [r1, r3]
 80044e6:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 80044e8:	4053      	eors	r3, r2
 80044ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	1d1a      	adds	r2, r3, #4
 80044f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80044f2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	495e      	ldr	r1, [pc, #376]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 80044fa:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 80044fc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	0a1b      	lsrs	r3, r3, #8
 8004502:	b2db      	uxtb	r3, r3
 8004504:	495b      	ldr	r1, [pc, #364]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800450a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	0c1b      	lsrs	r3, r3, #16
 8004510:	b2db      	uxtb	r3, r3
 8004512:	4958      	ldr	r1, [pc, #352]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004514:	5ccb      	ldrb	r3, [r1, r3]
 8004516:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004518:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	0e1b      	lsrs	r3, r3, #24
 800451e:	4955      	ldr	r1, [pc, #340]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004520:	5ccb      	ldrb	r3, [r1, r3]
 8004522:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8004524:	4053      	eors	r3, r2
 8004526:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8004528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452a:	1d1a      	adds	r2, r3, #4
 800452c:	633a      	str	r2, [r7, #48]	@ 0x30
 800452e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	494f      	ldr	r1, [pc, #316]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004536:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8004538:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	b2db      	uxtb	r3, r3
 8004540:	494c      	ldr	r1, [pc, #304]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8004546:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	b2db      	uxtb	r3, r3
 800454e:	4949      	ldr	r1, [pc, #292]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004554:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	0e1b      	lsrs	r3, r3, #24
 800455a:	4946      	ldr	r1, [pc, #280]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8004560:	4053      	eors	r3, r2
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8004564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004566:	1d1a      	adds	r2, r3, #4
 8004568:	633a      	str	r2, [r7, #48]	@ 0x30
 800456a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	4940      	ldr	r1, [pc, #256]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004572:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8004574:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	0a1b      	lsrs	r3, r3, #8
 800457a:	b2db      	uxtb	r3, r3
 800457c:	493d      	ldr	r1, [pc, #244]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 800457e:	5ccb      	ldrb	r3, [r1, r3]
 8004580:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8004582:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2db      	uxtb	r3, r3
 800458a:	493a      	ldr	r1, [pc, #232]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 800458c:	5ccb      	ldrb	r3, [r1, r3]
 800458e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004590:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	0e1b      	lsrs	r3, r3, #24
 8004596:	4937      	ldr	r1, [pc, #220]	@ (8004674 <mbedtls_internal_aes_encrypt+0x5c0>)
 8004598:	5ccb      	ldrb	r3, [r1, r3]
 800459a:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 800459c:	4053      	eors	r3, r2
 800459e:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80045a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	0a1a      	lsrs	r2, r3, #8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3301      	adds	r3, #1
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	701a      	strb	r2, [r3, #0]
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	0c1a      	lsrs	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3302      	adds	r3, #2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c2:	0e1a      	lsrs	r2, r3, #24
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3303      	adds	r3, #3
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	0a1a      	lsrs	r2, r3, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3305      	adds	r3, #5
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e4:	0c1a      	lsrs	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3306      	adds	r3, #6
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f0:	0e1a      	lsrs	r2, r3, #24
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3307      	adds	r3, #7
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3308      	adds	r3, #8
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	0a1a      	lsrs	r2, r3, #8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3309      	adds	r3, #9
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004612:	0c1a      	lsrs	r2, r3, #16
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	330a      	adds	r3, #10
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	0e1a      	lsrs	r2, r3, #24
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	330b      	adds	r3, #11
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	330c      	adds	r3, #12
 800462c:	6a3a      	ldr	r2, [r7, #32]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	0a1a      	lsrs	r2, r3, #8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	330d      	adds	r3, #13
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	0c1a      	lsrs	r2, r3, #16
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	330e      	adds	r3, #14
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	0e1a      	lsrs	r2, r3, #24
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	330f      	adds	r3, #15
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	373c      	adds	r7, #60	@ 0x3c
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	0800de94 	.word	0x0800de94
 8004668:	0800e294 	.word	0x0800e294
 800466c:	0800e694 	.word	0x0800e694
 8004670:	0800ea94 	.word	0x0800ea94
 8004674:	0800dd94 	.word	0x0800dd94

08004678 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8004678:	b480      	push	{r7}
 800467a:	b08f      	sub	sp, #60	@ 0x3c
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	3301      	adds	r3, #1
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	021b      	lsls	r3, r3, #8
 8004698:	431a      	orrs	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	3302      	adds	r3, #2
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3303      	adds	r3, #3
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	061b      	lsls	r3, r3, #24
 80046ac:	4313      	orrs	r3, r2
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	1d1a      	adds	r2, r3, #4
 80046b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ba:	4053      	eors	r3, r2
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	3304      	adds	r3, #4
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3305      	adds	r3, #5
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	431a      	orrs	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	3306      	adds	r3, #6
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	041b      	lsls	r3, r3, #16
 80046d8:	431a      	orrs	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	3307      	adds	r3, #7
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	4313      	orrs	r3, r2
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046f0:	4053      	eors	r3, r2
 80046f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	3308      	adds	r3, #8
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3309      	adds	r3, #9
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	431a      	orrs	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	330a      	adds	r3, #10
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	431a      	orrs	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	330b      	adds	r3, #11
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	061b      	lsls	r3, r3, #24
 8004718:	4313      	orrs	r3, r2
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	1d1a      	adds	r2, r3, #4
 8004720:	633a      	str	r2, [r7, #48]	@ 0x30
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004726:	4053      	eors	r3, r2
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	330c      	adds	r3, #12
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	461a      	mov	r2, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	330d      	adds	r3, #13
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	021b      	lsls	r3, r3, #8
 800473a:	431a      	orrs	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	330e      	adds	r3, #14
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	041b      	lsls	r3, r3, #16
 8004744:	431a      	orrs	r2, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	330f      	adds	r3, #15
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	4313      	orrs	r3, r2
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004754:	1d1a      	adds	r2, r3, #4
 8004756:	633a      	str	r2, [r7, #48]	@ 0x30
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a3a      	ldr	r2, [r7, #32]
 800475c:	4053      	eors	r3, r2
 800475e:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	105b      	asrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	637b      	str	r3, [r7, #52]	@ 0x34
 800476a:	e0fa      	b.n	8004962 <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	1d1a      	adds	r2, r3, #4
 8004770:	633a      	str	r2, [r7, #48]	@ 0x30
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004776:	b2db      	uxtb	r3, r3
 8004778:	49ab      	ldr	r1, [pc, #684]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 800477a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800477e:	405a      	eors	r2, r3
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	b2db      	uxtb	r3, r3
 8004786:	49a9      	ldr	r1, [pc, #676]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 8004788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800478c:	405a      	eors	r2, r3
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	b2db      	uxtb	r3, r3
 8004794:	49a6      	ldr	r1, [pc, #664]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004796:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800479a:	405a      	eors	r2, r3
 800479c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479e:	0e1b      	lsrs	r3, r3, #24
 80047a0:	49a4      	ldr	r1, [pc, #656]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 80047a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047a6:	4053      	eors	r3, r2
 80047a8:	61fb      	str	r3, [r7, #28]
 80047aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ac:	1d1a      	adds	r2, r3, #4
 80047ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	499c      	ldr	r1, [pc, #624]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 80047b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047bc:	405a      	eors	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	4999      	ldr	r1, [pc, #612]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 80047c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047ca:	405a      	eors	r2, r3
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	0c1b      	lsrs	r3, r3, #16
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	4997      	ldr	r1, [pc, #604]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 80047d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047d8:	405a      	eors	r2, r3
 80047da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047dc:	0e1b      	lsrs	r3, r3, #24
 80047de:	4995      	ldr	r1, [pc, #596]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 80047e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047e4:	4053      	eors	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	498c      	ldr	r1, [pc, #560]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 80047f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047fa:	405a      	eors	r2, r3
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	0a1b      	lsrs	r3, r3, #8
 8004800:	b2db      	uxtb	r3, r3
 8004802:	498a      	ldr	r1, [pc, #552]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 8004804:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004808:	405a      	eors	r2, r3
 800480a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480c:	0c1b      	lsrs	r3, r3, #16
 800480e:	b2db      	uxtb	r3, r3
 8004810:	4987      	ldr	r1, [pc, #540]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004812:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004816:	405a      	eors	r2, r3
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	0e1b      	lsrs	r3, r3, #24
 800481c:	4985      	ldr	r1, [pc, #532]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 800481e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004822:	4053      	eors	r3, r2
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004828:	1d1a      	adds	r2, r3, #4
 800482a:	633a      	str	r2, [r7, #48]	@ 0x30
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	497d      	ldr	r1, [pc, #500]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004838:	405a      	eors	r2, r3
 800483a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483c:	0a1b      	lsrs	r3, r3, #8
 800483e:	b2db      	uxtb	r3, r3
 8004840:	497a      	ldr	r1, [pc, #488]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 8004842:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004846:	405a      	eors	r2, r3
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	0c1b      	lsrs	r3, r3, #16
 800484c:	b2db      	uxtb	r3, r3
 800484e:	4978      	ldr	r1, [pc, #480]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004850:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004854:	405a      	eors	r2, r3
 8004856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004858:	0e1b      	lsrs	r3, r3, #24
 800485a:	4976      	ldr	r1, [pc, #472]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 800485c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004860:	4053      	eors	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	633a      	str	r2, [r7, #48]	@ 0x30
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	b2db      	uxtb	r3, r3
 8004870:	496d      	ldr	r1, [pc, #436]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004872:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004876:	405a      	eors	r2, r3
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	b2db      	uxtb	r3, r3
 800487e:	496b      	ldr	r1, [pc, #428]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 8004880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004884:	405a      	eors	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	0c1b      	lsrs	r3, r3, #16
 800488a:	b2db      	uxtb	r3, r3
 800488c:	4968      	ldr	r1, [pc, #416]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 800488e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004892:	405a      	eors	r2, r3
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	0e1b      	lsrs	r3, r3, #24
 8004898:	4966      	ldr	r1, [pc, #408]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 800489a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800489e:	4053      	eors	r3, r2
 80048a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	1d1a      	adds	r2, r3, #4
 80048a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	495e      	ldr	r1, [pc, #376]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 80048b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048b4:	405a      	eors	r2, r3
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	0a1b      	lsrs	r3, r3, #8
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	495b      	ldr	r1, [pc, #364]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 80048be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048c2:	405a      	eors	r2, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	4959      	ldr	r1, [pc, #356]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 80048cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048d0:	405a      	eors	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	0e1b      	lsrs	r3, r3, #24
 80048d6:	4957      	ldr	r1, [pc, #348]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 80048d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048dc:	4053      	eors	r3, r2
 80048de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	1d1a      	adds	r2, r3, #4
 80048e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	494e      	ldr	r1, [pc, #312]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 80048ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048f2:	405a      	eors	r2, r3
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	494c      	ldr	r1, [pc, #304]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 80048fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004900:	405a      	eors	r2, r3
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	b2db      	uxtb	r3, r3
 8004908:	4949      	ldr	r1, [pc, #292]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 800490a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800490e:	405a      	eors	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	0e1b      	lsrs	r3, r3, #24
 8004914:	4947      	ldr	r1, [pc, #284]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004916:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800491a:	4053      	eors	r3, r2
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
 800491e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004920:	1d1a      	adds	r2, r3, #4
 8004922:	633a      	str	r2, [r7, #48]	@ 0x30
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	493f      	ldr	r1, [pc, #252]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 800492c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004930:	405a      	eors	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	b2db      	uxtb	r3, r3
 8004938:	493c      	ldr	r1, [pc, #240]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 800493a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800493e:	405a      	eors	r2, r3
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	0c1b      	lsrs	r3, r3, #16
 8004944:	b2db      	uxtb	r3, r3
 8004946:	493a      	ldr	r1, [pc, #232]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800494c:	405a      	eors	r2, r3
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	0e1b      	lsrs	r3, r3, #24
 8004952:	4938      	ldr	r1, [pc, #224]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004954:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004958:	4053      	eors	r3, r2
 800495a:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800495c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495e:	3b01      	subs	r3, #1
 8004960:	637b      	str	r3, [r7, #52]	@ 0x34
 8004962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004964:	2b00      	cmp	r3, #0
 8004966:	f73f af01 	bgt.w	800476c <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 800496a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496c:	1d1a      	adds	r2, r3, #4
 800496e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004974:	b2db      	uxtb	r3, r3
 8004976:	492c      	ldr	r1, [pc, #176]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004978:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800497c:	405a      	eors	r2, r3
 800497e:	6a3b      	ldr	r3, [r7, #32]
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	b2db      	uxtb	r3, r3
 8004984:	4929      	ldr	r1, [pc, #164]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 8004986:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800498a:	405a      	eors	r2, r3
 800498c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	b2db      	uxtb	r3, r3
 8004992:	4927      	ldr	r1, [pc, #156]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004998:	405a      	eors	r2, r3
 800499a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	4925      	ldr	r1, [pc, #148]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 80049a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049a4:	4053      	eors	r3, r2
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	491c      	ldr	r1, [pc, #112]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 80049b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049ba:	405a      	eors	r2, r3
 80049bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049be:	0a1b      	lsrs	r3, r3, #8
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	491a      	ldr	r1, [pc, #104]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 80049c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049c8:	405a      	eors	r2, r3
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	4917      	ldr	r1, [pc, #92]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 80049d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049d6:	405a      	eors	r2, r3
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	0e1b      	lsrs	r3, r3, #24
 80049dc:	4915      	ldr	r1, [pc, #84]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 80049de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049e2:	4053      	eors	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	1d1a      	adds	r2, r3, #4
 80049ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	490d      	ldr	r1, [pc, #52]	@ (8004a28 <mbedtls_internal_aes_decrypt+0x3b0>)
 80049f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049f8:	405a      	eors	r2, r3
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	0a1b      	lsrs	r3, r3, #8
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	490a      	ldr	r1, [pc, #40]	@ (8004a2c <mbedtls_internal_aes_decrypt+0x3b4>)
 8004a02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a06:	405a      	eors	r2, r3
 8004a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0a:	0c1b      	lsrs	r3, r3, #16
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4908      	ldr	r1, [pc, #32]	@ (8004a30 <mbedtls_internal_aes_decrypt+0x3b8>)
 8004a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a14:	405a      	eors	r2, r3
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	0e1b      	lsrs	r3, r3, #24
 8004a1a:	4906      	ldr	r1, [pc, #24]	@ (8004a34 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a20:	4053      	eors	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	e007      	b.n	8004a38 <mbedtls_internal_aes_decrypt+0x3c0>
 8004a28:	0800ef94 	.word	0x0800ef94
 8004a2c:	0800f394 	.word	0x0800f394
 8004a30:	0800f794 	.word	0x0800f794
 8004a34:	0800fb94 	.word	0x0800fb94
 8004a38:	1d1a      	adds	r2, r3, #4
 8004a3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	4979      	ldr	r1, [pc, #484]	@ (8004c28 <mbedtls_internal_aes_decrypt+0x5b0>)
 8004a44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a48:	405a      	eors	r2, r3
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	4976      	ldr	r1, [pc, #472]	@ (8004c2c <mbedtls_internal_aes_decrypt+0x5b4>)
 8004a52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a56:	405a      	eors	r2, r3
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	0c1b      	lsrs	r3, r3, #16
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	4974      	ldr	r1, [pc, #464]	@ (8004c30 <mbedtls_internal_aes_decrypt+0x5b8>)
 8004a60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a64:	405a      	eors	r2, r3
 8004a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a68:	0e1b      	lsrs	r3, r3, #24
 8004a6a:	4972      	ldr	r1, [pc, #456]	@ (8004c34 <mbedtls_internal_aes_decrypt+0x5bc>)
 8004a6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a70:	4053      	eors	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8004a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a76:	1d1a      	adds	r2, r3, #4
 8004a78:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a7a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	496d      	ldr	r1, [pc, #436]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004a82:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8004a84:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	0a1b      	lsrs	r3, r3, #8
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	496a      	ldr	r1, [pc, #424]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004a8e:	5ccb      	ldrb	r3, [r1, r3]
 8004a90:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8004a92:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	4967      	ldr	r1, [pc, #412]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004a9c:	5ccb      	ldrb	r3, [r1, r3]
 8004a9e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004aa0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	0e1b      	lsrs	r3, r3, #24
 8004aa6:	4964      	ldr	r1, [pc, #400]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004aa8:	5ccb      	ldrb	r3, [r1, r3]
 8004aaa:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8004aac:	4053      	eors	r3, r2
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ab6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	495e      	ldr	r1, [pc, #376]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004abe:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8004ac0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	495b      	ldr	r1, [pc, #364]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004aca:	5ccb      	ldrb	r3, [r1, r3]
 8004acc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8004ace:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	4958      	ldr	r1, [pc, #352]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004ad8:	5ccb      	ldrb	r3, [r1, r3]
 8004ada:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004adc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	4955      	ldr	r1, [pc, #340]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004ae4:	5ccb      	ldrb	r3, [r1, r3]
 8004ae6:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8004ae8:	4053      	eors	r3, r2
 8004aea:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8004aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	633a      	str	r2, [r7, #48]	@ 0x30
 8004af2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	494f      	ldr	r1, [pc, #316]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004afa:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8004afc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	0a1b      	lsrs	r3, r3, #8
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	494c      	ldr	r1, [pc, #304]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8004b0a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	0c1b      	lsrs	r3, r3, #16
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	4949      	ldr	r1, [pc, #292]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004b14:	5ccb      	ldrb	r3, [r1, r3]
 8004b16:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004b18:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	0e1b      	lsrs	r3, r3, #24
 8004b1e:	4946      	ldr	r1, [pc, #280]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004b20:	5ccb      	ldrb	r3, [r1, r3]
 8004b22:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8004b24:	4053      	eors	r3, r2
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8004b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2a:	1d1a      	adds	r2, r3, #4
 8004b2c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b2e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	4940      	ldr	r1, [pc, #256]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004b36:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8004b38:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	493d      	ldr	r1, [pc, #244]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004b42:	5ccb      	ldrb	r3, [r1, r3]
 8004b44:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8004b46:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	493a      	ldr	r1, [pc, #232]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004b50:	5ccb      	ldrb	r3, [r1, r3]
 8004b52:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004b54:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	0e1b      	lsrs	r3, r3, #24
 8004b5a:	4937      	ldr	r1, [pc, #220]	@ (8004c38 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004b5c:	5ccb      	ldrb	r3, [r1, r3]
 8004b5e:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8004b60:	4053      	eors	r3, r2
 8004b62:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8004b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6e:	0a1a      	lsrs	r2, r3, #8
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	b2d2      	uxtb	r2, r2
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b7a:	0c1a      	lsrs	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3302      	adds	r3, #2
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b86:	0e1a      	lsrs	r2, r3, #24
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3303      	adds	r3, #3
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9c:	0a1a      	lsrs	r2, r3, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3305      	adds	r3, #5
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	0c1a      	lsrs	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3306      	adds	r3, #6
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	0e1a      	lsrs	r2, r3, #24
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	3307      	adds	r3, #7
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bca:	0a1a      	lsrs	r2, r3, #8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3309      	adds	r3, #9
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	0c1a      	lsrs	r2, r3, #16
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	330a      	adds	r3, #10
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	0e1a      	lsrs	r2, r3, #24
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	330b      	adds	r3, #11
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	6a3a      	ldr	r2, [r7, #32]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	0a1a      	lsrs	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	330d      	adds	r3, #13
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	0c1a      	lsrs	r2, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	330e      	adds	r3, #14
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	0e1a      	lsrs	r2, r3, #24
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	330f      	adds	r3, #15
 8004c16:	b2d2      	uxtb	r2, r2
 8004c18:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	373c      	adds	r7, #60	@ 0x3c
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	0800ef94 	.word	0x0800ef94
 8004c2c:	0800f394 	.word	0x0800f394
 8004c30:	0800f794 	.word	0x0800f794
 8004c34:	0800fb94 	.word	0x0800fb94
 8004c38:	0800ee94 	.word	0x0800ee94

08004c3c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff fa2d 	bl	80040b4 <mbedtls_internal_aes_encrypt>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	e005      	b.n	8004c6a <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fd08 	bl	8004678 <mbedtls_internal_aes_decrypt>
 8004c68:	4603      	mov	r3, r0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 8004c72:	b5b0      	push	{r4, r5, r7, lr}
 8004c74:	b08a      	sub	sp, #40	@ 0x28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
 8004c7e:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 8004c8a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8004c8e:	e06d      	b.n	8004d6c <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d166      	bne.n	8004d64 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 8004c96:	e036      	b.n	8004d06 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8004c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9a:	f107 0414 	add.w	r4, r7, #20
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004caa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff ffc4 	bl	8004c3c <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cb8:	e010      	b.n	8004cdc <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8004cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cbe:	4413      	add	r3, r2
 8004cc0:	7819      	ldrb	r1, [r3, #0]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	781a      	ldrb	r2, [r3, #0]
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004cce:	4403      	add	r3, r0
 8004cd0:	404a      	eors	r2, r1
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd8:	3301      	adds	r3, #1
 8004cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	ddeb      	ble.n	8004cba <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	461d      	mov	r5, r3
 8004ce6:	f107 0414 	add.w	r4, r7, #20
 8004cea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cec:	6028      	str	r0, [r5, #0]
 8004cee:	6069      	str	r1, [r5, #4]
 8004cf0:	60aa      	str	r2, [r5, #8]
 8004cf2:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	3310      	adds	r3, #16
 8004cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cfc:	3310      	adds	r3, #16
 8004cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3b10      	subs	r3, #16
 8004d04:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1c5      	bne.n	8004c98 <mbedtls_aes_crypt_cbc+0x26>
 8004d0c:	e02d      	b.n	8004d6a <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8004d0e:	2300      	movs	r3, #0
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d12:	e010      	b.n	8004d36 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8004d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d18:	4413      	add	r3, r2
 8004d1a:	7819      	ldrb	r1, [r3, #0]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	4413      	add	r3, r2
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004d28:	4403      	add	r3, r0
 8004d2a:	404a      	eors	r2, r1
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	3301      	adds	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d38:	2b0f      	cmp	r3, #15
 8004d3a:	ddeb      	ble.n	8004d14 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 8004d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d3e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d40:	68b9      	ldr	r1, [r7, #8]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff ff7a 	bl	8004c3c <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8004d48:	2210      	movs	r2, #16
 8004d4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d4c:	6838      	ldr	r0, [r7, #0]
 8004d4e:	f008 fd30 	bl	800d7b2 <memcpy>

            input  += 16;
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	3310      	adds	r3, #16
 8004d56:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5a:	3310      	adds	r3, #16
 8004d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	3b10      	subs	r3, #16
 8004d62:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1d1      	bne.n	8004d0e <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3728      	adds	r7, #40	@ 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bdb0      	pop	{r4, r5, r7, pc}

08004d74 <mbedtls_gf128mul_x_ble>:
 * for machine endianess and hence works correctly on both big and little
 * endian machines.
 */
static void mbedtls_gf128mul_x_ble( unsigned char r[16],
                                    const unsigned char x[16] )
{
 8004d74:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d78:	b0ce      	sub	sp, #312	@ 0x138
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8004d80:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
    uint64_t a, b, ra, rb;

    GET_UINT64_LE( a, x, 0 );
 8004d84:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004d88:	3307      	adds	r3, #7
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2200      	movs	r2, #0
 8004d90:	469a      	mov	sl, r3
 8004d92:	4693      	mov	fp, r2
 8004d94:	f04f 0000 	mov.w	r0, #0
 8004d98:	f04f 0100 	mov.w	r1, #0
 8004d9c:	ea4f 610a 	mov.w	r1, sl, lsl #24
 8004da0:	2000      	movs	r0, #0
 8004da2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004da6:	3306      	adds	r3, #6
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2200      	movs	r2, #0
 8004dae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004db2:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	f8d7 6108 	ldr.w	r6, [r7, #264]	@ 0x108
 8004dc2:	0433      	lsls	r3, r6, #16
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	ea40 0402 	orr.w	r4, r0, r2
 8004dca:	ea41 0503 	orr.w	r5, r1, r3
 8004dce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004dd2:	3305      	adds	r3, #5
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004dde:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8004dee:	020b      	lsls	r3, r1, #8
 8004df0:	2200      	movs	r2, #0
 8004df2:	ea44 0802 	orr.w	r8, r4, r2
 8004df6:	ea45 0903 	orr.w	r9, r5, r3
 8004dfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004dfe:	3304      	adds	r3, #4
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004e0a:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004e0e:	f04f 0200 	mov.w	r2, #0
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8004e1a:	000b      	movs	r3, r1
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	ea48 0102 	orr.w	r1, r8, r2
 8004e22:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8004e26:	ea49 0303 	orr.w	r3, r9, r3
 8004e2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004e2e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004e32:	3303      	adds	r3, #3
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e42:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004e46:	460b      	mov	r3, r1
 8004e48:	0a1b      	lsrs	r3, r3, #8
 8004e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e4e:	460b      	mov	r3, r1
 8004e50:	061b      	lsls	r3, r3, #24
 8004e52:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e56:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e60:	4602      	mov	r2, r0
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e68:	462b      	mov	r3, r5
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004e72:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004e76:	3302      	adds	r3, #2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e82:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004e92:	4629      	mov	r1, r5
 8004e94:	040b      	lsls	r3, r1, #16
 8004e96:	4621      	mov	r1, r4
 8004e98:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	040a      	lsls	r2, r1, #16
 8004ea0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	4311      	orrs	r1, r2
 8004ea8:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8004eac:	4629      	mov	r1, r5
 8004eae:	4319      	orrs	r1, r3
 8004eb0:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8004eb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004eb8:	3301      	adds	r3, #1
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ec4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	020b      	lsls	r3, r1, #8
 8004ed8:	4621      	mov	r1, r4
 8004eda:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8004ede:	4621      	mov	r1, r4
 8004ee0:	020a      	lsls	r2, r1, #8
 8004ee2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8004eee:	4629      	mov	r1, r5
 8004ef0:	4319      	orrs	r1, r3
 8004ef2:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 8004ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f04:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004f08:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8004f0c:	4623      	mov	r3, r4
 8004f0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f12:	4602      	mov	r2, r0
 8004f14:	4313      	orrs	r3, r2
 8004f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f18:	462b      	mov	r3, r5
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f20:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004f24:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    GET_UINT64_LE( b, x, 8 );
 8004f28:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f2c:	330f      	adds	r3, #15
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f3c:	f04f 0000 	mov.w	r0, #0
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f48:	0619      	lsls	r1, r3, #24
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f50:	330e      	adds	r3, #14
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f5c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004f6c:	0423      	lsls	r3, r4, #16
 8004f6e:	2200      	movs	r2, #0
 8004f70:	ea40 0402 	orr.w	r4, r0, r2
 8004f74:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004f82:	330d      	adds	r3, #13
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f9e:	020b      	lsls	r3, r1, #8
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4319      	orrs	r1, r3
 8004fb2:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8004fb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004fba:	330c      	adds	r3, #12
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fc6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8004fd6:	000b      	movs	r3, r1
 8004fd8:	2200      	movs	r2, #0
 8004fda:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8004fde:	4621      	mov	r1, r4
 8004fe0:	4311      	orrs	r1, r2
 8004fe2:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4319      	orrs	r1, r3
 8004fe8:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8004fea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004fee:	330b      	adds	r3, #11
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ff8:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ffa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004ffe:	460b      	mov	r3, r1
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005004:	460b      	mov	r3, r1
 8005006:	061b      	lsls	r3, r3, #24
 8005008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800500a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800500e:	4623      	mov	r3, r4
 8005010:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005014:	4602      	mov	r2, r0
 8005016:	4313      	orrs	r3, r2
 8005018:	663b      	str	r3, [r7, #96]	@ 0x60
 800501a:	462b      	mov	r3, r5
 800501c:	460a      	mov	r2, r1
 800501e:	4313      	orrs	r3, r2
 8005020:	667b      	str	r3, [r7, #100]	@ 0x64
 8005022:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005026:	330a      	adds	r3, #10
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2200      	movs	r2, #0
 800502e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005030:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800503e:	4629      	mov	r1, r5
 8005040:	040b      	lsls	r3, r1, #16
 8005042:	4621      	mov	r1, r4
 8005044:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8005048:	4621      	mov	r1, r4
 800504a:	040a      	lsls	r2, r1, #16
 800504c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005050:	4621      	mov	r1, r4
 8005052:	4311      	orrs	r1, r2
 8005054:	6539      	str	r1, [r7, #80]	@ 0x50
 8005056:	4629      	mov	r1, r5
 8005058:	4319      	orrs	r1, r3
 800505a:	6579      	str	r1, [r7, #84]	@ 0x54
 800505c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005060:	3309      	adds	r3, #9
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2200      	movs	r2, #0
 8005068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800506a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8005078:	4629      	mov	r1, r5
 800507a:	020b      	lsls	r3, r1, #8
 800507c:	4621      	mov	r1, r4
 800507e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8005082:	4621      	mov	r1, r4
 8005084:	020a      	lsls	r2, r1, #8
 8005086:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800508a:	4621      	mov	r1, r4
 800508c:	4311      	orrs	r1, r2
 800508e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005090:	4629      	mov	r1, r5
 8005092:	4319      	orrs	r1, r3
 8005094:	6479      	str	r1, [r7, #68]	@ 0x44
 8005096:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800509a:	3308      	adds	r3, #8
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2200      	movs	r2, #0
 80050a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050a6:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80050aa:	4623      	mov	r3, r4
 80050ac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80050b0:	4602      	mov	r2, r0
 80050b2:	4313      	orrs	r3, r2
 80050b4:	623b      	str	r3, [r7, #32]
 80050b6:	462b      	mov	r3, r5
 80050b8:	460a      	mov	r2, r1
 80050ba:	4313      	orrs	r3, r2
 80050bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80050be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80050c2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128

    ra = ( a << 1 )  ^ 0x0087 >> ( 8 - ( ( b >> 63 ) << 3 ) );
 80050c6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80050ca:	1891      	adds	r1, r2, r2
 80050cc:	61b9      	str	r1, [r7, #24]
 80050ce:	415b      	adcs	r3, r3
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80050d6:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	0fea      	lsrs	r2, r5, #31
 80050e4:	2300      	movs	r3, #0
 80050e6:	4613      	mov	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	f1c3 0308 	rsb	r3, r3, #8
 80050ee:	2287      	movs	r2, #135	@ 0x87
 80050f0:	fa42 f303 	asr.w	r3, r2, r3
 80050f4:	17da      	asrs	r2, r3, #31
 80050f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80050f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80050fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050fe:	4623      	mov	r3, r4
 8005100:	4043      	eors	r3, r0
 8005102:	613b      	str	r3, [r7, #16]
 8005104:	462b      	mov	r3, r5
 8005106:	404b      	eors	r3, r1
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800510e:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    rb = ( a >> 63 ) | ( b << 1 );
 8005112:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8005116:	f04f 0000 	mov.w	r0, #0
 800511a:	f04f 0100 	mov.w	r1, #0
 800511e:	0fd8      	lsrs	r0, r3, #31
 8005120:	2100      	movs	r1, #0
 8005122:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8005126:	1894      	adds	r4, r2, r2
 8005128:	60bc      	str	r4, [r7, #8]
 800512a:	415b      	adcs	r3, r3
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005132:	ea40 0402 	orr.w	r4, r0, r2
 8005136:	603c      	str	r4, [r7, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005140:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

    PUT_UINT64_LE( ra, r, 0 );
 8005144:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	0e0a      	lsrs	r2, r1, #24
 8005152:	2300      	movs	r3, #0
 8005154:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005158:	3107      	adds	r1, #7
 800515a:	b2d3      	uxtb	r3, r2
 800515c:	700b      	strb	r3, [r1, #0]
 800515e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	0c0a      	lsrs	r2, r1, #16
 800516c:	2300      	movs	r3, #0
 800516e:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005172:	3106      	adds	r1, #6
 8005174:	b2d3      	uxtb	r3, r2
 8005176:	700b      	strb	r3, [r1, #0]
 8005178:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	0a0a      	lsrs	r2, r1, #8
 8005186:	2300      	movs	r3, #0
 8005188:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800518c:	3105      	adds	r1, #5
 800518e:	b2d3      	uxtb	r3, r2
 8005190:	700b      	strb	r3, [r1, #0]
 8005192:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	000a      	movs	r2, r1
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80051a6:	3104      	adds	r1, #4
 80051a8:	b2d3      	uxtb	r3, r2
 80051aa:	700b      	strb	r3, [r1, #0]
 80051ac:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	0e02      	lsrs	r2, r0, #24
 80051ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80051be:	0e0b      	lsrs	r3, r1, #24
 80051c0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80051c4:	3103      	adds	r1, #3
 80051c6:	b2d3      	uxtb	r3, r2
 80051c8:	700b      	strb	r3, [r1, #0]
 80051ca:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	0c02      	lsrs	r2, r0, #16
 80051d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80051dc:	0c0b      	lsrs	r3, r1, #16
 80051de:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80051e2:	3102      	adds	r1, #2
 80051e4:	b2d3      	uxtb	r3, r2
 80051e6:	700b      	strb	r3, [r1, #0]
 80051e8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	0a02      	lsrs	r2, r0, #8
 80051f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80051fa:	0a0b      	lsrs	r3, r1, #8
 80051fc:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005200:	3101      	adds	r1, #1
 8005202:	b2d3      	uxtb	r3, r2
 8005204:	700b      	strb	r3, [r1, #0]
 8005206:	f897 2120 	ldrb.w	r2, [r7, #288]	@ 0x120
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800520e:	701a      	strb	r2, [r3, #0]
    PUT_UINT64_LE( rb, r, 8 );
 8005210:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	0e0a      	lsrs	r2, r1, #24
 800521e:	2300      	movs	r3, #0
 8005220:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005224:	310f      	adds	r1, #15
 8005226:	b2d3      	uxtb	r3, r2
 8005228:	700b      	strb	r3, [r1, #0]
 800522a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	0c0a      	lsrs	r2, r1, #16
 8005238:	2300      	movs	r3, #0
 800523a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800523e:	310e      	adds	r1, #14
 8005240:	b2d3      	uxtb	r3, r2
 8005242:	700b      	strb	r3, [r1, #0]
 8005244:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	0a0a      	lsrs	r2, r1, #8
 8005252:	2300      	movs	r3, #0
 8005254:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005258:	310d      	adds	r1, #13
 800525a:	b2d3      	uxtb	r3, r2
 800525c:	700b      	strb	r3, [r1, #0]
 800525e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	000a      	movs	r2, r1
 800526c:	2300      	movs	r3, #0
 800526e:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005272:	310c      	adds	r1, #12
 8005274:	b2d3      	uxtb	r3, r2
 8005276:	700b      	strb	r3, [r1, #0]
 8005278:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	0e02      	lsrs	r2, r0, #24
 8005286:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800528a:	0e0b      	lsrs	r3, r1, #24
 800528c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8005290:	310b      	adds	r1, #11
 8005292:	b2d3      	uxtb	r3, r2
 8005294:	700b      	strb	r3, [r1, #0]
 8005296:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800529a:	f04f 0200 	mov.w	r2, #0
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	0c02      	lsrs	r2, r0, #16
 80052a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80052a8:	0c0b      	lsrs	r3, r1, #16
 80052aa:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80052ae:	310a      	adds	r1, #10
 80052b0:	b2d3      	uxtb	r3, r2
 80052b2:	700b      	strb	r3, [r1, #0]
 80052b4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80052b8:	f04f 0200 	mov.w	r2, #0
 80052bc:	f04f 0300 	mov.w	r3, #0
 80052c0:	0a02      	lsrs	r2, r0, #8
 80052c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80052c6:	0a0b      	lsrs	r3, r1, #8
 80052c8:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80052cc:	3109      	adds	r1, #9
 80052ce:	b2d3      	uxtb	r3, r2
 80052d0:	700b      	strb	r3, [r1, #0]
 80052d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d6:	3308      	adds	r3, #8
 80052d8:	f897 2118 	ldrb.w	r2, [r7, #280]	@ 0x118
 80052dc:	701a      	strb	r2, [r3, #0]
}
 80052de:	bf00      	nop
 80052e0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80052e4:	46bd      	mov	sp, r7
 80052e6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052ea:	4770      	bx	lr

080052ec <mbedtls_aes_crypt_xts>:
                           int mode,
                           size_t length,
                           const unsigned char data_unit[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b099      	sub	sp, #100	@ 0x64
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
 80052f8:	603b      	str	r3, [r7, #0]
    int ret;
    size_t blocks = length / 16;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t leftover = length % 16;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	653b      	str	r3, [r7, #80]	@ 0x50
    AES_VALIDATE_RET( data_unit != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    /* Data units must be at least 16 bytes long. */
    if( length < 16 )
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d802      	bhi.n	8005314 <mbedtls_aes_crypt_xts+0x28>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 800530e:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8005312:	e0f0      	b.n	80054f6 <mbedtls_aes_crypt_xts+0x20a>

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if( length > ( 1 << 20 ) * 16 )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800531a:	d902      	bls.n	8005322 <mbedtls_aes_crypt_xts+0x36>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 800531c:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8005320:	e0e9      	b.n	80054f6 <mbedtls_aes_crypt_xts+0x20a>

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb( &ctx->tweak, MBEDTLS_AES_ENCRYPT,
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 708c 	add.w	r0, r3, #280	@ 0x118
 8005328:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	2101      	movs	r1, #1
 8005330:	f7ff fc84 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 8005334:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                 data_unit, tweak );
    if( ret != 0 )
 8005336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d068      	beq.n	800540e <mbedtls_aes_crypt_xts+0x122>
        return( ret );
 800533c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800533e:	e0da      	b.n	80054f6 <mbedtls_aes_crypt_xts+0x20a>

    while( blocks-- )
    {
        size_t i;

        if( leftover && ( mode == MBEDTLS_AES_DECRYPT ) && blocks == 0 )
 8005340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005342:	2b00      	cmp	r3, #0
 8005344:	d014      	beq.n	8005370 <mbedtls_aes_crypt_xts+0x84>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d111      	bne.n	8005370 <mbedtls_aes_crypt_xts+0x84>
 800534c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10e      	bne.n	8005370 <mbedtls_aes_crypt_xts+0x84>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the lefover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy( prev_tweak, tweak, sizeof( tweak ) );
 8005352:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8005356:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800535a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800535c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble( tweak, tweak );
 8005360:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8005364:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005368:	4611      	mov	r1, r2
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff fd02 	bl	8004d74 <mbedtls_gf128mul_x_ble>
        }

        for( i = 0; i < 16; i++ )
 8005370:	2300      	movs	r3, #0
 8005372:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005374:	e013      	b.n	800539e <mbedtls_aes_crypt_xts+0xb2>
            tmp[i] = input[i] ^ tweak[i];
 8005376:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800537a:	4413      	add	r3, r2
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8005382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005384:	440b      	add	r3, r1
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	4053      	eors	r3, r2
 800538a:	b2d9      	uxtb	r1, r3
 800538c:	f107 0214 	add.w	r2, r7, #20
 8005390:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005392:	4413      	add	r3, r2
 8005394:	460a      	mov	r2, r1
 8005396:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8005398:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800539a:	3301      	adds	r3, #1
 800539c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800539e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d9e8      	bls.n	8005376 <mbedtls_aes_crypt_xts+0x8a>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	f107 0214 	add.w	r2, r7, #20
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	f7ff fc44 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 80053b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if( ret != 0 )
 80053b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <mbedtls_aes_crypt_xts+0xd4>
            return( ret );
 80053bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053be:	e09a      	b.n	80054f6 <mbedtls_aes_crypt_xts+0x20a>

        for( i = 0; i < 16; i++ )
 80053c0:	2300      	movs	r3, #0
 80053c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053c4:	e012      	b.n	80053ec <mbedtls_aes_crypt_xts+0x100>
            output[i] = tmp[i] ^ tweak[i];
 80053c6:	f107 0214 	add.w	r2, r7, #20
 80053ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053cc:	4413      	add	r3, r2
 80053ce:	7819      	ldrb	r1, [r3, #0]
 80053d0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80053d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053d6:	4413      	add	r3, r2
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80053dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053de:	4403      	add	r3, r0
 80053e0:	404a      	eors	r2, r1
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 80053e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053e8:	3301      	adds	r3, #1
 80053ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053ee:	2b0f      	cmp	r3, #15
 80053f0:	d9e9      	bls.n	80053c6 <mbedtls_aes_crypt_xts+0xda>

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble( tweak, tweak );
 80053f2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80053f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80053fa:	4611      	mov	r1, r2
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7ff fcb9 	bl	8004d74 <mbedtls_gf128mul_x_ble>

        output += 16;
 8005402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005404:	3310      	adds	r3, #16
 8005406:	677b      	str	r3, [r7, #116]	@ 0x74
        input += 16;
 8005408:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800540a:	3310      	adds	r3, #16
 800540c:	673b      	str	r3, [r7, #112]	@ 0x70
    while( blocks-- )
 800540e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005410:	1e5a      	subs	r2, r3, #1
 8005412:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005414:	2b00      	cmp	r3, #0
 8005416:	d193      	bne.n	8005340 <mbedtls_aes_crypt_xts+0x54>
    }

    if( leftover )
 8005418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800541a:	2b00      	cmp	r3, #0
 800541c:	d06a      	beq.n	80054f4 <mbedtls_aes_crypt_xts+0x208>
    {
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d102      	bne.n	800542a <mbedtls_aes_crypt_xts+0x13e>
 8005424:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005428:	e001      	b.n	800542e <mbedtls_aes_crypt_xts+0x142>
 800542a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 8005430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005432:	3b10      	subs	r3, #16
 8005434:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of cyphertext we won't steal. At the same time, copy the
         * remainder of the input for this final round (since the loop bounds
         * are the same). */
        for( i = 0; i < leftover; i++ )
 8005436:	2300      	movs	r3, #0
 8005438:	657b      	str	r3, [r7, #84]	@ 0x54
 800543a:	e01a      	b.n	8005472 <mbedtls_aes_crypt_xts+0x186>
        {
            output[i] = prev_output[i];
 800543c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800543e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005440:	441a      	add	r2, r3
 8005442:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8005444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005446:	440b      	add	r3, r1
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	701a      	strb	r2, [r3, #0]
            tmp[i] = input[i] ^ t[i];
 800544c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800544e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005450:	4413      	add	r3, r2
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005458:	440b      	add	r3, r1
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	4053      	eors	r3, r2
 800545e:	b2d9      	uxtb	r1, r3
 8005460:	f107 0214 	add.w	r2, r7, #20
 8005464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005466:	4413      	add	r3, r2
 8005468:	460a      	mov	r2, r1
 800546a:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < leftover; i++ )
 800546c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800546e:	3301      	adds	r3, #1
 8005470:	657b      	str	r3, [r7, #84]	@ 0x54
 8005472:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005476:	429a      	cmp	r2, r3
 8005478:	d3e0      	bcc.n	800543c <mbedtls_aes_crypt_xts+0x150>
        }

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        for( ; i < 16; i++ )
 800547a:	e012      	b.n	80054a2 <mbedtls_aes_crypt_xts+0x1b6>
            tmp[i] = prev_output[i] ^ t[i];
 800547c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800547e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005480:	4413      	add	r3, r2
 8005482:	781a      	ldrb	r2, [r3, #0]
 8005484:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005488:	440b      	add	r3, r1
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	4053      	eors	r3, r2
 800548e:	b2d9      	uxtb	r1, r3
 8005490:	f107 0214 	add.w	r2, r7, #20
 8005494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005496:	4413      	add	r3, r2
 8005498:	460a      	mov	r2, r1
 800549a:	701a      	strb	r2, [r3, #0]
        for( ; i < 16; i++ )
 800549c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800549e:	3301      	adds	r3, #1
 80054a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80054a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054a4:	2b0f      	cmp	r3, #15
 80054a6:	d9e9      	bls.n	800547c <mbedtls_aes_crypt_xts+0x190>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f107 0314 	add.w	r3, r7, #20
 80054ae:	f107 0214 	add.w	r2, r7, #20
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	f7ff fbc2 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 80054b8:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if( ret != 0 )
 80054ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <mbedtls_aes_crypt_xts+0x1d8>
            return ret;
 80054c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054c2:	e018      	b.n	80054f6 <mbedtls_aes_crypt_xts+0x20a>

        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        for( i = 0; i < 16; i++ )
 80054c4:	2300      	movs	r3, #0
 80054c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80054c8:	e011      	b.n	80054ee <mbedtls_aes_crypt_xts+0x202>
            prev_output[i] = tmp[i] ^ t[i];
 80054ca:	f107 0214 	add.w	r2, r7, #20
 80054ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d0:	4413      	add	r3, r2
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d8:	4413      	add	r3, r2
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80054de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e0:	4403      	add	r3, r0
 80054e2:	404a      	eors	r2, r1
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 80054e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ea:	3301      	adds	r3, #1
 80054ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d9ea      	bls.n	80054ca <mbedtls_aes_crypt_xts+0x1de>
    }

    return( 0 );
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3764      	adds	r7, #100	@ 0x64
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd90      	pop	{r4, r7, pc}

080054fe <mbedtls_aes_crypt_ofb>:
                           size_t length,
                           size_t *iv_off,
                           unsigned char iv[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b086      	sub	sp, #24
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
 800550a:	603b      	str	r3, [r7, #0]
    int ret = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	613b      	str	r3, [r7, #16]

    if( n > 15 )
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	2b0f      	cmp	r3, #15
 800551a:	d922      	bls.n	8005562 <mbedtls_aes_crypt_ofb+0x64>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 800551c:	f06f 0320 	mvn.w	r3, #32
 8005520:	e02a      	b.n	8005578 <mbedtls_aes_crypt_ofb+0x7a>

    while( length-- )
    {
        if( n == 0 )
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <mbedtls_aes_crypt_ofb+0x3e>
        {
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	2101      	movs	r1, #1
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f7ff fb84 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 8005534:	6178      	str	r0, [r7, #20]
            if( ret != 0 )
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11b      	bne.n	8005574 <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
        }
        *output++ =  *input++ ^ iv[n];
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	1c5a      	adds	r2, r3, #1
 8005540:	623a      	str	r2, [r7, #32]
 8005542:	7819      	ldrb	r1, [r3, #0]
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4413      	add	r3, r2
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554e:	1c58      	adds	r0, r3, #1
 8005550:	6278      	str	r0, [r7, #36]	@ 0x24
 8005552:	404a      	eors	r2, r1
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	3301      	adds	r3, #1
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	613b      	str	r3, [r7, #16]
    while( length-- )
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	1e5a      	subs	r2, r3, #1
 8005566:	60ba      	str	r2, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1da      	bne.n	8005522 <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e000      	b.n	8005576 <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 8005574:	bf00      	nop

exit:
    return( ret );
 8005576:	697b      	ldr	r3, [r7, #20]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <camellia_feistel>:
        }                                                   \
}

static void camellia_feistel( const uint32_t x[2], const uint32_t k[2],
                              uint32_t z[2])
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4053      	eors	r3, r2
 8005596:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3304      	adds	r3, #4
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	3304      	adds	r3, #4
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4053      	eors	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	0e1b      	lsrs	r3, r3, #24
 80055ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <camellia_feistel+0xe4>)
 80055ae:	5cd3      	ldrb	r3, [r2, r3]
 80055b0:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	0c1b      	lsrs	r3, r3, #16
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	492b      	ldr	r1, [pc, #172]	@ (8005668 <camellia_feistel+0xe8>)
 80055ba:	5ccb      	ldrb	r3, [r1, r3]
 80055bc:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 80055be:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3((I0 >>  8) & 0xFF) <<  8) |
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	4929      	ldr	r1, [pc, #164]	@ (800566c <camellia_feistel+0xec>)
 80055c8:	5ccb      	ldrb	r3, [r1, r3]
 80055ca:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 80055cc:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4((I0      ) & 0xFF)      );
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	4927      	ldr	r1, [pc, #156]	@ (8005670 <camellia_feistel+0xf0>)
 80055d4:	5c8a      	ldrb	r2, [r1, r2]
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	0e1b      	lsrs	r3, r3, #24
 80055de:	4a22      	ldr	r2, [pc, #136]	@ (8005668 <camellia_feistel+0xe8>)
 80055e0:	5cd3      	ldrb	r3, [r2, r3]
 80055e2:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	4920      	ldr	r1, [pc, #128]	@ (800566c <camellia_feistel+0xec>)
 80055ec:	5ccb      	ldrb	r3, [r1, r3]
 80055ee:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 80055f0:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4((I1 >>  8) & 0xFF) <<  8) |
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	491d      	ldr	r1, [pc, #116]	@ (8005670 <camellia_feistel+0xf0>)
 80055fa:	5ccb      	ldrb	r3, [r1, r3]
 80055fc:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 80055fe:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1((I1      ) & 0xFF)      );
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	4917      	ldr	r1, [pc, #92]	@ (8005664 <camellia_feistel+0xe4>)
 8005606:	5c8a      	ldrb	r2, [r1, r2]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8005608:	4313      	orrs	r3, r2
 800560a:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	ea4f 6333 	mov.w	r3, r3, ror #24
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4053      	eors	r3, r2
 8005616:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	ea4f 4333 	mov.w	r3, r3, ror #16
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4053      	eors	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	ea4f 2333 	mov.w	r3, r3, ror #8
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4053      	eors	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4053      	eors	r3, r2
 800563a:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	405a      	eors	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3304      	adds	r3, #4
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	404a      	eors	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
}
 8005658:	bf00      	nop
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	0800ffec 	.word	0x0800ffec
 8005668:	080100ec 	.word	0x080100ec
 800566c:	080101ec 	.word	0x080101ec
 8005670:	080102ec 	.word	0x080102ec

08005674 <mbedtls_camellia_init>:

void mbedtls_camellia_init( mbedtls_camellia_context *ctx )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
    CAMELLIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_camellia_context ) );
 800567c:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8005680:	2100      	movs	r1, #0
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f008 f80a 	bl	800d69c <memset>
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <mbedtls_camellia_free>:

void mbedtls_camellia_free( mbedtls_camellia_context *ctx )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d005      	beq.n	80056aa <mbedtls_camellia_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_camellia_context ) );
 800569e:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f004 f94e 	bl	8009944 <mbedtls_platform_zeroize>
 80056a8:	e000      	b.n	80056ac <mbedtls_camellia_free+0x1c>
        return;
 80056aa:	bf00      	nop
}
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b0c8      	sub	sp, #288	@ 0x120
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80056c2:	6018      	str	r0, [r3, #0]
 80056c4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80056cc:	6019      	str	r1, [r3, #0]
 80056ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80056d6:	601a      	str	r2, [r3, #0]
    uint32_t TK[20];

    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    RK = ctx->rk;
 80056d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3304      	adds	r3, #4
 80056e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    memset( t, 0, 64 );
 80056e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80056ec:	2240      	movs	r2, #64	@ 0x40
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f007 ffd3 	bl	800d69c <memset>
    memset( RK, 0, sizeof(ctx->rk) );
 80056f6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80056fa:	2100      	movs	r1, #0
 80056fc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8005700:	f007 ffcc 	bl	800d69c <memset>

    switch( keybits )
 8005704:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005708:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005712:	d021      	beq.n	8005758 <mbedtls_camellia_setkey_enc+0xa4>
 8005714:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005718:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005722:	d824      	bhi.n	800576e <mbedtls_camellia_setkey_enc+0xba>
 8005724:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005728:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b80      	cmp	r3, #128	@ 0x80
 8005730:	d007      	beq.n	8005742 <mbedtls_camellia_setkey_enc+0x8e>
 8005732:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005736:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2bc0      	cmp	r3, #192	@ 0xc0
 800573e:	d00b      	beq.n	8005758 <mbedtls_camellia_setkey_enc+0xa4>
 8005740:	e015      	b.n	800576e <mbedtls_camellia_setkey_enc+0xba>
    {
        case 128: ctx->nr = 3; idx = 0; break;
 8005742:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005746:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2203      	movs	r2, #3
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005756:	e00e      	b.n	8005776 <mbedtls_camellia_setkey_enc+0xc2>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 8005758:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800575c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2204      	movs	r2, #4
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	2301      	movs	r3, #1
 8005768:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800576c:	e003      	b.n	8005776 <mbedtls_camellia_setkey_enc+0xc2>
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 800576e:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8005772:	f000 be1f 	b.w	80063b4 <mbedtls_camellia_setkey_enc+0xd00>
    }

    for( i = 0; i < keybits / 8; ++i )
 8005776:	2300      	movs	r3, #0
 8005778:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800577c:	e014      	b.n	80057a8 <mbedtls_camellia_setkey_enc+0xf4>
        t[i] = key[i];
 800577e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005782:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800578c:	4413      	add	r3, r2
 800578e:	7819      	ldrb	r1, [r3, #0]
 8005790:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8005794:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005798:	4413      	add	r3, r2
 800579a:	460a      	mov	r2, r1
 800579c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keybits / 8; ++i )
 800579e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057a2:	3301      	adds	r3, #1
 80057a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	08db      	lsrs	r3, r3, #3
 80057b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3e0      	bcc.n	800577e <mbedtls_camellia_setkey_enc+0xca>

    if( keybits == 192 ) {
 80057bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057c0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80057c8:	d11e      	bne.n	8005808 <mbedtls_camellia_setkey_enc+0x154>
        for( i = 0; i < 8; i++ )
 80057ca:	2300      	movs	r3, #0
 80057cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057d0:	e016      	b.n	8005800 <mbedtls_camellia_setkey_enc+0x14c>
            t[24 + i] = ~t[16 + i];
 80057d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057d6:	3310      	adds	r3, #16
 80057d8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80057dc:	443b      	add	r3, r7
 80057de:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 80057e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057e6:	3318      	adds	r3, #24
 80057e8:	43d2      	mvns	r2, r2
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80057f0:	443b      	add	r3, r7
 80057f2:	f803 2c4c 	strb.w	r2, [r3, #-76]
        for( i = 0; i < 8; i++ )
 80057f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057fa:	3301      	adds	r3, #1
 80057fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005800:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005804:	2b07      	cmp	r3, #7
 8005806:	d9e4      	bls.n	80057d2 <mbedtls_camellia_setkey_enc+0x11e>
    }

    /*
     * Prepare SIGMA values
     */
    for( i = 0; i < 6; i++ ) {
 8005808:	2300      	movs	r3, #0
 800580a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800580e:	e04f      	b.n	80058b0 <mbedtls_camellia_setkey_enc+0x1fc>
        GET_UINT32_BE( SIGMA[i][0], SIGMA_CHARS[i], 0 );
 8005810:	4abd      	ldr	r2, [pc, #756]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 8005812:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005816:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800581a:	061a      	lsls	r2, r3, #24
 800581c:	49ba      	ldr	r1, [pc, #744]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 800581e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	440b      	add	r3, r1
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	041b      	lsls	r3, r3, #16
 800582a:	431a      	orrs	r2, r3
 800582c:	49b6      	ldr	r1, [pc, #728]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 800582e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	440b      	add	r3, r1
 8005836:	789b      	ldrb	r3, [r3, #2]
 8005838:	021b      	lsls	r3, r3, #8
 800583a:	431a      	orrs	r2, r3
 800583c:	49b2      	ldr	r1, [pc, #712]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 800583e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	440b      	add	r3, r1
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	431a      	orrs	r2, r3
 800584a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005854:	443b      	add	r3, r7
 8005856:	f843 2c7c 	str.w	r2, [r3, #-124]
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 800585a:	4aab      	ldr	r2, [pc, #684]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 800585c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	791b      	ldrb	r3, [r3, #4]
 8005866:	061a      	lsls	r2, r3, #24
 8005868:	49a7      	ldr	r1, [pc, #668]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 800586a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	795b      	ldrb	r3, [r3, #5]
 8005874:	041b      	lsls	r3, r3, #16
 8005876:	431a      	orrs	r2, r3
 8005878:	49a3      	ldr	r1, [pc, #652]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 800587a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	440b      	add	r3, r1
 8005882:	799b      	ldrb	r3, [r3, #6]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	431a      	orrs	r2, r3
 8005888:	499f      	ldr	r1, [pc, #636]	@ (8005b08 <mbedtls_camellia_setkey_enc+0x454>)
 800588a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	440b      	add	r3, r1
 8005892:	79db      	ldrb	r3, [r3, #7]
 8005894:	431a      	orrs	r2, r3
 8005896:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80058a0:	443b      	add	r3, r7
 80058a2:	f843 2c78 	str.w	r2, [r3, #-120]
    for( i = 0; i < 6; i++ ) {
 80058a6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058aa:	3301      	adds	r3, #1
 80058ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80058b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058b4:	2b05      	cmp	r3, #5
 80058b6:	d9ab      	bls.n	8005810 <mbedtls_camellia_setkey_enc+0x15c>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset( KC, 0, sizeof(KC) );
 80058b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80058bc:	2240      	movs	r2, #64	@ 0x40
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f007 feeb 	bl	800d69c <memset>

    /* Store KL, KR */
    for( i = 0; i < 8; i++ )
 80058c6:	2300      	movs	r3, #0
 80058c8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80058cc:	e035      	b.n	800593a <mbedtls_camellia_setkey_enc+0x286>
        GET_UINT32_BE( KC[i], t, i * 4 );
 80058ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80058d8:	443b      	add	r3, r7
 80058da:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80058de:	061a      	lsls	r2, r3, #24
 80058e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	3301      	adds	r3, #1
 80058e8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80058ec:	443b      	add	r3, r7
 80058ee:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	431a      	orrs	r2, r3
 80058f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	3302      	adds	r3, #2
 80058fe:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005902:	443b      	add	r3, r7
 8005904:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	4313      	orrs	r3, r2
 800590c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005910:	0092      	lsls	r2, r2, #2
 8005912:	3203      	adds	r2, #3
 8005914:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 8005918:	443a      	add	r2, r7
 800591a:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 800591e:	431a      	orrs	r2, r3
 8005920:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800592a:	443b      	add	r3, r7
 800592c:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 8; i++ )
 8005930:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005934:	3301      	adds	r3, #1
 8005936:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800593a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800593e:	2b07      	cmp	r3, #7
 8005940:	d9c5      	bls.n	80058ce <mbedtls_camellia_setkey_enc+0x21a>

    /* Generate KA */
    for( i = 0; i < 4; ++i )
 8005942:	2300      	movs	r3, #0
 8005944:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005948:	e01f      	b.n	800598a <mbedtls_camellia_setkey_enc+0x2d6>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 800594a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005954:	443b      	add	r3, r7
 8005956:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 800595a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800595e:	3304      	adds	r3, #4
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005966:	443b      	add	r3, r7
 8005968:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 800596c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005970:	3308      	adds	r3, #8
 8005972:	404a      	eors	r2, r1
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800597a:	443b      	add	r3, r7
 800597c:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 8005980:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005984:	3301      	adds	r3, #1
 8005986:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800598a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800598e:	2b03      	cmp	r3, #3
 8005990:	d9db      	bls.n	800594a <mbedtls_camellia_setkey_enc+0x296>

    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 8005992:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005996:	3320      	adds	r3, #32
 8005998:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800599c:	3228      	adds	r2, #40	@ 0x28
 800599e:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fdec 	bl	8005580 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[1], KC + 8 );
 80059a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80059ac:	3328      	adds	r3, #40	@ 0x28
 80059ae:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80059b2:	3220      	adds	r2, #32
 80059b4:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80059b8:	3108      	adds	r1, #8
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fde0 	bl	8005580 <camellia_feistel>

    for( i = 0; i < 4; ++i )
 80059c0:	2300      	movs	r3, #0
 80059c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80059c6:	e01f      	b.n	8005a08 <mbedtls_camellia_setkey_enc+0x354>
        KC[8 + i] ^= KC[i];
 80059c8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80059cc:	3308      	adds	r3, #8
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80059d4:	443b      	add	r3, r7
 80059d6:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 80059da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80059e4:	443b      	add	r3, r7
 80059e6:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 80059ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80059ee:	3308      	adds	r3, #8
 80059f0:	404a      	eors	r2, r1
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80059f8:	443b      	add	r3, r7
 80059fa:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 80059fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a02:	3301      	adds	r3, #1
 8005a04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a08:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d9db      	bls.n	80059c8 <mbedtls_camellia_setkey_enc+0x314>

    camellia_feistel( KC + 8, SIGMA[2], KC + 10 );
 8005a10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005a14:	3320      	adds	r3, #32
 8005a16:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8005a1a:	3228      	adds	r2, #40	@ 0x28
 8005a1c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8005a20:	3110      	adds	r1, #16
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fdac 	bl	8005580 <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[3], KC + 8 );
 8005a28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005a2c:	3328      	adds	r3, #40	@ 0x28
 8005a2e:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8005a32:	3220      	adds	r2, #32
 8005a34:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8005a38:	3118      	adds	r1, #24
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fda0 	bl	8005580 <camellia_feistel>

    if( keybits > 128 ) {
 8005a40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005a44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b80      	cmp	r3, #128	@ 0x80
 8005a4c:	d940      	bls.n	8005ad0 <mbedtls_camellia_setkey_enc+0x41c>
        /* Generate KB */
        for( i = 0; i < 4; ++i )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a54:	e020      	b.n	8005a98 <mbedtls_camellia_setkey_enc+0x3e4>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8005a56:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005a62:	443b      	add	r3, r7
 8005a64:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8005a68:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005a74:	443b      	add	r3, r7
 8005a76:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8005a7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a7e:	330c      	adds	r3, #12
 8005a80:	404a      	eors	r2, r1
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005a88:	443b      	add	r3, r7
 8005a8a:	f843 2cbc 	str.w	r2, [r3, #-188]
        for( i = 0; i < 4; ++i )
 8005a8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a92:	3301      	adds	r3, #1
 8005a94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a98:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d9da      	bls.n	8005a56 <mbedtls_camellia_setkey_enc+0x3a2>

        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 8005aa0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005aa4:	3330      	adds	r3, #48	@ 0x30
 8005aa6:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8005aaa:	3238      	adds	r2, #56	@ 0x38
 8005aac:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8005ab0:	3120      	adds	r1, #32
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7ff fd64 	bl	8005580 <camellia_feistel>
        camellia_feistel( KC + 14, SIGMA[5], KC + 12 );
 8005ab8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005abc:	3338      	adds	r3, #56	@ 0x38
 8005abe:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8005ac2:	3230      	adds	r2, #48	@ 0x30
 8005ac4:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8005ac8:	3128      	adds	r1, #40	@ 0x28
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7ff fd58 	bl	8005580 <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE( idx, 0 );
 8005ad0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005ad2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ad6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ade:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ae2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005ae6:	605a      	str	r2, [r3, #4]
 8005ae8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005aea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005aee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005af6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005afa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005afe:	60da      	str	r2, [r3, #12]
 8005b00:	2301      	movs	r3, #1
 8005b02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005b06:	e0aa      	b.n	8005c5e <mbedtls_camellia_setkey_enc+0x5aa>
 8005b08:	0800ffbc 	.word	0x0800ffbc
 8005b0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005b10:	3b01      	subs	r3, #1
 8005b12:	49dd      	ldr	r1, [pc, #884]	@ (8005e88 <mbedtls_camellia_setkey_enc+0x7d4>)
 8005b14:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005b18:	0112      	lsls	r2, r2, #4
 8005b1a:	440a      	add	r2, r1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8097 	beq.w	8005c54 <mbedtls_camellia_setkey_enc+0x5a0>
 8005b26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005b34:	4613      	mov	r3, r2
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	4099      	lsls	r1, r3
 8005b40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b48:	6858      	ldr	r0, [r3, #4]
 8005b4a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005b4e:	4613      	mov	r3, r2
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	f1c3 0320 	rsb	r3, r3, #32
 8005b5c:	fa20 f203 	lsr.w	r2, r0, r3
 8005b60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	f107 0014 	add.w	r0, r7, #20
 8005b6a:	4403      	add	r3, r0
 8005b6c:	404a      	eors	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005b7e:	4613      	mov	r3, r2
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	1a9b      	subs	r3, r3, r2
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	4099      	lsls	r1, r3
 8005b8a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005b8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005b92:	6898      	ldr	r0, [r3, #8]
 8005b94:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	f1c3 0320 	rsb	r3, r3, #32
 8005ba6:	fa20 f203 	lsr.w	r2, r0, r3
 8005baa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	f107 0014 	add.w	r0, r7, #20
 8005bb6:	4403      	add	r3, r0
 8005bb8:	404a      	eors	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005bc0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005bc4:	6899      	ldr	r1, [r3, #8]
 8005bc6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005bca:	4613      	mov	r3, r2
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	4099      	lsls	r1, r3
 8005bd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005bda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005bde:	68d8      	ldr	r0, [r3, #12]
 8005be0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005be4:	4613      	mov	r3, r2
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	1a9b      	subs	r3, r3, r2
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	f1c3 0320 	rsb	r3, r3, #32
 8005bf2:	fa20 f203 	lsr.w	r2, r0, r3
 8005bf6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	f107 0014 	add.w	r0, r7, #20
 8005c02:	4403      	add	r3, r0
 8005c04:	404a      	eors	r2, r1
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c0c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c10:	68d9      	ldr	r1, [r3, #12]
 8005c12:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005c16:	4613      	mov	r3, r2
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	4099      	lsls	r1, r3
 8005c22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005c26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005c30:	4613      	mov	r3, r2
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	f003 031f 	and.w	r3, r3, #31
 8005c3a:	f1c3 0320 	rsb	r3, r3, #32
 8005c3e:	fa20 f203 	lsr.w	r2, r0, r3
 8005c42:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	330c      	adds	r3, #12
 8005c4a:	f107 0014 	add.w	r0, r7, #20
 8005c4e:	4403      	add	r3, r0
 8005c50:	404a      	eors	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005c5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	f67f af52 	bls.w	8005b0c <mbedtls_camellia_setkey_enc+0x458>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005c6e:	e02e      	b.n	8005cce <mbedtls_camellia_setkey_enc+0x61a>
 8005c70:	4986      	ldr	r1, [pc, #536]	@ (8005e8c <mbedtls_camellia_setkey_enc+0x7d8>)
 8005c72:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	18ca      	adds	r2, r1, r3
 8005c80:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005c84:	4413      	add	r3, r2
 8005c86:	f993 3000 	ldrsb.w	r3, [r3]
 8005c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8e:	d019      	beq.n	8005cc4 <mbedtls_camellia_setkey_enc+0x610>
 8005c90:	497e      	ldr	r1, [pc, #504]	@ (8005e8c <mbedtls_camellia_setkey_enc+0x7d8>)
 8005c92:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	18ca      	adds	r2, r1, r3
 8005ca0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f993 3000 	ldrsb.w	r3, [r3]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005cb6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005cba:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8005cbe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005cc8:	3301      	adds	r3, #1
 8005cca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005cce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005cd2:	2b13      	cmp	r3, #19
 8005cd4:	d9cc      	bls.n	8005c70 <mbedtls_camellia_setkey_enc+0x5bc>

    /* Manipulating KR */
    if( keybits > 128 ) {
 8005cd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cda:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b80      	cmp	r3, #128	@ 0x80
 8005ce2:	f240 810a 	bls.w	8005efa <mbedtls_camellia_setkey_enc+0x846>
        SHIFT_AND_PLACE( idx, 1 );
 8005ce6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ce8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005cf4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005cf8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005d00:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d08:	609a      	str	r2, [r3, #8]
 8005d0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d0e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d12:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d16:	60da      	str	r2, [r3, #12]
 8005d18:	2301      	movs	r3, #1
 8005d1a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005d1e:	e0a9      	b.n	8005e74 <mbedtls_camellia_setkey_enc+0x7c0>
 8005d20:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005d24:	3b01      	subs	r3, #1
 8005d26:	4958      	ldr	r1, [pc, #352]	@ (8005e88 <mbedtls_camellia_setkey_enc+0x7d4>)
 8005d28:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005d2c:	0112      	lsls	r2, r2, #4
 8005d2e:	440a      	add	r2, r1
 8005d30:	4413      	add	r3, r2
 8005d32:	3304      	adds	r3, #4
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 8097 	beq.w	8005e6a <mbedtls_camellia_setkey_enc+0x7b6>
 8005d3c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d40:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d44:	6819      	ldr	r1, [r3, #0]
 8005d46:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	4099      	lsls	r1, r3
 8005d56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d5e:	6858      	ldr	r0, [r3, #4]
 8005d60:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005d64:	4613      	mov	r3, r2
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	f003 031f 	and.w	r3, r3, #31
 8005d6e:	f1c3 0320 	rsb	r3, r3, #32
 8005d72:	fa20 f203 	lsr.w	r2, r0, r3
 8005d76:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	f107 0014 	add.w	r0, r7, #20
 8005d80:	4403      	add	r3, r0
 8005d82:	404a      	eors	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005d8a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005d8e:	6859      	ldr	r1, [r3, #4]
 8005d90:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005d94:	4613      	mov	r3, r2
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	4099      	lsls	r1, r3
 8005da0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005da4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005da8:	6898      	ldr	r0, [r3, #8]
 8005daa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005dae:	4613      	mov	r3, r2
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	f003 031f 	and.w	r3, r3, #31
 8005db8:	f1c3 0320 	rsb	r3, r3, #32
 8005dbc:	fa20 f203 	lsr.w	r2, r0, r3
 8005dc0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	f107 0014 	add.w	r0, r7, #20
 8005dcc:	4403      	add	r3, r0
 8005dce:	404a      	eors	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005dd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005dda:	6899      	ldr	r1, [r3, #8]
 8005ddc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005de0:	4613      	mov	r3, r2
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	4099      	lsls	r1, r3
 8005dec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005df0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005df4:	68d8      	ldr	r0, [r3, #12]
 8005df6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	1a9b      	subs	r3, r3, r2
 8005e00:	f003 031f 	and.w	r3, r3, #31
 8005e04:	f1c3 0320 	rsb	r3, r3, #32
 8005e08:	fa20 f203 	lsr.w	r2, r0, r3
 8005e0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005e10:	011b      	lsls	r3, r3, #4
 8005e12:	3308      	adds	r3, #8
 8005e14:	f107 0014 	add.w	r0, r7, #20
 8005e18:	4403      	add	r3, r0
 8005e1a:	404a      	eors	r2, r1
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e22:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005e26:	68d9      	ldr	r1, [r3, #12]
 8005e28:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	1a9b      	subs	r3, r3, r2
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	4099      	lsls	r1, r3
 8005e38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005e3c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005e46:	4613      	mov	r3, r2
 8005e48:	011b      	lsls	r3, r3, #4
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	f1c3 0320 	rsb	r3, r3, #32
 8005e54:	fa20 f203 	lsr.w	r2, r0, r3
 8005e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	330c      	adds	r3, #12
 8005e60:	f107 0014 	add.w	r0, r7, #20
 8005e64:	4403      	add	r3, r0
 8005e66:	404a      	eors	r2, r1
 8005e68:	601a      	str	r2, [r3, #0]
 8005e6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005e6e:	3301      	adds	r3, #1
 8005e70:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005e74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	f67f af51 	bls.w	8005d20 <mbedtls_camellia_setkey_enc+0x66c>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005e84:	e035      	b.n	8005ef2 <mbedtls_camellia_setkey_enc+0x83e>
 8005e86:	bf00      	nop
 8005e88:	080103ec 	.word	0x080103ec
 8005e8c:	0801040c 	.word	0x0801040c
 8005e90:	49b2      	ldr	r1, [pc, #712]	@ (800615c <mbedtls_camellia_setkey_enc+0xaa8>)
 8005e92:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	18ca      	adds	r2, r1, r3
 8005ea0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005ea4:	4413      	add	r3, r2
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d01a      	beq.n	8005ee8 <mbedtls_camellia_setkey_enc+0x834>
 8005eb2:	49aa      	ldr	r1, [pc, #680]	@ (800615c <mbedtls_camellia_setkey_enc+0xaa8>)
 8005eb4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	18ca      	adds	r2, r1, r3
 8005ec2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3314      	adds	r3, #20
 8005eca:	f993 3000 	ldrsb.w	r3, [r3]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005eda:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005ede:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8005ee2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005eec:	3301      	adds	r3, #1
 8005eee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005ef2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005ef6:	2b13      	cmp	r3, #19
 8005ef8:	d9ca      	bls.n	8005e90 <mbedtls_camellia_setkey_enc+0x7dc>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE( idx, 2 );
 8005efa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8005efe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f02:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005f0c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005f1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f22:	609a      	str	r2, [r3, #8]
 8005f24:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005f28:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f2c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f30:	60da      	str	r2, [r3, #12]
 8005f32:	2301      	movs	r3, #1
 8005f34:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005f38:	e0a9      	b.n	800608e <mbedtls_camellia_setkey_enc+0x9da>
 8005f3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	4987      	ldr	r1, [pc, #540]	@ (8006160 <mbedtls_camellia_setkey_enc+0xaac>)
 8005f42:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005f46:	0112      	lsls	r2, r2, #4
 8005f48:	440a      	add	r2, r1
 8005f4a:	4413      	add	r3, r2
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8097 	beq.w	8006084 <mbedtls_camellia_setkey_enc+0x9d0>
 8005f56:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f5e:	6819      	ldr	r1, [r3, #0]
 8005f60:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f64:	4613      	mov	r3, r2
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	4099      	lsls	r1, r3
 8005f70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005f74:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005f78:	6858      	ldr	r0, [r3, #4]
 8005f7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005f7e:	4613      	mov	r3, r2
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	f1c3 0320 	rsb	r3, r3, #32
 8005f8c:	fa20 f203 	lsr.w	r2, r0, r3
 8005f90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	f107 0014 	add.w	r0, r7, #20
 8005f9a:	4403      	add	r3, r0
 8005f9c:	404a      	eors	r2, r1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005fa4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005fa8:	6859      	ldr	r1, [r3, #4]
 8005faa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005fae:	4613      	mov	r3, r2
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	1a9b      	subs	r3, r3, r2
 8005fb4:	f003 031f 	and.w	r3, r3, #31
 8005fb8:	4099      	lsls	r1, r3
 8005fba:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005fbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005fc2:	6898      	ldr	r0, [r3, #8]
 8005fc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005fc8:	4613      	mov	r3, r2
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	f1c3 0320 	rsb	r3, r3, #32
 8005fd6:	fa20 f203 	lsr.w	r2, r0, r3
 8005fda:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	f107 0014 	add.w	r0, r7, #20
 8005fe6:	4403      	add	r3, r0
 8005fe8:	404a      	eors	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005ff0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005ff4:	6899      	ldr	r1, [r3, #8]
 8005ff6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	4099      	lsls	r1, r3
 8006006:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800600a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800600e:	68d8      	ldr	r0, [r3, #12]
 8006010:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006014:	4613      	mov	r3, r2
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	1a9b      	subs	r3, r3, r2
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	f1c3 0320 	rsb	r3, r3, #32
 8006022:	fa20 f203 	lsr.w	r2, r0, r3
 8006026:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	3308      	adds	r3, #8
 800602e:	f107 0014 	add.w	r0, r7, #20
 8006032:	4403      	add	r3, r0
 8006034:	404a      	eors	r2, r1
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800603c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006040:	68d9      	ldr	r1, [r3, #12]
 8006042:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006046:	4613      	mov	r3, r2
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	f003 031f 	and.w	r3, r3, #31
 8006050:	4099      	lsls	r1, r3
 8006052:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006056:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006060:	4613      	mov	r3, r2
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	f003 031f 	and.w	r3, r3, #31
 800606a:	f1c3 0320 	rsb	r3, r3, #32
 800606e:	fa20 f203 	lsr.w	r2, r0, r3
 8006072:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	330c      	adds	r3, #12
 800607a:	f107 0014 	add.w	r0, r7, #20
 800607e:	4403      	add	r3, r0
 8006080:	404a      	eors	r2, r1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006088:	3301      	adds	r3, #1
 800608a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800608e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006092:	2b04      	cmp	r3, #4
 8006094:	f67f af51 	bls.w	8005f3a <mbedtls_camellia_setkey_enc+0x886>
 8006098:	2300      	movs	r3, #0
 800609a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800609e:	e030      	b.n	8006102 <mbedtls_camellia_setkey_enc+0xa4e>
 80060a0:	492e      	ldr	r1, [pc, #184]	@ (800615c <mbedtls_camellia_setkey_enc+0xaa8>)
 80060a2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80060a6:	4613      	mov	r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	011b      	lsls	r3, r3, #4
 80060ae:	18ca      	adds	r2, r1, r3
 80060b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80060b4:	4413      	add	r3, r2
 80060b6:	3328      	adds	r3, #40	@ 0x28
 80060b8:	f993 3000 	ldrsb.w	r3, [r3]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d01a      	beq.n	80060f8 <mbedtls_camellia_setkey_enc+0xa44>
 80060c2:	4926      	ldr	r1, [pc, #152]	@ (800615c <mbedtls_camellia_setkey_enc+0xaa8>)
 80060c4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	18ca      	adds	r2, r1, r3
 80060d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80060d6:	4413      	add	r3, r2
 80060d8:	3328      	adds	r3, #40	@ 0x28
 80060da:	f993 3000 	ldrsb.w	r3, [r3]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80060e4:	4413      	add	r3, r2
 80060e6:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80060ea:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80060ee:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80060f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80060fc:	3301      	adds	r3, #1
 80060fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006102:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006106:	2b13      	cmp	r3, #19
 8006108:	d9ca      	bls.n	80060a0 <mbedtls_camellia_setkey_enc+0x9ec>

    /* Manipulating KB */
    if( keybits > 128 ) {
 800610a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800610e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b80      	cmp	r3, #128	@ 0x80
 8006116:	f240 810d 	bls.w	8006334 <mbedtls_camellia_setkey_enc+0xc80>
        SHIFT_AND_PLACE( idx, 3 );
 800611a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800611e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006122:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800612c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006130:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006134:	605a      	str	r2, [r3, #4]
 8006136:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800613a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800613e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006142:	609a      	str	r2, [r3, #8]
 8006144:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8006148:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800614c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006150:	60da      	str	r2, [r3, #12]
 8006152:	2301      	movs	r3, #1
 8006154:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8006158:	e0ae      	b.n	80062b8 <mbedtls_camellia_setkey_enc+0xc04>
 800615a:	bf00      	nop
 800615c:	0801040c 	.word	0x0801040c
 8006160:	080103ec 	.word	0x080103ec
 8006164:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006168:	3b01      	subs	r3, #1
 800616a:	4995      	ldr	r1, [pc, #596]	@ (80063c0 <mbedtls_camellia_setkey_enc+0xd0c>)
 800616c:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006170:	0112      	lsls	r2, r2, #4
 8006172:	440a      	add	r2, r1
 8006174:	4413      	add	r3, r2
 8006176:	330c      	adds	r3, #12
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 8097 	beq.w	80062ae <mbedtls_camellia_setkey_enc+0xbfa>
 8006180:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006184:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006188:	6819      	ldr	r1, [r3, #0]
 800618a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800618e:	4613      	mov	r3, r2
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	f003 031f 	and.w	r3, r3, #31
 8006198:	4099      	lsls	r1, r3
 800619a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800619e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80061a2:	6858      	ldr	r0, [r3, #4]
 80061a4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80061a8:	4613      	mov	r3, r2
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	f003 031f 	and.w	r3, r3, #31
 80061b2:	f1c3 0320 	rsb	r3, r3, #32
 80061b6:	fa20 f203 	lsr.w	r2, r0, r3
 80061ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	f107 0014 	add.w	r0, r7, #20
 80061c4:	4403      	add	r3, r0
 80061c6:	404a      	eors	r2, r1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80061ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80061d2:	6859      	ldr	r1, [r3, #4]
 80061d4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80061d8:	4613      	mov	r3, r2
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	4099      	lsls	r1, r3
 80061e4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80061e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80061ec:	6898      	ldr	r0, [r3, #8]
 80061ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80061f2:	4613      	mov	r3, r2
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	f1c3 0320 	rsb	r3, r3, #32
 8006200:	fa20 f203 	lsr.w	r2, r0, r3
 8006204:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006208:	011b      	lsls	r3, r3, #4
 800620a:	3304      	adds	r3, #4
 800620c:	f107 0014 	add.w	r0, r7, #20
 8006210:	4403      	add	r3, r0
 8006212:	404a      	eors	r2, r1
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800621a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800621e:	6899      	ldr	r1, [r3, #8]
 8006220:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006224:	4613      	mov	r3, r2
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	1a9b      	subs	r3, r3, r2
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	4099      	lsls	r1, r3
 8006230:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006234:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006238:	68d8      	ldr	r0, [r3, #12]
 800623a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800623e:	4613      	mov	r3, r2
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	f1c3 0320 	rsb	r3, r3, #32
 800624c:	fa20 f203 	lsr.w	r2, r0, r3
 8006250:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	3308      	adds	r3, #8
 8006258:	f107 0014 	add.w	r0, r7, #20
 800625c:	4403      	add	r3, r0
 800625e:	404a      	eors	r2, r1
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006266:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800626a:	68d9      	ldr	r1, [r3, #12]
 800626c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8006270:	4613      	mov	r3, r2
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	4099      	lsls	r1, r3
 800627c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8006280:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800628a:	4613      	mov	r3, r2
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	1a9b      	subs	r3, r3, r2
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	f1c3 0320 	rsb	r3, r3, #32
 8006298:	fa20 f203 	lsr.w	r2, r0, r3
 800629c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	330c      	adds	r3, #12
 80062a4:	f107 0014 	add.w	r0, r7, #20
 80062a8:	4403      	add	r3, r0
 80062aa:	404a      	eors	r2, r1
 80062ac:	601a      	str	r2, [r3, #0]
 80062ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062b2:	3301      	adds	r3, #1
 80062b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80062b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062bc:	2b04      	cmp	r3, #4
 80062be:	f67f af51 	bls.w	8006164 <mbedtls_camellia_setkey_enc+0xab0>
 80062c2:	2300      	movs	r3, #0
 80062c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80062c8:	e030      	b.n	800632c <mbedtls_camellia_setkey_enc+0xc78>
 80062ca:	493e      	ldr	r1, [pc, #248]	@ (80063c4 <mbedtls_camellia_setkey_enc+0xd10>)
 80062cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	18ca      	adds	r2, r1, r3
 80062da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80062de:	4413      	add	r3, r2
 80062e0:	333c      	adds	r3, #60	@ 0x3c
 80062e2:	f993 3000 	ldrsb.w	r3, [r3]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d01a      	beq.n	8006322 <mbedtls_camellia_setkey_enc+0xc6e>
 80062ec:	4935      	ldr	r1, [pc, #212]	@ (80063c4 <mbedtls_camellia_setkey_enc+0xd10>)
 80062ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	18ca      	adds	r2, r1, r3
 80062fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006300:	4413      	add	r3, r2
 8006302:	333c      	adds	r3, #60	@ 0x3c
 8006304:	f993 3000 	ldrsb.w	r3, [r3]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800630e:	4413      	add	r3, r2
 8006310:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8006314:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8006318:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800631c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006326:	3301      	adds	r3, #1
 8006328:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800632c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006330:	2b13      	cmp	r3, #19
 8006332:	d9ca      	bls.n	80062ca <mbedtls_camellia_setkey_enc+0xc16>
    }

    /* Do transpositions */
    for( i = 0; i < 20; i++ ) {
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800633a:	e036      	b.n	80063aa <mbedtls_camellia_setkey_enc+0xcf6>
        if( transposes[idx][i] != -1 ) {
 800633c:	4922      	ldr	r1, [pc, #136]	@ (80063c8 <mbedtls_camellia_setkey_enc+0xd14>)
 800633e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006342:	4613      	mov	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	18ca      	adds	r2, r1, r3
 800634c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006350:	4413      	add	r3, r2
 8006352:	f993 3000 	ldrsb.w	r3, [r3]
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635a:	d021      	beq.n	80063a0 <mbedtls_camellia_setkey_enc+0xcec>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 800635c:	491a      	ldr	r1, [pc, #104]	@ (80063c8 <mbedtls_camellia_setkey_enc+0xd14>)
 800635e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	18ca      	adds	r2, r1, r3
 800636c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006370:	4413      	add	r3, r2
 8006372:	f993 3000 	ldrsb.w	r3, [r3]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800637c:	18d1      	adds	r1, r2, r3
 800637e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	461a      	mov	r2, r3
 800638c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006390:	4413      	add	r3, r2
 8006392:	3320      	adds	r3, #32
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800639a:	4413      	add	r3, r2
 800639c:	680a      	ldr	r2, [r1, #0]
 800639e:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 20; i++ ) {
 80063a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80063a4:	3301      	adds	r3, #1
 80063a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80063aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80063ae:	2b13      	cmp	r3, #19
 80063b0:	d9c4      	bls.n	800633c <mbedtls_camellia_setkey_enc+0xc88>
        }
    }

    return( 0 );
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	080103ec 	.word	0x080103ec
 80063c4:	0801040c 	.word	0x0801040c
 80063c8:	080104ac 	.word	0x080104ac

080063cc <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b0ce      	sub	sp, #312	@ 0x138
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063d6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80063da:	6018      	str	r0, [r3, #0]
 80063dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80063e4:	6019      	str	r1, [r3, #0]
 80063e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063ea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80063ee:	601a      	str	r2, [r3, #0]
    uint32_t *RK;
    uint32_t *SK;
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    mbedtls_camellia_init( &cty );
 80063f0:	f107 0310 	add.w	r3, r7, #16
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff f93d 	bl	8005674 <mbedtls_camellia_init>

    /* Also checks keybits */
    if( ( ret = mbedtls_camellia_setkey_enc( &cty, key, keybits ) ) != 0 )
 80063fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80063fe:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8006402:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006406:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800640a:	f107 0010 	add.w	r0, r7, #16
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	6819      	ldr	r1, [r3, #0]
 8006412:	f7ff f94f 	bl	80056b4 <mbedtls_camellia_setkey_enc>
 8006416:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 800641a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 80c3 	bne.w	80065aa <mbedtls_camellia_setkey_dec+0x1de>
        goto exit;

    ctx->nr = cty.nr;
 8006424:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006428:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006432:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	601a      	str	r2, [r3, #0]
    idx = ( ctx->nr == 4 );
 800643a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800643e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b04      	cmp	r3, #4
 8006448:	bf0c      	ite	eq
 800644a:	2301      	moveq	r3, #1
 800644c:	2300      	movne	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    RK = ctx->rk;
 8006454:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006458:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	3304      	adds	r3, #4
 8006460:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 8006464:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	3318      	adds	r3, #24
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	f107 0210 	add.w	r2, r7, #16
 8006472:	3204      	adds	r2, #4
 8006474:	4413      	add	r3, r2
 8006476:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    *RK++ = *SK++;
 800647a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800647e:	1d13      	adds	r3, r2, #4
 8006480:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006484:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006488:	1d19      	adds	r1, r3, #4
 800648a:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006492:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8006496:	1d13      	adds	r3, r2, #4
 8006498:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800649c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064a0:	1d19      	adds	r1, r3, #4
 80064a2:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80064aa:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80064ae:	1d13      	adds	r3, r2, #4
 80064b0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80064b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064b8:	1d19      	adds	r1, r3, #4
 80064ba:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80064c2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80064c6:	1d13      	adds	r3, r2, #4
 80064c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80064cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80064d0:	1d19      	adds	r1, r3, #4
 80064d2:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	601a      	str	r2, [r3, #0]

    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 80064da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80064de:	00db      	lsls	r3, r3, #3
 80064e0:	3316      	adds	r3, #22
 80064e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80064e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80064ea:	3b18      	subs	r3, #24
 80064ec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80064f0:	e021      	b.n	8006536 <mbedtls_camellia_setkey_dec+0x16a>
    {
        *RK++ = *SK++;
 80064f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80064f6:	1d13      	adds	r3, r2, #4
 80064f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80064fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006500:	1d19      	adds	r1, r3, #4
 8006502:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 800650a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800650e:	1d13      	adds	r3, r2, #4
 8006510:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006514:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800651e:	6812      	ldr	r2, [r2, #0]
 8006520:	601a      	str	r2, [r3, #0]
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 8006522:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006526:	3b01      	subs	r3, #1
 8006528:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800652c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006530:	3b10      	subs	r3, #16
 8006532:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006536:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1d9      	bne.n	80064f2 <mbedtls_camellia_setkey_dec+0x126>
    }

    SK -= 2;
 800653e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006542:	3b08      	subs	r3, #8
 8006544:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    *RK++ = *SK++;
 8006548:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800654c:	1d13      	adds	r3, r2, #4
 800654e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006552:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006556:	1d19      	adds	r1, r3, #4
 8006558:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800655c:	6812      	ldr	r2, [r2, #0]
 800655e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006560:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8006564:	1d13      	adds	r3, r2, #4
 8006566:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800656a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800656e:	1d19      	adds	r1, r3, #4
 8006570:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006578:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800657c:	1d13      	adds	r3, r2, #4
 800657e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006582:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006586:	1d19      	adds	r1, r3, #4
 8006588:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8006590:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8006594:	1d13      	adds	r3, r2, #4
 8006596:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800659a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800659e:	1d19      	adds	r1, r3, #4
 80065a0:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	e000      	b.n	80065ac <mbedtls_camellia_setkey_dec+0x1e0>
        goto exit;
 80065aa:	bf00      	nop

exit:
    mbedtls_camellia_free( &cty );
 80065ac:	f107 0310 	add.w	r3, r7, #16
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff f86d 	bl	8005690 <mbedtls_camellia_free>

    return( ret );
 80065b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb( mbedtls_camellia_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08a      	sub	sp, #40	@ 0x28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( input  != NULL );
    CAMELLIA_VALIDATE_RET( output != NULL );

    ( (void) mode );

    NR = ctx->nr;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	627b      	str	r3, [r7, #36]	@ 0x24
    RK = ctx->rk;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	3304      	adds	r3, #4
 80065dc:	623b      	str	r3, [r7, #32]

    GET_UINT32_BE( X[0], input,  0 );
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	061a      	lsls	r2, r3, #24
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3301      	adds	r3, #1
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	041b      	lsls	r3, r3, #16
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	3302      	adds	r3, #2
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	4313      	orrs	r3, r2
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	3203      	adds	r2, #3
 80065fc:	7812      	ldrb	r2, [r2, #0]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
    GET_UINT32_BE( X[1], input,  4 );
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3304      	adds	r3, #4
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	061a      	lsls	r2, r3, #24
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3305      	adds	r3, #5
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	041b      	lsls	r3, r3, #16
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3306      	adds	r3, #6
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	4313      	orrs	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	3207      	adds	r2, #7
 8006622:	7812      	ldrb	r2, [r2, #0]
 8006624:	4313      	orrs	r3, r2
 8006626:	617b      	str	r3, [r7, #20]
    GET_UINT32_BE( X[2], input,  8 );
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	3308      	adds	r3, #8
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	061a      	lsls	r2, r3, #24
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3309      	adds	r3, #9
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	041b      	lsls	r3, r3, #16
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	330a      	adds	r3, #10
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	4313      	orrs	r3, r2
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	320b      	adds	r2, #11
 8006648:	7812      	ldrb	r2, [r2, #0]
 800664a:	4313      	orrs	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
    GET_UINT32_BE( X[3], input, 12 );
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	330c      	adds	r3, #12
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	061a      	lsls	r2, r3, #24
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	330d      	adds	r3, #13
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	041b      	lsls	r3, r3, #16
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	330e      	adds	r3, #14
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	4313      	orrs	r3, r2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	320f      	adds	r2, #15
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	4313      	orrs	r3, r2
 8006672:	61fb      	str	r3, [r7, #28]

    X[0] ^= *RK++;
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	623a      	str	r2, [r7, #32]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4053      	eors	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	1d1a      	adds	r2, r3, #4
 8006686:	623a      	str	r2, [r7, #32]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	4053      	eors	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
    X[2] ^= *RK++;
 8006690:	6a3b      	ldr	r3, [r7, #32]
 8006692:	1d1a      	adds	r2, r3, #4
 8006694:	623a      	str	r2, [r7, #32]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	4053      	eors	r3, r2
 800669c:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	623a      	str	r2, [r7, #32]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4053      	eors	r3, r2
 80066aa:	61fb      	str	r3, [r7, #28]

    while( NR ) {
 80066ac:	e075      	b.n	800679a <mbedtls_camellia_crypt_ecb+0x1d6>
        --NR;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b0:	3b01      	subs	r3, #1
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
        camellia_feistel( X, RK, X + 2 );
 80066b4:	f107 0310 	add.w	r3, r7, #16
 80066b8:	3308      	adds	r3, #8
 80066ba:	f107 0010 	add.w	r0, r7, #16
 80066be:	461a      	mov	r2, r3
 80066c0:	6a39      	ldr	r1, [r7, #32]
 80066c2:	f7fe ff5d 	bl	8005580 <camellia_feistel>
        RK += 2;
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	3308      	adds	r3, #8
 80066ca:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	3308      	adds	r3, #8
 80066d2:	f107 0210 	add.w	r2, r7, #16
 80066d6:	6a39      	ldr	r1, [r7, #32]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7fe ff51 	bl	8005580 <camellia_feistel>
        RK += 2;
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	3308      	adds	r3, #8
 80066e2:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 80066e4:	f107 0310 	add.w	r3, r7, #16
 80066e8:	3308      	adds	r3, #8
 80066ea:	f107 0010 	add.w	r0, r7, #16
 80066ee:	461a      	mov	r2, r3
 80066f0:	6a39      	ldr	r1, [r7, #32]
 80066f2:	f7fe ff45 	bl	8005580 <camellia_feistel>
        RK += 2;
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	3308      	adds	r3, #8
 80066fa:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 80066fc:	f107 0310 	add.w	r3, r7, #16
 8006700:	3308      	adds	r3, #8
 8006702:	f107 0210 	add.w	r2, r7, #16
 8006706:	6a39      	ldr	r1, [r7, #32]
 8006708:	4618      	mov	r0, r3
 800670a:	f7fe ff39 	bl	8005580 <camellia_feistel>
        RK += 2;
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	3308      	adds	r3, #8
 8006712:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 8006714:	f107 0310 	add.w	r3, r7, #16
 8006718:	3308      	adds	r3, #8
 800671a:	f107 0010 	add.w	r0, r7, #16
 800671e:	461a      	mov	r2, r3
 8006720:	6a39      	ldr	r1, [r7, #32]
 8006722:	f7fe ff2d 	bl	8005580 <camellia_feistel>
        RK += 2;
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	3308      	adds	r3, #8
 800672a:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 800672c:	f107 0310 	add.w	r3, r7, #16
 8006730:	3308      	adds	r3, #8
 8006732:	f107 0210 	add.w	r2, r7, #16
 8006736:	6a39      	ldr	r1, [r7, #32]
 8006738:	4618      	mov	r0, r3
 800673a:	f7fe ff21 	bl	8005580 <camellia_feistel>
        RK += 2;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	3308      	adds	r3, #8
 8006742:	623b      	str	r3, [r7, #32]

        if( NR ) {
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d027      	beq.n	800679a <mbedtls_camellia_crypt_ecb+0x1d6>
            FL(X[0], X[1], RK[0], RK[1]);
 800674a:	693a      	ldr	r2, [r7, #16]
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4013      	ands	r3, r2
 8006752:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	4053      	eors	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	3304      	adds	r3, #4
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	431a      	orrs	r2, r3
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4053      	eors	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
            RK += 2;
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	3308      	adds	r3, #8
 8006770:	623b      	str	r3, [r7, #32]
            FLInv(X[2], X[3], RK[0], RK[1]);
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	3304      	adds	r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	431a      	orrs	r2, r3
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	4053      	eors	r3, r2
 8006780:	61bb      	str	r3, [r7, #24]
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4013      	ands	r3, r2
 800678a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	4053      	eors	r3, r2
 8006792:	61fb      	str	r3, [r7, #28]
            RK += 2;
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	3308      	adds	r3, #8
 8006798:	623b      	str	r3, [r7, #32]
    while( NR ) {
 800679a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679c:	2b00      	cmp	r3, #0
 800679e:	d186      	bne.n	80066ae <mbedtls_camellia_crypt_ecb+0xea>
        }
    }

    X[2] ^= *RK++;
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	623a      	str	r2, [r7, #32]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	4053      	eors	r3, r2
 80067ac:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	1d1a      	adds	r2, r3, #4
 80067b2:	623a      	str	r2, [r7, #32]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	4053      	eors	r3, r2
 80067ba:	61fb      	str	r3, [r7, #28]
    X[0] ^= *RK++;
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	623a      	str	r2, [r7, #32]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	4053      	eors	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	1d1a      	adds	r2, r3, #4
 80067ce:	623a      	str	r2, [r7, #32]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	4053      	eors	r3, r2
 80067d6:	617b      	str	r3, [r7, #20]

    PUT_UINT32_BE( X[2], output,  0 );
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	0e1b      	lsrs	r3, r3, #24
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	0c1a      	lsrs	r2, r3, #16
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	3301      	adds	r3, #1
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	0a1a      	lsrs	r2, r3, #8
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	3302      	adds	r3, #2
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	3303      	adds	r3, #3
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[3], output,  4 );
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	0e1a      	lsrs	r2, r3, #24
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	3304      	adds	r3, #4
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	0c1a      	lsrs	r2, r3, #16
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	3305      	adds	r3, #5
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	0a1a      	lsrs	r2, r3, #8
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	3306      	adds	r3, #6
 8006824:	b2d2      	uxtb	r2, r2
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	3307      	adds	r3, #7
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[0], output,  8 );
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	0e1a      	lsrs	r2, r3, #24
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	3308      	adds	r3, #8
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	0c1a      	lsrs	r2, r3, #16
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	3309      	adds	r3, #9
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	0a1a      	lsrs	r2, r3, #8
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	330a      	adds	r3, #10
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	330b      	adds	r3, #11
 800685c:	b2d2      	uxtb	r2, r2
 800685e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[1], output, 12 );
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	0e1a      	lsrs	r2, r3, #24
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	0c1a      	lsrs	r2, r3, #16
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	330d      	adds	r3, #13
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	0a1a      	lsrs	r2, r3, #8
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	330e      	adds	r3, #14
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	330f      	adds	r3, #15
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3728      	adds	r7, #40	@ 0x28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <mbedtls_camellia_crypt_cbc>:
                                int mode,
                                size_t length,
                                unsigned char iv[16],
                                const unsigned char *input,
                                unsigned char *output )
{
 8006898:	b5b0      	push	{r4, r5, r7, lr}
 800689a:	b08a      	sub	sp, #40	@ 0x28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
                           mode == MBEDTLS_CAMELLIA_DECRYPT );
    CAMELLIA_VALIDATE_RET( iv != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    if( length % 16 )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f003 030f 	and.w	r3, r3, #15
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <mbedtls_camellia_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH );
 80068b0:	f06f 0325 	mvn.w	r3, #37	@ 0x25
 80068b4:	e06d      	b.n	8006992 <mbedtls_camellia_crypt_cbc+0xfa>

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d166      	bne.n	800698a <mbedtls_camellia_crypt_cbc+0xf2>
    {
        while( length > 0 )
 80068bc:	e036      	b.n	800692c <mbedtls_camellia_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	f107 0414 	add.w	r4, r7, #20
 80068c4:	6818      	ldr	r0, [r3, #0]
 80068c6:	6859      	ldr	r1, [r3, #4]
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb( ctx, mode, input, output );
 80068ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80068d2:	68b9      	ldr	r1, [r7, #8]
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7ff fe75 	bl	80065c4 <mbedtls_camellia_crypt_ecb>

            for( i = 0; i < 16; i++ )
 80068da:	2300      	movs	r3, #0
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068de:	e010      	b.n	8006902 <mbedtls_camellia_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80068e4:	4413      	add	r3, r2
 80068e6:	7819      	ldrb	r1, [r3, #0]
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	4413      	add	r3, r2
 80068ee:	781a      	ldrb	r2, [r3, #0]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80068f4:	4403      	add	r3, r0
 80068f6:	404a      	eors	r2, r1
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80068fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fe:	3301      	adds	r3, #1
 8006900:	627b      	str	r3, [r7, #36]	@ 0x24
 8006902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006904:	2b0f      	cmp	r3, #15
 8006906:	ddeb      	ble.n	80068e0 <mbedtls_camellia_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	461d      	mov	r5, r3
 800690c:	f107 0414 	add.w	r4, r7, #20
 8006910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006912:	6028      	str	r0, [r5, #0]
 8006914:	6069      	str	r1, [r5, #4]
 8006916:	60aa      	str	r2, [r5, #8]
 8006918:	60eb      	str	r3, [r5, #12]

            input  += 16;
 800691a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800691c:	3310      	adds	r3, #16
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8006920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006922:	3310      	adds	r3, #16
 8006924:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	3b10      	subs	r3, #16
 800692a:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1c5      	bne.n	80068be <mbedtls_camellia_crypt_cbc+0x26>
 8006932:	e02d      	b.n	8006990 <mbedtls_camellia_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8006934:	2300      	movs	r3, #0
 8006936:	627b      	str	r3, [r7, #36]	@ 0x24
 8006938:	e010      	b.n	800695c <mbedtls_camellia_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 800693a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800693e:	4413      	add	r3, r2
 8006940:	7819      	ldrb	r1, [r3, #0]
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	4413      	add	r3, r2
 8006948:	781a      	ldrb	r2, [r3, #0]
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800694e:	4403      	add	r3, r0
 8006950:	404a      	eors	r2, r1
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	3301      	adds	r3, #1
 800695a:	627b      	str	r3, [r7, #36]	@ 0x24
 800695c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695e:	2b0f      	cmp	r3, #15
 8006960:	ddeb      	ble.n	800693a <mbedtls_camellia_crypt_cbc+0xa2>

            mbedtls_camellia_crypt_ecb( ctx, mode, output, output );
 8006962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006964:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f7ff fe2b 	bl	80065c4 <mbedtls_camellia_crypt_ecb>
            memcpy( iv, output, 16 );
 800696e:	2210      	movs	r2, #16
 8006970:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006972:	6838      	ldr	r0, [r7, #0]
 8006974:	f006 ff1d 	bl	800d7b2 <memcpy>

            input  += 16;
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	3310      	adds	r3, #16
 800697c:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800697e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006980:	3310      	adds	r3, #16
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3b10      	subs	r3, #16
 8006988:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1d1      	bne.n	8006934 <mbedtls_camellia_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3728      	adds	r7, #40	@ 0x28
 8006996:	46bd      	mov	sp, r7
 8006998:	bdb0      	pop	{r4, r5, r7, pc}

0800699a <chacha20_quarter_round>:
static inline void chacha20_quarter_round( uint32_t state[16],
                                           size_t a,
                                           size_t b,
                                           size_t c,
                                           size_t d )
{
 800699a:	b480      	push	{r7}
 800699c:	b085      	sub	sp, #20
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	6819      	ldr	r1, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	4403      	add	r3, r0
 80069c4:	440a      	add	r2, r1
 80069c6:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	6819      	ldr	r1, [r3, #0]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	4403      	add	r3, r0
 80069e4:	404a      	eors	r2, r1
 80069e6:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 16 );
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	440b      	add	r3, r1
 80069fa:	ea4f 4232 	mov.w	r2, r2, ror #16
 80069fe:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4413      	add	r3, r2
 8006a08:	6819      	ldr	r1, [r3, #0]
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4413      	add	r3, r2
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	4403      	add	r3, r0
 8006a1c:	440a      	add	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	6819      	ldr	r1, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4413      	add	r3, r2
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	4403      	add	r3, r0
 8006a3c:	404a      	eors	r2, r1
 8006a3e:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 12 );
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	68f9      	ldr	r1, [r7, #12]
 8006a50:	440b      	add	r3, r1
 8006a52:	ea4f 5232 	mov.w	r2, r2, ror #20
 8006a56:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	68fa      	ldr	r2, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	6819      	ldr	r1, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	4403      	add	r3, r0
 8006a74:	440a      	add	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	6819      	ldr	r1, [r3, #0]
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	4403      	add	r3, r0
 8006a94:	404a      	eors	r2, r1
 8006a96:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 8 );
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	440b      	add	r3, r1
 8006aaa:	ea4f 6232 	mov.w	r2, r2, ror #24
 8006aae:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	6819      	ldr	r1, [r3, #0]
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	4403      	add	r3, r0
 8006acc:	440a      	add	r2, r1
 8006ace:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	6819      	ldr	r1, [r3, #0]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	4403      	add	r3, r0
 8006aec:	404a      	eors	r2, r1
 8006aee:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 7 );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	440b      	add	r3, r1
 8006b02:	ea4f 6272 	mov.w	r2, r2, ror #25
 8006b06:	601a      	str	r2, [r3, #0]
}
 8006b08:	bf00      	nop
 8006b0a:	3714      	adds	r7, #20
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block( uint32_t state[16] )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round( state, 0, 4, 8,  12 );
 8006b1c:	230c      	movs	r3, #12
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	2308      	movs	r3, #8
 8006b22:	2204      	movs	r2, #4
 8006b24:	2100      	movs	r1, #0
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff ff37 	bl	800699a <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 5, 9,  13 );
 8006b2c:	230d      	movs	r3, #13
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2309      	movs	r3, #9
 8006b32:	2205      	movs	r2, #5
 8006b34:	2101      	movs	r1, #1
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff ff2f 	bl	800699a <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 6, 10, 14 );
 8006b3c:	230e      	movs	r3, #14
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	230a      	movs	r3, #10
 8006b42:	2206      	movs	r2, #6
 8006b44:	2102      	movs	r1, #2
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff ff27 	bl	800699a <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 7, 11, 15 );
 8006b4c:	230f      	movs	r3, #15
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	230b      	movs	r3, #11
 8006b52:	2207      	movs	r2, #7
 8006b54:	2103      	movs	r1, #3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff ff1f 	bl	800699a <chacha20_quarter_round>

    chacha20_quarter_round( state, 0, 5, 10, 15 );
 8006b5c:	230f      	movs	r3, #15
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	230a      	movs	r3, #10
 8006b62:	2205      	movs	r2, #5
 8006b64:	2100      	movs	r1, #0
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff ff17 	bl	800699a <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 6, 11, 12 );
 8006b6c:	230c      	movs	r3, #12
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	230b      	movs	r3, #11
 8006b72:	2206      	movs	r2, #6
 8006b74:	2101      	movs	r1, #1
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ff0f 	bl	800699a <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 7, 8,  13 );
 8006b7c:	230d      	movs	r3, #13
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	2308      	movs	r3, #8
 8006b82:	2207      	movs	r2, #7
 8006b84:	2102      	movs	r1, #2
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff ff07 	bl	800699a <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 4, 9,  14 );
 8006b8c:	230e      	movs	r3, #14
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2309      	movs	r3, #9
 8006b92:	2204      	movs	r2, #4
 8006b94:	2103      	movs	r1, #3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f7ff feff 	bl	800699a <chacha20_quarter_round>
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block( const uint32_t initial_state[16],
                            unsigned char keystream[64] )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b094      	sub	sp, #80	@ 0x50
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy( working_state,
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	2240      	movs	r2, #64	@ 0x40
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f006 fdfb 	bl	800d7b2 <memcpy>
            initial_state,
            CHACHA20_BLOCK_SIZE_BYTES );

    for( i = 0U; i < 10U; i++ )
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	e007      	b.n	8006bd2 <chacha20_block+0x2e>
        chacha20_inner_block( working_state );
 8006bc2:	f107 0308 	add.w	r3, r7, #8
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7ff ffa4 	bl	8006b14 <chacha20_inner_block>
    for( i = 0U; i < 10U; i++ )
 8006bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bce:	3301      	adds	r3, #1
 8006bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bd4:	2b09      	cmp	r3, #9
 8006bd6:	d9f4      	bls.n	8006bc2 <chacha20_block+0x1e>

    working_state[ 0] += initial_state[ 0];
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4413      	add	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]
    working_state[ 1] += initial_state[ 1];
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3304      	adds	r3, #4
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4413      	add	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
    working_state[ 2] += initial_state[ 2];
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
    working_state[ 3] += initial_state[ 3];
 8006bfa:	697a      	ldr	r2, [r7, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	330c      	adds	r3, #12
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4413      	add	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
    working_state[ 4] += initial_state[ 4];
 8006c06:	69ba      	ldr	r2, [r7, #24]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3310      	adds	r3, #16
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4413      	add	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
    working_state[ 5] += initial_state[ 5];
 8006c12:	69fa      	ldr	r2, [r7, #28]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3314      	adds	r3, #20
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	61fb      	str	r3, [r7, #28]
    working_state[ 6] += initial_state[ 6];
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3318      	adds	r3, #24
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4413      	add	r3, r2
 8006c28:	623b      	str	r3, [r7, #32]
    working_state[ 7] += initial_state[ 7];
 8006c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	331c      	adds	r3, #28
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4413      	add	r3, r2
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
    working_state[ 8] += initial_state[ 8];
 8006c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3320      	adds	r3, #32
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4413      	add	r3, r2
 8006c40:	62bb      	str	r3, [r7, #40]	@ 0x28
    working_state[ 9] += initial_state[ 9];
 8006c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	3324      	adds	r3, #36	@ 0x24
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    working_state[10] += initial_state[10];
 8006c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3328      	adds	r3, #40	@ 0x28
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4413      	add	r3, r2
 8006c58:	633b      	str	r3, [r7, #48]	@ 0x30
    working_state[11] += initial_state[11];
 8006c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	332c      	adds	r3, #44	@ 0x2c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4413      	add	r3, r2
 8006c64:	637b      	str	r3, [r7, #52]	@ 0x34
    working_state[12] += initial_state[12];
 8006c66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3330      	adds	r3, #48	@ 0x30
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4413      	add	r3, r2
 8006c70:	63bb      	str	r3, [r7, #56]	@ 0x38
    working_state[13] += initial_state[13];
 8006c72:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3334      	adds	r3, #52	@ 0x34
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    working_state[14] += initial_state[14];
 8006c7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3338      	adds	r3, #56	@ 0x38
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4413      	add	r3, r2
 8006c88:	643b      	str	r3, [r7, #64]	@ 0x40
    working_state[15] += initial_state[15];
 8006c8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	333c      	adds	r3, #60	@ 0x3c
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4413      	add	r3, r2
 8006c94:	647b      	str	r3, [r7, #68]	@ 0x44

    for( i = 0U; i < 16; i++ )
 8006c96:	2300      	movs	r3, #0
 8006c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c9a:	e037      	b.n	8006d0c <chacha20_block+0x168>
    {
        size_t offset = i * 4U;
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	64bb      	str	r3, [r7, #72]	@ 0x48

        keystream[offset     ] = (unsigned char)( working_state[i]       );
 8006ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	3350      	adds	r3, #80	@ 0x50
 8006ca8:	443b      	add	r3, r7
 8006caa:	f853 1c48 	ldr.w	r1, [r3, #-72]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cb2:	4413      	add	r3, r2
 8006cb4:	b2ca      	uxtb	r2, r1
 8006cb6:	701a      	strb	r2, [r3, #0]
        keystream[offset + 1U] = (unsigned char)( working_state[i] >>  8 );
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	3350      	adds	r3, #80	@ 0x50
 8006cbe:	443b      	add	r3, r7
 8006cc0:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8006cc4:	0a19      	lsrs	r1, r3, #8
 8006cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cc8:	3301      	adds	r3, #1
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	4413      	add	r3, r2
 8006cce:	b2ca      	uxtb	r2, r1
 8006cd0:	701a      	strb	r2, [r3, #0]
        keystream[offset + 2U] = (unsigned char)( working_state[i] >> 16 );
 8006cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	3350      	adds	r3, #80	@ 0x50
 8006cd8:	443b      	add	r3, r7
 8006cda:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8006cde:	0c19      	lsrs	r1, r3, #16
 8006ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	b2ca      	uxtb	r2, r1
 8006cea:	701a      	strb	r2, [r3, #0]
        keystream[offset + 3U] = (unsigned char)( working_state[i] >> 24 );
 8006cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	3350      	adds	r3, #80	@ 0x50
 8006cf2:	443b      	add	r3, r7
 8006cf4:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8006cf8:	0e19      	lsrs	r1, r3, #24
 8006cfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cfc:	3303      	adds	r3, #3
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	4413      	add	r3, r2
 8006d02:	b2ca      	uxtb	r2, r1
 8006d04:	701a      	strb	r2, [r3, #0]
    for( i = 0U; i < 16; i++ )
 8006d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d08:	3301      	adds	r3, #1
 8006d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0e:	2b0f      	cmp	r3, #15
 8006d10:	d9c4      	bls.n	8006c9c <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize( working_state, sizeof( working_state ) );
 8006d12:	f107 0308 	add.w	r3, r7, #8
 8006d16:	2140      	movs	r1, #64	@ 0x40
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f002 fe13 	bl	8009944 <mbedtls_platform_zeroize>
}
 8006d1e:	bf00      	nop
 8006d20:	3750      	adds	r7, #80	@ 0x50
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <mbedtls_chacha20_init>:

void mbedtls_chacha20_init( mbedtls_chacha20_context *ctx )
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b082      	sub	sp, #8
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
    CHACHA20_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx->state, sizeof( ctx->state ) );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2140      	movs	r1, #64	@ 0x40
 8006d32:	4618      	mov	r0, r3
 8006d34:	f002 fe06 	bl	8009944 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3340      	adds	r3, #64	@ 0x40
 8006d3c:	2140      	movs	r1, #64	@ 0x40
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f002 fe00 	bl	8009944 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2240      	movs	r2, #64	@ 0x40
 8006d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8006d4c:	bf00      	nop
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free( mbedtls_chacha20_context *ctx )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
    if( ctx != NULL )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <mbedtls_chacha20_free+0x16>
    {
        mbedtls_platform_zeroize( ctx, sizeof( mbedtls_chacha20_context ) );
 8006d62:	2184      	movs	r1, #132	@ 0x84
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f002 fded 	bl	8009944 <mbedtls_platform_zeroize>
    }
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey( mbedtls_chacha20_context *ctx,
                            const unsigned char key[32] )
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( key != NULL );

    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a5c      	ldr	r2, [pc, #368]	@ (8006ef4 <mbedtls_chacha20_setkey+0x180>)
 8006d82:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a5c      	ldr	r2, [pc, #368]	@ (8006ef8 <mbedtls_chacha20_setkey+0x184>)
 8006d88:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a5b      	ldr	r2, [pc, #364]	@ (8006efc <mbedtls_chacha20_setkey+0x188>)
 8006d8e:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a5b      	ldr	r2, [pc, #364]	@ (8006f00 <mbedtls_chacha20_setkey+0x18c>)
 8006d94:	60da      	str	r2, [r3, #12]

    /* Set key */
    ctx->state[4]  = BYTES_TO_U32_LE( key, 0 );
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	431a      	orrs	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	3302      	adds	r3, #2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	041b      	lsls	r3, r3, #16
 8006dae:	431a      	orrs	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	3303      	adds	r3, #3
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	061b      	lsls	r3, r3, #24
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = BYTES_TO_U32_LE( key, 4 );
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	3305      	adds	r3, #5
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	3306      	adds	r3, #6
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	3307      	adds	r3, #7
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	061b      	lsls	r3, r3, #24
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = BYTES_TO_U32_LE( key, 8 );
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	3308      	adds	r3, #8
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	3309      	adds	r3, #9
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	330a      	adds	r3, #10
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	041b      	lsls	r3, r3, #16
 8006e02:	431a      	orrs	r2, r3
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	330b      	adds	r3, #11
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	061b      	lsls	r3, r3, #24
 8006e0c:	431a      	orrs	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = BYTES_TO_U32_LE( key, 12 );
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	330d      	adds	r3, #13
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	431a      	orrs	r2, r3
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	330e      	adds	r3, #14
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	330f      	adds	r3, #15
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	061b      	lsls	r3, r3, #24
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = BYTES_TO_U32_LE( key, 16 );
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	3310      	adds	r3, #16
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	3311      	adds	r3, #17
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	021b      	lsls	r3, r3, #8
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	3312      	adds	r3, #18
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	431a      	orrs	r2, r3
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	3313      	adds	r3, #19
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	061b      	lsls	r3, r3, #24
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = BYTES_TO_U32_LE( key, 20 );
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	3315      	adds	r3, #21
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	021b      	lsls	r3, r3, #8
 8006e76:	431a      	orrs	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	3316      	adds	r3, #22
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	041b      	lsls	r3, r3, #16
 8006e80:	431a      	orrs	r2, r3
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	3317      	adds	r3, #23
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	061b      	lsls	r3, r3, #24
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->state[10] = BYTES_TO_U32_LE( key, 24 );
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	3318      	adds	r3, #24
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	3319      	adds	r3, #25
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	021b      	lsls	r3, r3, #8
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	331a      	adds	r3, #26
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	331b      	adds	r3, #27
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	061b      	lsls	r3, r3, #24
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->state[11] = BYTES_TO_U32_LE( key, 28 );
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	331c      	adds	r3, #28
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	331d      	adds	r3, #29
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	021b      	lsls	r3, r3, #8
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	331e      	adds	r3, #30
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	041b      	lsls	r3, r3, #16
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	331f      	adds	r3, #31
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	061b      	lsls	r3, r3, #24
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

    return( 0 );
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	61707865 	.word	0x61707865
 8006ef8:	3320646e 	.word	0x3320646e
 8006efc:	79622d32 	.word	0x79622d32
 8006f00:	6b206574 	.word	0x6b206574

08006f04 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update( mbedtls_chacha20_context *ctx,
                              size_t size,
                              const unsigned char *input,
                              unsigned char *output )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	617b      	str	r3, [r7, #20]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || input  != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || output != NULL );

    /* Use leftover keystream bytes, if available */
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8006f16:	e01d      	b.n	8006f54 <mbedtls_chacha20_update+0x50>
    {
        output[offset] = input[offset]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	7819      	ldrb	r1, [r3, #0]
                       ^ ctx->keystream8[ctx->keystream_bytes_used];
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
        output[offset] = input[offset]
 8006f2e:	6838      	ldr	r0, [r7, #0]
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	4403      	add	r3, r0
 8006f34:	404a      	eors	r2, r1
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        offset++;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	617b      	str	r3, [r7, #20]
        size--;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	60bb      	str	r3, [r7, #8]
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80cf 	beq.w	80070fa <mbedtls_chacha20_update+0x1f6>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f62:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f64:	d9d8      	bls.n	8006f18 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 8006f66:	e0c8      	b.n	80070fa <mbedtls_chacha20_update+0x1f6>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3340      	adds	r3, #64	@ 0x40
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	f7ff fe17 	bl	8006ba4 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	631a      	str	r2, [r3, #48]	@ 0x30

        for( i = 0U; i < 64U; i += 8U )
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	e0af      	b.n	80070e6 <mbedtls_chacha20_update+0x1e2>
        {
            output[offset + i  ] = input[offset + i  ] ^ ctx->keystream8[i  ];
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	4413      	add	r3, r2
 8006f90:	7819      	ldrb	r1, [r3, #0]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	4413      	add	r3, r2
 8006f98:	3340      	adds	r3, #64	@ 0x40
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	6978      	ldr	r0, [r7, #20]
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4403      	add	r3, r0
 8006fa2:	6838      	ldr	r0, [r7, #0]
 8006fa4:	4403      	add	r3, r0
 8006fa6:	404a      	eors	r2, r1
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
            output[offset + i+1] = input[offset + i+1] ^ ctx->keystream8[i+1];
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	7819      	ldrb	r1, [r3, #0]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006fc6:	6978      	ldr	r0, [r7, #20]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	4403      	add	r3, r0
 8006fcc:	3301      	adds	r3, #1
 8006fce:	6838      	ldr	r0, [r7, #0]
 8006fd0:	4403      	add	r3, r0
 8006fd2:	404a      	eors	r2, r1
 8006fd4:	b2d2      	uxtb	r2, r2
 8006fd6:	701a      	strb	r2, [r3, #0]
            output[offset + i+2] = input[offset + i+2] ^ ctx->keystream8[i+2];
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	4413      	add	r3, r2
 8006fde:	3302      	adds	r3, #2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	7819      	ldrb	r1, [r3, #0]
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3302      	adds	r3, #2
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006ff2:	6978      	ldr	r0, [r7, #20]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	4403      	add	r3, r0
 8006ff8:	3302      	adds	r3, #2
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	4403      	add	r3, r0
 8006ffe:	404a      	eors	r2, r1
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	701a      	strb	r2, [r3, #0]
            output[offset + i+3] = input[offset + i+3] ^ ctx->keystream8[i+3];
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	4413      	add	r3, r2
 800700a:	3303      	adds	r3, #3
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	4413      	add	r3, r2
 8007010:	7819      	ldrb	r1, [r3, #0]
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	3303      	adds	r3, #3
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800701e:	6978      	ldr	r0, [r7, #20]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4403      	add	r3, r0
 8007024:	3303      	adds	r3, #3
 8007026:	6838      	ldr	r0, [r7, #0]
 8007028:	4403      	add	r3, r0
 800702a:	404a      	eors	r2, r1
 800702c:	b2d2      	uxtb	r2, r2
 800702e:	701a      	strb	r2, [r3, #0]
            output[offset + i+4] = input[offset + i+4] ^ ctx->keystream8[i+4];
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	4413      	add	r3, r2
 8007036:	3304      	adds	r3, #4
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	4413      	add	r3, r2
 800703c:	7819      	ldrb	r1, [r3, #0]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3304      	adds	r3, #4
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4413      	add	r3, r2
 8007046:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800704a:	6978      	ldr	r0, [r7, #20]
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	4403      	add	r3, r0
 8007050:	3304      	adds	r3, #4
 8007052:	6838      	ldr	r0, [r7, #0]
 8007054:	4403      	add	r3, r0
 8007056:	404a      	eors	r2, r1
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]
            output[offset + i+5] = input[offset + i+5] ^ ctx->keystream8[i+5];
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	4413      	add	r3, r2
 8007062:	3305      	adds	r3, #5
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	4413      	add	r3, r2
 8007068:	7819      	ldrb	r1, [r3, #0]
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	3305      	adds	r3, #5
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4413      	add	r3, r2
 8007072:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8007076:	6978      	ldr	r0, [r7, #20]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	4403      	add	r3, r0
 800707c:	3305      	adds	r3, #5
 800707e:	6838      	ldr	r0, [r7, #0]
 8007080:	4403      	add	r3, r0
 8007082:	404a      	eors	r2, r1
 8007084:	b2d2      	uxtb	r2, r2
 8007086:	701a      	strb	r2, [r3, #0]
            output[offset + i+6] = input[offset + i+6] ^ ctx->keystream8[i+6];
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4413      	add	r3, r2
 800708e:	3306      	adds	r3, #6
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4413      	add	r3, r2
 8007094:	7819      	ldrb	r1, [r3, #0]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	3306      	adds	r3, #6
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80070a2:	6978      	ldr	r0, [r7, #20]
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	4403      	add	r3, r0
 80070a8:	3306      	adds	r3, #6
 80070aa:	6838      	ldr	r0, [r7, #0]
 80070ac:	4403      	add	r3, r0
 80070ae:	404a      	eors	r2, r1
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]
            output[offset + i+7] = input[offset + i+7] ^ ctx->keystream8[i+7];
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	4413      	add	r3, r2
 80070ba:	3307      	adds	r3, #7
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	4413      	add	r3, r2
 80070c0:	7819      	ldrb	r1, [r3, #0]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	3307      	adds	r3, #7
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80070ce:	6978      	ldr	r0, [r7, #20]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	4403      	add	r3, r0
 80070d4:	3307      	adds	r3, #7
 80070d6:	6838      	ldr	r0, [r7, #0]
 80070d8:	4403      	add	r3, r0
 80070da:	404a      	eors	r2, r1
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < 64U; i += 8U )
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	3308      	adds	r3, #8
 80070e4:	613b      	str	r3, [r7, #16]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80070ea:	f67f af4c 	bls.w	8006f86 <mbedtls_chacha20_update+0x82>
        }

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	3340      	adds	r3, #64	@ 0x40
 80070f2:	617b      	str	r3, [r7, #20]
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	3b40      	subs	r3, #64	@ 0x40
 80070f8:	60bb      	str	r3, [r7, #8]
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80070fe:	f63f af33 	bhi.w	8006f68 <mbedtls_chacha20_update+0x64>
    }

    /* Last (partial) block */
    if( size > 0U )
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02c      	beq.n	8007162 <mbedtls_chacha20_update+0x25e>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3340      	adds	r3, #64	@ 0x40
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f7ff fd47 	bl	8006ba4 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	631a      	str	r2, [r3, #48]	@ 0x30

        for( i = 0U; i < size; i++)
 8007120:	2300      	movs	r3, #0
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	e015      	b.n	8007152 <mbedtls_chacha20_update+0x24e>
        {
            output[offset + i] = input[offset + i] ^ ctx->keystream8[i];
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4413      	add	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	4413      	add	r3, r2
 8007130:	7819      	ldrb	r1, [r3, #0]
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	4413      	add	r3, r2
 8007138:	3340      	adds	r3, #64	@ 0x40
 800713a:	781a      	ldrb	r2, [r3, #0]
 800713c:	6978      	ldr	r0, [r7, #20]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4403      	add	r3, r0
 8007142:	6838      	ldr	r0, [r7, #0]
 8007144:	4403      	add	r3, r0
 8007146:	404a      	eors	r2, r1
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < size; i++)
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	3301      	adds	r3, #1
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d3e5      	bcc.n	8007126 <mbedtls_chacha20_update+0x222>
        }

        ctx->keystream_bytes_used = size;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    }

    return( 0 );
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3718      	adds	r7, #24
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad( mbedtls_chachapoly_context *ctx )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) ( ctx->aad_len % 16U );
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 800717a:	4613      	mov	r3, r2
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if( partial_block_len == 0U )
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <chachapoly_pad_aad+0x20>
        return( 0 );
 8007188:	2300      	movs	r3, #0
 800718a:	e012      	b.n	80071b2 <chachapoly_pad_aad+0x46>

    memset( zeroes, 0, sizeof( zeroes ) );
 800718c:	f107 030c 	add.w	r3, r7, #12
 8007190:	220f      	movs	r2, #15
 8007192:	2100      	movs	r1, #0
 8007194:	4618      	mov	r0, r3
 8007196:	f006 fa81 	bl	800d69c <memset>

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f103 0084 	add.w	r0, r3, #132	@ 0x84
                                     zeroes,
                                     16U - partial_block_len ) );
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f1c3 0210 	rsb	r2, r3, #16
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 80071a6:	f107 030c 	add.w	r3, r7, #12
 80071aa:	4619      	mov	r1, r3
 80071ac:	f003 f84a 	bl	800a244 <mbedtls_poly1305_update>
 80071b0:	4603      	mov	r3, r0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <mbedtls_chachapoly_init>:
                                     zeroes,
                                     16U - partial_block_len ) );
}

void mbedtls_chachapoly_init( mbedtls_chachapoly_context *ctx )
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
    CHACHAPOLY_VALIDATE( ctx != NULL );

    mbedtls_chacha20_init( &ctx->chacha20_ctx );
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7ff fdae 	bl	8006d26 <mbedtls_chacha20_init>
    mbedtls_poly1305_init( &ctx->poly1305_ctx );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3384      	adds	r3, #132	@ 0x84
 80071ce:	4618      	mov	r0, r3
 80071d0:	f003 f81c 	bl	800a20c <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 80071d4:	6879      	ldr	r1, [r7, #4]
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    ctx->ciphertext_len = 0U;
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free( mbedtls_chachapoly_context *ctx )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01f      	beq.n	8007256 <mbedtls_chachapoly_free+0x4e>
        return;

    mbedtls_chacha20_free( &ctx->chacha20_ctx );
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4618      	mov	r0, r3
 800721a:	f7ff fd9b 	bl	8006d54 <mbedtls_chacha20_free>
    mbedtls_poly1305_free( &ctx->poly1305_ctx );
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	3384      	adds	r3, #132	@ 0x84
 8007222:	4618      	mov	r0, r3
 8007224:	f002 fffe 	bl	800a224 <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    ctx->ciphertext_len = 0U;
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	f04f 0200 	mov.w	r2, #0
 800723c:	f04f 0300 	mov.w	r3, #0
 8007240:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8007254:	e000      	b.n	8007258 <mbedtls_chachapoly_free+0x50>
        return;
 8007256:	bf00      	nop
}
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey( mbedtls_chachapoly_context *ctx,
                               const unsigned char key[32] )
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( key != NULL );

    ret = mbedtls_chacha20_setkey( &ctx->chacha20_ctx, key );
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fd81 	bl	8006d74 <mbedtls_chacha20_setkey>
 8007272:	60f8      	str	r0, [r7, #12]

    return( ret );
 8007274:	68fb      	ldr	r3, [r7, #12]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update( mbedtls_chachapoly_context *ctx,
                               size_t len,
                               const unsigned char *input,
                               unsigned char *output )
{
 800727e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || input != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || output != NULL );

    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007294:	2b01      	cmp	r3, #1
 8007296:	d007      	beq.n	80072a8 <mbedtls_chachapoly_update+0x2a>
        ( ctx->state != CHACHAPOLY_STATE_CIPHERTEXT ) )
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d002      	beq.n	80072a8 <mbedtls_chachapoly_update+0x2a>
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 80072a2:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80072a6:	e057      	b.n	8007358 <mbedtls_chachapoly_update+0xda>
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d10c      	bne.n	80072cc <mbedtls_chachapoly_update+0x4e>
    {
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

        ret = chachapoly_pad_aad( ctx );
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f7ff ff56 	bl	800716c <chachapoly_pad_aad>
 80072c0:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <mbedtls_chachapoly_update+0x4e>
            return( ret );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	e045      	b.n	8007358 <mbedtls_chachapoly_update+0xda>
    }

    ctx->ciphertext_len += len;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	2000      	movs	r0, #0
 80072d6:	460c      	mov	r4, r1
 80072d8:	4605      	mov	r5, r0
 80072da:	eb12 0804 	adds.w	r8, r2, r4
 80072de:	eb43 0905 	adc.w	r9, r3, r5
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	e9c3 8936 	strd	r8, r9, [r3, #216]	@ 0xd8

    if( ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT )
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d118      	bne.n	8007324 <mbedtls_chachapoly_update+0xa6>
    {
        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	f7ff fe03 	bl	8006f04 <mbedtls_chacha20_update>
 80072fe:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <mbedtls_chachapoly_update+0x8c>
            return( ret );
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	e026      	b.n	8007358 <mbedtls_chachapoly_update+0xda>

        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, output, len );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3384      	adds	r3, #132	@ 0x84
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	4618      	mov	r0, r3
 8007314:	f002 ff96 	bl	800a244 <mbedtls_poly1305_update>
 8007318:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d01a      	beq.n	8007356 <mbedtls_chachapoly_update+0xd8>
            return( ret );
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	e019      	b.n	8007358 <mbedtls_chachapoly_update+0xda>
    }
    else /* DECRYPT */
    {
        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, input, len );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3384      	adds	r3, #132	@ 0x84
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4618      	mov	r0, r3
 800732e:	f002 ff89 	bl	800a244 <mbedtls_poly1305_update>
 8007332:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <mbedtls_chachapoly_update+0xc0>
            return( ret );
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	e00c      	b.n	8007358 <mbedtls_chachapoly_update+0xda>

        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	68b9      	ldr	r1, [r7, #8]
 8007346:	f7ff fddd 	bl	8006f04 <mbedtls_chacha20_update>
 800734a:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <mbedtls_chachapoly_update+0xd8>
            return( ret );
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	e000      	b.n	8007358 <mbedtls_chachapoly_update+0xda>
    }

    return( 0 );
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007362 <mbedtls_cipher_get_block_size>:
 * \return       The block size of the underlying cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
 8007362:	b480      	push	{r7}
 8007364:	b083      	sub	sp, #12
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 8007372:	2300      	movs	r3, #0
 8007374:	e002      	b.n	800737c <mbedtls_cipher_get_block_size+0x1a>

    return ctx->cipher_info->block_size;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
}
 800737c:	4618      	mov	r0, r3
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
 8007394:	4613      	mov	r3, r2
 8007396:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8007398:	4b13      	ldr	r3, [pc, #76]	@ (80073e8 <mbedtls_cipher_info_from_values+0x60>)
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e018      	b.n	80073d0 <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	79fa      	ldrb	r2, [r7, #7]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d10e      	bne.n	80073ca <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d108      	bne.n	80073ca <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80073be:	79ba      	ldrb	r2, [r7, #6]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d102      	bne.n	80073ca <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	e007      	b.n	80073da <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3308      	adds	r3, #8
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1e2      	bne.n	800739e <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	080108a8 	.word	0x080108a8

080073ec <mbedtls_cipher_free>:
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d010      	beq.n	800741c <mbedtls_cipher_free+0x30>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <mbedtls_cipher_free+0x26>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800740e:	4610      	mov	r0, r2
 8007410:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8007412:	2140      	movs	r1, #64	@ 0x40
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f002 fa95 	bl	8009944 <mbedtls_platform_zeroize>
 800741a:	e000      	b.n	800741e <mbedtls_cipher_free+0x32>
        return;
 800741c:	bf00      	nop
}
 800741e:	3708      	adds	r7, #8
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <mbedtls_cipher_setup+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007434:	4b0f      	ldr	r3, [pc, #60]	@ (8007474 <mbedtls_cipher_setup+0x50>)
 8007436:	e019      	b.n	800746c <mbedtls_cipher_setup+0x48>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8007438:	2240      	movs	r2, #64	@ 0x40
 800743a:	2100      	movs	r1, #0
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f006 f92d 	bl	800d69c <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	4798      	blx	r3
 800744a:	4602      	mov	r2, r0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <mbedtls_cipher_setup+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8007458:	4b07      	ldr	r3, [pc, #28]	@ (8007478 <mbedtls_cipher_setup+0x54>)
 800745a:	e007      	b.n	800746c <mbedtls_cipher_setup+0x48>

    ctx->cipher_info = cipher_info;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	601a      	str	r2, [r3, #0]
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 8007462:	2104      	movs	r1, #4
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa45 	bl	80078f4 <mbedtls_cipher_set_padding_mode>
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	ffff9f00 	.word	0xffff9f00
 8007478:	ffff9e80 	.word	0xffff9e80

0800747c <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
 8007488:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <mbedtls_cipher_setkey+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007492:	4b26      	ldr	r3, [pc, #152]	@ (800752c <mbedtls_cipher_setkey+0xb0>)
 8007494:	e045      	b.n	8007522 <mbedtls_cipher_setkey+0xa6>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d108      	bne.n	80074b6 <mbedtls_cipher_setkey+0x3a>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d001      	beq.n	80074b6 <mbedtls_cipher_setkey+0x3a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80074b2:	4b1e      	ldr	r3, [pc, #120]	@ (800752c <mbedtls_cipher_setkey+0xb0>)
 80074b4:	e035      	b.n	8007522 <mbedtls_cipher_setkey+0xa6>
    }

    ctx->key_bitlen = key_bitlen;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	78fa      	ldrb	r2, [r7, #3]
 80074c0:	721a      	strb	r2, [r3, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80074c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d00e      	beq.n	80074e8 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d009      	beq.n	80074e8 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d004      	beq.n	80074e8 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 80074e4:	2b05      	cmp	r3, #5
 80074e6:	d10b      	bne.n	8007500 <mbedtls_cipher_setkey+0x84>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
                                                         ctx->key_bitlen ) );
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	4798      	blx	r3
 80074fc:	4603      	mov	r3, r0
 80074fe:	e010      	b.n	8007522 <mbedtls_cipher_setkey+0xa6>
    }

    if( MBEDTLS_DECRYPT == operation )
 8007500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10b      	bne.n	8007520 <mbedtls_cipher_setkey+0xa4>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
                                                         ctx->key_bitlen ) );
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	4798      	blx	r3
 800751c:	4603      	mov	r3, r0
 800751e:	e000      	b.n	8007522 <mbedtls_cipher_setkey+0xa6>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007520:	4b02      	ldr	r3, [pc, #8]	@ (800752c <mbedtls_cipher_setkey+0xb0>)
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	ffff9f00 	.word	0xffff9f00

08007530 <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8007530:	b5b0      	push	{r4, r5, r7, lr}
 8007532:	b08a      	sub	sp, #40	@ 0x28
 8007534:	af02      	add	r7, sp, #8
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <mbedtls_cipher_update+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007546:	4b7c      	ldr	r3, [pc, #496]	@ (8007738 <mbedtls_cipher_update+0x208>)
 8007548:	e1b4      	b.n	80078b4 <mbedtls_cipher_update+0x384>

    *olen = 0;
 800754a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7ff ff06 	bl	8007362 <mbedtls_cipher_get_block_size>
 8007556:	61b8      	str	r0, [r7, #24]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d11c      	bne.n	800759c <mbedtls_cipher_update+0x6c>
    {
        if( ilen != block_size )
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	429a      	cmp	r2, r3
 8007568:	d001      	beq.n	800756e <mbedtls_cipher_update+0x3e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 800756a:	4b74      	ldr	r3, [pc, #464]	@ (800773c <mbedtls_cipher_update+0x20c>)
 800756c:	e1a2      	b.n	80078b4 <mbedtls_cipher_update+0x384>

        *olen = ilen;
 800756e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	685c      	ldr	r4, [r3, #4]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	47a0      	blx	r4
 800758c:	6178      	str	r0, [r7, #20]
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <mbedtls_cipher_update+0x68>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	e18d      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        }

        return( 0 );
 8007598:	2300      	movs	r3, #0
 800759a:	e18b      	b.n	80078b4 <mbedtls_cipher_update+0x384>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b06      	cmp	r3, #6
 80075a4:	d10b      	bne.n	80075be <mbedtls_cipher_update+0x8e>
    {
        *olen = ilen;
 80075a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	6879      	ldr	r1, [r7, #4]
 80075b6:	f001 ff14 	bl	80093e2 <mbedtls_gcm_update>
 80075ba:	4603      	mov	r3, r0
 80075bc:	e17a      	b.n	80078b4 <mbedtls_cipher_update+0x384>
                                    output ) );
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( ctx->cipher_info->type == MBEDTLS_CIPHER_CHACHA20_POLY1305 )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b49      	cmp	r3, #73	@ 0x49
 80075c6:	d10b      	bne.n	80075e0 <mbedtls_cipher_update+0xb0>
    {
        *olen = ilen;
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	601a      	str	r2, [r3, #0]
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	f7ff fe51 	bl	800727e <mbedtls_chachapoly_update>
 80075dc:	4603      	mov	r3, r0
 80075de:	e169      	b.n	80078b4 <mbedtls_cipher_update+0x384>
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d101      	bne.n	80075ea <mbedtls_cipher_update+0xba>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 80075e6:	4b56      	ldr	r3, [pc, #344]	@ (8007740 <mbedtls_cipher_update+0x210>)
 80075e8:	e164      	b.n	80078b4 <mbedtls_cipher_update+0x384>
    }

    if( input == output &&
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d10f      	bne.n	8007612 <mbedtls_cipher_update+0xe2>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if( input == output &&
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d109      	bne.n	800760e <mbedtls_cipher_update+0xde>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007602:	69b9      	ldr	r1, [r7, #24]
 8007604:	fb01 f202 	mul.w	r2, r1, r2
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <mbedtls_cipher_update+0xe2>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800760e:	4b4a      	ldr	r3, [pc, #296]	@ (8007738 <mbedtls_cipher_update+0x208>)
 8007610:	e150      	b.n	80078b4 <mbedtls_cipher_update+0x384>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f040 80e4 	bne.w	80077e6 <mbedtls_cipher_update+0x2b6>
    {
        size_t copy_len = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <mbedtls_cipher_update+0x112>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d006      	beq.n	8007642 <mbedtls_cipher_update+0x112>
                ilen <= block_size - ctx->unprocessed_len ) ||
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d91b      	bls.n	800767a <mbedtls_cipher_update+0x14a>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <mbedtls_cipher_update+0x132>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <mbedtls_cipher_update+0x132>
                ilen < block_size - ctx->unprocessed_len ) ||
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	1ad3      	subs	r3, r2, r3
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	429a      	cmp	r2, r3
 8007660:	d30b      	bcc.n	800767a <mbedtls_cipher_update+0x14a>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen < block_size - ctx->unprocessed_len ) ||
 8007668:	2b01      	cmp	r3, #1
 800766a:	d119      	bne.n	80076a0 <mbedtls_cipher_update+0x170>
                ilen < block_size - ctx->unprocessed_len ) )
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	429a      	cmp	r2, r3
 8007678:	d212      	bcs.n	80076a0 <mbedtls_cipher_update+0x170>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767e:	3310      	adds	r3, #16
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	3304      	adds	r3, #4
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	4618      	mov	r0, r3
 800768c:	f006 f891 	bl	800d7b2 <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	441a      	add	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	625a      	str	r2, [r3, #36]	@ 0x24
            return( 0 );
 800769c:	2300      	movs	r3, #0
 800769e:	e109      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d03e      	beq.n	8007726 <mbedtls_cipher_update+0x1f6>
        {
            copy_len = block_size - ctx->unprocessed_len;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b6:	3310      	adds	r3, #16
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	3304      	adds	r3, #4
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f006 f875 	bl	800d7b2 <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	689c      	ldr	r4, [r3, #8]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f103 0528 	add.w	r5, r3, #40	@ 0x28
                    ctx->unprocessed_data, output ) ) )
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	9201      	str	r2, [sp, #4]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	462b      	mov	r3, r5
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	47a0      	blx	r4
 80076f0:	6178      	str	r0, [r7, #20]
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <mbedtls_cipher_update+0x1cc>
            {
                return( ret );
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	e0db      	b.n	80078b4 <mbedtls_cipher_update+0x384>
            }

            *olen += block_size;
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	441a      	add	r2, r3
 8007704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007706:	601a      	str	r2, [r3, #0]
            output += block_size;
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	4413      	add	r3, r2
 800770e:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	625a      	str	r2, [r3, #36]	@ 0x24

            input += copy_len;
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d038      	beq.n	800779e <mbedtls_cipher_update+0x26e>
        {
            if( 0 == block_size )
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d108      	bne.n	8007744 <mbedtls_cipher_update+0x214>
            {
                return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8007732:	4b03      	ldr	r3, [pc, #12]	@ (8007740 <mbedtls_cipher_update+0x210>)
 8007734:	e0be      	b.n	80078b4 <mbedtls_cipher_update+0x384>
 8007736:	bf00      	nop
 8007738:	ffff9f00 	.word	0xffff9f00
 800773c:	ffff9d80 	.word	0xffff9d80
 8007740:	ffff9c80 	.word	0xffff9c80

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	69ba      	ldr	r2, [r7, #24]
 8007748:	fbb3 f2f2 	udiv	r2, r3, r2
 800774c:	69b9      	ldr	r1, [r7, #24]
 800774e:	fb01 f202 	mul.w	r2, r1, r2
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 &&
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <mbedtls_cipher_update+0x242>
                ctx->operation == MBEDTLS_DECRYPT &&
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if( copy_len == 0 &&
 8007762:	2b00      	cmp	r3, #0
 8007764:	d105      	bne.n	8007772 <mbedtls_cipher_update+0x242>
                NULL != ctx->add_padding)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <mbedtls_cipher_update+0x242>
            {
                copy_len = block_size;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	61fb      	str	r3, [r7, #28]
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f103 0014 	add.w	r0, r3, #20
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	4413      	add	r3, r2
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	4619      	mov	r1, r3
 8007786:	f006 f814 	bl	800d7b2 <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	441a      	add	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	625a      	str	r2, [r3, #36]	@ 0x24
            ilen -= copy_len;
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d01e      	beq.n	80077e2 <mbedtls_cipher_update+0x2b2>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	689c      	ldr	r4, [r3, #8]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	4613      	mov	r3, r2
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	47a0      	blx	r4
 80077ca:	6178      	str	r0, [r7, #20]
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <mbedtls_cipher_update+0x2a6>
            {
                return( ret );
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	e06e      	b.n	80078b4 <mbedtls_cipher_update+0x384>
            }

            *olen += ilen;
 80077d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	441a      	add	r2, r3
 80077de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e0:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 80077e2:	2300      	movs	r3, #0
 80077e4:	e066      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b04      	cmp	r3, #4
 80077ee:	d11d      	bne.n	800782c <mbedtls_cipher_update+0x2fc>
    {
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	68dc      	ldr	r4, [r3, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f103 0224 	add.w	r2, r3, #36	@ 0x24
                ilen, &ctx->unprocessed_len, ctx->iv, input, output ) ) )
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f103 0128 	add.w	r1, r3, #40	@ 0x28
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	460b      	mov	r3, r1
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	47a0      	blx	r4
 8007816:	6178      	str	r0, [r7, #20]
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <mbedtls_cipher_update+0x2f2>
        {
            return( ret );
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	e048      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8007822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	601a      	str	r2, [r3, #0]

        return( 0 );
 8007828:	2300      	movs	r3, #0
 800782a:	e043      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_XTS )
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b09      	cmp	r3, #9
 8007834:	d123      	bne.n	800787e <mbedtls_cipher_update+0x34e>
    {
        if( ctx->unprocessed_len > 0 ) {
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <mbedtls_cipher_update+0x312>
            /* We can only process an entire data unit at a time. */
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800783e:	4b1f      	ldr	r3, [pc, #124]	@ (80078bc <mbedtls_cipher_update+0x38c>)
 8007840:	e038      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        }

        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	691c      	ldr	r4, [r3, #16]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f993 1008 	ldrsb.w	r1, [r3, #8]
                ctx->operation, ilen, ctx->iv, input, output );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f103 0228 	add.w	r2, r3, #40	@ 0x28
        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	9300      	str	r3, [sp, #0]
 8007862:	4613      	mov	r3, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	47a0      	blx	r4
 8007868:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <mbedtls_cipher_update+0x344>
        {
            return( ret );
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	e01f      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8007874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	601a      	str	r2, [r3, #0]

        return( 0 );
 800787a:	2300      	movs	r3, #0
 800787c:	e01a      	b.n	80078b4 <mbedtls_cipher_update+0x384>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	785b      	ldrb	r3, [r3, #1]
 8007884:	2b07      	cmp	r3, #7
 8007886:	d114      	bne.n	80078b2 <mbedtls_cipher_update+0x382>
    {
        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	695c      	ldr	r4, [r3, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	47a0      	blx	r4
 800789c:	6178      	str	r0, [r7, #20]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <mbedtls_cipher_update+0x378>
                                                    ilen, input, output ) ) )
        {
            return( ret );
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	e005      	b.n	80078b4 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 80078a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]

        return( 0 );
 80078ae:	2300      	movs	r3, #0
 80078b0:	e000      	b.n	80078b4 <mbedtls_cipher_update+0x384>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 80078b2:	4b02      	ldr	r3, [pc, #8]	@ (80078bc <mbedtls_cipher_update+0x38c>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3720      	adds	r7, #32
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bdb0      	pop	{r4, r5, r7, pc}
 80078bc:	ffff9f80 	.word	0xffff9f80

080078c0 <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <get_no_padding+0x18>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80078d8:	4b05      	ldr	r3, [pc, #20]	@ (80078f0 <get_no_padding+0x30>)
 80078da:	e003      	b.n	80078e4 <get_no_padding+0x24>

    *data_len = input_len;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	601a      	str	r2, [r3, #0]

    return( 0 );
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	ffff9f00 	.word	0xffff9f00

080078f4 <mbedtls_cipher_set_padding_mode>:
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d004      	beq.n	8007912 <mbedtls_cipher_set_padding_mode+0x1e>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b02      	cmp	r3, #2
 8007910:	d001      	beq.n	8007916 <mbedtls_cipher_set_padding_mode+0x22>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007912:	4b0a      	ldr	r3, [pc, #40]	@ (800793c <mbedtls_cipher_set_padding_mode+0x48>)
 8007914:	e00c      	b.n	8007930 <mbedtls_cipher_set_padding_mode+0x3c>
    }

    switch( mode )
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	2b04      	cmp	r3, #4
 800791a:	d108      	bne.n	800792e <mbedtls_cipher_set_padding_mode+0x3a>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a06      	ldr	r2, [pc, #24]	@ (8007940 <mbedtls_cipher_set_padding_mode+0x4c>)
 8007926:	611a      	str	r2, [r3, #16]
        break;
 8007928:	bf00      	nop

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 800792a:	2300      	movs	r3, #0
 800792c:	e000      	b.n	8007930 <mbedtls_cipher_set_padding_mode+0x3c>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 800792e:	4b05      	ldr	r3, [pc, #20]	@ (8007944 <mbedtls_cipher_set_padding_mode+0x50>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	ffff9f00 	.word	0xffff9f00
 8007940:	080078c1 	.word	0x080078c1
 8007944:	ffff9f80 	.word	0xffff9f80

08007948 <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 800794e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8007952:	2001      	movs	r0, #1
 8007954:	f005 fbd8 	bl	800d108 <calloc>
 8007958:	4603      	mov	r3, r0
 800795a:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 f861 	bl	8008a2a <mbedtls_gcm_init>

    return( ctx );
 8007968:	687b      	ldr	r3, [r7, #4]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 ffcd 	bl	800991a <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f005 fbdd 	bl	800d140 <free>
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	60f8      	str	r0, [r7, #12]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	603b      	str	r3, [r7, #0]
 800799a:	460b      	mov	r3, r1
 800799c:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 800799e:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f7fd f948 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b086      	sub	sp, #24
 80079ba:	af02      	add	r7, sp, #8
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
 80079c2:	460b      	mov	r3, r1
 80079c4:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 80079c6:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f7fd f94b 	bl	8004c72 <mbedtls_aes_crypt_cbc>
 80079dc:	4603      	mov	r3, r0
                          output );
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap( void *ctx, size_t length, size_t *iv_off,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af02      	add	r7, sp, #8
 80079ec:	60f8      	str	r0, [r7, #12]
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f7fd fd7b 	bl	80054fe <mbedtls_aes_crypt_ofb>
 8007a08:	4603      	mov	r3, r0
                                    iv, input, output );
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap( void *ctx, mbedtls_operation_t operation,
                               size_t length,
                               const unsigned char data_unit[16],
                               const unsigned char *input,
                               unsigned char *output )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	607a      	str	r2, [r7, #4]
 8007a1e:	603b      	str	r3, [r7, #0]
 8007a20:	460b      	mov	r3, r1
 8007a22:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	613b      	str	r3, [r7, #16]
    int mode;

    switch( operation )
 8007a28:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d004      	beq.n	8007a3a <aes_crypt_xts_wrap+0x26>
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d105      	bne.n	8007a40 <aes_crypt_xts_wrap+0x2c>
    {
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 8007a34:	2301      	movs	r3, #1
 8007a36:	617b      	str	r3, [r7, #20]
            break;
 8007a38:	e004      	b.n	8007a44 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
            break;
 8007a3e:	e001      	b.n	8007a44 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8007a40:	4b08      	ldr	r3, [pc, #32]	@ (8007a64 <aes_crypt_xts_wrap+0x50>)
 8007a42:	e00a      	b.n	8007a5a <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts( xts_ctx, mode, length,
 8007a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6979      	ldr	r1, [r7, #20]
 8007a52:	6938      	ldr	r0, [r7, #16]
 8007a54:	f7fd fc4a 	bl	80052ec <mbedtls_aes_crypt_xts>
 8007a58:	4603      	mov	r3, r0
                                  data_unit, input, output );
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	ffff9f00 	.word	0xffff9f00

08007a68 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	68b9      	ldr	r1, [r7, #8]
 8007a78:	68f8      	ldr	r0, [r7, #12]
 8007a7a:	f7fc f953 	bl	8003d24 <mbedtls_aes_setkey_dec>
 8007a7e:	4603      	mov	r3, r0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7fb ff6d 	bl	8003978 <mbedtls_aes_setkey_enc>
 8007a9e:	4603      	mov	r3, r0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8007aae:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8007ab2:	2001      	movs	r0, #1
 8007ab4:	f005 fb28 	bl	800d108 <calloc>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <aes_ctx_alloc+0x1e>
        return( NULL );
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e003      	b.n	8007ace <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fb ff0f 	bl	80038ea <mbedtls_aes_init>

    return( aes );
 8007acc:	687b      	ldr	r3, [r7, #4]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fb ff11 	bl	8003906 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f005 fb2b 	bl	800d140 <free>
}
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b086      	sub	sp, #24
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_enc( xts_ctx, key, key_bitlen ) );
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	6978      	ldr	r0, [r7, #20]
 8007b08:	f7fc fa6c 	bl	8003fe4 <mbedtls_aes_xts_setkey_enc>
 8007b0c:	4603      	mov	r3, r0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b086      	sub	sp, #24
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	60f8      	str	r0, [r7, #12]
 8007b1e:	60b9      	str	r1, [r7, #8]
 8007b20:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_dec( xts_ctx, key, key_bitlen ) );
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	68b9      	ldr	r1, [r7, #8]
 8007b2a:	6978      	ldr	r0, [r7, #20]
 8007b2c:	f7fc fa8e 	bl	800404c <mbedtls_aes_xts_setkey_dec>
 8007b30:	4603      	mov	r3, r0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3718      	adds	r7, #24
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc( void )
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc( 1, sizeof( *xts_ctx ) );
 8007b40:	f44f 710c 	mov.w	r1, #560	@ 0x230
 8007b44:	2001      	movs	r0, #1
 8007b46:	f005 fadf 	bl	800d108 <calloc>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	607b      	str	r3, [r7, #4]

    if( xts_ctx != NULL )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init( xts_ctx );
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7fb fee7 	bl	8003928 <mbedtls_aes_xts_init>

    return( xts_ctx );
 8007b5a:	687b      	ldr	r3, [r7, #4]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3708      	adds	r7, #8
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <xts_aes_ctx_free>:

static void xts_aes_ctx_free( void *ctx )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60fb      	str	r3, [r7, #12]

    if( xts_ctx == NULL )
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d006      	beq.n	8007b84 <xts_aes_ctx_free+0x20>
        return;

    mbedtls_aes_xts_free( xts_ctx );
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7fb fee8 	bl	800394c <mbedtls_aes_xts_free>
    mbedtls_free( xts_ctx );
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f005 fadf 	bl	800d140 <free>
 8007b82:	e000      	b.n	8007b86 <xts_aes_ctx_free+0x22>
        return;
 8007b84:	bf00      	nop
}
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f001 f8cb 	bl	8008d3a <mbedtls_gcm_setkey>
 8007ba4:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
 8007bbe:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f7fe fcfc 	bl	80065c4 <mbedtls_camellia_crypt_ecb>
 8007bcc:	4603      	mov	r3, r0
                               output );
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af02      	add	r7, sp, #8
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
 8007be2:	460b      	mov	r3, r1
 8007be4:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,
 8007be6:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7fe fe4e 	bl	8006898 <mbedtls_camellia_crypt_cbc>
 8007bfc:	4603      	mov	r3, r0
                               input, output );
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <camellia_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f7fe fbd8 	bl	80063cc <mbedtls_camellia_setkey_dec>
 8007c1c:	4603      	mov	r3, r0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <camellia_setkey_enc_wrap>:

static int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7fd fd3c 	bl	80056b4 <mbedtls_camellia_setkey_enc>
 8007c3c:	4603      	mov	r3, r0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <camellia_ctx_alloc>:

static void * camellia_ctx_alloc( void )
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
 8007c4c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8007c50:	2001      	movs	r0, #1
 8007c52:	f005 fa59 	bl	800d108 <calloc>
 8007c56:	4603      	mov	r3, r0
 8007c58:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <camellia_ctx_alloc+0x1e>
        return( NULL );
 8007c60:	2300      	movs	r3, #0
 8007c62:	e003      	b.n	8007c6c <camellia_ctx_alloc+0x26>

    mbedtls_camellia_init( ctx );
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7fd fd05 	bl	8005674 <mbedtls_camellia_init>

    return( ctx );
 8007c6a:	687b      	ldr	r3, [r7, #4]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <camellia_ctx_free>:

static void camellia_ctx_free( void *ctx )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f7fd fd07 	bl	8005690 <mbedtls_camellia_free>
    mbedtls_free( ctx );
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f005 fa5c 	bl	800d140 <free>
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	60b9      	str	r1, [r7, #8]
 8007c9a:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	2105      	movs	r1, #5
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f001 f849 	bl	8008d3a <mbedtls_gcm_setkey>
 8007ca8:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap( void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cc6:	d001      	beq.n	8007ccc <chacha20_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007cc8:	4b07      	ldr	r3, [pc, #28]	@ (8007ce8 <chacha20_setkey_wrap+0x34>)
 8007cca:	e009      	b.n	8007ce0 <chacha20_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chacha20_setkey( (mbedtls_chacha20_context*)ctx, key ) )
 8007ccc:	68b9      	ldr	r1, [r7, #8]
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff f850 	bl	8006d74 <mbedtls_chacha20_setkey>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d001      	beq.n	8007cde <chacha20_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007cda:	4b03      	ldr	r3, [pc, #12]	@ (8007ce8 <chacha20_setkey_wrap+0x34>)
 8007cdc:	e000      	b.n	8007ce0 <chacha20_setkey_wrap+0x2c>

    return( 0 );
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	ffff9f00 	.word	0xffff9f00

08007cec <chacha20_stream_wrap>:

static int chacha20_stream_wrap( void *ctx,  size_t length,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	60f8      	str	r0, [r7, #12]
 8007cf4:	60b9      	str	r1, [r7, #8]
 8007cf6:	607a      	str	r2, [r7, #4]
 8007cf8:	603b      	str	r3, [r7, #0]
    int ret;

    ret = mbedtls_chacha20_update( ctx, length, input, output );
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7ff f8ff 	bl	8006f04 <mbedtls_chacha20_update>
 8007d06:	6178      	str	r0, [r7, #20]
    if( ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA )
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8007d0e:	d101      	bne.n	8007d14 <chacha20_stream_wrap+0x28>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007d10:	4b03      	ldr	r3, [pc, #12]	@ (8007d20 <chacha20_stream_wrap+0x34>)
 8007d12:	e000      	b.n	8007d16 <chacha20_stream_wrap+0x2a>

    return( ret );
 8007d14:	697b      	ldr	r3, [r7, #20]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	ffff9f00 	.word	0xffff9f00

08007d24 <chacha20_ctx_alloc>:

static void * chacha20_ctx_alloc( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chacha20_context ) );
 8007d2a:	2184      	movs	r1, #132	@ 0x84
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f005 f9eb 	bl	800d108 <calloc>
 8007d32:	4603      	mov	r3, r0
 8007d34:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <chacha20_ctx_alloc+0x1c>
        return( NULL );
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	e003      	b.n	8007d48 <chacha20_ctx_alloc+0x24>

    mbedtls_chacha20_init( ctx );
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7fe fff0 	bl	8006d26 <mbedtls_chacha20_init>

    return( ctx );
 8007d46:	687b      	ldr	r3, [r7, #4]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <chacha20_ctx_free>:

static void chacha20_ctx_free( void *ctx )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free( (mbedtls_chacha20_context *) ctx );
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fe fffb 	bl	8006d54 <mbedtls_chacha20_free>
    mbedtls_free( ctx );
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f005 f9ee 	bl	800d140 <free>
}
 8007d64:	bf00      	nop
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap( void *ctx,
                                   const unsigned char *key,
                                   unsigned int key_bitlen )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d7e:	d001      	beq.n	8007d84 <chachapoly_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007d80:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <chachapoly_setkey_wrap+0x34>)
 8007d82:	e009      	b.n	8007d98 <chachapoly_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chachapoly_setkey( (mbedtls_chachapoly_context*)ctx, key ) )
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f7ff fa69 	bl	800725e <mbedtls_chachapoly_setkey>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <chachapoly_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007d92:	4b03      	ldr	r3, [pc, #12]	@ (8007da0 <chachapoly_setkey_wrap+0x34>)
 8007d94:	e000      	b.n	8007d98 <chachapoly_setkey_wrap+0x2c>

    return( 0 );
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	ffff9f00 	.word	0xffff9f00

08007da4 <chachapoly_ctx_alloc>:

static void * chachapoly_ctx_alloc( void )
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chachapoly_context ) );
 8007daa:	21e8      	movs	r1, #232	@ 0xe8
 8007dac:	2001      	movs	r0, #1
 8007dae:	f005 f9ab 	bl	800d108 <calloc>
 8007db2:	4603      	mov	r3, r0
 8007db4:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <chachapoly_ctx_alloc+0x1c>
        return( NULL );
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	e003      	b.n	8007dc8 <chachapoly_ctx_alloc+0x24>

    mbedtls_chachapoly_init( ctx );
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff f9fa 	bl	80071ba <mbedtls_chachapoly_init>

    return( ctx );
 8007dc6:	687b      	ldr	r3, [r7, #4]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <chachapoly_ctx_free>:

static void chachapoly_ctx_free( void *ctx )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free( (mbedtls_chachapoly_context *) ctx );
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f7ff fa15 	bl	8007208 <mbedtls_chachapoly_free>
    mbedtls_free( ctx );
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f005 f9ae 	bl	800d140 <free>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 8007df4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f005 fc4e 	bl	800d69c <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08e      	sub	sp, #56	@ 0x38
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	607a      	str	r2, [r7, #4]
 8007e14:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 8007e16:	f107 0314 	add.w	r3, r7, #20
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f005 fc3c 	bl	800d69c <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	3320      	adds	r3, #32
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fb fd5e 	bl	80038ea <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    ctx->p_entropy = p_entropy;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

    ctx->entropy_len = entropy_len;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e42:	619a      	str	r2, [r3, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e4a:	61da      	str	r2, [r3, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3320      	adds	r3, #32
 8007e50:	f107 0114 	add.w	r1, r7, #20
 8007e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fb fd8d 	bl	8003978 <mbedtls_aes_setkey_enc>
 8007e5e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <mbedtls_ctr_drbg_seed_entropy_len+0x62>
    {
        return( ret );
 8007e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e68:	e00b      	b.n	8007e82 <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 8007e6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e6c:	6839      	ldr	r1, [r7, #0]
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 fa6d 	bl	800834e <mbedtls_ctr_drbg_reseed>
 8007e74:	6378      	str	r0, [r7, #52]	@ 0x34
 8007e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <mbedtls_ctr_drbg_seed_entropy_len+0x78>
    {
        return( ret );
 8007e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7e:	e000      	b.n	8007e82 <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }
    return( 0 );
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3738      	adds	r7, #56	@ 0x38
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b086      	sub	sp, #24
 8007e8e:	af02      	add	r7, sp, #8
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
 8007e96:	603b      	str	r3, [r7, #0]
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 8007e98:	2330      	movs	r3, #48	@ 0x30
 8007e9a:	9301      	str	r3, [sp, #4]
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	68b9      	ldr	r1, [r7, #8]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f7ff ffae 	bl	8007e08 <mbedtls_ctr_drbg_seed_entropy_len>
 8007eac:	4603      	mov	r3, r0
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3710      	adds	r7, #16
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <mbedtls_ctr_drbg_free>:

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <mbedtls_ctr_drbg_free+0x24>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3320      	adds	r3, #32
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fb fd1c 	bl	8003906 <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 8007ece:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fd36 	bl	8009944 <mbedtls_platform_zeroize>
 8007ed8:	e000      	b.n	8007edc <mbedtls_ctr_drbg_free+0x26>
        return;
 8007eda:	bf00      	nop
}
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 8007ee2:	b5b0      	push	{r4, r5, r7, lr}
 8007ee4:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007eee:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8007ef2:	6018      	str	r0, [r3, #0]
 8007ef4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007ef8:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8007efc:	6019      	str	r1, [r3, #0]
 8007efe:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007f02:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007f06:	601a      	str	r2, [r3, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    mbedtls_aes_context aes_ctx;
    int ret = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8007f0e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007f12:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8007f1c:	d902      	bls.n	8007f24 <block_cipher_df+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8007f1e:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 8007f22:	e191      	b.n	8008248 <block_cipher_df+0x366>

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 8007f24:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8007f28:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f005 fbb4 	bl	800d69c <memset>
    mbedtls_aes_init( &aes_ctx );
 8007f34:	f107 0314 	add.w	r3, r7, #20
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fb fcd6 	bl	80038ea <mbedtls_aes_init>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8007f3e:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8007f42:	3310      	adds	r3, #16
 8007f44:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = ( data_len >> 24 ) & 0xff;
 8007f48:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007f4c:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	0e19      	lsrs	r1, r3, #24
 8007f54:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007f58:	1c5a      	adds	r2, r3, #1
 8007f5a:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8007f5e:	b2ca      	uxtb	r2, r1
 8007f60:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 16 ) & 0xff;
 8007f62:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007f66:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	0c19      	lsrs	r1, r3, #16
 8007f6e:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8007f78:	b2ca      	uxtb	r2, r1
 8007f7a:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 8  ) & 0xff;
 8007f7c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007f80:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	0a19      	lsrs	r1, r3, #8
 8007f88:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007f8c:	1c5a      	adds	r2, r3, #1
 8007f8e:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8007f92:	b2ca      	uxtb	r2, r1
 8007f94:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len       ) & 0xff;
 8007f96:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8007fa0:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 8007fa4:	f5a2 7251 	sub.w	r2, r2, #836	@ 0x344
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	b2d2      	uxtb	r2, r2
 8007fac:	701a      	strb	r2, [r3, #0]
    p += 3;
 8007fae:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007fb2:	3303      	adds	r3, #3
 8007fb4:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 8007fb8:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 8007fc2:	2230      	movs	r2, #48	@ 0x30
 8007fc4:	701a      	strb	r2, [r3, #0]
    memcpy( p, data, data_len );
 8007fc6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007fca:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8007fce:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007fd2:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8007fd6:	6812      	ldr	r2, [r2, #0]
 8007fd8:	6819      	ldr	r1, [r3, #0]
 8007fda:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 8007fde:	f005 fbe8 	bl	800d7b2 <memcpy>
    p[data_len] = 0x80;
 8007fe2:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007fe6:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007fea:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	2280      	movs	r2, #128	@ 0x80
 8007ff4:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8007ff6:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007ffa:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3319      	adds	r3, #25
 8008002:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8008006:	2300      	movs	r3, #0
 8008008:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800800c:	e010      	b.n	8008030 <block_cipher_df+0x14e>
        key[i] = i;
 800800e:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8008012:	b2d9      	uxtb	r1, r3
 8008014:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8008018:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 800801c:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8008020:	4413      	add	r3, r2
 8008022:	460a      	mov	r2, r1
 8008024:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8008026:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800802a:	3301      	adds	r3, #1
 800802c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8008030:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8008034:	2b1f      	cmp	r3, #31
 8008036:	ddea      	ble.n	800800e <block_cipher_df+0x12c>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008038:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800803c:	f107 0314 	add.w	r3, r7, #20
 8008040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008044:	4618      	mov	r0, r3
 8008046:	f7fb fc97 	bl	8003978 <mbedtls_aes_setkey_enc>
 800804a:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 800804e:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008052:	2b00      	cmp	r3, #0
 8008054:	f040 80c5 	bne.w	80081e2 <block_cipher_df+0x300>
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008058:	2300      	movs	r3, #0
 800805a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 800805e:	e078      	b.n	8008152 <block_cipher_df+0x270>
    {
        p = buf;
 8008060:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8008064:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008068:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800806c:	2210      	movs	r2, #16
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f005 fb13 	bl	800d69c <memset>
        use_len = buf_len;
 8008076:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 800807a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

        while( use_len > 0 )
 800807e:	e043      	b.n	8008108 <block_cipher_df+0x226>
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8008080:	2300      	movs	r3, #0
 8008082:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8008086:	e01d      	b.n	80080c4 <block_cipher_df+0x1e2>
                chain[i] ^= p[i];
 8008088:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800808c:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 8008090:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8008094:	4413      	add	r3, r2
 8008096:	781a      	ldrb	r2, [r3, #0]
 8008098:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800809c:	f8d7 1344 	ldr.w	r1, [r7, #836]	@ 0x344
 80080a0:	440b      	add	r3, r1
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4053      	eors	r3, r2
 80080a6:	b2d9      	uxtb	r1, r3
 80080a8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80080ac:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80080b0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80080b4:	4413      	add	r3, r2
 80080b6:	460a      	mov	r2, r1
 80080b8:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 80080ba:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80080be:	3301      	adds	r3, #1
 80080c0:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80080c4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80080c8:	2b0f      	cmp	r3, #15
 80080ca:	dddd      	ble.n	8008088 <block_cipher_df+0x1a6>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80080cc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80080d0:	3310      	adds	r3, #16
 80080d2:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 80080d6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80080da:	2b10      	cmp	r3, #16
 80080dc:	bf28      	it	cs
 80080de:	2310      	movcs	r3, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 80080e0:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 80080ea:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80080ee:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 80080f2:	f107 0014 	add.w	r0, r7, #20
 80080f6:	2101      	movs	r1, #1
 80080f8:	f7fc fda0 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 80080fc:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8008100:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008104:	2b00      	cmp	r3, #0
 8008106:	d16e      	bne.n	80081e6 <block_cipher_df+0x304>
        while( use_len > 0 )
 8008108:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1b7      	bne.n	8008080 <block_cipher_df+0x19e>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008110:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8008114:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8008118:	441a      	add	r2, r3
 800811a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800811e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8008122:	4614      	mov	r4, r2
 8008124:	461d      	mov	r5, r3
 8008126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008128:	6020      	str	r0, [r4, #0]
 800812a:	6061      	str	r1, [r4, #4]
 800812c:	60a2      	str	r2, [r4, #8]
 800812e:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 8008130:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8008134:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8008138:	78db      	ldrb	r3, [r3, #3]
 800813a:	3301      	adds	r3, #1
 800813c:	b2da      	uxtb	r2, r3
 800813e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8008142:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8008146:	70da      	strb	r2, [r3, #3]
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008148:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800814c:	3310      	adds	r3, #16
 800814e:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8008152:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8008156:	2b2f      	cmp	r3, #47	@ 0x2f
 8008158:	dd82      	ble.n	8008060 <block_cipher_df+0x17e>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 800815a:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 800815e:	f107 0314 	add.w	r3, r7, #20
 8008162:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008166:	4618      	mov	r0, r3
 8008168:	f7fb fc06 	bl	8003978 <mbedtls_aes_setkey_enc>
 800816c:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8008170:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008174:	2b00      	cmp	r3, #0
 8008176:	d138      	bne.n	80081ea <block_cipher_df+0x308>
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 8008178:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800817c:	3320      	adds	r3, #32
 800817e:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    p = output;
 8008182:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8008186:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008190:	2300      	movs	r3, #0
 8008192:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8008196:	e01f      	b.n	80081d8 <block_cipher_df+0x2f6>
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 8008198:	f107 0014 	add.w	r0, r7, #20
 800819c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80081a0:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80081a4:	2101      	movs	r1, #1
 80081a6:	f7fc fd49 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 80081aa:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 80081ae:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d11b      	bne.n	80081ee <block_cipher_df+0x30c>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80081b6:	2210      	movs	r2, #16
 80081b8:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 80081bc:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 80081c0:	f005 faf7 	bl	800d7b2 <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80081c4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80081c8:	3310      	adds	r3, #16
 80081ca:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80081ce:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80081d2:	3310      	adds	r3, #16
 80081d4:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80081d8:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80081dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80081de:	dddb      	ble.n	8008198 <block_cipher_df+0x2b6>
    }
exit:
 80081e0:	e006      	b.n	80081f0 <block_cipher_df+0x30e>
        goto exit;
 80081e2:	bf00      	nop
 80081e4:	e004      	b.n	80081f0 <block_cipher_df+0x30e>
                goto exit;
 80081e6:	bf00      	nop
 80081e8:	e002      	b.n	80081f0 <block_cipher_df+0x30e>
        goto exit;
 80081ea:	bf00      	nop
 80081ec:	e000      	b.n	80081f0 <block_cipher_df+0x30e>
            goto exit;
 80081ee:	bf00      	nop
    mbedtls_aes_free( &aes_ctx );
 80081f0:	f107 0314 	add.w	r3, r7, #20
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fb fb86 	bl	8003906 <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 80081fa:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80081fe:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8008202:	4618      	mov	r0, r3
 8008204:	f001 fb9e 	bl	8009944 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008208:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800820c:	2130      	movs	r1, #48	@ 0x30
 800820e:	4618      	mov	r0, r3
 8008210:	f001 fb98 	bl	8009944 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 8008214:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8008218:	2120      	movs	r1, #32
 800821a:	4618      	mov	r0, r3
 800821c:	f001 fb92 	bl	8009944 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8008220:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8008224:	2110      	movs	r1, #16
 8008226:	4618      	mov	r0, r3
 8008228:	f001 fb8c 	bl	8009944 <mbedtls_platform_zeroize>
    if( 0 != ret )
 800822c:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <block_cipher_df+0x362>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008234:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8008238:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800823c:	2130      	movs	r1, #48	@ 0x30
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	f001 fb80 	bl	8009944 <mbedtls_platform_zeroize>
    }

    return( ret );
 8008244:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
}
 8008248:	4618      	mov	r0, r3
 800824a:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 800824e:	46bd      	mov	sp, r7
 8008250:	bdb0      	pop	{r4, r5, r7, pc}

08008252 <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b092      	sub	sp, #72	@ 0x48
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 800825c:	f107 0308 	add.w	r3, r7, #8
 8008260:	647b      	str	r3, [r7, #68]	@ 0x44
    int i, j;
    int ret = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	63bb      	str	r3, [r7, #56]	@ 0x38

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	2230      	movs	r2, #48	@ 0x30
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f005 fa14 	bl	800d69c <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008278:	e028      	b.n	80082cc <ctr_drbg_update_internal+0x7a>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 800827a:	2310      	movs	r3, #16
 800827c:	643b      	str	r3, [r7, #64]	@ 0x40
 800827e:	e00e      	b.n	800829e <ctr_drbg_update_internal+0x4c>
            if( ++ctx->counter[i - 1] != 0 )
 8008280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008282:	3b01      	subs	r3, #1
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	5cd2      	ldrb	r2, [r2, r3]
 8008288:	3201      	adds	r2, #1
 800828a:	b2d1      	uxtb	r1, r2
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	54d1      	strb	r1, [r2, r3]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	5cd3      	ldrb	r3, [r2, r3]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d106      	bne.n	80082a6 <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8008298:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800829a:	3b01      	subs	r3, #1
 800829c:	643b      	str	r3, [r7, #64]	@ 0x40
 800829e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dced      	bgt.n	8008280 <ctr_drbg_update_internal+0x2e>
 80082a4:	e000      	b.n	80082a8 <ctr_drbg_update_internal+0x56>
                break;
 80082a6:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f103 0020 	add.w	r0, r3, #32
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b2:	2101      	movs	r1, #1
 80082b4:	f7fc fcc2 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 80082b8:	63b8      	str	r0, [r7, #56]	@ 0x38
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d138      	bne.n	8008332 <ctr_drbg_update_internal+0xe0>
            goto exit;

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 80082c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c2:	3310      	adds	r3, #16
 80082c4:	647b      	str	r3, [r7, #68]	@ 0x44
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	3310      	adds	r3, #16
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ce:	2b2f      	cmp	r3, #47	@ 0x2f
 80082d0:	ddd3      	ble.n	800827a <ctr_drbg_update_internal+0x28>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 80082d2:	2300      	movs	r3, #0
 80082d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082d6:	e013      	b.n	8008300 <ctr_drbg_update_internal+0xae>
        tmp[i] ^= data[i];
 80082d8:	f107 0208 	add.w	r2, r7, #8
 80082dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082de:	4413      	add	r3, r2
 80082e0:	781a      	ldrb	r2, [r3, #0]
 80082e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	440b      	add	r3, r1
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	4053      	eors	r3, r2
 80082ec:	b2d9      	uxtb	r1, r3
 80082ee:	f107 0208 	add.w	r2, r7, #8
 80082f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082f4:	4413      	add	r3, r2
 80082f6:	460a      	mov	r2, r1
 80082f8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 80082fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082fc:	3301      	adds	r3, #1
 80082fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008302:	2b2f      	cmp	r3, #47	@ 0x2f
 8008304:	dde8      	ble.n	80082d8 <ctr_drbg_update_internal+0x86>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	3320      	adds	r3, #32
 800830a:	f107 0108 	add.w	r1, r7, #8
 800830e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008312:	4618      	mov	r0, r3
 8008314:	f7fb fb30 	bl	8003978 <mbedtls_aes_setkey_enc>
 8008318:	63b8      	str	r0, [r7, #56]	@ 0x38
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10a      	bne.n	8008336 <ctr_drbg_update_internal+0xe4>
        goto exit;
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f107 0308 	add.w	r3, r7, #8
 8008326:	3320      	adds	r3, #32
 8008328:	2210      	movs	r2, #16
 800832a:	4619      	mov	r1, r3
 800832c:	f005 fa41 	bl	800d7b2 <memcpy>
 8008330:	e002      	b.n	8008338 <ctr_drbg_update_internal+0xe6>
            goto exit;
 8008332:	bf00      	nop
 8008334:	e000      	b.n	8008338 <ctr_drbg_update_internal+0xe6>
        goto exit;
 8008336:	bf00      	nop

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008338:	f107 0308 	add.w	r3, r7, #8
 800833c:	2130      	movs	r1, #48	@ 0x30
 800833e:	4618      	mov	r0, r3
 8008340:	f001 fb00 	bl	8009944 <mbedtls_platform_zeroize>
    return( ret );
 8008344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008346:	4618      	mov	r0, r3
 8008348:	3748      	adds	r7, #72	@ 0x48
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b0e6      	sub	sp, #408	@ 0x198
 8008352:	af00      	add	r7, sp, #0
 8008354:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008358:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800835c:	6018      	str	r0, [r3, #0]
 800835e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008362:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008366:	6019      	str	r1, [r3, #0]
 8008368:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800836c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008370:	601a      	str	r2, [r3, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 8008378:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800837c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8008388:	d80e      	bhi.n	80083a8 <mbedtls_ctr_drbg_reseed+0x5a>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 800838a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800838e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 800839a:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 800839e:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80083a2:	6812      	ldr	r2, [r2, #0]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d902      	bls.n	80083ae <mbedtls_ctr_drbg_reseed+0x60>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80083a8:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 80083ac:	e08b      	b.n	80084c6 <mbedtls_ctr_drbg_reseed+0x178>

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 80083ae:	f107 0310 	add.w	r3, r7, #16
 80083b2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80083b6:	2100      	movs	r1, #0
 80083b8:	4618      	mov	r0, r3
 80083ba:	f005 f96f 	bl	800d69c <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 80083be:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80083c2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80083cc:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80083d0:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 80083d4:	6812      	ldr	r2, [r2, #0]
 80083d6:	f8d2 013c 	ldr.w	r0, [r2, #316]	@ 0x13c
 80083da:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80083de:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 80083e2:	6812      	ldr	r2, [r2, #0]
 80083e4:	6992      	ldr	r2, [r2, #24]
 80083e6:	f107 0110 	add.w	r1, r7, #16
 80083ea:	4798      	blx	r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <mbedtls_ctr_drbg_reseed+0xaa>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 80083f2:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 80083f6:	e066      	b.n	80084c6 <mbedtls_ctr_drbg_reseed+0x178>
    }

    seedlen += ctx->entropy_len;
 80083f8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80083fc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	699b      	ldr	r3, [r3, #24]
 8008404:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8008408:	4413      	add	r3, r2
 800840a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    /*
     * Add additional data
     */
    if( additional && len )
 800840e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008412:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d021      	beq.n	8008460 <mbedtls_ctr_drbg_reseed+0x112>
 800841c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008420:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01a      	beq.n	8008460 <mbedtls_ctr_drbg_reseed+0x112>
    {
        memcpy( seed + seedlen, additional, len );
 800842a:	f107 0210 	add.w	r2, r7, #16
 800842e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008432:	18d0      	adds	r0, r2, r3
 8008434:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008438:	f5a3 72ca 	sub.w	r2, r3, #404	@ 0x194
 800843c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008440:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	6819      	ldr	r1, [r3, #0]
 8008448:	f005 f9b3 	bl	800d7b2 <memcpy>
        seedlen += len;
 800844c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008450:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008454:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4413      	add	r3, r2
 800845c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 8008460:	f107 0110 	add.w	r1, r7, #16
 8008464:	f107 0310 	add.w	r3, r7, #16
 8008468:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff fd38 	bl	8007ee2 <block_cipher_df>
 8008472:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8008476:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800847a:	2b00      	cmp	r3, #0
 800847c:	d117      	bne.n	80084ae <mbedtls_ctr_drbg_reseed+0x160>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 800847e:	f107 0210 	add.w	r2, r7, #16
 8008482:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008486:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800848a:	4611      	mov	r1, r2
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	f7ff fee0 	bl	8008252 <ctr_drbg_update_internal>
 8008492:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8008496:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <mbedtls_ctr_drbg_reseed+0x164>
        goto exit;
    ctx->reseed_counter = 1;
 800849e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80084a2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2201      	movs	r2, #1
 80084aa:	611a      	str	r2, [r3, #16]
 80084ac:	e002      	b.n	80084b4 <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 80084ae:	bf00      	nop
 80084b0:	e000      	b.n	80084b4 <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 80084b2:	bf00      	nop

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 fa41 	bl	8009944 <mbedtls_platform_zeroize>
    return( ret );
 80084c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b09a      	sub	sp, #104	@ 0x68
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	603b      	str	r3, [r7, #0]
    int ret = 0;
 80084de:	2300      	movs	r3, #0
 80084e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	65bb      	str	r3, [r7, #88]	@ 0x58
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = output;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	667b      	str	r3, [r7, #100]	@ 0x64
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f0:	d902      	bls.n	80084f8 <mbedtls_ctr_drbg_random_with_add+0x28>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 80084f2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 80084f6:	e09c      	b.n	8008632 <mbedtls_ctr_drbg_random_with_add+0x162>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 80084f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80084fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084fe:	d902      	bls.n	8008506 <mbedtls_ctr_drbg_random_with_add+0x36>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8008500:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 8008504:	e095      	b.n	8008632 <mbedtls_ctr_drbg_random_with_add+0x162>

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8008506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800850a:	2230      	movs	r2, #48	@ 0x30
 800850c:	2100      	movs	r1, #0
 800850e:	4618      	mov	r0, r3
 8008510:	f005 f8c4 	bl	800d69c <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8008514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008516:	691a      	ldr	r2, [r3, #16]
 8008518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	429a      	cmp	r2, r3
 800851e:	dc03      	bgt.n	8008528 <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance )
 8008520:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008522:	695b      	ldr	r3, [r3, #20]
    if( ctx->reseed_counter > ctx->reseed_interval ||
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00c      	beq.n	8008542 <mbedtls_ctr_drbg_random_with_add+0x72>
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8008528:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800852e:	f7ff ff0e 	bl	800834e <mbedtls_ctr_drbg_reseed>
 8008532:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <mbedtls_ctr_drbg_random_with_add+0x6e>
        {
            return( ret );
 800853a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800853c:	e079      	b.n	8008632 <mbedtls_ctr_drbg_random_with_add+0x162>
        }
        add_len = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	673b      	str	r3, [r7, #112]	@ 0x70
    }

    if( add_len > 0 )
 8008542:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008544:	2b00      	cmp	r3, #0
 8008546:	d04d      	beq.n	80085e4 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 8008548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800854c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fcc6 	bl	8007ee2 <block_cipher_df>
 8008556:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8008558:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d155      	bne.n	800860a <mbedtls_ctr_drbg_random_with_add+0x13a>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 800855e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008562:	4619      	mov	r1, r3
 8008564:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008566:	f7ff fe74 	bl	8008252 <ctr_drbg_update_internal>
 800856a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800856c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d14d      	bne.n	800860e <mbedtls_ctr_drbg_random_with_add+0x13e>
            goto exit;
    }

    while( output_len > 0 )
 8008572:	e037      	b.n	80085e4 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8008574:	2310      	movs	r3, #16
 8008576:	663b      	str	r3, [r7, #96]	@ 0x60
 8008578:	e00e      	b.n	8008598 <mbedtls_ctr_drbg_random_with_add+0xc8>
            if( ++ctx->counter[i - 1] != 0 )
 800857a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800857c:	3b01      	subs	r3, #1
 800857e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008580:	5cd2      	ldrb	r2, [r2, r3]
 8008582:	3201      	adds	r2, #1
 8008584:	b2d1      	uxtb	r1, r2
 8008586:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008588:	54d1      	strb	r1, [r2, r3]
 800858a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800858c:	5cd3      	ldrb	r3, [r2, r3]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d106      	bne.n	80085a0 <mbedtls_ctr_drbg_random_with_add+0xd0>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8008592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008594:	3b01      	subs	r3, #1
 8008596:	663b      	str	r3, [r7, #96]	@ 0x60
 8008598:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800859a:	2b00      	cmp	r3, #0
 800859c:	dced      	bgt.n	800857a <mbedtls_ctr_drbg_random_with_add+0xaa>
 800859e:	e000      	b.n	80085a2 <mbedtls_ctr_drbg_random_with_add+0xd2>
                break;
 80085a0:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 80085a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80085a4:	f103 0020 	add.w	r0, r3, #32
 80085a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085aa:	f107 0314 	add.w	r3, r7, #20
 80085ae:	2101      	movs	r1, #1
 80085b0:	f7fc fb44 	bl	8004c3c <mbedtls_aes_crypt_ecb>
 80085b4:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80085b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d12a      	bne.n	8008612 <mbedtls_ctr_drbg_random_with_add+0x142>
            goto exit;

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2b10      	cmp	r3, #16
 80085c0:	bf28      	it	cs
 80085c2:	2310      	movcs	r3, #16
 80085c4:	657b      	str	r3, [r7, #84]	@ 0x54
                                                       output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80085cc:	4619      	mov	r1, r3
 80085ce:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80085d0:	f005 f8ef 	bl	800d7b2 <memcpy>
        p += use_len;
 80085d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80085d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085d8:	4413      	add	r3, r2
 80085da:	667b      	str	r3, [r7, #100]	@ 0x64
        output_len -= use_len;
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	607b      	str	r3, [r7, #4]
    while( output_len > 0 )
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1c4      	bne.n	8008574 <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 80085ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085ee:	4619      	mov	r1, r3
 80085f0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80085f2:	f7ff fe2e 	bl	8008252 <ctr_drbg_update_internal>
 80085f6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80085f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10b      	bne.n	8008616 <mbedtls_ctr_drbg_random_with_add+0x146>
        goto exit;

    ctx->reseed_counter++;
 80085fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	1c5a      	adds	r2, r3, #1
 8008604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008606:	611a      	str	r2, [r3, #16]
 8008608:	e006      	b.n	8008618 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800860a:	bf00      	nop
 800860c:	e004      	b.n	8008618 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 800860e:	bf00      	nop
 8008610:	e002      	b.n	8008618 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8008612:	bf00      	nop
 8008614:	e000      	b.n	8008618 <mbedtls_ctr_drbg_random_with_add+0x148>
        goto exit;
 8008616:	bf00      	nop

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 8008618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800861c:	2130      	movs	r1, #48	@ 0x30
 800861e:	4618      	mov	r0, r3
 8008620:	f001 f990 	bl	8009944 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008624:	f107 0314 	add.w	r3, r7, #20
 8008628:	2110      	movs	r1, #16
 800862a:	4618      	mov	r0, r3
 800862c:	f001 f98a 	bl	8009944 <mbedtls_platform_zeroize>
    return( 0 );
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3768      	adds	r7, #104	@ 0x68
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b088      	sub	sp, #32
 800863e:	af02      	add	r7, sp, #8
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 800864a:	2300      	movs	r3, #0
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	f7ff ff3b 	bl	80084d0 <mbedtls_ctr_drbg_random_with_add>
 800865a:	6138      	str	r0, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800865c:	693b      	ldr	r3, [r7, #16]
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b082      	sub	sp, #8
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	33e4      	adds	r3, #228	@ 0xe4
 800867a:	2228      	movs	r2, #40	@ 0x28
 800867c:	2100      	movs	r1, #0
 800867e:	4618      	mov	r0, r3
 8008680:	f005 f80c 	bl	800d69c <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3308      	adds	r3, #8
 800868e:	4618      	mov	r0, r3
 8008690:	f001 fe50 	bl	800a334 <mbedtls_sha512_init>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 8008694:	bf00      	nop
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <mbedtls_entropy_free>:

void mbedtls_entropy_free( mbedtls_entropy_context *ctx )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
#endif
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_free( &ctx->accumulator );
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3308      	adds	r3, #8
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 fe50 	bl	800a34e <mbedtls_sha512_free>
    mbedtls_sha256_free( &ctx->accumulator );
#endif
#if defined(MBEDTLS_ENTROPY_NV_SEED)
    ctx->initial_entropy_run = 0;
#endif
    ctx->source_count = 0;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	33e4      	adds	r3, #228	@ 0xe4
 80086ba:	2128      	movs	r1, #40	@ 0x28
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 f941 	bl	8009944 <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
}
 80086c8:	bf00      	nop
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b098      	sub	sp, #96	@ 0x60
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	607a      	str	r2, [r7, #4]
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	460b      	mov	r3, r1
 80086de:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const unsigned char *p = data;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    int ret = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	657b      	str	r3, [r7, #84]	@ 0x54

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 80086ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086ee:	2b40      	cmp	r3, #64	@ 0x40
 80086f0:	d90f      	bls.n	8008712 <entropy_update+0x42>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 80086f2:	f107 0210 	add.w	r2, r7, #16
 80086f6:	2300      	movs	r3, #0
 80086f8:	6839      	ldr	r1, [r7, #0]
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f004 fcc4 	bl	800d088 <mbedtls_sha512_ret>
 8008700:	6578      	str	r0, [r7, #84]	@ 0x54
 8008702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008704:	2b00      	cmp	r3, #0
 8008706:	d131      	bne.n	800876c <entropy_update+0x9c>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 8008708:	f107 0310 	add.w	r3, r7, #16
 800870c:	65bb      	str	r3, [r7, #88]	@ 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 800870e:	2340      	movs	r3, #64	@ 0x40
 8008710:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    header[0] = source_id;
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    header[1] = use_len & 0xFF;
 8008718:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d109      	bne.n	800873c <entropy_update+0x6c>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	3308      	adds	r3, #8
 800872c:	2100      	movs	r1, #0
 800872e:	4618      	mov	r0, r3
 8008730:	f001 fe1e 	bl	800a370 <mbedtls_sha512_starts_ret>
 8008734:	6578      	str	r0, [r7, #84]	@ 0x54
    if( ctx->accumulator_started == 0 &&
 8008736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008738:	2b00      	cmp	r3, #0
 800873a:	d119      	bne.n	8008770 <entropy_update+0xa0>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	601a      	str	r2, [r3, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	3308      	adds	r3, #8
 8008746:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800874a:	2202      	movs	r2, #2
 800874c:	4618      	mov	r0, r3
 800874e:	f003 ff91 	bl	800c674 <mbedtls_sha512_update_ret>
 8008752:	6578      	str	r0, [r7, #84]	@ 0x54
 8008754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10c      	bne.n	8008774 <entropy_update+0xa4>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3308      	adds	r3, #8
 800875e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008760:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008762:	4618      	mov	r0, r3
 8008764:	f003 ff86 	bl	800c674 <mbedtls_sha512_update_ret>
 8008768:	6578      	str	r0, [r7, #84]	@ 0x54
 800876a:	e004      	b.n	8008776 <entropy_update+0xa6>
            goto cleanup;
 800876c:	bf00      	nop
 800876e:	e002      	b.n	8008776 <entropy_update+0xa6>
        goto cleanup;
 8008770:	bf00      	nop
 8008772:	e000      	b.n	8008776 <entropy_update+0xa6>
        goto cleanup;
 8008774:	bf00      	nop
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8008776:	f107 0310 	add.w	r3, r7, #16
 800877a:	2140      	movs	r1, #64	@ 0x40
 800877c:	4618      	mov	r0, r3
 800877e:	f001 f8e1 	bl	8009944 <mbedtls_platform_zeroize>

    return( ret );
 8008782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8008784:	4618      	mov	r0, r3
 8008786:	3760      	adds	r7, #96	@ 0x60
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 800878c:	b590      	push	{r4, r7, lr}
 800878e:	b0a7      	sub	sp, #156	@ 0x9c
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
    int ret, i, have_one_strong = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d102      	bne.n	80087aa <entropy_gather_internal+0x1e>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 80087a4:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 80087a8:	e07f      	b.n	80088aa <entropy_gather_internal+0x11e>

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 80087aa:	2300      	movs	r3, #0
 80087ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087b0:	e060      	b.n	8008874 <entropy_gather_internal+0xe8>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	33f4      	adds	r3, #244	@ 0xf4
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d102      	bne.n	80087d0 <entropy_gather_internal+0x44>
            have_one_strong = 1;
 80087ca:	2301      	movs	r3, #1
 80087cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        olen = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60bb      	str	r3, [r7, #8]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	33e4      	adds	r3, #228	@ 0xe4
 80087e6:	681c      	ldr	r4, [r3, #0]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80087ee:	4613      	mov	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	33e8      	adds	r3, #232	@ 0xe8
 80087fa:	6818      	ldr	r0, [r3, #0]
 80087fc:	f107 0308 	add.w	r3, r7, #8
 8008800:	f107 010c 	add.w	r1, r7, #12
 8008804:	2280      	movs	r2, #128	@ 0x80
 8008806:	47a0      	blx	r4
 8008808:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 800880c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008810:	2b00      	cmp	r3, #0
 8008812:	d13f      	bne.n	8008894 <entropy_gather_internal+0x108>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d027      	beq.n	800886a <entropy_gather_internal+0xde>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 800881a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800881e:	b2d9      	uxtb	r1, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f107 020c 	add.w	r2, r7, #12
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff ff52 	bl	80086d0 <entropy_update>
 800882c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8008830:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <entropy_gather_internal+0xb2>
                                        buf, olen ) ) != 0 )
                return( ret );
 8008838:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800883c:	e035      	b.n	80088aa <entropy_gather_internal+0x11e>
            ctx->source[i].size += olen;
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008844:	4613      	mov	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	33ec      	adds	r3, #236	@ 0xec
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	18d1      	adds	r1, r2, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800885c:	4613      	mov	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	4403      	add	r3, r0
 8008866:	33ec      	adds	r3, #236	@ 0xec
 8008868:	6019      	str	r1, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 800886a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800886e:	3301      	adds	r3, #1
 8008870:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800887a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800887e:	429a      	cmp	r2, r3
 8008880:	db97      	blt.n	80087b2 <entropy_gather_internal+0x26>
        }
    }

    if( have_one_strong == 0 )
 8008882:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d106      	bne.n	8008898 <entropy_gather_internal+0x10c>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 800888a:	f06f 033c 	mvn.w	r3, #60	@ 0x3c
 800888e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008892:	e002      	b.n	800889a <entropy_gather_internal+0x10e>
            goto cleanup;
 8008894:	bf00      	nop
 8008896:	e000      	b.n	800889a <entropy_gather_internal+0x10e>

cleanup:
 8008898:	bf00      	nop
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 800889a:	f107 030c 	add.w	r3, r7, #12
 800889e:	2180      	movs	r1, #128	@ 0x80
 80088a0:	4618      	mov	r0, r3
 80088a2:	f001 f84f 	bl	8009944 <mbedtls_platform_zeroize>

    return( ret );
 80088a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	379c      	adds	r7, #156	@ 0x9c
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd90      	pop	{r4, r7, pc}

080088b2 <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b09a      	sub	sp, #104	@ 0x68
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, done;
 80088be:	2300      	movs	r3, #0
 80088c0:	663b      	str	r3, [r7, #96]	@ 0x60
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	657b      	str	r3, [r7, #84]	@ 0x54
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b40      	cmp	r3, #64	@ 0x40
 80088ca:	d902      	bls.n	80088d2 <mbedtls_entropy_func+0x20>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 80088cc:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 80088d0:	e0a7      	b.n	8008a22 <mbedtls_entropy_func+0x170>
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 80088d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	663a      	str	r2, [r7, #96]	@ 0x60
 80088d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088dc:	dd03      	ble.n	80088e6 <mbedtls_entropy_func+0x34>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 80088de:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 80088e2:	667b      	str	r3, [r7, #100]	@ 0x64
            goto exit;
 80088e4:	e096      	b.n	8008a14 <mbedtls_entropy_func+0x162>
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 80088e6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80088e8:	f7ff ff50 	bl	800878c <entropy_gather_internal>
 80088ec:	6678      	str	r0, [r7, #100]	@ 0x64
 80088ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 8086 	bne.w	8008a02 <mbedtls_entropy_func+0x150>
            goto exit;

        done = 1;
 80088f6:	2301      	movs	r3, #1
 80088f8:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 80088fa:	2300      	movs	r3, #0
 80088fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80088fe:	e018      	b.n	8008932 <mbedtls_entropy_func+0x80>
            if( ctx->source[i].size < ctx->source[i].threshold )
 8008900:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008902:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	440b      	add	r3, r1
 800890e:	33ec      	adds	r3, #236	@ 0xec
 8008910:	6819      	ldr	r1, [r3, #0]
 8008912:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008914:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4403      	add	r3, r0
 8008920:	33f0      	adds	r3, #240	@ 0xf0
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4299      	cmp	r1, r3
 8008926:	d201      	bcs.n	800892c <mbedtls_entropy_func+0x7a>
                done = 0;
 8008928:	2300      	movs	r3, #0
 800892a:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 800892c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800892e:	3301      	adds	r3, #1
 8008930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008938:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800893a:	429a      	cmp	r2, r3
 800893c:	dbe0      	blt.n	8008900 <mbedtls_entropy_func+0x4e>
    }
    while( ! done );
 800893e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0c6      	beq.n	80088d2 <mbedtls_entropy_func+0x20>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8008944:	f107 0314 	add.w	r3, r7, #20
 8008948:	2240      	movs	r2, #64	@ 0x40
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f004 fea5 	bl	800d69c <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 8008952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008954:	3308      	adds	r3, #8
 8008956:	f107 0214 	add.w	r2, r7, #20
 800895a:	4611      	mov	r1, r2
 800895c:	4618      	mov	r0, r3
 800895e:	f003 ff14 	bl	800c78a <mbedtls_sha512_finish_ret>
 8008962:	6678      	str	r0, [r7, #100]	@ 0x64
 8008964:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008966:	2b00      	cmp	r3, #0
 8008968:	d14d      	bne.n	8008a06 <mbedtls_entropy_func+0x154>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 800896a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800896c:	3308      	adds	r3, #8
 800896e:	4618      	mov	r0, r3
 8008970:	f001 fced 	bl	800a34e <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 8008974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008976:	3308      	adds	r3, #8
 8008978:	4618      	mov	r0, r3
 800897a:	f001 fcdb 	bl	800a334 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 800897e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008980:	3308      	adds	r3, #8
 8008982:	2100      	movs	r1, #0
 8008984:	4618      	mov	r0, r3
 8008986:	f001 fcf3 	bl	800a370 <mbedtls_sha512_starts_ret>
 800898a:	6678      	str	r0, [r7, #100]	@ 0x64
 800898c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800898e:	2b00      	cmp	r3, #0
 8008990:	d13b      	bne.n	8008a0a <mbedtls_entropy_func+0x158>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 8008992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008994:	3308      	adds	r3, #8
 8008996:	f107 0114 	add.w	r1, r7, #20
 800899a:	2240      	movs	r2, #64	@ 0x40
 800899c:	4618      	mov	r0, r3
 800899e:	f003 fe69 	bl	800c674 <mbedtls_sha512_update_ret>
 80089a2:	6678      	str	r0, [r7, #100]	@ 0x64
 80089a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d131      	bne.n	8008a0e <mbedtls_entropy_func+0x15c>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 80089aa:	f107 0214 	add.w	r2, r7, #20
 80089ae:	f107 0014 	add.w	r0, r7, #20
 80089b2:	2300      	movs	r3, #0
 80089b4:	2140      	movs	r1, #64	@ 0x40
 80089b6:	f004 fb67 	bl	800d088 <mbedtls_sha512_ret>
 80089ba:	6678      	str	r0, [r7, #100]	@ 0x64
 80089bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d127      	bne.n	8008a12 <mbedtls_entropy_func+0x160>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 80089c2:	2300      	movs	r3, #0
 80089c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089c6:	e00c      	b.n	80089e2 <mbedtls_entropy_func+0x130>
        ctx->source[i].size = 0;
 80089c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089ca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	440b      	add	r3, r1
 80089d6:	33ec      	adds	r3, #236	@ 0xec
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 80089dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089de:	3301      	adds	r3, #1
 80089e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80089e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089ea:	429a      	cmp	r2, r3
 80089ec:	dbec      	blt.n	80089c8 <mbedtls_entropy_func+0x116>

    memcpy( output, buf, len );
 80089ee:	f107 0314 	add.w	r3, r7, #20
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	4619      	mov	r1, r3
 80089f6:	68b8      	ldr	r0, [r7, #8]
 80089f8:	f004 fedb 	bl	800d7b2 <memcpy>

    ret = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a00:	e008      	b.n	8008a14 <mbedtls_entropy_func+0x162>
            goto exit;
 8008a02:	bf00      	nop
 8008a04:	e006      	b.n	8008a14 <mbedtls_entropy_func+0x162>
        goto exit;
 8008a06:	bf00      	nop
 8008a08:	e004      	b.n	8008a14 <mbedtls_entropy_func+0x162>
        goto exit;
 8008a0a:	bf00      	nop
 8008a0c:	e002      	b.n	8008a14 <mbedtls_entropy_func+0x162>
        goto exit;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <mbedtls_entropy_func+0x162>
        goto exit;
 8008a12:	bf00      	nop

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8008a14:	f107 0314 	add.w	r3, r7, #20
 8008a18:	2140      	movs	r1, #64	@ 0x40
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 ff92 	bl	8009944 <mbedtls_platform_zeroize>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 8008a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3768      	adds	r7, #104	@ 0x68
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8008a32:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f004 fe2f 	bl	800d69c <memset>
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 8008a46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a4a:	b0a8      	sub	sp, #160	@ 0xa0
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	6478      	str	r0, [r7, #68]	@ 0x44
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	64bb      	str	r3, [r7, #72]	@ 0x48

    memset( h, 0, 16 );
 8008a54:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008a58:	2210      	movs	r2, #16
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f004 fe1d 	bl	800d69c <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8008a62:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008a64:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8008a68:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8008a6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	4613      	mov	r3, r2
 8008a74:	2210      	movs	r2, #16
 8008a76:	f7fe fd5b 	bl	8007530 <mbedtls_cipher_update>
 8008a7a:	67f8      	str	r0, [r7, #124]	@ 0x7c
 8008a7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <gcm_gen_table+0x40>
        return( ret );
 8008a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a84:	e154      	b.n	8008d30 <gcm_gen_table+0x2ea>

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
 8008a86:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8008a8a:	061a      	lsls	r2, r3, #24
 8008a8c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008a90:	041b      	lsls	r3, r3, #16
 8008a92:	431a      	orrs	r2, r3
 8008a94:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	4698      	mov	r8, r3
 8008aa6:	4691      	mov	r9, r2
 8008aa8:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    GET_UINT32_BE( lo, h,  4  );
 8008aac:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8008ab0:	061a      	lsls	r2, r3, #24
 8008ab2:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	2200      	movs	r2, #0
 8008aca:	623b      	str	r3, [r7, #32]
 8008acc:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ad2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    vh = (uint64_t) hi << 32 | lo;
 8008ad6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008ada:	f04f 0000 	mov.w	r0, #0
 8008ade:	f04f 0100 	mov.w	r1, #0
 8008ae2:	0011      	movs	r1, r2
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008aea:	ea42 0400 	orr.w	r4, r2, r0
 8008aee:	ea43 0501 	orr.w	r5, r3, r1
 8008af2:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80

    GET_UINT32_BE( hi, h,  8  );
 8008af6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008afa:	061a      	lsls	r2, r3, #24
 8008afc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8008b00:	041b      	lsls	r3, r3, #16
 8008b02:	431a      	orrs	r2, r3
 8008b04:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8008b08:	021b      	lsls	r3, r3, #8
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008b10:	4313      	orrs	r3, r2
 8008b12:	2200      	movs	r2, #0
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	61fa      	str	r2, [r7, #28]
 8008b18:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008b1c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    GET_UINT32_BE( lo, h,  12 );
 8008b20:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8008b24:	061a      	lsls	r2, r3, #24
 8008b26:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8008b2a:	041b      	lsls	r3, r3, #16
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	431a      	orrs	r2, r3
 8008b36:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	617a      	str	r2, [r7, #20]
 8008b42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008b46:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    vl = (uint64_t) hi << 32 | lo;
 8008b4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008b4e:	f04f 0000 	mov.w	r0, #0
 8008b52:	f04f 0100 	mov.w	r1, #0
 8008b56:	0011      	movs	r1, r2
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008b5e:	ea42 0a00 	orr.w	sl, r2, r0
 8008b62:	ea43 0b01 	orr.w	fp, r3, r1
 8008b66:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8008b6a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008b70:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    ctx->HH[8] = vh;
 8008b74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b76:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008b7a:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 8008b7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b80:	f04f 0200 	mov.w	r2, #0
 8008b84:	f04f 0300 	mov.w	r3, #0
 8008b88:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    ctx->HL[0] = 0;
 8008b8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    for( i = 4; i > 0; i >>= 1 )
 8008b9a:	2304      	movs	r3, #4
 8008b9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ba0:	e05b      	b.n	8008c5a <gcm_gen_table+0x214>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8008ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008ba6:	f003 0201 	and.w	r2, r3, #1
 8008baa:	4613      	mov	r3, r2
 8008bac:	0152      	lsls	r2, r2, #5
 8008bae:	1a9b      	subs	r3, r3, r2
 8008bb0:	061b      	lsls	r3, r3, #24
 8008bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8008bb4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008bb8:	f04f 0400 	mov.w	r4, #0
 8008bbc:	f04f 0500 	mov.w	r5, #0
 8008bc0:	07d5      	lsls	r5, r2, #31
 8008bc2:	2400      	movs	r4, #0
 8008bc4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008bc8:	f04f 0000 	mov.w	r0, #0
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	0850      	lsrs	r0, r2, #1
 8008bd2:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008bd6:	0859      	lsrs	r1, r3, #1
 8008bd8:	ea44 0300 	orr.w	r3, r4, r0
 8008bdc:	60bb      	str	r3, [r7, #8]
 8008bde:	ea45 0301 	orr.w	r3, r5, r1
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008be8:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8008bec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008bf0:	f04f 0000 	mov.w	r0, #0
 8008bf4:	f04f 0100 	mov.w	r1, #0
 8008bf8:	0850      	lsrs	r0, r2, #1
 8008bfa:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008bfe:	0859      	lsrs	r1, r3, #1
 8008c00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c02:	2200      	movs	r2, #0
 8008c04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c06:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008c08:	f04f 0200 	mov.w	r2, #0
 8008c0c:	f04f 0300 	mov.w	r3, #0
 8008c10:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8008c12:	0023      	movs	r3, r4
 8008c14:	2200      	movs	r2, #0
 8008c16:	ea80 0402 	eor.w	r4, r0, r2
 8008c1a:	603c      	str	r4, [r7, #0]
 8008c1c:	404b      	eors	r3, r1
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008c24:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80

        ctx->HL[i] = vl;
 8008c28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c2e:	3308      	adds	r3, #8
 8008c30:	00db      	lsls	r3, r3, #3
 8008c32:	18d1      	adds	r1, r2, r3
 8008c34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008c38:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 8008c3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c42:	3318      	adds	r3, #24
 8008c44:	00db      	lsls	r3, r3, #3
 8008c46:	18d1      	adds	r1, r2, r3
 8008c48:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008c4c:	e9c1 2300 	strd	r2, r3, [r1]
    for( i = 4; i > 0; i >>= 1 )
 8008c50:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c54:	105b      	asrs	r3, r3, #1
 8008c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	dc9f      	bgt.n	8008ba2 <gcm_gen_table+0x15c>
    }

    for( i = 2; i <= 8; i *= 2 )
 8008c62:	2302      	movs	r3, #2
 8008c64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c68:	e05d      	b.n	8008d26 <gcm_gen_table+0x2e0>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8008c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c6c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8008c70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	4413      	add	r3, r2
 8008c78:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c7c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8008c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008c84:	00db      	lsls	r3, r3, #3
 8008c86:	4413      	add	r3, r2
 8008c88:	663b      	str	r3, [r7, #96]	@ 0x60
        vh = *HiH;
 8008c8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        vl = *HiL;
 8008c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        for( j = 1; j < i; j++ )
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ca4:	e034      	b.n	8008d10 <gcm_gen_table+0x2ca>
        {
            HiH[j] = vh ^ ctx->HH[j];
 8008ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ca8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cac:	3318      	adds	r3, #24
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cba:	00db      	lsls	r3, r3, #3
 8008cbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cbe:	18d4      	adds	r4, r2, r3
 8008cc0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008cc4:	ea80 0502 	eor.w	r5, r0, r2
 8008cc8:	633d      	str	r5, [r7, #48]	@ 0x30
 8008cca:	404b      	eors	r3, r1
 8008ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008cd2:	e9c4 2300 	strd	r2, r3, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 8008cd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cdc:	3308      	adds	r3, #8
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	4413      	add	r3, r2
 8008ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cee:	18d4      	adds	r4, r2, r3
 8008cf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008cf4:	ea80 0502 	eor.w	r5, r0, r2
 8008cf8:	62bd      	str	r5, [r7, #40]	@ 0x28
 8008cfa:	404b      	eors	r3, r1
 8008cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008cfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d02:	e9c4 2300 	strd	r2, r3, [r4]
        for( j = 1; j < i; j++ )
 8008d06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d10:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	dbc4      	blt.n	8008ca6 <gcm_gen_table+0x260>
    for( i = 2; i <= 8; i *= 2 )
 8008d1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d26:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008d2a:	2b08      	cmp	r3, #8
 8008d2c:	dd9d      	ble.n	8008c6a <gcm_gen_table+0x224>
        }
    }

    return( 0 );
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3798      	adds	r7, #152	@ 0x98
 8008d34:	46bd      	mov	sp, r7
 8008d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008d3a <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b086      	sub	sp, #24
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
 8008d46:	460b      	mov	r3, r1
 8008d48:	72fb      	strb	r3, [r7, #11]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fe fb19 	bl	8007388 <mbedtls_cipher_info_from_values>
 8008d56:	6178      	str	r0, [r7, #20]
    if( cipher_info == NULL )
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <mbedtls_gcm_setkey+0x2a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8008d5e:	f06f 0313 	mvn.w	r3, #19
 8008d62:	e02b      	b.n	8008dbc <mbedtls_gcm_setkey+0x82>

    if( cipher_info->block_size != 16 )
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	2b10      	cmp	r3, #16
 8008d6a:	d002      	beq.n	8008d72 <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8008d6c:	f06f 0313 	mvn.w	r3, #19
 8008d70:	e024      	b.n	8008dbc <mbedtls_gcm_setkey+0x82>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7fe fb39 	bl	80073ec <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6979      	ldr	r1, [r7, #20]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fb50 	bl	8007424 <mbedtls_cipher_setup>
 8008d84:	6138      	str	r0, [r7, #16]
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <mbedtls_gcm_setkey+0x56>
        return( ret );
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	e015      	b.n	8008dbc <mbedtls_gcm_setkey+0x82>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	2301      	movs	r3, #1
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	f7fe fb70 	bl	800747c <mbedtls_cipher_setkey>
 8008d9c:	6138      	str	r0, [r7, #16]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <mbedtls_gcm_setkey+0x6e>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	e009      	b.n	8008dbc <mbedtls_gcm_setkey+0x82>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7ff fe4c 	bl	8008a46 <gcm_gen_table>
 8008dae:	6138      	str	r0, [r7, #16]
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <mbedtls_gcm_setkey+0x80>
        return( ret );
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	e000      	b.n	8008dbc <mbedtls_gcm_setkey+0x82>

    return( 0 );
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8008dc4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008dc8:	b099      	sub	sp, #100	@ 0x64
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008dce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008dd0:	637a      	str	r2, [r7, #52]	@ 0x34
    int i = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd8:	330f      	adds	r3, #15
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 030f 	and.w	r3, r3, #15
 8008de0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    zh = ctx->HH[lo];
 8008de4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dea:	3318      	adds	r3, #24
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	4413      	add	r3, r2
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    zl = ctx->HL[lo];
 8008df8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008dfc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008dfe:	3308      	adds	r3, #8
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	4413      	add	r3, r2
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    for( i = 15; i >= 0; i-- )
 8008e0c:	230f      	movs	r3, #15
 8008e0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e10:	e0e6      	b.n	8008fe0 <gcm_mult+0x21c>
    {
        lo = x[i] & 0xf;
 8008e12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	4413      	add	r3, r2
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        hi = x[i] >> 4;
 8008e22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	4413      	add	r3, r2
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	091b      	lsrs	r3, r3, #4
 8008e2c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        if( i != 15 )
 8008e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e32:	2b0f      	cmp	r3, #15
 8008e34:	d068      	beq.n	8008f08 <gcm_mult+0x144>
        {
            rem = (unsigned char) zl & 0xf;
 8008e36:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008e3a:	f003 030f 	and.w	r3, r3, #15
 8008e3e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            zl = ( zh << 60 ) | ( zl >> 4 );
 8008e42:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e46:	f04f 0400 	mov.w	r4, #0
 8008e4a:	f04f 0500 	mov.w	r5, #0
 8008e4e:	0715      	lsls	r5, r2, #28
 8008e50:	2400      	movs	r4, #0
 8008e52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008e56:	f04f 0000 	mov.w	r0, #0
 8008e5a:	f04f 0100 	mov.w	r1, #0
 8008e5e:	0910      	lsrs	r0, r2, #4
 8008e60:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8008e64:	0919      	lsrs	r1, r3, #4
 8008e66:	ea44 0300 	orr.w	r3, r4, r0
 8008e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e6c:	ea45 0301 	orr.w	r3, r5, r1
 8008e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e72:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8008e76:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
            zh = ( zh >> 4 );
 8008e7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e7e:	f04f 0000 	mov.w	r0, #0
 8008e82:	f04f 0100 	mov.w	r1, #0
 8008e86:	0910      	lsrs	r0, r2, #4
 8008e88:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8008e8c:	0919      	lsrs	r1, r3, #4
 8008e8e:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 8008e92:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008e96:	4ab6      	ldr	r2, [pc, #728]	@ (8009170 <gcm_mult+0x3ac>)
 8008e98:	00db      	lsls	r3, r3, #3
 8008e9a:	4413      	add	r3, r2
 8008e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea0:	f04f 0000 	mov.w	r0, #0
 8008ea4:	f04f 0100 	mov.w	r1, #0
 8008ea8:	0411      	lsls	r1, r2, #16
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008eb0:	ea82 0400 	eor.w	r4, r2, r0
 8008eb4:	623c      	str	r4, [r7, #32]
 8008eb6:	404b      	eors	r3, r1
 8008eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008eba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008ebe:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
            zh ^= ctx->HH[lo];
 8008ec2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008ec6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ec8:	3318      	adds	r3, #24
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	4413      	add	r3, r2
 8008ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ed2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008ed6:	ea82 0400 	eor.w	r4, r2, r0
 8008eda:	61bc      	str	r4, [r7, #24]
 8008edc:	404b      	eors	r3, r1
 8008ede:	61fb      	str	r3, [r7, #28]
 8008ee0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008ee4:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
            zl ^= ctx->HL[lo];
 8008ee8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008eec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008eee:	3308      	adds	r3, #8
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4413      	add	r3, r2
 8008ef4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008efc:	ea82 0800 	eor.w	r8, r2, r0
 8008f00:	ea83 0901 	eor.w	r9, r3, r1
 8008f04:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48

        }

        rem = (unsigned char) zl & 0xf;
 8008f08:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        zl = ( zh << 60 ) | ( zl >> 4 );
 8008f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f18:	f04f 0400 	mov.w	r4, #0
 8008f1c:	f04f 0500 	mov.w	r5, #0
 8008f20:	0715      	lsls	r5, r2, #28
 8008f22:	2400      	movs	r4, #0
 8008f24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008f28:	f04f 0000 	mov.w	r0, #0
 8008f2c:	f04f 0100 	mov.w	r1, #0
 8008f30:	0910      	lsrs	r0, r2, #4
 8008f32:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8008f36:	0919      	lsrs	r1, r3, #4
 8008f38:	ea44 0300 	orr.w	r3, r4, r0
 8008f3c:	613b      	str	r3, [r7, #16]
 8008f3e:	ea45 0301 	orr.w	r3, r5, r1
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008f48:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
        zh = ( zh >> 4 );
 8008f4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f50:	f04f 0000 	mov.w	r0, #0
 8008f54:	f04f 0100 	mov.w	r1, #0
 8008f58:	0910      	lsrs	r0, r2, #4
 8008f5a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8008f5e:	0919      	lsrs	r1, r3, #4
 8008f60:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 8008f64:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8008f68:	4a81      	ldr	r2, [pc, #516]	@ (8009170 <gcm_mult+0x3ac>)
 8008f6a:	00db      	lsls	r3, r3, #3
 8008f6c:	4413      	add	r3, r2
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f04f 0000 	mov.w	r0, #0
 8008f76:	f04f 0100 	mov.w	r1, #0
 8008f7a:	0411      	lsls	r1, r2, #16
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008f82:	ea82 0400 	eor.w	r4, r2, r0
 8008f86:	60bc      	str	r4, [r7, #8]
 8008f88:	404b      	eors	r3, r1
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008f90:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
        zh ^= ctx->HH[hi];
 8008f94:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008f98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fa4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008fa8:	ea82 0400 	eor.w	r4, r2, r0
 8008fac:	603c      	str	r4, [r7, #0]
 8008fae:	404b      	eors	r3, r1
 8008fb0:	607b      	str	r3, [r7, #4]
 8008fb2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008fb6:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
        zl ^= ctx->HL[hi];
 8008fba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008fbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008fce:	ea82 0a00 	eor.w	sl, r2, r0
 8008fd2:	ea83 0b01 	eor.w	fp, r3, r1
 8008fd6:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
    for( i = 15; i >= 0; i-- )
 8008fda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f6bf af15 	bge.w	8008e12 <gcm_mult+0x4e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8008fe8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8008fec:	f04f 0200 	mov.w	r2, #0
 8008ff0:	f04f 0300 	mov.w	r3, #0
 8008ff4:	0e0a      	lsrs	r2, r1, #24
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	b2d2      	uxtb	r2, r2
 8008ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ffc:	701a      	strb	r2, [r3, #0]
 8008ffe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009002:	f04f 0200 	mov.w	r2, #0
 8009006:	f04f 0300 	mov.w	r3, #0
 800900a:	0c0a      	lsrs	r2, r1, #16
 800900c:	2300      	movs	r3, #0
 800900e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009010:	3101      	adds	r1, #1
 8009012:	b2d3      	uxtb	r3, r2
 8009014:	700b      	strb	r3, [r1, #0]
 8009016:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800901a:	f04f 0200 	mov.w	r2, #0
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	0a0a      	lsrs	r2, r1, #8
 8009024:	2300      	movs	r3, #0
 8009026:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009028:	3102      	adds	r1, #2
 800902a:	b2d3      	uxtb	r3, r2
 800902c:	700b      	strb	r3, [r1, #0]
 800902e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	f04f 0300 	mov.w	r3, #0
 800903a:	000a      	movs	r2, r1
 800903c:	2300      	movs	r3, #0
 800903e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009040:	3103      	adds	r1, #3
 8009042:	b2d3      	uxtb	r3, r2
 8009044:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zh, output, 4 );
 8009046:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800904a:	f04f 0200 	mov.w	r2, #0
 800904e:	f04f 0300 	mov.w	r3, #0
 8009052:	0e02      	lsrs	r2, r0, #24
 8009054:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009058:	0e0b      	lsrs	r3, r1, #24
 800905a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800905c:	3104      	adds	r1, #4
 800905e:	b2d3      	uxtb	r3, r2
 8009060:	700b      	strb	r3, [r1, #0]
 8009062:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	0c02      	lsrs	r2, r0, #16
 8009070:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009074:	0c0b      	lsrs	r3, r1, #16
 8009076:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009078:	3105      	adds	r1, #5
 800907a:	b2d3      	uxtb	r3, r2
 800907c:	700b      	strb	r3, [r1, #0]
 800907e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8009082:	f04f 0200 	mov.w	r2, #0
 8009086:	f04f 0300 	mov.w	r3, #0
 800908a:	0a02      	lsrs	r2, r0, #8
 800908c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009090:	0a0b      	lsrs	r3, r1, #8
 8009092:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009094:	3106      	adds	r1, #6
 8009096:	b2d3      	uxtb	r3, r2
 8009098:	700b      	strb	r3, [r1, #0]
 800909a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800909c:	3307      	adds	r3, #7
 800909e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80090a2:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80090a4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	f04f 0300 	mov.w	r3, #0
 80090b0:	0e0a      	lsrs	r2, r1, #24
 80090b2:	2300      	movs	r3, #0
 80090b4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80090b6:	3108      	adds	r1, #8
 80090b8:	b2d3      	uxtb	r3, r2
 80090ba:	700b      	strb	r3, [r1, #0]
 80090bc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80090c0:	f04f 0200 	mov.w	r2, #0
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	0c0a      	lsrs	r2, r1, #16
 80090ca:	2300      	movs	r3, #0
 80090cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80090ce:	3109      	adds	r1, #9
 80090d0:	b2d3      	uxtb	r3, r2
 80090d2:	700b      	strb	r3, [r1, #0]
 80090d4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	0a0a      	lsrs	r2, r1, #8
 80090e2:	2300      	movs	r3, #0
 80090e4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80090e6:	310a      	adds	r1, #10
 80090e8:	b2d3      	uxtb	r3, r2
 80090ea:	700b      	strb	r3, [r1, #0]
 80090ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80090f0:	f04f 0200 	mov.w	r2, #0
 80090f4:	f04f 0300 	mov.w	r3, #0
 80090f8:	000a      	movs	r2, r1
 80090fa:	2300      	movs	r3, #0
 80090fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80090fe:	310b      	adds	r1, #11
 8009100:	b2d3      	uxtb	r3, r2
 8009102:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zl, output, 12 );
 8009104:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	0e02      	lsrs	r2, r0, #24
 8009112:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009116:	0e0b      	lsrs	r3, r1, #24
 8009118:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800911a:	310c      	adds	r1, #12
 800911c:	b2d3      	uxtb	r3, r2
 800911e:	700b      	strb	r3, [r1, #0]
 8009120:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	0c02      	lsrs	r2, r0, #16
 800912e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009132:	0c0b      	lsrs	r3, r1, #16
 8009134:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009136:	310d      	adds	r1, #13
 8009138:	b2d3      	uxtb	r3, r2
 800913a:	700b      	strb	r3, [r1, #0]
 800913c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8009140:	f04f 0200 	mov.w	r2, #0
 8009144:	f04f 0300 	mov.w	r3, #0
 8009148:	0a02      	lsrs	r2, r0, #8
 800914a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800914e:	0a0b      	lsrs	r3, r1, #8
 8009150:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009152:	310e      	adds	r1, #14
 8009154:	b2d3      	uxtb	r3, r2
 8009156:	700b      	strb	r3, [r1, #0]
 8009158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915a:	330f      	adds	r3, #15
 800915c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8009160:	701a      	strb	r2, [r3, #0]
}
 8009162:	bf00      	nop
 8009164:	3764      	adds	r7, #100	@ 0x64
 8009166:	46bd      	mov	sp, r7
 8009168:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	08010978 	.word	0x08010978

08009174 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8009174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009178:	b090      	sub	sp, #64	@ 0x40
 800917a:	af02      	add	r7, sp, #8
 800917c:	60f8      	str	r0, [r7, #12]
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	607a      	str	r2, [r7, #4]
 8009182:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	617b      	str	r3, [r7, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d019      	beq.n	80091c2 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2200      	movs	r2, #0
 8009192:	469a      	mov	sl, r3
 8009194:	4693      	mov	fp, r2
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	f04f 0300 	mov.w	r3, #0
 800919e:	ea4f 725b 	mov.w	r2, fp, lsr #29
 80091a2:	2300      	movs	r3, #0
    if( iv_len == 0 ||
 80091a4:	4313      	orrs	r3, r2
 80091a6:	d10c      	bne.n	80091c2 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) add_len ) >> 61 != 0 )
 80091a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091aa:	2200      	movs	r2, #0
 80091ac:	4698      	mov	r8, r3
 80091ae:	4691      	mov	r9, r2
 80091b0:	f04f 0200 	mov.w	r2, #0
 80091b4:	f04f 0300 	mov.w	r3, #0
 80091b8:	ea4f 7259 	mov.w	r2, r9, lsr #29
 80091bc:	2300      	movs	r3, #0
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 80091be:	4313      	orrs	r3, r2
 80091c0:	d002      	beq.n	80091c8 <mbedtls_gcm_starts+0x54>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80091c2:	f06f 0313 	mvn.w	r3, #19
 80091c6:	e107      	b.n	80093d8 <mbedtls_gcm_starts+0x264>
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80091ce:	2210      	movs	r2, #16
 80091d0:	2100      	movs	r1, #0
 80091d2:	4618      	mov	r0, r3
 80091d4:	f004 fa62 	bl	800d69c <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80091de:	2210      	movs	r2, #16
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f004 fa5a 	bl	800d69c <memset>

    ctx->mode = mode;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    ctx->len = 0;
 80091f0:	68f9      	ldr	r1, [r7, #12]
 80091f2:	f04f 0200 	mov.w	r2, #0
 80091f6:	f04f 0300 	mov.w	r3, #0
 80091fa:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
    ctx->add_len = 0;
 80091fe:	68f9      	ldr	r1, [r7, #12]
 8009200:	f04f 0200 	mov.w	r2, #0
 8009204:	f04f 0300 	mov.w	r3, #0
 8009208:	e9c1 2352 	strd	r2, r3, [r1, #328]	@ 0x148

    if( iv_len == 12 )
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	2b0c      	cmp	r3, #12
 8009210:	d10c      	bne.n	800922c <mbedtls_gcm_starts+0xb8>
    {
        memcpy( ctx->y, iv, iv_len );
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4618      	mov	r0, r3
 800921e:	f004 fac8 	bl	800d7b2 <memcpy>
        ctx->y[15] = 1;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 216f 	strb.w	r2, [r3, #367]	@ 0x16f
 800922a:	e07f      	b.n	800932c <mbedtls_gcm_starts+0x1b8>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 800922c:	f107 0318 	add.w	r3, r7, #24
 8009230:	2210      	movs	r2, #16
 8009232:	2100      	movs	r1, #0
 8009234:	4618      	mov	r0, r3
 8009236:	f004 fa31 	bl	800d69c <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	0e1b      	lsrs	r3, r3, #24
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	00db      	lsls	r3, r3, #3
 800924a:	0c1b      	lsrs	r3, r3, #16
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	00db      	lsls	r3, r3, #3
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	b2db      	uxtb	r3, r3
 800925a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	b2db      	uxtb	r3, r3
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	b2db      	uxtb	r3, r3
 8009266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        p = iv;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	633b      	str	r3, [r7, #48]	@ 0x30
        while( iv_len > 0 )
 800926e:	e033      	b.n	80092d8 <mbedtls_gcm_starts+0x164>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b10      	cmp	r3, #16
 8009274:	bf28      	it	cs
 8009276:	2310      	movcs	r3, #16
 8009278:	62fb      	str	r3, [r7, #44]	@ 0x2c

            for( i = 0; i < use_len; i++ )
 800927a:	2300      	movs	r3, #0
 800927c:	637b      	str	r3, [r7, #52]	@ 0x34
 800927e:	e015      	b.n	80092ac <mbedtls_gcm_starts+0x138>
                ctx->y[i] ^= p[i];
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009284:	4413      	add	r3, r2
 8009286:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800928a:	781a      	ldrb	r2, [r3, #0]
 800928c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800928e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009290:	440b      	add	r3, r1
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	4053      	eors	r3, r2
 8009296:	b2d9      	uxtb	r1, r3
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929c:	4413      	add	r3, r2
 800929e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80092a2:	460a      	mov	r2, r1
 80092a4:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 80092a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a8:	3301      	adds	r3, #1
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d3e5      	bcc.n	8009280 <mbedtls_gcm_starts+0x10c>

            gcm_mult( ctx, ctx->y, ctx->y );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80092c0:	461a      	mov	r2, r3
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f7ff fd7e 	bl	8008dc4 <gcm_mult>

            iv_len -= use_len;
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	603b      	str	r3, [r7, #0]
            p += use_len;
 80092d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092d4:	4413      	add	r3, r2
 80092d6:	633b      	str	r3, [r7, #48]	@ 0x30
        while( iv_len > 0 )
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1c8      	bne.n	8009270 <mbedtls_gcm_starts+0xfc>
        }

        for( i = 0; i < 16; i++ )
 80092de:	2300      	movs	r3, #0
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e2:	e016      	b.n	8009312 <mbedtls_gcm_starts+0x19e>
            ctx->y[i] ^= work_buf[i];
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e8:	4413      	add	r3, r2
 80092ea:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80092ee:	781a      	ldrb	r2, [r3, #0]
 80092f0:	f107 0118 	add.w	r1, r7, #24
 80092f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092f6:	440b      	add	r3, r1
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	4053      	eors	r3, r2
 80092fc:	b2d9      	uxtb	r1, r3
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009302:	4413      	add	r3, r2
 8009304:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009308:	460a      	mov	r2, r1
 800930a:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800930c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930e:	3301      	adds	r3, #1
 8009310:	637b      	str	r3, [r7, #52]	@ 0x34
 8009312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009314:	2b0f      	cmp	r3, #15
 8009316:	d9e5      	bls.n	80092e4 <mbedtls_gcm_starts+0x170>

        gcm_mult( ctx, ctx->y, ctx->y );
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009324:	461a      	mov	r2, r3
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff fd4c 	bl	8008dc4 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 800933a:	f107 0314 	add.w	r3, r7, #20
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4613      	mov	r3, r2
 8009342:	2210      	movs	r2, #16
 8009344:	f7fe f8f4 	bl	8007530 <mbedtls_cipher_update>
 8009348:	62b8      	str	r0, [r7, #40]	@ 0x28
 800934a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <mbedtls_gcm_starts+0x1e0>
                             &olen ) ) != 0 )
    {
        return( ret );
 8009350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009352:	e041      	b.n	80093d8 <mbedtls_gcm_starts+0x264>
    }

    ctx->add_len = add_len;
 8009354:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009356:	2200      	movs	r2, #0
 8009358:	461c      	mov	r4, r3
 800935a:	4615      	mov	r5, r2
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	e9c3 4552 	strd	r4, r5, [r3, #328]	@ 0x148
    p = add;
 8009362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009364:	633b      	str	r3, [r7, #48]	@ 0x30
    while( add_len > 0 )
 8009366:	e033      	b.n	80093d0 <mbedtls_gcm_starts+0x25c>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 8009368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800936a:	2b10      	cmp	r3, #16
 800936c:	bf28      	it	cs
 800936e:	2310      	movcs	r3, #16
 8009370:	62fb      	str	r3, [r7, #44]	@ 0x2c

        for( i = 0; i < use_len; i++ )
 8009372:	2300      	movs	r3, #0
 8009374:	637b      	str	r3, [r7, #52]	@ 0x34
 8009376:	e015      	b.n	80093a4 <mbedtls_gcm_starts+0x230>
            ctx->buf[i] ^= p[i];
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937c:	4413      	add	r3, r2
 800937e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8009382:	781a      	ldrb	r2, [r3, #0]
 8009384:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009388:	440b      	add	r3, r1
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	4053      	eors	r3, r2
 800938e:	b2d9      	uxtb	r1, r3
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009394:	4413      	add	r3, r2
 8009396:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800939a:	460a      	mov	r2, r1
 800939c:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 800939e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a0:	3301      	adds	r3, #1
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80093a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d3e5      	bcc.n	8009378 <mbedtls_gcm_starts+0x204>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80093b8:	461a      	mov	r2, r3
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7ff fd02 	bl	8008dc4 <gcm_mult>

        add_len -= use_len;
 80093c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80093c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c4:	1ad3      	subs	r3, r2, r3
 80093c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        p += use_len;
 80093c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80093ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093cc:	4413      	add	r3, r2
 80093ce:	633b      	str	r3, [r7, #48]	@ 0x30
    while( add_len > 0 )
 80093d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1c8      	bne.n	8009368 <mbedtls_gcm_starts+0x1f4>
    }

    return( 0 );
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3738      	adds	r7, #56	@ 0x38
 80093dc:	46bd      	mov	sp, r7
 80093de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080093e2 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 80093e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093e6:	b096      	sub	sp, #88	@ 0x58
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	6278      	str	r0, [r7, #36]	@ 0x24
 80093ec:	6239      	str	r1, [r7, #32]
 80093ee:	61fa      	str	r2, [r7, #28]
 80093f0:	61bb      	str	r3, [r7, #24]
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t use_len, olen = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	62bb      	str	r3, [r7, #40]	@ 0x28

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d909      	bls.n	8009416 <mbedtls_gcm_update+0x34>
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	461a      	mov	r2, r3
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	4293      	cmp	r3, r2
 800940e:	d902      	bls.n	8009416 <mbedtls_gcm_update+0x34>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8009410:	f06f 0313 	mvn.w	r3, #19
 8009414:	e0d8      	b.n	80095c8 <mbedtls_gcm_update+0x1e6>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 800941c:	6a39      	ldr	r1, [r7, #32]
 800941e:	2000      	movs	r0, #0
 8009420:	6139      	str	r1, [r7, #16]
 8009422:	6178      	str	r0, [r7, #20]
 8009424:	6939      	ldr	r1, [r7, #16]
 8009426:	eb12 0801 	adds.w	r8, r2, r1
 800942a:	6979      	ldr	r1, [r7, #20]
 800942c:	eb43 0901 	adc.w	r9, r3, r1
 8009430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009432:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8009436:	4590      	cmp	r8, r2
 8009438:	eb79 0303 	sbcs.w	r3, r9, r3
 800943c:	d313      	bcc.n	8009466 <mbedtls_gcm_update+0x84>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
 800943e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009440:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8009444:	6a39      	ldr	r1, [r7, #32]
 8009446:	2000      	movs	r0, #0
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8009450:	4641      	mov	r1, r8
 8009452:	1854      	adds	r4, r2, r1
 8009454:	4649      	mov	r1, r9
 8009456:	eb43 0101 	adc.w	r1, r3, r1
 800945a:	460d      	mov	r5, r1
    if( ctx->len + length < ctx->len ||
 800945c:	f114 0f1f 	cmn.w	r4, #31
 8009460:	f175 030f 	sbcs.w	r3, r5, #15
 8009464:	d302      	bcc.n	800946c <mbedtls_gcm_update+0x8a>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8009466:	f06f 0313 	mvn.w	r3, #19
 800946a:	e0ad      	b.n	80095c8 <mbedtls_gcm_update+0x1e6>
    }

    ctx->len += length;
 800946c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946e:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8009472:	6a39      	ldr	r1, [r7, #32]
 8009474:	2000      	movs	r0, #0
 8009476:	468a      	mov	sl, r1
 8009478:	4683      	mov	fp, r0
 800947a:	eb12 010a 	adds.w	r1, r2, sl
 800947e:	6039      	str	r1, [r7, #0]
 8009480:	eb43 030b 	adc.w	r3, r3, fp
 8009484:	607b      	str	r3, [r7, #4]
 8009486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009488:	e9d7 1200 	ldrd	r1, r2, [r7]
 800948c:	e9c3 1250 	strd	r1, r2, [r3, #320]	@ 0x140

    p = input;
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	64bb      	str	r3, [r7, #72]	@ 0x48
    while( length > 0 )
 8009494:	e093      	b.n	80095be <mbedtls_gcm_update+0x1dc>
    {
        use_len = ( length < 16 ) ? length : 16;
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	2b10      	cmp	r3, #16
 800949a:	bf28      	it	cs
 800949c:	2310      	movcs	r3, #16
 800949e:	643b      	str	r3, [r7, #64]	@ 0x40

        for( i = 16; i > 12; i-- )
 80094a0:	2310      	movs	r3, #16
 80094a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094a4:	e014      	b.n	80094d0 <mbedtls_gcm_update+0xee>
            if( ++ctx->y[i - 1] != 0 )
 80094a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094a8:	3b01      	subs	r3, #1
 80094aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ac:	441a      	add	r2, r3
 80094ae:	f892 2160 	ldrb.w	r2, [r2, #352]	@ 0x160
 80094b2:	3201      	adds	r2, #1
 80094b4:	b2d1      	uxtb	r1, r2
 80094b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b8:	441a      	add	r2, r3
 80094ba:	f882 1160 	strb.w	r1, [r2, #352]	@ 0x160
 80094be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094c0:	4413      	add	r3, r2
 80094c2:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <mbedtls_gcm_update+0xf6>
        for( i = 16; i > 12; i-- )
 80094ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094cc:	3b01      	subs	r3, #1
 80094ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094d2:	2b0c      	cmp	r3, #12
 80094d4:	d8e7      	bhi.n	80094a6 <mbedtls_gcm_update+0xc4>
 80094d6:	e000      	b.n	80094da <mbedtls_gcm_update+0xf8>
                break;
 80094d8:	bf00      	nop

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 80094da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094de:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 80094e2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80094e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	4613      	mov	r3, r2
 80094ee:	2210      	movs	r2, #16
 80094f0:	f7fe f81e 	bl	8007530 <mbedtls_cipher_update>
 80094f4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80094f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <mbedtls_gcm_update+0x11e>
                                   &olen ) ) != 0 )
        {
            return( ret );
 80094fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094fe:	e063      	b.n	80095c8 <mbedtls_gcm_update+0x1e6>
        }

        for( i = 0; i < use_len; i++ )
 8009500:	2300      	movs	r3, #0
 8009502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009504:	e041      	b.n	800958a <mbedtls_gcm_update+0x1a8>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800950c:	2b00      	cmp	r3, #0
 800950e:	d112      	bne.n	8009536 <mbedtls_gcm_update+0x154>
                ctx->buf[i] ^= p[i];
 8009510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009514:	4413      	add	r3, r2
 8009516:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800951e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009520:	440b      	add	r3, r1
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	4053      	eors	r3, r2
 8009526:	b2d9      	uxtb	r1, r3
 8009528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800952a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800952c:	4413      	add	r3, r2
 800952e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8009532:	460a      	mov	r2, r1
 8009534:	701a      	strb	r2, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 8009536:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800953a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800953c:	4413      	add	r3, r2
 800953e:	7819      	ldrb	r1, [r3, #0]
 8009540:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009544:	4413      	add	r3, r2
 8009546:	781a      	ldrb	r2, [r3, #0]
 8009548:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800954a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800954c:	4403      	add	r3, r0
 800954e:	404a      	eors	r2, r1
 8009550:	b2d2      	uxtb	r2, r2
 8009552:	701a      	strb	r2, [r3, #0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8009554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009556:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800955a:	2b01      	cmp	r3, #1
 800955c:	d112      	bne.n	8009584 <mbedtls_gcm_update+0x1a2>
                ctx->buf[i] ^= out_p[i];
 800955e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009562:	4413      	add	r3, r2
 8009564:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8009568:	781a      	ldrb	r2, [r3, #0]
 800956a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800956c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956e:	440b      	add	r3, r1
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	4053      	eors	r3, r2
 8009574:	b2d9      	uxtb	r1, r3
 8009576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800957a:	4413      	add	r3, r2
 800957c:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8009580:	460a      	mov	r2, r1
 8009582:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 8009584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009586:	3301      	adds	r3, #1
 8009588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800958a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800958c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800958e:	429a      	cmp	r2, r3
 8009590:	d3b9      	bcc.n	8009506 <mbedtls_gcm_update+0x124>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8009592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009594:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800959e:	461a      	mov	r2, r3
 80095a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80095a2:	f7ff fc0f 	bl	8008dc4 <gcm_mult>

        length -= use_len;
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095aa:	1ad3      	subs	r3, r2, r3
 80095ac:	623b      	str	r3, [r7, #32]
        p += use_len;
 80095ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095b2:	4413      	add	r3, r2
 80095b4:	64bb      	str	r3, [r7, #72]	@ 0x48
        out_p += use_len;
 80095b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ba:	4413      	add	r3, r2
 80095bc:	647b      	str	r3, [r7, #68]	@ 0x44
    while( length > 0 )
 80095be:	6a3b      	ldr	r3, [r7, #32]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f47f af68 	bne.w	8009496 <mbedtls_gcm_update+0xb4>
    }

    return( 0 );
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3750      	adds	r7, #80	@ 0x50
 80095cc:	46bd      	mov	sp, r7
 80095ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080095d2 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 80095d2:	b580      	push	{r7, lr}
 80095d4:	b08e      	sub	sp, #56	@ 0x38
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	60f8      	str	r0, [r7, #12]
 80095da:	60b9      	str	r1, [r7, #8]
 80095dc:	607a      	str	r2, [r7, #4]
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 80095e4:	f04f 0200 	mov.w	r2, #0
 80095e8:	f04f 0300 	mov.w	r3, #0
 80095ec:	00cb      	lsls	r3, r1, #3
 80095ee:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80095f2:	00c2      	lsls	r2, r0, #3
 80095f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    orig_add_len = ctx->add_len * 8;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 80095fe:	f04f 0200 	mov.w	r2, #0
 8009602:	f04f 0300 	mov.w	r3, #0
 8009606:	00cb      	lsls	r3, r1, #3
 8009608:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800960c:	00c2      	lsls	r2, r0, #3
 800960e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( tag_len > 16 || tag_len < 4 )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b10      	cmp	r3, #16
 8009616:	d802      	bhi.n	800961e <mbedtls_gcm_finish+0x4c>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b03      	cmp	r3, #3
 800961c:	d802      	bhi.n	8009624 <mbedtls_gcm_finish+0x52>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800961e:	f06f 0313 	mvn.w	r3, #19
 8009622:	e0f7      	b.n	8009814 <mbedtls_gcm_finish+0x242>

    memcpy( tag, ctx->base_ectr, tag_len );
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	4619      	mov	r1, r3
 800962e:	68b8      	ldr	r0, [r7, #8]
 8009630:	f004 f8bf 	bl	800d7b2 <memcpy>

    if( orig_len || orig_add_len )
 8009634:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009638:	4313      	orrs	r3, r2
 800963a:	d104      	bne.n	8009646 <mbedtls_gcm_finish+0x74>
 800963c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009640:	4313      	orrs	r3, r2
 8009642:	f000 80e6 	beq.w	8009812 <mbedtls_gcm_finish+0x240>
    {
        memset( work_buf, 0x00, 16 );
 8009646:	f107 0310 	add.w	r3, r7, #16
 800964a:	2210      	movs	r2, #16
 800964c:	2100      	movs	r1, #0
 800964e:	4618      	mov	r0, r3
 8009650:	f004 f824 	bl	800d69c <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8009654:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009658:	f04f 0200 	mov.w	r2, #0
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	0e0a      	lsrs	r2, r1, #24
 8009662:	2300      	movs	r3, #0
 8009664:	b2d3      	uxtb	r3, r2
 8009666:	743b      	strb	r3, [r7, #16]
 8009668:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	0c0a      	lsrs	r2, r1, #16
 8009676:	2300      	movs	r3, #0
 8009678:	b2d3      	uxtb	r3, r2
 800967a:	747b      	strb	r3, [r7, #17]
 800967c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009680:	f04f 0200 	mov.w	r2, #0
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	0a0a      	lsrs	r2, r1, #8
 800968a:	2300      	movs	r3, #0
 800968c:	b2d3      	uxtb	r3, r2
 800968e:	74bb      	strb	r3, [r7, #18]
 8009690:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009694:	f04f 0200 	mov.w	r2, #0
 8009698:	f04f 0300 	mov.w	r3, #0
 800969c:	000a      	movs	r2, r1
 800969e:	2300      	movs	r3, #0
 80096a0:	b2d3      	uxtb	r3, r2
 80096a2:	74fb      	strb	r3, [r7, #19]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 80096a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80096a8:	f04f 0200 	mov.w	r2, #0
 80096ac:	f04f 0300 	mov.w	r3, #0
 80096b0:	0e02      	lsrs	r2, r0, #24
 80096b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80096b6:	0e0b      	lsrs	r3, r1, #24
 80096b8:	b2d3      	uxtb	r3, r2
 80096ba:	753b      	strb	r3, [r7, #20]
 80096bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80096c0:	f04f 0200 	mov.w	r2, #0
 80096c4:	f04f 0300 	mov.w	r3, #0
 80096c8:	0c02      	lsrs	r2, r0, #16
 80096ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80096ce:	0c0b      	lsrs	r3, r1, #16
 80096d0:	b2d3      	uxtb	r3, r2
 80096d2:	757b      	strb	r3, [r7, #21]
 80096d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80096d8:	f04f 0200 	mov.w	r2, #0
 80096dc:	f04f 0300 	mov.w	r3, #0
 80096e0:	0a02      	lsrs	r2, r0, #8
 80096e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80096e6:	0a0b      	lsrs	r3, r1, #8
 80096e8:	b2d3      	uxtb	r3, r2
 80096ea:	75bb      	strb	r3, [r7, #22]
 80096ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096f0:	75fb      	strb	r3, [r7, #23]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 80096f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	0e0a      	lsrs	r2, r1, #24
 8009700:	2300      	movs	r3, #0
 8009702:	b2d3      	uxtb	r3, r2
 8009704:	763b      	strb	r3, [r7, #24]
 8009706:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800970a:	f04f 0200 	mov.w	r2, #0
 800970e:	f04f 0300 	mov.w	r3, #0
 8009712:	0c0a      	lsrs	r2, r1, #16
 8009714:	2300      	movs	r3, #0
 8009716:	b2d3      	uxtb	r3, r2
 8009718:	767b      	strb	r3, [r7, #25]
 800971a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800971e:	f04f 0200 	mov.w	r2, #0
 8009722:	f04f 0300 	mov.w	r3, #0
 8009726:	0a0a      	lsrs	r2, r1, #8
 8009728:	2300      	movs	r3, #0
 800972a:	b2d3      	uxtb	r3, r2
 800972c:	76bb      	strb	r3, [r7, #26]
 800972e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009732:	f04f 0200 	mov.w	r2, #0
 8009736:	f04f 0300 	mov.w	r3, #0
 800973a:	000a      	movs	r2, r1
 800973c:	2300      	movs	r3, #0
 800973e:	b2d3      	uxtb	r3, r2
 8009740:	76fb      	strb	r3, [r7, #27]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8009742:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009746:	f04f 0200 	mov.w	r2, #0
 800974a:	f04f 0300 	mov.w	r3, #0
 800974e:	0e02      	lsrs	r2, r0, #24
 8009750:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009754:	0e0b      	lsrs	r3, r1, #24
 8009756:	b2d3      	uxtb	r3, r2
 8009758:	773b      	strb	r3, [r7, #28]
 800975a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800975e:	f04f 0200 	mov.w	r2, #0
 8009762:	f04f 0300 	mov.w	r3, #0
 8009766:	0c02      	lsrs	r2, r0, #16
 8009768:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800976c:	0c0b      	lsrs	r3, r1, #16
 800976e:	b2d3      	uxtb	r3, r2
 8009770:	777b      	strb	r3, [r7, #29]
 8009772:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009776:	f04f 0200 	mov.w	r2, #0
 800977a:	f04f 0300 	mov.w	r3, #0
 800977e:	0a02      	lsrs	r2, r0, #8
 8009780:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009784:	0a0b      	lsrs	r3, r1, #8
 8009786:	b2d3      	uxtb	r3, r2
 8009788:	77bb      	strb	r3, [r7, #30]
 800978a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800978e:	77fb      	strb	r3, [r7, #31]

        for( i = 0; i < 16; i++ )
 8009790:	2300      	movs	r3, #0
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34
 8009794:	e016      	b.n	80097c4 <mbedtls_gcm_finish+0x1f2>
            ctx->buf[i] ^= work_buf[i];
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800979a:	4413      	add	r3, r2
 800979c:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80097a0:	781a      	ldrb	r2, [r3, #0]
 80097a2:	f107 0110 	add.w	r1, r7, #16
 80097a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097a8:	440b      	add	r3, r1
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	4053      	eors	r3, r2
 80097ae:	b2d9      	uxtb	r1, r3
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80097ba:	460a      	mov	r2, r1
 80097bc:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 80097be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c0:	3301      	adds	r3, #1
 80097c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c6:	2b0f      	cmp	r3, #15
 80097c8:	d9e5      	bls.n	8009796 <mbedtls_gcm_finish+0x1c4>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80097d6:	461a      	mov	r2, r3
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f7ff faf3 	bl	8008dc4 <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 80097de:	2300      	movs	r3, #0
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e2:	e012      	b.n	800980a <mbedtls_gcm_finish+0x238>
            tag[i] ^= ctx->buf[i];
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097e8:	4413      	add	r3, r2
 80097ea:	7819      	ldrb	r1, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	68b8      	ldr	r0, [r7, #8]
 80097fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097fc:	4403      	add	r3, r0
 80097fe:	404a      	eors	r2, r1
 8009800:	b2d2      	uxtb	r2, r2
 8009802:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 8009804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009806:	3301      	adds	r3, #1
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
 800980a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	429a      	cmp	r2, r3
 8009810:	d3e8      	bcc.n	80097e4 <mbedtls_gcm_finish+0x212>
    }

    return( 0 );
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3738      	adds	r7, #56	@ 0x38
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
 8009828:	603b      	str	r3, [r7, #0]
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 800982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982c:	9301      	str	r3, [sp, #4]
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	9300      	str	r3, [sp, #0]
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	68b9      	ldr	r1, [r7, #8]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f7ff fc9b 	bl	8009174 <mbedtls_gcm_starts>
 800983e:	6178      	str	r0, [r7, #20]
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <mbedtls_gcm_crypt_and_tag+0x2e>
        return( ret );
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	e017      	b.n	800987a <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800984e:	6879      	ldr	r1, [r7, #4]
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f7ff fdc6 	bl	80093e2 <mbedtls_gcm_update>
 8009856:	6178      	str	r0, [r7, #20]
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <mbedtls_gcm_crypt_and_tag+0x46>
        return( ret );
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	e00b      	b.n	800987a <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8009862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009864:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f7ff feb3 	bl	80095d2 <mbedtls_gcm_finish>
 800986c:	6178      	str	r0, [r7, #20]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <mbedtls_gcm_crypt_and_tag+0x5c>
        return( ret );
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	e000      	b.n	800987a <mbedtls_gcm_crypt_and_tag+0x5e>

    return( 0 );
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b094      	sub	sp, #80	@ 0x50
 8009886:	af08      	add	r7, sp, #32
 8009888:	60f8      	str	r0, [r7, #12]
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	607a      	str	r2, [r7, #4]
 800988e:	603b      	str	r3, [r7, #0]
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8009890:	f107 0314 	add.w	r3, r7, #20
 8009894:	9306      	str	r3, [sp, #24]
 8009896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009898:	9305      	str	r3, [sp, #20]
 800989a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800989c:	9304      	str	r3, [sp, #16]
 800989e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	2100      	movs	r1, #0
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f7ff ffb1 	bl	800981c <mbedtls_gcm_crypt_and_tag>
 80098ba:	6278      	str	r0, [r7, #36]	@ 0x24
 80098bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <mbedtls_gcm_auth_decrypt+0x44>
                                   iv, iv_len, add, add_len,
                                   input, output, tag_len, check_tag ) ) != 0 )
    {
        return( ret );
 80098c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c4:	e025      	b.n	8009912 <mbedtls_gcm_auth_decrypt+0x90>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80098c6:	2300      	movs	r3, #0
 80098c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098ca:	2300      	movs	r3, #0
 80098cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098ce:	e011      	b.n	80098f4 <mbedtls_gcm_auth_decrypt+0x72>
        diff |= tag[i] ^ check_tag[i];
 80098d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d4:	4413      	add	r3, r2
 80098d6:	781a      	ldrb	r2, [r3, #0]
 80098d8:	f107 0114 	add.w	r1, r7, #20
 80098dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098de:	440b      	add	r3, r1
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	4053      	eors	r3, r2
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	461a      	mov	r2, r3
 80098e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ea:	4313      	orrs	r3, r2
 80098ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 80098ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f0:	3301      	adds	r3, #1
 80098f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d3e9      	bcc.n	80098d0 <mbedtls_gcm_auth_decrypt+0x4e>

    if( diff != 0 )
 80098fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d006      	beq.n	8009910 <mbedtls_gcm_auth_decrypt+0x8e>
    {
        mbedtls_platform_zeroize( output, length );
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009906:	f000 f81d 	bl	8009944 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 800990a:	f06f 0311 	mvn.w	r3, #17
 800990e:	e000      	b.n	8009912 <mbedtls_gcm_auth_decrypt+0x90>
    }

    return( 0 );
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3730      	adds	r7, #48	@ 0x30
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d009      	beq.n	800993c <mbedtls_gcm_free+0x22>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4618      	mov	r0, r3
 800992c:	f7fd fd5e 	bl	80073ec <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8009930:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f805 	bl	8009944 <mbedtls_platform_zeroize>
 800993a:	e000      	b.n	800993e <mbedtls_gcm_free+0x24>
        return;
 800993c:	bf00      	nop
}
 800993e:	3708      	adds	r7, #8
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 800994e:	4b05      	ldr	r3, [pc, #20]	@ (8009964 <mbedtls_platform_zeroize+0x20>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	2100      	movs	r1, #0
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	4798      	blx	r3
}
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000014 	.word	0x20000014

08009968 <mul64>:

    return( lo + ( me << 16 ) + ( (uint64_t) hi << 32 ) );
}
#else
static inline uint64_t mul64( uint32_t a, uint32_t b )
{
 8009968:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
    return( (uint64_t) a * b );
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	2000      	movs	r0, #0
 8009978:	4688      	mov	r8, r1
 800997a:	4681      	mov	r9, r0
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	2000      	movs	r0, #0
 8009980:	460c      	mov	r4, r1
 8009982:	4605      	mov	r5, r0
 8009984:	fb04 f009 	mul.w	r0, r4, r9
 8009988:	fb08 f105 	mul.w	r1, r8, r5
 800998c:	4401      	add	r1, r0
 800998e:	fba8 2304 	umull	r2, r3, r8, r4
 8009992:	4419      	add	r1, r3
 8009994:	460b      	mov	r3, r1
}
 8009996:	4610      	mov	r0, r2
 8009998:	4619      	mov	r1, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80099a2:	4770      	bx	lr

080099a4 <poly1305_process>:
 */
static void poly1305_process( mbedtls_poly1305_context *ctx,
                              size_t nblocks,
                              const unsigned char *input,
                              uint32_t needs_padding )
{
 80099a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099a8:	b0f4      	sub	sp, #464	@ 0x1d0
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 80099b0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 80099b4:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80099b8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 80099bc:	2300      	movs	r3, #0
 80099be:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    size_t i;

    r0 = ctx->r[0];
 80099c2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    r1 = ctx->r[1];
 80099cc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    r2 = ctx->r[2];
 80099d6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    r3 = ctx->r[3];
 80099e0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    rs1 = r1 + ( r1 >> 2U );
 80099ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80099ee:	089a      	lsrs	r2, r3, #2
 80099f0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80099f4:	4413      	add	r3, r2
 80099f6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    rs2 = r2 + ( r2 >> 2U );
 80099fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80099fe:	089a      	lsrs	r2, r3, #2
 8009a00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8009a04:	4413      	add	r3, r2
 8009a06:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    rs3 = r3 + ( r3 >> 2U );
 8009a0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8009a0e:	089a      	lsrs	r2, r3, #2
 8009a10:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8009a14:	4413      	add	r3, r2
 8009a16:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

    acc0 = ctx->acc[0];
 8009a1a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009a1e:	6a1b      	ldr	r3, [r3, #32]
 8009a20:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    acc1 = ctx->acc[1];
 8009a24:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a2a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    acc2 = ctx->acc[2];
 8009a2e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a34:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    acc3 = ctx->acc[3];
 8009a38:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    acc4 = ctx->acc[4];
 8009a42:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a48:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

    /* Process full blocks */
    for( i = 0U; i < nblocks; i++ )
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8009a52:	e3b5      	b.n	800a1c0 <poly1305_process+0x81c>
    {
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = BYTES_TO_U32_LE( input, offset + 0  );
 8009a54:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8009a58:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009a5c:	4413      	add	r3, r2
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	4619      	mov	r1, r3
 8009a62:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009a6c:	4413      	add	r3, r2
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	4319      	orrs	r1, r3
 8009a74:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009a7e:	4413      	add	r3, r2
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	041b      	lsls	r3, r3, #16
 8009a84:	4319      	orrs	r1, r3
 8009a86:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009a8a:	1cda      	adds	r2, r3, #3
 8009a8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009a90:	4413      	add	r3, r2
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	061b      	lsls	r3, r3, #24
 8009a96:	430b      	orrs	r3, r1
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a9e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009aa2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8009aa6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1   = BYTES_TO_U32_LE( input, offset + 4  );
 8009aaa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009aae:	1d1a      	adds	r2, r3, #4
 8009ab0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009ab4:	4413      	add	r3, r2
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	4619      	mov	r1, r3
 8009aba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009abe:	1d5a      	adds	r2, r3, #5
 8009ac0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009ac4:	4413      	add	r3, r2
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	021b      	lsls	r3, r3, #8
 8009aca:	4319      	orrs	r1, r3
 8009acc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009ad0:	1d9a      	adds	r2, r3, #6
 8009ad2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009ad6:	4413      	add	r3, r2
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	041b      	lsls	r3, r3, #16
 8009adc:	4319      	orrs	r1, r3
 8009ade:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009ae2:	1dda      	adds	r2, r3, #7
 8009ae4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009ae8:	4413      	add	r3, r2
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	061b      	lsls	r3, r3, #24
 8009aee:	430b      	orrs	r3, r1
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009af6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009afa:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8009afe:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2   = BYTES_TO_U32_LE( input, offset + 8  );
 8009b02:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009b06:	f103 0208 	add.w	r2, r3, #8
 8009b0a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009b0e:	4413      	add	r3, r2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	4619      	mov	r1, r3
 8009b14:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009b18:	f103 0209 	add.w	r2, r3, #9
 8009b1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009b20:	4413      	add	r3, r2
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	4319      	orrs	r1, r3
 8009b28:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009b2c:	f103 020a 	add.w	r2, r3, #10
 8009b30:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009b34:	4413      	add	r3, r2
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	041b      	lsls	r3, r3, #16
 8009b3a:	4319      	orrs	r1, r3
 8009b3c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009b40:	f103 020b 	add.w	r2, r3, #11
 8009b44:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009b48:	4413      	add	r3, r2
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	061b      	lsls	r3, r3, #24
 8009b4e:	430b      	orrs	r3, r1
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b56:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009b5a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8009b5e:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3   = BYTES_TO_U32_LE( input, offset + 12 );
 8009b62:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009b66:	f103 020c 	add.w	r2, r3, #12
 8009b6a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009b6e:	4413      	add	r3, r2
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	4619      	mov	r1, r3
 8009b74:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009b78:	f103 020d 	add.w	r2, r3, #13
 8009b7c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009b80:	4413      	add	r3, r2
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	4319      	orrs	r1, r3
 8009b88:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009b8c:	f103 020e 	add.w	r2, r3, #14
 8009b90:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009b94:	4413      	add	r3, r2
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	041b      	lsls	r3, r3, #16
 8009b9a:	4319      	orrs	r1, r3
 8009b9c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009ba0:	f103 020f 	add.w	r2, r3, #15
 8009ba4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009ba8:	4413      	add	r3, r2
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	061b      	lsls	r3, r3, #24
 8009bae:	430b      	orrs	r3, r1
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bb6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009bba:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 8009bbe:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 8009bc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8009bcc:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8009bd0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8009bd4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8009bd8:	4621      	mov	r1, r4
 8009bda:	1851      	adds	r1, r2, r1
 8009bdc:	67b9      	str	r1, [r7, #120]	@ 0x78
 8009bde:	4629      	mov	r1, r5
 8009be0:	414b      	adcs	r3, r1
 8009be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009be4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8009be8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1  += (uint64_t) acc1 + ( d0 >> 32U );
 8009bec:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8009bf6:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8009bfa:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8009bfe:	f04f 0000 	mov.w	r0, #0
 8009c02:	f04f 0100 	mov.w	r1, #0
 8009c06:	0018      	movs	r0, r3
 8009c08:	2100      	movs	r1, #0
 8009c0a:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8009c0e:	4623      	mov	r3, r4
 8009c10:	181b      	adds	r3, r3, r0
 8009c12:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8009c16:	462b      	mov	r3, r5
 8009c18:	414b      	adcs	r3, r1
 8009c1a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8009c1e:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8009c22:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8009c26:	4621      	mov	r1, r4
 8009c28:	1851      	adds	r1, r2, r1
 8009c2a:	6739      	str	r1, [r7, #112]	@ 0x70
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	414b      	adcs	r3, r1
 8009c30:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c32:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8009c36:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2  += (uint64_t) acc2 + ( d1 >> 32U );
 8009c3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8009c44:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8009c48:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8009c4c:	f04f 0000 	mov.w	r0, #0
 8009c50:	f04f 0100 	mov.w	r1, #0
 8009c54:	0018      	movs	r0, r3
 8009c56:	2100      	movs	r1, #0
 8009c58:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	181b      	adds	r3, r3, r0
 8009c60:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8009c64:	462b      	mov	r3, r5
 8009c66:	414b      	adcs	r3, r1
 8009c68:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8009c6c:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8009c70:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8009c74:	4621      	mov	r1, r4
 8009c76:	1851      	adds	r1, r2, r1
 8009c78:	66b9      	str	r1, [r7, #104]	@ 0x68
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	414b      	adcs	r3, r1
 8009c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c80:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8009c84:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3  += (uint64_t) acc3 + ( d2 >> 32U );
 8009c88:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8009c92:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8009c96:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8009c9a:	f04f 0000 	mov.w	r0, #0
 8009c9e:	f04f 0100 	mov.w	r1, #0
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8009caa:	4623      	mov	r3, r4
 8009cac:	181b      	adds	r3, r3, r0
 8009cae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8009cb2:	462b      	mov	r3, r5
 8009cb4:	414b      	adcs	r3, r1
 8009cb6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8009cba:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8009cbe:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	1851      	adds	r1, r2, r1
 8009cc6:	6639      	str	r1, [r7, #96]	@ 0x60
 8009cc8:	4629      	mov	r1, r5
 8009cca:	414b      	adcs	r3, r1
 8009ccc:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cce:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8009cd2:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc0 = (uint32_t) d0;
 8009cd6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009cda:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        acc1 = (uint32_t) d1;
 8009cde:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8009ce2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        acc2 = (uint32_t) d2;
 8009ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8009cea:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        acc3 = (uint32_t) d3;
 8009cee:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8009cf2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        acc4 += (uint32_t) ( d3 >> 32U ) + needs_padding;
 8009cf6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8009cfa:	f04f 0000 	mov.w	r0, #0
 8009cfe:	f04f 0100 	mov.w	r1, #0
 8009d02:	0018      	movs	r0, r3
 8009d04:	2100      	movs	r1, #0
 8009d06:	4602      	mov	r2, r0
 8009d08:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8009d0c:	441a      	add	r2, r3
 8009d0e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8009d12:	4413      	add	r3, r2
 8009d14:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        /* Compute: acc *= r */
        d0 = mul64( acc0, r0  ) +
 8009d18:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8009d1c:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8009d20:	f7ff fe22 	bl	8009968 <mul64>
 8009d24:	4604      	mov	r4, r0
 8009d26:	460d      	mov	r5, r1
             mul64( acc1, rs3 ) +
 8009d28:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8009d2c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8009d30:	f7ff fe1a 	bl	8009968 <mul64>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 8009d38:	18a1      	adds	r1, r4, r2
 8009d3a:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8009d3e:	eb45 0303 	adc.w	r3, r5, r3
 8009d42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
             mul64( acc2, rs2 ) +
 8009d46:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8009d4a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8009d4e:	f7ff fe0b 	bl	8009968 <mul64>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
             mul64( acc1, rs3 ) +
 8009d56:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	1889      	adds	r1, r1, r2
 8009d5e:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8009d62:	4629      	mov	r1, r5
 8009d64:	eb41 0303 	adc.w	r3, r1, r3
 8009d68:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
             mul64( acc3, rs1 );
 8009d6c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8009d70:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8009d74:	f7ff fdf8 	bl	8009968 <mul64>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 8009d7c:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8009d80:	4621      	mov	r1, r4
 8009d82:	1889      	adds	r1, r1, r2
 8009d84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009d86:	4629      	mov	r1, r5
 8009d88:	eb41 0303 	adc.w	r3, r1, r3
 8009d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d8e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8009d92:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1 = mul64( acc0, r1  ) +
 8009d96:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8009d9a:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8009d9e:	f7ff fde3 	bl	8009968 <mul64>
 8009da2:	4604      	mov	r4, r0
 8009da4:	460d      	mov	r5, r1
             mul64( acc1, r0  ) +
 8009da6:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8009daa:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8009dae:	f7ff fddb 	bl	8009968 <mul64>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 8009db6:	18a1      	adds	r1, r4, r2
 8009db8:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 8009dbc:	eb45 0303 	adc.w	r3, r5, r3
 8009dc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
             mul64( acc2, rs3 ) +
 8009dc4:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8009dc8:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8009dcc:	f7ff fdcc 	bl	8009968 <mul64>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
             mul64( acc1, r0  ) +
 8009dd4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8009dd8:	4621      	mov	r1, r4
 8009dda:	1889      	adds	r1, r1, r2
 8009ddc:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8009de0:	4629      	mov	r1, r5
 8009de2:	eb41 0303 	adc.w	r3, r1, r3
 8009de6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
             mul64( acc3, rs2 ) +
 8009dea:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8009dee:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8009df2:	f7ff fdb9 	bl	8009968 <mul64>
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
             mul64( acc2, rs3 ) +
 8009dfa:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 8009dfe:	4621      	mov	r1, r4
 8009e00:	1889      	adds	r1, r1, r2
 8009e02:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8009e06:	4629      	mov	r1, r5
 8009e08:	eb41 0303 	adc.w	r3, r1, r3
 8009e0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
             mul64( acc4, rs1 );
 8009e10:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8009e14:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8009e18:	f7ff fda6 	bl	8009968 <mul64>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 8009e20:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8009e24:	4621      	mov	r1, r4
 8009e26:	1889      	adds	r1, r1, r2
 8009e28:	6539      	str	r1, [r7, #80]	@ 0x50
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	eb41 0303 	adc.w	r3, r1, r3
 8009e30:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e32:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8009e36:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2 = mul64( acc0, r2  ) +
 8009e3a:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8009e3e:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8009e42:	f7ff fd91 	bl	8009968 <mul64>
 8009e46:	4604      	mov	r4, r0
 8009e48:	460d      	mov	r5, r1
             mul64( acc1, r1  ) +
 8009e4a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8009e4e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8009e52:	f7ff fd89 	bl	8009968 <mul64>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 8009e5a:	18a1      	adds	r1, r4, r2
 8009e5c:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8009e60:	eb45 0303 	adc.w	r3, r5, r3
 8009e64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
             mul64( acc2, r0  ) +
 8009e68:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8009e6c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8009e70:	f7ff fd7a 	bl	8009968 <mul64>
 8009e74:	4602      	mov	r2, r0
 8009e76:	460b      	mov	r3, r1
             mul64( acc1, r1  ) +
 8009e78:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	1889      	adds	r1, r1, r2
 8009e80:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8009e84:	4629      	mov	r1, r5
 8009e86:	eb41 0303 	adc.w	r3, r1, r3
 8009e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
             mul64( acc3, rs3 ) +
 8009e8e:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8009e92:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8009e96:	f7ff fd67 	bl	8009968 <mul64>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
             mul64( acc2, r0  ) +
 8009e9e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	1889      	adds	r1, r1, r2
 8009ea6:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8009eaa:	4629      	mov	r1, r5
 8009eac:	eb41 0303 	adc.w	r3, r1, r3
 8009eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
             mul64( acc4, rs2 );
 8009eb4:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8009eb8:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8009ebc:	f7ff fd54 	bl	8009968 <mul64>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 8009ec4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8009ec8:	4621      	mov	r1, r4
 8009eca:	1889      	adds	r1, r1, r2
 8009ecc:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009ece:	4629      	mov	r1, r5
 8009ed0:	eb41 0303 	adc.w	r3, r1, r3
 8009ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ed6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8009eda:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3 = mul64( acc0, r3  ) +
 8009ede:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8009ee2:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8009ee6:	f7ff fd3f 	bl	8009968 <mul64>
 8009eea:	4604      	mov	r4, r0
 8009eec:	460d      	mov	r5, r1
             mul64( acc1, r2  ) +
 8009eee:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8009ef2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8009ef6:	f7ff fd37 	bl	8009968 <mul64>
 8009efa:	4602      	mov	r2, r0
 8009efc:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 8009efe:	18a1      	adds	r1, r4, r2
 8009f00:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 8009f04:	eb45 0303 	adc.w	r3, r5, r3
 8009f08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
             mul64( acc2, r1  ) +
 8009f0c:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8009f10:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8009f14:	f7ff fd28 	bl	8009968 <mul64>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
             mul64( acc1, r2  ) +
 8009f1c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009f20:	4621      	mov	r1, r4
 8009f22:	1889      	adds	r1, r1, r2
 8009f24:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8009f28:	4629      	mov	r1, r5
 8009f2a:	eb41 0303 	adc.w	r3, r1, r3
 8009f2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
             mul64( acc3, r0  ) +
 8009f32:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8009f36:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8009f3a:	f7ff fd15 	bl	8009968 <mul64>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	460b      	mov	r3, r1
             mul64( acc2, r1  ) +
 8009f42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8009f46:	4621      	mov	r1, r4
 8009f48:	eb11 0a02 	adds.w	sl, r1, r2
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	eb41 0b03 	adc.w	fp, r1, r3
             mul64( acc4, rs3 );
 8009f52:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8009f56:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8009f5a:	f7ff fd05 	bl	8009968 <mul64>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 8009f62:	eb1a 0102 	adds.w	r1, sl, r2
 8009f66:	6439      	str	r1, [r7, #64]	@ 0x40
 8009f68:	eb4b 0303 	adc.w	r3, fp, r3
 8009f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f6e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8009f72:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc4 *= r0;
 8009f76:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8009f7a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8009f7e:	fb02 f303 	mul.w	r3, r2, r3
 8009f82:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += ( d0 >> 32 );
 8009f86:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8009f8a:	f04f 0000 	mov.w	r0, #0
 8009f8e:	f04f 0100 	mov.w	r1, #0
 8009f92:	0018      	movs	r0, r3
 8009f94:	2100      	movs	r1, #0
 8009f96:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8009f9a:	1814      	adds	r4, r2, r0
 8009f9c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8009f9e:	414b      	adcs	r3, r1
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8009fa6:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2 += ( d1 >> 32 );
 8009faa:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8009fae:	f04f 0000 	mov.w	r0, #0
 8009fb2:	f04f 0100 	mov.w	r1, #0
 8009fb6:	0018      	movs	r0, r3
 8009fb8:	2100      	movs	r1, #0
 8009fba:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8009fbe:	1814      	adds	r4, r2, r0
 8009fc0:	633c      	str	r4, [r7, #48]	@ 0x30
 8009fc2:	414b      	adcs	r3, r1
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009fca:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3 += ( d2 >> 32 );
 8009fce:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f04f 0100 	mov.w	r1, #0
 8009fda:	0018      	movs	r0, r3
 8009fdc:	2100      	movs	r1, #0
 8009fde:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8009fe2:	1814      	adds	r4, r2, r0
 8009fe4:	62bc      	str	r4, [r7, #40]	@ 0x28
 8009fe6:	414b      	adcs	r3, r1
 8009fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fea:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009fee:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc0 = (uint32_t) d0;
 8009ff2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009ff6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        acc1 = (uint32_t) d1;
 8009ffa:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8009ffe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        acc2 = (uint32_t) d2;
 800a002:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800a006:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        acc3 = (uint32_t) d3;
 800a00a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800a00e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        acc4 = (uint32_t) ( d3 >> 32 ) + acc4;
 800a012:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800a016:	f04f 0000 	mov.w	r0, #0
 800a01a:	f04f 0100 	mov.w	r1, #0
 800a01e:	0018      	movs	r0, r3
 800a020:	2100      	movs	r1, #0
 800a022:	4602      	mov	r2, r0
 800a024:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800a028:	4413      	add	r3, r2
 800a02a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        d0 = (uint64_t) acc0 + ( acc4 >> 2 ) + ( acc4 & 0xFFFFFFFCU );
 800a02e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800a032:	2200      	movs	r2, #0
 800a034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a038:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a03c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800a040:	089b      	lsrs	r3, r3, #2
 800a042:	2200      	movs	r2, #0
 800a044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a048:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a04c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800a050:	4623      	mov	r3, r4
 800a052:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800a056:	4602      	mov	r2, r0
 800a058:	eb13 0802 	adds.w	r8, r3, r2
 800a05c:	462b      	mov	r3, r5
 800a05e:	460a      	mov	r2, r1
 800a060:	eb43 0902 	adc.w	r9, r3, r2
 800a064:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800a068:	2200      	movs	r2, #0
 800a06a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a06e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800a072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a076:	f023 0303 	bic.w	r3, r3, #3
 800a07a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a07e:	2300      	movs	r3, #0
 800a080:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a088:	460b      	mov	r3, r1
 800a08a:	eb18 0303 	adds.w	r3, r8, r3
 800a08e:	623b      	str	r3, [r7, #32]
 800a090:	4613      	mov	r3, r2
 800a092:	eb49 0303 	adc.w	r3, r9, r3
 800a096:	627b      	str	r3, [r7, #36]	@ 0x24
 800a098:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a09c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc4 &= 3U;
 800a0a0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800a0a4:	f003 0303 	and.w	r3, r3, #3
 800a0a8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        acc0 = (uint32_t) d0;
 800a0ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a0b0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        d0 = (uint64_t) acc1 + ( d0 >> 32U );
 800a0b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0be:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a0c2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800a0c6:	f04f 0000 	mov.w	r0, #0
 800a0ca:	f04f 0100 	mov.w	r1, #0
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	181b      	adds	r3, r3, r0
 800a0da:	61bb      	str	r3, [r7, #24]
 800a0dc:	462b      	mov	r3, r5
 800a0de:	414b      	adcs	r3, r1
 800a0e0:	61fb      	str	r3, [r7, #28]
 800a0e2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a0e6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc1 = (uint32_t) d0;
 800a0ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a0ee:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        d0 = (uint64_t) acc2 + ( d0 >> 32U );
 800a0f2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0fc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800a100:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f04f 0100 	mov.w	r1, #0
 800a10c:	0018      	movs	r0, r3
 800a10e:	2100      	movs	r1, #0
 800a110:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800a114:	4623      	mov	r3, r4
 800a116:	181b      	adds	r3, r3, r0
 800a118:	613b      	str	r3, [r7, #16]
 800a11a:	462b      	mov	r3, r5
 800a11c:	414b      	adcs	r3, r1
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a124:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc2 = (uint32_t) d0;
 800a128:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a12c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        d0 = (uint64_t) acc3 + ( d0 >> 32U );
 800a130:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800a134:	2200      	movs	r2, #0
 800a136:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a13a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a13e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800a142:	f04f 0000 	mov.w	r0, #0
 800a146:	f04f 0100 	mov.w	r1, #0
 800a14a:	0018      	movs	r0, r3
 800a14c:	2100      	movs	r1, #0
 800a14e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800a152:	4623      	mov	r3, r4
 800a154:	181b      	adds	r3, r3, r0
 800a156:	60bb      	str	r3, [r7, #8]
 800a158:	462b      	mov	r3, r5
 800a15a:	414b      	adcs	r3, r1
 800a15c:	60fb      	str	r3, [r7, #12]
 800a15e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a162:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc3 = (uint32_t) d0;
 800a166:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a16a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        d0 = (uint64_t) acc4 + ( d0 >> 32U );
 800a16e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800a172:	2200      	movs	r2, #0
 800a174:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a178:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a17c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800a180:	f04f 0000 	mov.w	r0, #0
 800a184:	f04f 0100 	mov.w	r1, #0
 800a188:	0018      	movs	r0, r3
 800a18a:	2100      	movs	r1, #0
 800a18c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800a190:	4623      	mov	r3, r4
 800a192:	181b      	adds	r3, r3, r0
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	462b      	mov	r3, r5
 800a198:	414b      	adcs	r3, r1
 800a19a:	607b      	str	r3, [r7, #4]
 800a19c:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a1a0:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc4 = (uint32_t) d0;
 800a1a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a1a8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 800a1ac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800a1b0:	3310      	adds	r3, #16
 800a1b2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    for( i = 0U; i < nblocks; i++ )
 800a1b6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800a1c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800a1c4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	f4ff ac43 	bcc.w	8009a54 <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 800a1ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800a1d2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800a1d6:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 800a1d8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800a1dc:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800a1e0:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->acc[2] = acc2;
 800a1e2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800a1e6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800a1ea:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->acc[3] = acc3;
 800a1ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800a1f0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 800a1f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    ctx->acc[4] = acc4;
 800a1f6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800a1fa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800a1fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a200:	bf00      	nop
 800a202:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 800a206:	46bd      	mov	sp, r7
 800a208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a20c <mbedtls_poly1305_init>:
    mac[14] = (unsigned char)( acc3 >> 16 );
    mac[15] = (unsigned char)( acc3 >> 24 );
}

void mbedtls_poly1305_init( mbedtls_poly1305_context *ctx )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
    POLY1305_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 800a214:	2148      	movs	r1, #72	@ 0x48
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff fb94 	bl	8009944 <mbedtls_platform_zeroize>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <mbedtls_poly1305_free>:

void mbedtls_poly1305_free( mbedtls_poly1305_context *ctx )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d004      	beq.n	800a23c <mbedtls_poly1305_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 800a232:	2148      	movs	r1, #72	@ 0x48
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fb85 	bl	8009944 <mbedtls_platform_zeroize>
 800a23a:	e000      	b.n	800a23e <mbedtls_poly1305_free+0x1a>
        return;
 800a23c:	bf00      	nop
}
 800a23e:	3708      	adds	r7, #8
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update( mbedtls_poly1305_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b088      	sub	sp, #32
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ( remaining > 0U ) && ( ctx->queue_len > 0U ) )
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d03e      	beq.n	800a2dc <mbedtls_poly1305_update+0x98>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a262:	2b00      	cmp	r3, #0
 800a264:	d03a      	beq.n	800a2dc <mbedtls_poly1305_update+0x98>
    {
        queue_free_len = ( POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len );
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a26a:	f1c3 0310 	rsb	r3, r3, #16
 800a26e:	617b      	str	r3, [r7, #20]

        if( ilen < queue_free_len )
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	429a      	cmp	r2, r3
 800a276:	d213      	bcs.n	800a2a0 <mbedtls_poly1305_update+0x5c>
        {
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy( &ctx->queue[ctx->queue_len],
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a27c:	3330      	adds	r3, #48	@ 0x30
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4413      	add	r3, r2
 800a282:	3304      	adds	r3, #4
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	68b9      	ldr	r1, [r7, #8]
 800a288:	4618      	mov	r0, r3
 800a28a:	f003 fa92 	bl	800d7b2 <memcpy>
                    input,
                    ilen );

            ctx->queue_len += ilen;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	441a      	add	r2, r3
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	645a      	str	r2, [r3, #68]	@ 0x44

            remaining = 0U;
 800a29a:	2300      	movs	r3, #0
 800a29c:	61bb      	str	r3, [r7, #24]
 800a29e:	e01d      	b.n	800a2dc <mbedtls_poly1305_update+0x98>
        }
        else
        {
            /* Enough data to produce a complete block */
            memcpy( &ctx->queue[ctx->queue_len],
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2a4:	3330      	adds	r3, #48	@ 0x30
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3304      	adds	r3, #4
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	68b9      	ldr	r1, [r7, #8]
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f003 fa7e 	bl	800d7b2 <memcpy>
                    input,
                    queue_free_len );

            ctx->queue_len = 0U;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	645a      	str	r2, [r3, #68]	@ 0x44

            poly1305_process( ctx, 1U, ctx->queue, 1U ); /* add padding bit */
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f7ff fb6c 	bl	80099a4 <poly1305_process>

            offset    += queue_free_len;
 800a2cc:	69fa      	ldr	r2, [r7, #28]
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	61bb      	str	r3, [r7, #24]
        }
    }

    if( remaining >= POLY1305_BLOCK_SIZE_BYTES )
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	2b0f      	cmp	r3, #15
 800a2e0:	d913      	bls.n	800a30a <mbedtls_poly1305_update+0xc6>
    {
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	091b      	lsrs	r3, r3, #4
 800a2e6:	613b      	str	r3, [r7, #16]

        poly1305_process( ctx, nblocks, &input[offset], 1U );
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	441a      	add	r2, r3
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	6939      	ldr	r1, [r7, #16]
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f7ff fb56 	bl	80099a4 <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	4413      	add	r3, r2
 800a300:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	f003 030f 	and.w	r3, r3, #15
 800a308:	61bb      	str	r3, [r7, #24]
    }

    if( remaining > 0U )
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00c      	beq.n	800a32a <mbedtls_poly1305_update+0xe6>
    {
        /* Store partial block */
        ctx->queue_len = remaining;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy( ctx->queue, &input[offset], remaining );
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	69ba      	ldr	r2, [r7, #24]
 800a324:	4619      	mov	r1, r3
 800a326:	f003 fa44 	bl	800d7b2 <memcpy>
    }

    return( 0 );
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3720      	adds	r7, #32
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 800a33c:	22d8      	movs	r2, #216	@ 0xd8
 800a33e:	2100      	movs	r1, #0
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f003 f9ab 	bl	800d69c <memset>
}
 800a346:	bf00      	nop
 800a348:	3708      	adds	r7, #8
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d004      	beq.n	800a366 <mbedtls_sha512_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 800a35c:	21d8      	movs	r1, #216	@ 0xd8
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff faf0 	bl	8009944 <mbedtls_platform_zeroize>
 800a364:	e000      	b.n	800a368 <mbedtls_sha512_free+0x1a>
        return;
 800a366:	bf00      	nop
}
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
	...

0800a370 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	f04f 0200 	mov.w	r2, #0
 800a380:	f04f 0300 	mov.w	r3, #0
 800a384:	e9c1 2300 	strd	r2, r3, [r1]
    ctx->total[1] = 0;
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	f04f 0200 	mov.w	r2, #0
 800a38e:	f04f 0300 	mov.w	r3, #0
 800a392:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if( is384 == 0 )
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d130      	bne.n	800a3fe <mbedtls_sha512_starts_ret+0x8e>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 800a39c:	6879      	ldr	r1, [r7, #4]
 800a39e:	a336      	add	r3, pc, #216	@ (adr r3, 800a478 <mbedtls_sha512_starts_ret+0x108>)
 800a3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 800a3a8:	6879      	ldr	r1, [r7, #4]
 800a3aa:	a335      	add	r3, pc, #212	@ (adr r3, 800a480 <mbedtls_sha512_starts_ret+0x110>)
 800a3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 800a3b4:	6879      	ldr	r1, [r7, #4]
 800a3b6:	a334      	add	r3, pc, #208	@ (adr r3, 800a488 <mbedtls_sha512_starts_ret+0x118>)
 800a3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 800a3c0:	6879      	ldr	r1, [r7, #4]
 800a3c2:	a333      	add	r3, pc, #204	@ (adr r3, 800a490 <mbedtls_sha512_starts_ret+0x120>)
 800a3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 800a3cc:	6879      	ldr	r1, [r7, #4]
 800a3ce:	a332      	add	r3, pc, #200	@ (adr r3, 800a498 <mbedtls_sha512_starts_ret+0x128>)
 800a3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 800a3d8:	6879      	ldr	r1, [r7, #4]
 800a3da:	a331      	add	r3, pc, #196	@ (adr r3, 800a4a0 <mbedtls_sha512_starts_ret+0x130>)
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 800a3e4:	6879      	ldr	r1, [r7, #4]
 800a3e6:	a330      	add	r3, pc, #192	@ (adr r3, 800a4a8 <mbedtls_sha512_starts_ret+0x138>)
 800a3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 800a3f0:	6879      	ldr	r1, [r7, #4]
 800a3f2:	a32f      	add	r3, pc, #188	@ (adr r3, 800a4b0 <mbedtls_sha512_starts_ret+0x140>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 800a3fc:	e02f      	b.n	800a45e <mbedtls_sha512_starts_ret+0xee>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	a32d      	add	r3, pc, #180	@ (adr r3, 800a4b8 <mbedtls_sha512_starts_ret+0x148>)
 800a402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a406:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	a32c      	add	r3, pc, #176	@ (adr r3, 800a4c0 <mbedtls_sha512_starts_ret+0x150>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	a32b      	add	r3, pc, #172	@ (adr r3, 800a4c8 <mbedtls_sha512_starts_ret+0x158>)
 800a41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41e:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 800a422:	6879      	ldr	r1, [r7, #4]
 800a424:	a32a      	add	r3, pc, #168	@ (adr r3, 800a4d0 <mbedtls_sha512_starts_ret+0x160>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 800a42e:	6879      	ldr	r1, [r7, #4]
 800a430:	a329      	add	r3, pc, #164	@ (adr r3, 800a4d8 <mbedtls_sha512_starts_ret+0x168>)
 800a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a436:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 800a43a:	6879      	ldr	r1, [r7, #4]
 800a43c:	a328      	add	r3, pc, #160	@ (adr r3, 800a4e0 <mbedtls_sha512_starts_ret+0x170>)
 800a43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a442:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	a327      	add	r3, pc, #156	@ (adr r3, 800a4e8 <mbedtls_sha512_starts_ret+0x178>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	a326      	add	r3, pc, #152	@ (adr r3, 800a4f0 <mbedtls_sha512_starts_ret+0x180>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    }

    ctx->is384 = is384;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    return( 0 );
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	370c      	adds	r7, #12
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	f3af 8000 	nop.w
 800a478:	f3bcc908 	.word	0xf3bcc908
 800a47c:	6a09e667 	.word	0x6a09e667
 800a480:	84caa73b 	.word	0x84caa73b
 800a484:	bb67ae85 	.word	0xbb67ae85
 800a488:	fe94f82b 	.word	0xfe94f82b
 800a48c:	3c6ef372 	.word	0x3c6ef372
 800a490:	5f1d36f1 	.word	0x5f1d36f1
 800a494:	a54ff53a 	.word	0xa54ff53a
 800a498:	ade682d1 	.word	0xade682d1
 800a49c:	510e527f 	.word	0x510e527f
 800a4a0:	2b3e6c1f 	.word	0x2b3e6c1f
 800a4a4:	9b05688c 	.word	0x9b05688c
 800a4a8:	fb41bd6b 	.word	0xfb41bd6b
 800a4ac:	1f83d9ab 	.word	0x1f83d9ab
 800a4b0:	137e2179 	.word	0x137e2179
 800a4b4:	5be0cd19 	.word	0x5be0cd19
 800a4b8:	c1059ed8 	.word	0xc1059ed8
 800a4bc:	cbbb9d5d 	.word	0xcbbb9d5d
 800a4c0:	367cd507 	.word	0x367cd507
 800a4c4:	629a292a 	.word	0x629a292a
 800a4c8:	3070dd17 	.word	0x3070dd17
 800a4cc:	9159015a 	.word	0x9159015a
 800a4d0:	f70e5939 	.word	0xf70e5939
 800a4d4:	152fecd8 	.word	0x152fecd8
 800a4d8:	ffc00b31 	.word	0xffc00b31
 800a4dc:	67332667 	.word	0x67332667
 800a4e0:	68581511 	.word	0x68581511
 800a4e4:	8eb44a87 	.word	0x8eb44a87
 800a4e8:	64f98fa7 	.word	0x64f98fa7
 800a4ec:	db0c2e0d 	.word	0xdb0c2e0d
 800a4f0:	befa4fa4 	.word	0xbefa4fa4
 800a4f4:	47b5481d 	.word	0x47b5481d

0800a4f8 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 800a4f8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4fc:	f5ad 6d1e 	sub.w	sp, sp, #2528	@ 0x9e0
 800a500:	af00      	add	r7, sp, #0
 800a502:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a506:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a50a:	6018      	str	r0, [r3, #0]
 800a50c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a510:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a514:	6019      	str	r1, [r3, #0]
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 800a516:	2300      	movs	r3, #0
 800a518:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 800a51c:	e11f      	b.n	800a75e <mbedtls_internal_sha512_process+0x266>
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 800a51e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	461a      	mov	r2, r3
 800a526:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a52a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4413      	add	r3, r2
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2200      	movs	r2, #0
 800a538:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 800a53c:	f8c7 26d4 	str.w	r2, [r7, #1748]	@ 0x6d4
 800a540:	f04f 0000 	mov.w	r0, #0
 800a544:	f04f 0100 	mov.w	r1, #0
 800a548:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	@ 0x6d0
 800a54c:	0619      	lsls	r1, r3, #24
 800a54e:	2000      	movs	r0, #0
 800a550:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a554:	00db      	lsls	r3, r3, #3
 800a556:	1c5a      	adds	r2, r3, #1
 800a558:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a55c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4413      	add	r3, r2
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2200      	movs	r2, #0
 800a56a:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 800a56e:	f8c7 26cc 	str.w	r2, [r7, #1740]	@ 0x6cc
 800a572:	f04f 0200 	mov.w	r2, #0
 800a576:	f04f 0300 	mov.w	r3, #0
 800a57a:	f8d7 66c8 	ldr.w	r6, [r7, #1736]	@ 0x6c8
 800a57e:	0433      	lsls	r3, r6, #16
 800a580:	2200      	movs	r2, #0
 800a582:	ea40 0602 	orr.w	r6, r0, r2
 800a586:	f8c7 66e8 	str.w	r6, [r7, #1768]	@ 0x6e8
 800a58a:	430b      	orrs	r3, r1
 800a58c:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 800a590:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	1c9a      	adds	r2, r3, #2
 800a598:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a59c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c7 36c0 	str.w	r3, [r7, #1728]	@ 0x6c0
 800a5ae:	f8c7 26c4 	str.w	r2, [r7, #1732]	@ 0x6c4
 800a5b2:	f04f 0200 	mov.w	r2, #0
 800a5b6:	f04f 0300 	mov.w	r3, #0
 800a5ba:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 800a5be:	020b      	lsls	r3, r1, #8
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 800a5c6:	4311      	orrs	r1, r2
 800a5c8:	f8c7 16e0 	str.w	r1, [r7, #1760]	@ 0x6e0
 800a5cc:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 800a5d0:	430b      	orrs	r3, r1
 800a5d2:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 800a5d6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a5da:	00db      	lsls	r3, r3, #3
 800a5dc:	1cda      	adds	r2, r3, #3
 800a5de:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a5e2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f8c7 36b8 	str.w	r3, [r7, #1720]	@ 0x6b8
 800a5f4:	f8c7 26bc 	str.w	r2, [r7, #1724]	@ 0x6bc
 800a5f8:	f04f 0200 	mov.w	r2, #0
 800a5fc:	f04f 0300 	mov.w	r3, #0
 800a600:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 800a604:	000b      	movs	r3, r1
 800a606:	2200      	movs	r2, #0
 800a608:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 800a60c:	4311      	orrs	r1, r2
 800a60e:	f8c7 16d8 	str.w	r1, [r7, #1752]	@ 0x6d8
 800a612:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 800a616:	430b      	orrs	r3, r1
 800a618:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 800a61c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a620:	00db      	lsls	r3, r3, #3
 800a622:	1d1a      	adds	r2, r3, #4
 800a624:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a628:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4413      	add	r3, r2
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2200      	movs	r2, #0
 800a636:	f8c7 36b0 	str.w	r3, [r7, #1712]	@ 0x6b0
 800a63a:	f8c7 26b4 	str.w	r2, [r7, #1716]	@ 0x6b4
 800a63e:	f507 63d6 	add.w	r3, r7, #1712	@ 0x6b0
 800a642:	e9d3 1200 	ldrd	r1, r2, [r3]
 800a646:	460b      	mov	r3, r1
 800a648:	0a1b      	lsrs	r3, r3, #8
 800a64a:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 800a64e:	460b      	mov	r3, r1
 800a650:	061b      	lsls	r3, r3, #24
 800a652:	f8c7 36a8 	str.w	r3, [r7, #1704]	@ 0x6a8
 800a656:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	@ 0x6d8
 800a65a:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 800a65e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a662:	4602      	mov	r2, r0
 800a664:	ea43 0a02 	orr.w	sl, r3, r2
 800a668:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	@ 0x6dc
 800a66c:	460a      	mov	r2, r1
 800a66e:	ea43 0b02 	orr.w	fp, r3, r2
 800a672:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	1d5a      	adds	r2, r3, #5
 800a67a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a67e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4413      	add	r3, r2
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	2200      	movs	r2, #0
 800a68c:	f8c7 36f8 	str.w	r3, [r7, #1784]	@ 0x6f8
 800a690:	f8c7 26fc 	str.w	r2, [r7, #1788]	@ 0x6fc
 800a694:	f04f 0200 	mov.w	r2, #0
 800a698:	f04f 0300 	mov.w	r3, #0
 800a69c:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 800a6a0:	040b      	lsls	r3, r1, #16
 800a6a2:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 800a6a6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800a6aa:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 800a6ae:	040a      	lsls	r2, r1, #16
 800a6b0:	ea4a 0802 	orr.w	r8, sl, r2
 800a6b4:	ea4b 0903 	orr.w	r9, fp, r3
 800a6b8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a6bc:	00db      	lsls	r3, r3, #3
 800a6be:	1d9a      	adds	r2, r3, #6
 800a6c0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a6c4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f8c7 36f0 	str.w	r3, [r7, #1776]	@ 0x6f0
 800a6d6:	f8c7 26f4 	str.w	r2, [r7, #1780]	@ 0x6f4
 800a6da:	f04f 0200 	mov.w	r2, #0
 800a6de:	f04f 0300 	mov.w	r3, #0
 800a6e2:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 800a6e6:	020b      	lsls	r3, r1, #8
 800a6e8:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 800a6ec:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800a6f0:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 800a6f4:	020a      	lsls	r2, r1, #8
 800a6f6:	ea48 0402 	orr.w	r4, r8, r2
 800a6fa:	ea49 0503 	orr.w	r5, r9, r3
 800a6fe:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	1dda      	adds	r2, r3, #7
 800a706:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a70a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4413      	add	r3, r2
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2200      	movs	r2, #0
 800a718:	f8c7 36a0 	str.w	r3, [r7, #1696]	@ 0x6a0
 800a71c:	f8c7 26a4 	str.w	r2, [r7, #1700]	@ 0x6a4
 800a720:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800a724:	e9d3 1200 	ldrd	r1, r2, [r3]
 800a728:	460b      	mov	r3, r1
 800a72a:	4323      	orrs	r3, r4
 800a72c:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
 800a730:	4613      	mov	r3, r2
 800a732:	432b      	orrs	r3, r5
 800a734:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 800a738:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a73c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a740:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a744:	00db      	lsls	r3, r3, #3
 800a746:	4413      	add	r3, r2
 800a748:	f507 62d3 	add.w	r2, r7, #1688	@ 0x698
 800a74c:	e9d2 1200 	ldrd	r1, r2, [r2]
 800a750:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 16; i++ )
 800a754:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a758:	3301      	adds	r3, #1
 800a75a:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 800a75e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a762:	2b0f      	cmp	r3, #15
 800a764:	f77f aedb 	ble.w	800a51e <mbedtls_internal_sha512_process+0x26>
    }

    for( ; i < 80; i++ )
 800a768:	e10e      	b.n	800a988 <mbedtls_internal_sha512_process+0x490>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800a76a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a76e:	1e99      	subs	r1, r3, #2
 800a770:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a774:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a778:	00cb      	lsls	r3, r1, #3
 800a77a:	4413      	add	r3, r2
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	0358      	lsls	r0, r3, #13
 800a782:	0cd1      	lsrs	r1, r2, #19
 800a784:	4301      	orrs	r1, r0
 800a786:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 800a78a:	0351      	lsls	r1, r2, #13
 800a78c:	0cdb      	lsrs	r3, r3, #19
 800a78e:	430b      	orrs	r3, r1
 800a790:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 800a794:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a798:	1e99      	subs	r1, r3, #2
 800a79a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a79e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a7a2:	00cb      	lsls	r3, r1, #3
 800a7a4:	4413      	add	r3, r2
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	0f50      	lsrs	r0, r2, #29
 800a7ac:	00d9      	lsls	r1, r3, #3
 800a7ae:	4301      	orrs	r1, r0
 800a7b0:	f8c7 168c 	str.w	r1, [r7, #1676]	@ 0x68c
 800a7b4:	0f59      	lsrs	r1, r3, #29
 800a7b6:	00d3      	lsls	r3, r2, #3
 800a7b8:	430b      	orrs	r3, r1
 800a7ba:	f8c7 3688 	str.w	r3, [r7, #1672]	@ 0x688
 800a7be:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 800a7c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a7c6:	4623      	mov	r3, r4
 800a7c8:	f507 62d1 	add.w	r2, r7, #1672	@ 0x688
 800a7cc:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	4053      	eors	r3, r2
 800a7d4:	f8c7 3680 	str.w	r3, [r7, #1664]	@ 0x680
 800a7d8:	462b      	mov	r3, r5
 800a7da:	460a      	mov	r2, r1
 800a7dc:	4053      	eors	r3, r2
 800a7de:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 800a7e2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a7e6:	1e99      	subs	r1, r3, #2
 800a7e8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a7ec:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a7f0:	00cb      	lsls	r3, r1, #3
 800a7f2:	4413      	add	r3, r2
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f04f 0000 	mov.w	r0, #0
 800a7fc:	f04f 0100 	mov.w	r1, #0
 800a800:	0990      	lsrs	r0, r2, #6
 800a802:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800a806:	0999      	lsrs	r1, r3, #6
 800a808:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 800a80c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a810:	4623      	mov	r3, r4
 800a812:	4043      	eors	r3, r0
 800a814:	f8c7 3678 	str.w	r3, [r7, #1656]	@ 0x678
 800a818:	462b      	mov	r3, r5
 800a81a:	404b      	eors	r3, r1
 800a81c:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 800a820:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a824:	1fd9      	subs	r1, r3, #7
 800a826:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a82a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a82e:	00cb      	lsls	r3, r1, #3
 800a830:	4413      	add	r3, r2
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f507 61cf 	add.w	r1, r7, #1656	@ 0x678
 800a83a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a83e:	4621      	mov	r1, r4
 800a840:	1889      	adds	r1, r1, r2
 800a842:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 800a846:	4629      	mov	r1, r5
 800a848:	eb41 0303 	adc.w	r3, r1, r3
 800a84c:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
               S0(W[i - 15]) + W[i - 16];
 800a850:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a854:	f1a3 010f 	sub.w	r1, r3, #15
 800a858:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a85c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a860:	00cb      	lsls	r3, r1, #3
 800a862:	4413      	add	r3, r2
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	07d8      	lsls	r0, r3, #31
 800a86a:	0851      	lsrs	r1, r2, #1
 800a86c:	4301      	orrs	r1, r0
 800a86e:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 800a872:	07d1      	lsls	r1, r2, #31
 800a874:	085b      	lsrs	r3, r3, #1
 800a876:	430b      	orrs	r3, r1
 800a878:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 800a87c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a880:	f1a3 010f 	sub.w	r1, r3, #15
 800a884:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a888:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a88c:	00cb      	lsls	r3, r1, #3
 800a88e:	4413      	add	r3, r2
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	0618      	lsls	r0, r3, #24
 800a896:	0a11      	lsrs	r1, r2, #8
 800a898:	4301      	orrs	r1, r0
 800a89a:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 800a89e:	0611      	lsls	r1, r2, #24
 800a8a0:	0a1b      	lsrs	r3, r3, #8
 800a8a2:	430b      	orrs	r3, r1
 800a8a4:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 800a8a8:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 800a8ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a8b0:	4623      	mov	r3, r4
 800a8b2:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 800a8b6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a8ba:	4602      	mov	r2, r0
 800a8bc:	4053      	eors	r3, r2
 800a8be:	f8c7 3658 	str.w	r3, [r7, #1624]	@ 0x658
 800a8c2:	462b      	mov	r3, r5
 800a8c4:	460a      	mov	r2, r1
 800a8c6:	4053      	eors	r3, r2
 800a8c8:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 800a8cc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a8d0:	f1a3 010f 	sub.w	r1, r3, #15
 800a8d4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a8d8:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a8dc:	00cb      	lsls	r3, r1, #3
 800a8de:	4413      	add	r3, r2
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	f04f 0000 	mov.w	r0, #0
 800a8e8:	f04f 0100 	mov.w	r1, #0
 800a8ec:	09d0      	lsrs	r0, r2, #7
 800a8ee:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800a8f2:	09d9      	lsrs	r1, r3, #7
 800a8f4:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 800a8f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a8fc:	4623      	mov	r3, r4
 800a8fe:	4043      	eors	r3, r0
 800a900:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
 800a904:	462b      	mov	r3, r5
 800a906:	404b      	eors	r3, r1
 800a908:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800a90c:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 800a910:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a914:	4623      	mov	r3, r4
 800a916:	f507 62ca 	add.w	r2, r7, #1616	@ 0x650
 800a91a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a91e:	4602      	mov	r2, r0
 800a920:	189b      	adds	r3, r3, r2
 800a922:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 800a926:	462b      	mov	r3, r5
 800a928:	460a      	mov	r2, r1
 800a92a:	4153      	adcs	r3, r2
 800a92c:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
               S0(W[i - 15]) + W[i - 16];
 800a930:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a934:	f1a3 0110 	sub.w	r1, r3, #16
 800a938:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a93c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a940:	00cb      	lsls	r3, r1, #3
 800a942:	4413      	add	r3, r2
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 800a94c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a950:	4621      	mov	r1, r4
 800a952:	1889      	adds	r1, r1, r2
 800a954:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 800a958:	4629      	mov	r1, r5
 800a95a:	eb41 0303 	adc.w	r3, r1, r3
 800a95e:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
        W[i] = S1(W[i -  2]) + W[i -  7] +
 800a962:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a966:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a96a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a96e:	00db      	lsls	r3, r3, #3
 800a970:	4413      	add	r3, r2
 800a972:	f507 62c8 	add.w	r2, r7, #1600	@ 0x640
 800a976:	e9d2 1200 	ldrd	r1, r2, [r2]
 800a97a:	e9c3 1200 	strd	r1, r2, [r3]
    for( ; i < 80; i++ )
 800a97e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a982:	3301      	adds	r3, #1
 800a984:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 800a988:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a98c:	2b4f      	cmp	r3, #79	@ 0x4f
 800a98e:	f77f aeec 	ble.w	800a76a <mbedtls_internal_sha512_process+0x272>
    }

    A = ctx->state[0];
 800a992:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a996:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a9a0:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 800a9a4:	e9c1 2300 	strd	r2, r3, [r1]
    B = ctx->state[1];
 800a9a8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a9ac:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a9b6:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 800a9ba:	e9c1 2300 	strd	r2, r3, [r1]
    C = ctx->state[2];
 800a9be:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a9c2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9cc:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 800a9d0:	e9c1 2300 	strd	r2, r3, [r1]
    D = ctx->state[3];
 800a9d4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a9d8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a9e2:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 800a9e6:	e9c1 2300 	strd	r2, r3, [r1]
    E = ctx->state[4];
 800a9ea:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a9ee:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800a9f8:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 800a9fc:	e9c1 2300 	strd	r2, r3, [r1]
    F = ctx->state[5];
 800aa00:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800aa04:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800aa0e:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 800aa12:	e9c1 2300 	strd	r2, r3, [r1]
    G = ctx->state[6];
 800aa16:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800aa1a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800aa24:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 800aa28:	e9c1 2300 	strd	r2, r3, [r1]
    H = ctx->state[7];
 800aa2c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800aa30:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800aa3a:	f607 1198 	addw	r1, r7, #2456	@ 0x998
 800aa3e:	e9c1 2300 	strd	r2, r3, [r1]
    i = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 800aa48:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800aa4c:	049a      	lsls	r2, r3, #18
 800aa4e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800aa52:	0b9b      	lsrs	r3, r3, #14
 800aa54:	4313      	orrs	r3, r2
 800aa56:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
 800aa5a:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800aa5e:	049a      	lsls	r2, r3, #18
 800aa60:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800aa64:	0b9b      	lsrs	r3, r3, #14
 800aa66:	4313      	orrs	r3, r2
 800aa68:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 800aa6c:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800aa70:	039a      	lsls	r2, r3, #14
 800aa72:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800aa76:	0c9b      	lsrs	r3, r3, #18
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 800aa7e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800aa82:	039a      	lsls	r2, r3, #14
 800aa84:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800aa88:	0c9b      	lsrs	r3, r3, #18
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 800aa90:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800aa94:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aa98:	4623      	mov	r3, r4
 800aa9a:	f507 62c6 	add.w	r2, r7, #1584	@ 0x630
 800aa9e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	4053      	eors	r3, r2
 800aaa6:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 800aaaa:	462b      	mov	r3, r5
 800aaac:	460a      	mov	r2, r1
 800aaae:	4053      	eors	r3, r2
 800aab0:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 800aab4:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800aab8:	0a5a      	lsrs	r2, r3, #9
 800aaba:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800aabe:	05db      	lsls	r3, r3, #23
 800aac0:	4313      	orrs	r3, r2
 800aac2:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 800aac6:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800aaca:	0a5a      	lsrs	r2, r3, #9
 800aacc:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800aad0:	05db      	lsls	r3, r3, #23
 800aad2:	4313      	orrs	r3, r2
 800aad4:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 800aad8:	f507 63c5 	add.w	r3, r7, #1576	@ 0x628
 800aadc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aae0:	4623      	mov	r3, r4
 800aae2:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 800aae6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800aaea:	4602      	mov	r2, r0
 800aaec:	4053      	eors	r3, r2
 800aaee:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 800aaf2:	462b      	mov	r3, r5
 800aaf4:	460a      	mov	r2, r1
 800aaf6:	4053      	eors	r3, r2
 800aaf8:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 800aafc:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800ab08:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	1889      	adds	r1, r1, r2
 800ab10:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 800ab14:	4629      	mov	r1, r5
 800ab16:	eb41 0303 	adc.w	r3, r1, r3
 800ab1a:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 800ab1e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800ab22:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab26:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800ab2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2e:	ea80 0402 	eor.w	r4, r0, r2
 800ab32:	f8c7 4608 	str.w	r4, [r7, #1544]	@ 0x608
 800ab36:	404b      	eors	r3, r1
 800ab38:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 800ab3c:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f507 61c1 	add.w	r1, r7, #1544	@ 0x608
 800ab48:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ab4c:	4621      	mov	r1, r4
 800ab4e:	4011      	ands	r1, r2
 800ab50:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 800ab54:	4629      	mov	r1, r5
 800ab56:	400b      	ands	r3, r1
 800ab58:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 800ab5c:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	f507 61c0 	add.w	r1, r7, #1536	@ 0x600
 800ab68:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ab6c:	4621      	mov	r1, r4
 800ab6e:	4051      	eors	r1, r2
 800ab70:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 800ab74:	4629      	mov	r1, r5
 800ab76:	404b      	eors	r3, r1
 800ab78:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 800ab7c:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800ab80:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ab84:	4623      	mov	r3, r4
 800ab86:	f507 62bf 	add.w	r2, r7, #1528	@ 0x5f8
 800ab8a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ab8e:	4602      	mov	r2, r0
 800ab90:	189b      	adds	r3, r3, r2
 800ab92:	f8c7 35f0 	str.w	r3, [r7, #1520]	@ 0x5f0
 800ab96:	462b      	mov	r3, r5
 800ab98:	460a      	mov	r2, r1
 800ab9a:	4153      	adcs	r3, r2
 800ab9c:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 800aba0:	4afc      	ldr	r2, [pc, #1008]	@ (800af94 <mbedtls_internal_sha512_process+0xa9c>)
 800aba2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800aba6:	00db      	lsls	r3, r3, #3
 800aba8:	4413      	add	r3, r2
 800abaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abae:	f507 61be 	add.w	r1, r7, #1520	@ 0x5f0
 800abb2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800abb6:	4621      	mov	r1, r4
 800abb8:	1889      	adds	r1, r1, r2
 800abba:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 800abbe:	4629      	mov	r1, r5
 800abc0:	eb41 0303 	adc.w	r3, r1, r3
 800abc4:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 800abc8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800abcc:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800abd0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800abd4:	00db      	lsls	r3, r3, #3
 800abd6:	4413      	add	r3, r2
 800abd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abdc:	f507 61bd 	add.w	r1, r7, #1512	@ 0x5e8
 800abe0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800abe4:	4621      	mov	r1, r4
 800abe6:	1889      	adds	r1, r1, r2
 800abe8:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800abec:	4629      	mov	r1, r5
 800abee:	eb41 0303 	adc.w	r3, r1, r3
 800abf2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800abf6:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 800abfa:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800abfe:	e9c2 3400 	strd	r3, r4, [r2]
 800ac02:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ac06:	011a      	lsls	r2, r3, #4
 800ac08:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ac0c:	0f1b      	lsrs	r3, r3, #28
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	f8c7 35e0 	str.w	r3, [r7, #1504]	@ 0x5e0
 800ac14:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ac18:	011a      	lsls	r2, r3, #4
 800ac1a:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ac1e:	0f1b      	lsrs	r3, r3, #28
 800ac20:	4313      	orrs	r3, r2
 800ac22:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 800ac26:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ac2a:	089a      	lsrs	r2, r3, #2
 800ac2c:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ac30:	079b      	lsls	r3, r3, #30
 800ac32:	4313      	orrs	r3, r2
 800ac34:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 800ac38:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ac3c:	089a      	lsrs	r2, r3, #2
 800ac3e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ac42:	079b      	lsls	r3, r3, #30
 800ac44:	4313      	orrs	r3, r2
 800ac46:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
 800ac4a:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 800ac4e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ac52:	4623      	mov	r3, r4
 800ac54:	f507 62bb 	add.w	r2, r7, #1496	@ 0x5d8
 800ac58:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	4053      	eors	r3, r2
 800ac60:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 800ac64:	462b      	mov	r3, r5
 800ac66:	460a      	mov	r2, r1
 800ac68:	4053      	eors	r3, r2
 800ac6a:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 800ac6e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ac72:	09da      	lsrs	r2, r3, #7
 800ac74:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ac78:	065b      	lsls	r3, r3, #25
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 800ac80:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ac84:	09da      	lsrs	r2, r3, #7
 800ac86:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ac8a:	065b      	lsls	r3, r3, #25
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 800ac92:	f507 63ba 	add.w	r3, r7, #1488	@ 0x5d0
 800ac96:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ac9a:	4623      	mov	r3, r4
 800ac9c:	f507 62b9 	add.w	r2, r7, #1480	@ 0x5c8
 800aca0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800aca4:	4602      	mov	r2, r0
 800aca6:	4053      	eors	r3, r2
 800aca8:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
 800acac:	462b      	mov	r3, r5
 800acae:	460a      	mov	r2, r1
 800acb0:	4053      	eors	r3, r2
 800acb2:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 800acb6:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800acba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acbe:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	ea00 0402 	and.w	r4, r0, r2
 800acca:	f8c7 45b8 	str.w	r4, [r7, #1464]	@ 0x5b8
 800acce:	400b      	ands	r3, r1
 800acd0:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 800acd4:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800acd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800acdc:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	ea40 0402 	orr.w	r4, r0, r2
 800ace8:	f8c7 45b0 	str.w	r4, [r7, #1456]	@ 0x5b0
 800acec:	430b      	orrs	r3, r1
 800acee:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 800acf2:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f507 61b6 	add.w	r1, r7, #1456	@ 0x5b0
 800acfe:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ad02:	4621      	mov	r1, r4
 800ad04:	4011      	ands	r1, r2
 800ad06:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	400b      	ands	r3, r1
 800ad0e:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 800ad12:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800ad16:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ad1a:	4623      	mov	r3, r4
 800ad1c:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 800ad20:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ad24:	4602      	mov	r2, r0
 800ad26:	4313      	orrs	r3, r2
 800ad28:	f8c7 35a0 	str.w	r3, [r7, #1440]	@ 0x5a0
 800ad2c:	462b      	mov	r3, r5
 800ad2e:	460a      	mov	r2, r1
 800ad30:	4313      	orrs	r3, r2
 800ad32:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 800ad36:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 800ad3a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ad3e:	4623      	mov	r3, r4
 800ad40:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 800ad44:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ad48:	4602      	mov	r2, r0
 800ad4a:	189b      	adds	r3, r3, r2
 800ad4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad50:	462b      	mov	r3, r5
 800ad52:	460a      	mov	r2, r1
 800ad54:	4153      	adcs	r3, r2
 800ad56:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ad5a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 800ad5e:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800ad62:	e9c2 3400 	strd	r3, r4, [r2]
 800ad66:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800ad6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad6e:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800ad72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad76:	1884      	adds	r4, r0, r2
 800ad78:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800ad7c:	eb41 0303 	adc.w	r3, r1, r3
 800ad80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ad84:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800ad88:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 800ad8c:	e9c2 3400 	strd	r3, r4, [r2]
 800ad90:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800ad94:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad98:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800ad9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada0:	1884      	adds	r4, r0, r2
 800ada2:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 800ada6:	eb41 0303 	adc.w	r3, r1, r3
 800adaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800adae:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800adb2:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 800adb6:	e9c2 3400 	strd	r3, r4, [r2]
 800adba:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800adbe:	3301      	adds	r3, #1
 800adc0:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 800adc4:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800adc8:	049a      	lsls	r2, r3, #18
 800adca:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800adce:	0b9b      	lsrs	r3, r3, #14
 800add0:	4313      	orrs	r3, r2
 800add2:	f8c7 3598 	str.w	r3, [r7, #1432]	@ 0x598
 800add6:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800adda:	049a      	lsls	r2, r3, #18
 800addc:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800ade0:	0b9b      	lsrs	r3, r3, #14
 800ade2:	4313      	orrs	r3, r2
 800ade4:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 800ade8:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800adec:	039a      	lsls	r2, r3, #14
 800adee:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800adf2:	0c9b      	lsrs	r3, r3, #18
 800adf4:	4313      	orrs	r3, r2
 800adf6:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590
 800adfa:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800adfe:	039a      	lsls	r2, r3, #14
 800ae00:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800ae04:	0c9b      	lsrs	r3, r3, #18
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 800ae0c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 800ae10:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae14:	4623      	mov	r3, r4
 800ae16:	f507 62b2 	add.w	r2, r7, #1424	@ 0x590
 800ae1a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ae1e:	4602      	mov	r2, r0
 800ae20:	4053      	eors	r3, r2
 800ae22:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
 800ae26:	462b      	mov	r3, r5
 800ae28:	460a      	mov	r2, r1
 800ae2a:	4053      	eors	r3, r2
 800ae2c:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 800ae30:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800ae34:	0a5a      	lsrs	r2, r3, #9
 800ae36:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800ae3a:	05db      	lsls	r3, r3, #23
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 800ae42:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800ae46:	0a5a      	lsrs	r2, r3, #9
 800ae48:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800ae4c:	05db      	lsls	r3, r3, #23
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	f8c7 3580 	str.w	r3, [r7, #1408]	@ 0x580
 800ae54:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 800ae58:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ae5c:	4623      	mov	r3, r4
 800ae5e:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
 800ae62:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ae66:	4602      	mov	r2, r0
 800ae68:	4053      	eors	r3, r2
 800ae6a:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
 800ae6e:	462b      	mov	r3, r5
 800ae70:	460a      	mov	r2, r1
 800ae72:	4053      	eors	r3, r2
 800ae74:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 800ae78:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800ae7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae80:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 800ae84:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ae88:	4621      	mov	r1, r4
 800ae8a:	1889      	adds	r1, r1, r2
 800ae8c:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 800ae90:	4629      	mov	r1, r5
 800ae92:	eb41 0303 	adc.w	r3, r1, r3
 800ae96:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 800ae9a:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800ae9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aea2:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	ea80 0402 	eor.w	r4, r0, r2
 800aeae:	f8c7 4568 	str.w	r4, [r7, #1384]	@ 0x568
 800aeb2:	404b      	eors	r3, r1
 800aeb4:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 800aeb8:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800aec4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aec8:	4621      	mov	r1, r4
 800aeca:	4011      	ands	r1, r2
 800aecc:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 800aed0:	4629      	mov	r1, r5
 800aed2:	400b      	ands	r3, r1
 800aed4:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 800aed8:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800aee4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aee8:	4621      	mov	r1, r4
 800aeea:	4051      	eors	r1, r2
 800aeec:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 800aef0:	4629      	mov	r1, r5
 800aef2:	404b      	eors	r3, r1
 800aef4:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 800aef8:	f507 63ae 	add.w	r3, r7, #1392	@ 0x570
 800aefc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800af00:	4623      	mov	r3, r4
 800af02:	f507 62ab 	add.w	r2, r7, #1368	@ 0x558
 800af06:	e9d2 0100 	ldrd	r0, r1, [r2]
 800af0a:	4602      	mov	r2, r0
 800af0c:	189b      	adds	r3, r3, r2
 800af0e:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
 800af12:	462b      	mov	r3, r5
 800af14:	460a      	mov	r2, r1
 800af16:	4153      	adcs	r3, r2
 800af18:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 800af1c:	4a1d      	ldr	r2, [pc, #116]	@ (800af94 <mbedtls_internal_sha512_process+0xa9c>)
 800af1e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	4413      	add	r3, r2
 800af26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2a:	f507 61aa 	add.w	r1, r7, #1360	@ 0x550
 800af2e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800af32:	4621      	mov	r1, r4
 800af34:	1889      	adds	r1, r1, r2
 800af36:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 800af3a:	4629      	mov	r1, r5
 800af3c:	eb41 0303 	adc.w	r3, r1, r3
 800af40:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 800af44:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800af48:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800af4c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	4413      	add	r3, r2
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 800af5c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800af60:	4621      	mov	r1, r4
 800af62:	1889      	adds	r1, r1, r2
 800af64:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800af68:	4629      	mov	r1, r5
 800af6a:	eb41 0303 	adc.w	r3, r1, r3
 800af6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800af72:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800af76:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800af7a:	e9c2 3400 	strd	r3, r4, [r2]
 800af7e:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800af82:	011a      	lsls	r2, r3, #4
 800af84:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800af88:	0f1b      	lsrs	r3, r3, #28
 800af8a:	4313      	orrs	r3, r2
 800af8c:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 800af90:	e002      	b.n	800af98 <mbedtls_internal_sha512_process+0xaa0>
 800af92:	bf00      	nop
 800af94:	080109f8 	.word	0x080109f8
 800af98:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800af9c:	011a      	lsls	r2, r3, #4
 800af9e:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800afa2:	0f1b      	lsrs	r3, r3, #28
 800afa4:	4313      	orrs	r3, r2
 800afa6:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 800afaa:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800afae:	089a      	lsrs	r2, r3, #2
 800afb0:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800afb4:	079b      	lsls	r3, r3, #30
 800afb6:	4313      	orrs	r3, r2
 800afb8:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 800afbc:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800afc0:	089a      	lsrs	r2, r3, #2
 800afc2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800afc6:	079b      	lsls	r3, r3, #30
 800afc8:	4313      	orrs	r3, r2
 800afca:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 800afce:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800afd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800afd6:	4623      	mov	r3, r4
 800afd8:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 800afdc:	e9d2 0100 	ldrd	r0, r1, [r2]
 800afe0:	4602      	mov	r2, r0
 800afe2:	4053      	eors	r3, r2
 800afe4:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 800afe8:	462b      	mov	r3, r5
 800afea:	460a      	mov	r2, r1
 800afec:	4053      	eors	r3, r2
 800afee:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 800aff2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800aff6:	09da      	lsrs	r2, r3, #7
 800aff8:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800affc:	065b      	lsls	r3, r3, #25
 800affe:	4313      	orrs	r3, r2
 800b000:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 800b004:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800b008:	09da      	lsrs	r2, r3, #7
 800b00a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800b00e:	065b      	lsls	r3, r3, #25
 800b010:	4313      	orrs	r3, r2
 800b012:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800b016:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800b01a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b01e:	4623      	mov	r3, r4
 800b020:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 800b024:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b028:	4602      	mov	r2, r0
 800b02a:	4053      	eors	r3, r2
 800b02c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800b030:	462b      	mov	r3, r5
 800b032:	460a      	mov	r2, r1
 800b034:	4053      	eors	r3, r2
 800b036:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 800b03a:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b03e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b042:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	ea00 0402 	and.w	r4, r0, r2
 800b04e:	f8c7 4518 	str.w	r4, [r7, #1304]	@ 0x518
 800b052:	400b      	ands	r3, r1
 800b054:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 800b058:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b05c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b060:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b068:	ea40 0402 	orr.w	r4, r0, r2
 800b06c:	f8c7 4510 	str.w	r4, [r7, #1296]	@ 0x510
 800b070:	430b      	orrs	r3, r1
 800b072:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 800b076:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 800b082:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b086:	4621      	mov	r1, r4
 800b088:	4011      	ands	r1, r2
 800b08a:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 800b08e:	4629      	mov	r1, r5
 800b090:	400b      	ands	r3, r1
 800b092:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 800b096:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800b09a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b09e:	4623      	mov	r3, r4
 800b0a0:	f507 62a1 	add.w	r2, r7, #1288	@ 0x508
 800b0a4:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b0a8:	4602      	mov	r2, r0
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 800b0b0:	462b      	mov	r3, r5
 800b0b2:	460a      	mov	r2, r1
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 800b0ba:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800b0be:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 800b0c8:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	189b      	adds	r3, r3, r2
 800b0d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	460a      	mov	r2, r1
 800b0d8:	4153      	adcs	r3, r2
 800b0da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b0de:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800b0e2:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800b0e6:	e9c2 3400 	strd	r3, r4, [r2]
 800b0ea:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b0ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0f2:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	1884      	adds	r4, r0, r2
 800b0fc:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 800b100:	eb41 0303 	adc.w	r3, r1, r3
 800b104:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b108:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800b10c:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 800b110:	e9c2 3400 	strd	r3, r4, [r2]
 800b114:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b118:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b11c:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	1884      	adds	r4, r0, r2
 800b126:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 800b12a:	eb41 0303 	adc.w	r3, r1, r3
 800b12e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b132:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800b136:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 800b13a:	e9c2 3400 	strd	r3, r4, [r2]
 800b13e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b142:	3301      	adds	r3, #1
 800b144:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 800b148:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b14c:	049a      	lsls	r2, r3, #18
 800b14e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b152:	0b9b      	lsrs	r3, r3, #14
 800b154:	4313      	orrs	r3, r2
 800b156:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 800b15a:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b15e:	049a      	lsls	r2, r3, #18
 800b160:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b164:	0b9b      	lsrs	r3, r3, #14
 800b166:	4313      	orrs	r3, r2
 800b168:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 800b16c:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b170:	039a      	lsls	r2, r3, #14
 800b172:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b176:	0c9b      	lsrs	r3, r3, #18
 800b178:	4313      	orrs	r3, r2
 800b17a:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 800b17e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b182:	039a      	lsls	r2, r3, #14
 800b184:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b188:	0c9b      	lsrs	r3, r3, #18
 800b18a:	4313      	orrs	r3, r2
 800b18c:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 800b190:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800b194:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b198:	4623      	mov	r3, r4
 800b19a:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800b19e:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	4053      	eors	r3, r2
 800b1a6:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 800b1aa:	462b      	mov	r3, r5
 800b1ac:	460a      	mov	r2, r1
 800b1ae:	4053      	eors	r3, r2
 800b1b0:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 800b1b4:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b1b8:	0a5a      	lsrs	r2, r3, #9
 800b1ba:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b1be:	05db      	lsls	r3, r3, #23
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 800b1c6:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b1ca:	0a5a      	lsrs	r2, r3, #9
 800b1cc:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b1d0:	05db      	lsls	r3, r3, #23
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 800b1d8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800b1dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 800b1e6:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	4053      	eors	r3, r2
 800b1ee:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 800b1f2:	462b      	mov	r3, r5
 800b1f4:	460a      	mov	r2, r1
 800b1f6:	4053      	eors	r3, r2
 800b1f8:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 800b1fc:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 800b208:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b20c:	4621      	mov	r1, r4
 800b20e:	1889      	adds	r1, r1, r2
 800b210:	f8c7 14d0 	str.w	r1, [r7, #1232]	@ 0x4d0
 800b214:	4629      	mov	r1, r5
 800b216:	eb41 0303 	adc.w	r3, r1, r3
 800b21a:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800b21e:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b222:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b226:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b22e:	ea80 0402 	eor.w	r4, r0, r2
 800b232:	f8c7 44c8 	str.w	r4, [r7, #1224]	@ 0x4c8
 800b236:	404b      	eors	r3, r1
 800b238:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 800b23c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b244:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 800b248:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b24c:	4621      	mov	r1, r4
 800b24e:	4011      	ands	r1, r2
 800b250:	f8c7 14c0 	str.w	r1, [r7, #1216]	@ 0x4c0
 800b254:	4629      	mov	r1, r5
 800b256:	400b      	ands	r3, r1
 800b258:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 800b25c:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f507 6198 	add.w	r1, r7, #1216	@ 0x4c0
 800b268:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b26c:	4621      	mov	r1, r4
 800b26e:	4051      	eors	r1, r2
 800b270:	f8c7 14b8 	str.w	r1, [r7, #1208]	@ 0x4b8
 800b274:	4629      	mov	r1, r5
 800b276:	404b      	eors	r3, r1
 800b278:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 800b27c:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800b280:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b284:	4623      	mov	r3, r4
 800b286:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800b28a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b28e:	4602      	mov	r2, r0
 800b290:	189b      	adds	r3, r3, r2
 800b292:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 800b296:	462b      	mov	r3, r5
 800b298:	460a      	mov	r2, r1
 800b29a:	4153      	adcs	r3, r2
 800b29c:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 800b2a0:	4afc      	ldr	r2, [pc, #1008]	@ (800b694 <mbedtls_internal_sha512_process+0x119c>)
 800b2a2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b2a6:	00db      	lsls	r3, r3, #3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f507 6196 	add.w	r1, r7, #1200	@ 0x4b0
 800b2b2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	1889      	adds	r1, r1, r2
 800b2ba:	f8c7 14a8 	str.w	r1, [r7, #1192]	@ 0x4a8
 800b2be:	4629      	mov	r1, r5
 800b2c0:	eb41 0303 	adc.w	r3, r1, r3
 800b2c4:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 800b2c8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800b2cc:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800b2d0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b2d4:	00db      	lsls	r3, r3, #3
 800b2d6:	4413      	add	r3, r2
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f507 6195 	add.w	r1, r7, #1192	@ 0x4a8
 800b2e0:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	1889      	adds	r1, r1, r2
 800b2e8:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	eb41 0303 	adc.w	r3, r1, r3
 800b2f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b2f6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800b2fa:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800b2fe:	e9c2 3400 	strd	r3, r4, [r2]
 800b302:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b306:	011a      	lsls	r2, r3, #4
 800b308:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b30c:	0f1b      	lsrs	r3, r3, #28
 800b30e:	4313      	orrs	r3, r2
 800b310:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 800b314:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b318:	011a      	lsls	r2, r3, #4
 800b31a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b31e:	0f1b      	lsrs	r3, r3, #28
 800b320:	4313      	orrs	r3, r2
 800b322:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 800b326:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b32a:	089a      	lsrs	r2, r3, #2
 800b32c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b330:	079b      	lsls	r3, r3, #30
 800b332:	4313      	orrs	r3, r2
 800b334:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 800b338:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b33c:	089a      	lsrs	r2, r3, #2
 800b33e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b342:	079b      	lsls	r3, r3, #30
 800b344:	4313      	orrs	r3, r2
 800b346:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 800b34a:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800b34e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b352:	4623      	mov	r3, r4
 800b354:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 800b358:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b35c:	4602      	mov	r2, r0
 800b35e:	4053      	eors	r3, r2
 800b360:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 800b364:	462b      	mov	r3, r5
 800b366:	460a      	mov	r2, r1
 800b368:	4053      	eors	r3, r2
 800b36a:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 800b36e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b372:	09da      	lsrs	r2, r3, #7
 800b374:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b378:	065b      	lsls	r3, r3, #25
 800b37a:	4313      	orrs	r3, r2
 800b37c:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 800b380:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b384:	09da      	lsrs	r2, r3, #7
 800b386:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b38a:	065b      	lsls	r3, r3, #25
 800b38c:	4313      	orrs	r3, r2
 800b38e:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 800b392:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800b396:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b39a:	4623      	mov	r3, r4
 800b39c:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 800b3a0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	4053      	eors	r3, r2
 800b3a8:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
 800b3ac:	462b      	mov	r3, r5
 800b3ae:	460a      	mov	r2, r1
 800b3b0:	4053      	eors	r3, r2
 800b3b2:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 800b3b6:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b3ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3be:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c6:	ea00 0402 	and.w	r4, r0, r2
 800b3ca:	f8c7 4478 	str.w	r4, [r7, #1144]	@ 0x478
 800b3ce:	400b      	ands	r3, r1
 800b3d0:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 800b3d4:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b3d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3dc:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	ea40 0402 	orr.w	r4, r0, r2
 800b3e8:	f8c7 4470 	str.w	r4, [r7, #1136]	@ 0x470
 800b3ec:	430b      	orrs	r3, r1
 800b3ee:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 800b3f2:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 800b3fe:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b402:	4621      	mov	r1, r4
 800b404:	4011      	ands	r1, r2
 800b406:	f8c7 1468 	str.w	r1, [r7, #1128]	@ 0x468
 800b40a:	4629      	mov	r1, r5
 800b40c:	400b      	ands	r3, r1
 800b40e:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 800b412:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800b416:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b41a:	4623      	mov	r3, r4
 800b41c:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 800b420:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b424:	4602      	mov	r2, r0
 800b426:	4313      	orrs	r3, r2
 800b428:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 800b42c:	462b      	mov	r3, r5
 800b42e:	460a      	mov	r2, r1
 800b430:	4313      	orrs	r3, r2
 800b432:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800b436:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800b43a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b43e:	4623      	mov	r3, r4
 800b440:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 800b444:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b448:	4602      	mov	r2, r0
 800b44a:	189b      	adds	r3, r3, r2
 800b44c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b450:	462b      	mov	r3, r5
 800b452:	460a      	mov	r2, r1
 800b454:	4153      	adcs	r3, r2
 800b456:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b45a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 800b45e:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800b462:	e9c2 3400 	strd	r3, r4, [r2]
 800b466:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800b46a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b46e:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b476:	1884      	adds	r4, r0, r2
 800b478:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 800b47c:	eb41 0303 	adc.w	r3, r1, r3
 800b480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b484:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 800b488:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 800b48c:	e9c2 3400 	strd	r3, r4, [r2]
 800b490:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b494:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b498:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	1884      	adds	r4, r0, r2
 800b4a2:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 800b4a6:	eb41 0303 	adc.w	r3, r1, r3
 800b4aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b4ae:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 800b4b2:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 800b4b6:	e9c2 3400 	strd	r3, r4, [r2]
 800b4ba:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b4be:	3301      	adds	r3, #1
 800b4c0:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 800b4c4:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b4c8:	049a      	lsls	r2, r3, #18
 800b4ca:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b4ce:	0b9b      	lsrs	r3, r3, #14
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 800b4d6:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b4da:	049a      	lsls	r2, r3, #18
 800b4dc:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b4e0:	0b9b      	lsrs	r3, r3, #14
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 800b4e8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b4ec:	039a      	lsls	r2, r3, #14
 800b4ee:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b4f2:	0c9b      	lsrs	r3, r3, #18
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 800b4fa:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b4fe:	039a      	lsls	r2, r3, #14
 800b500:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b504:	0c9b      	lsrs	r3, r3, #18
 800b506:	4313      	orrs	r3, r2
 800b508:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 800b50c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800b510:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b514:	4623      	mov	r3, r4
 800b516:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 800b51a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b51e:	4602      	mov	r2, r0
 800b520:	4053      	eors	r3, r2
 800b522:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 800b526:	462b      	mov	r3, r5
 800b528:	460a      	mov	r2, r1
 800b52a:	4053      	eors	r3, r2
 800b52c:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 800b530:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b534:	0a5a      	lsrs	r2, r3, #9
 800b536:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b53a:	05db      	lsls	r3, r3, #23
 800b53c:	4313      	orrs	r3, r2
 800b53e:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 800b542:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b546:	0a5a      	lsrs	r2, r3, #9
 800b548:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b54c:	05db      	lsls	r3, r3, #23
 800b54e:	4313      	orrs	r3, r2
 800b550:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 800b554:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800b558:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b55c:	4623      	mov	r3, r4
 800b55e:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 800b562:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b566:	4602      	mov	r2, r0
 800b568:	4053      	eors	r3, r2
 800b56a:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 800b56e:	462b      	mov	r3, r5
 800b570:	460a      	mov	r2, r1
 800b572:	4053      	eors	r3, r2
 800b574:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 800b578:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 800b584:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b588:	4621      	mov	r1, r4
 800b58a:	1889      	adds	r1, r1, r2
 800b58c:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 800b590:	4629      	mov	r1, r5
 800b592:	eb41 0303 	adc.w	r3, r1, r3
 800b596:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 800b59a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b59e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b5a2:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5aa:	ea80 0402 	eor.w	r4, r0, r2
 800b5ae:	f8c7 4428 	str.w	r4, [r7, #1064]	@ 0x428
 800b5b2:	404b      	eors	r3, r1
 800b5b4:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800b5b8:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 800b5c4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	4011      	ands	r1, r2
 800b5cc:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	400b      	ands	r3, r1
 800b5d4:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 800b5d8:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 800b5e4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b5e8:	4621      	mov	r1, r4
 800b5ea:	4051      	eors	r1, r2
 800b5ec:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 800b5f0:	4629      	mov	r1, r5
 800b5f2:	404b      	eors	r3, r1
 800b5f4:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800b5f8:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800b5fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b600:	4623      	mov	r3, r4
 800b602:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800b606:	e9d2 0100 	ldrd	r0, r1, [r2]
 800b60a:	4602      	mov	r2, r0
 800b60c:	189b      	adds	r3, r3, r2
 800b60e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 800b612:	462b      	mov	r3, r5
 800b614:	460a      	mov	r2, r1
 800b616:	4153      	adcs	r3, r2
 800b618:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800b61c:	4a1d      	ldr	r2, [pc, #116]	@ (800b694 <mbedtls_internal_sha512_process+0x119c>)
 800b61e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b622:	00db      	lsls	r3, r3, #3
 800b624:	4413      	add	r3, r2
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800b62e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b632:	4621      	mov	r1, r4
 800b634:	1889      	adds	r1, r1, r2
 800b636:	f8c7 1408 	str.w	r1, [r7, #1032]	@ 0x408
 800b63a:	4629      	mov	r1, r5
 800b63c:	eb41 0303 	adc.w	r3, r1, r3
 800b640:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800b644:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800b648:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800b64c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	4413      	add	r3, r2
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 800b65c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800b660:	4621      	mov	r1, r4
 800b662:	1889      	adds	r1, r1, r2
 800b664:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800b668:	4629      	mov	r1, r5
 800b66a:	eb41 0303 	adc.w	r3, r1, r3
 800b66e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b672:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 800b676:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800b67a:	e9c2 3400 	strd	r3, r4, [r2]
 800b67e:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b682:	011a      	lsls	r2, r3, #4
 800b684:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b688:	0f1b      	lsrs	r3, r3, #28
 800b68a:	4313      	orrs	r3, r2
 800b68c:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 800b690:	e002      	b.n	800b698 <mbedtls_internal_sha512_process+0x11a0>
 800b692:	bf00      	nop
 800b694:	080109f8 	.word	0x080109f8
 800b698:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b69c:	011a      	lsls	r2, r3, #4
 800b69e:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b6a2:	0f1b      	lsrs	r3, r3, #28
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 800b6aa:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b6ae:	089a      	lsrs	r2, r3, #2
 800b6b0:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b6b4:	079b      	lsls	r3, r3, #30
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 800b6bc:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b6c0:	089a      	lsrs	r2, r3, #2
 800b6c2:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b6c6:	079b      	lsls	r3, r3, #30
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 800b6ce:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800b6d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800b6dc:	4602      	mov	r2, r0
 800b6de:	4053      	eors	r3, r2
 800b6e0:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 800b6e4:	462b      	mov	r3, r5
 800b6e6:	460a      	mov	r2, r1
 800b6e8:	4053      	eors	r3, r2
 800b6ea:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 800b6ee:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b6f2:	09da      	lsrs	r2, r3, #7
 800b6f4:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b6f8:	065b      	lsls	r3, r3, #25
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800b700:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b704:	09da      	lsrs	r2, r3, #7
 800b706:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b70a:	065b      	lsls	r3, r3, #25
 800b70c:	4313      	orrs	r3, r2
 800b70e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
 800b712:	e9d7 45fc 	ldrd	r4, r5, [r7, #1008]	@ 0x3f0
 800b716:	4623      	mov	r3, r4
 800b718:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 800b71c:	4602      	mov	r2, r0
 800b71e:	4053      	eors	r3, r2
 800b720:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 800b724:	462b      	mov	r3, r5
 800b726:	460a      	mov	r2, r1
 800b728:	4053      	eors	r3, r2
 800b72a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 800b72e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b732:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b736:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	ea00 0402 	and.w	r4, r0, r2
 800b742:	f8c7 43d8 	str.w	r4, [r7, #984]	@ 0x3d8
 800b746:	400b      	ands	r3, r1
 800b748:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800b74c:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b750:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b754:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75c:	ea40 0402 	orr.w	r4, r0, r2
 800b760:	f8c7 43d0 	str.w	r4, [r7, #976]	@ 0x3d0
 800b764:	430b      	orrs	r3, r1
 800b766:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 800b76a:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 800b776:	4621      	mov	r1, r4
 800b778:	4011      	ands	r1, r2
 800b77a:	f8c7 13c8 	str.w	r1, [r7, #968]	@ 0x3c8
 800b77e:	4629      	mov	r1, r5
 800b780:	400b      	ands	r3, r1
 800b782:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800b786:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 800b78a:	4623      	mov	r3, r4
 800b78c:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	@ 0x3c8
 800b790:	4602      	mov	r2, r0
 800b792:	4313      	orrs	r3, r2
 800b794:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 800b798:	462b      	mov	r3, r5
 800b79a:	460a      	mov	r2, r1
 800b79c:	4313      	orrs	r3, r2
 800b79e:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800b7a2:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	@ 0x3e0
 800b7a6:	4623      	mov	r3, r4
 800b7a8:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	@ 0x3c0
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	189b      	adds	r3, r3, r2
 800b7b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b7b4:	462b      	mov	r3, r5
 800b7b6:	460a      	mov	r2, r1
 800b7b8:	4153      	adcs	r3, r2
 800b7ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b7be:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800b7c2:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800b7c6:	e9c2 3400 	strd	r3, r4, [r2]
 800b7ca:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b7ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7d2:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	1884      	adds	r4, r0, r2
 800b7dc:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800b7e0:	eb41 0303 	adc.w	r3, r1, r3
 800b7e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b7e8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800b7ec:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800b7f0:	e9c2 3400 	strd	r3, r4, [r2]
 800b7f4:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b7f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7fc:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	1884      	adds	r4, r0, r2
 800b806:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 800b80a:	eb41 0303 	adc.w	r3, r1, r3
 800b80e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b812:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800b816:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 800b81a:	e9c2 3400 	strd	r3, r4, [r2]
 800b81e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b822:	3301      	adds	r3, #1
 800b824:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 800b828:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800b82c:	049a      	lsls	r2, r3, #18
 800b82e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800b832:	0b9b      	lsrs	r3, r3, #14
 800b834:	4313      	orrs	r3, r2
 800b836:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 800b83a:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800b83e:	049a      	lsls	r2, r3, #18
 800b840:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800b844:	0b9b      	lsrs	r3, r3, #14
 800b846:	4313      	orrs	r3, r2
 800b848:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800b84c:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800b850:	039a      	lsls	r2, r3, #14
 800b852:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800b856:	0c9b      	lsrs	r3, r3, #18
 800b858:	4313      	orrs	r3, r2
 800b85a:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 800b85e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800b862:	039a      	lsls	r2, r3, #14
 800b864:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800b868:	0c9b      	lsrs	r3, r3, #18
 800b86a:	4313      	orrs	r3, r2
 800b86c:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 800b870:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 800b874:	4623      	mov	r3, r4
 800b876:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	@ 0x3b0
 800b87a:	4602      	mov	r2, r0
 800b87c:	4053      	eors	r3, r2
 800b87e:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 800b882:	462b      	mov	r3, r5
 800b884:	460a      	mov	r2, r1
 800b886:	4053      	eors	r3, r2
 800b888:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800b88c:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800b890:	0a5a      	lsrs	r2, r3, #9
 800b892:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800b896:	05db      	lsls	r3, r3, #23
 800b898:	4313      	orrs	r3, r2
 800b89a:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 800b89e:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800b8a2:	0a5a      	lsrs	r2, r3, #9
 800b8a4:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800b8a8:	05db      	lsls	r3, r3, #23
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 800b8b0:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800b8b4:	4623      	mov	r3, r4
 800b8b6:	e9d7 01e8 	ldrd	r0, r1, [r7, #928]	@ 0x3a0
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	4053      	eors	r3, r2
 800b8be:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 800b8c2:	462b      	mov	r3, r5
 800b8c4:	460a      	mov	r2, r1
 800b8c6:	4053      	eors	r3, r2
 800b8c8:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800b8cc:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 800b8d8:	4621      	mov	r1, r4
 800b8da:	1889      	adds	r1, r1, r2
 800b8dc:	f8c7 1390 	str.w	r1, [r7, #912]	@ 0x390
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	eb41 0303 	adc.w	r3, r1, r3
 800b8e6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 800b8ea:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800b8ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b8f2:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	ea80 0402 	eor.w	r4, r0, r2
 800b8fe:	f8c7 4388 	str.w	r4, [r7, #904]	@ 0x388
 800b902:	404b      	eors	r3, r1
 800b904:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 800b908:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 800b914:	4621      	mov	r1, r4
 800b916:	4011      	ands	r1, r2
 800b918:	f8c7 1380 	str.w	r1, [r7, #896]	@ 0x380
 800b91c:	4629      	mov	r1, r5
 800b91e:	400b      	ands	r3, r1
 800b920:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800b924:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 800b930:	4621      	mov	r1, r4
 800b932:	4051      	eors	r1, r2
 800b934:	f8c7 1378 	str.w	r1, [r7, #888]	@ 0x378
 800b938:	4629      	mov	r1, r5
 800b93a:	404b      	eors	r3, r1
 800b93c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800b940:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 800b944:	4623      	mov	r3, r4
 800b946:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	@ 0x378
 800b94a:	4602      	mov	r2, r0
 800b94c:	189b      	adds	r3, r3, r2
 800b94e:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 800b952:	462b      	mov	r3, r5
 800b954:	460a      	mov	r2, r1
 800b956:	4153      	adcs	r3, r2
 800b958:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 800b95c:	4af7      	ldr	r2, [pc, #988]	@ (800bd3c <mbedtls_internal_sha512_process+0x1844>)
 800b95e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	4413      	add	r3, r2
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	@ 0x370
 800b96e:	4621      	mov	r1, r4
 800b970:	1889      	adds	r1, r1, r2
 800b972:	f8c7 1368 	str.w	r1, [r7, #872]	@ 0x368
 800b976:	4629      	mov	r1, r5
 800b978:	eb41 0303 	adc.w	r3, r1, r3
 800b97c:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 800b980:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800b984:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800b988:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4413      	add	r3, r2
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 800b998:	4621      	mov	r1, r4
 800b99a:	1889      	adds	r1, r1, r2
 800b99c:	67b9      	str	r1, [r7, #120]	@ 0x78
 800b99e:	4629      	mov	r1, r5
 800b9a0:	eb41 0303 	adc.w	r3, r1, r3
 800b9a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b9a6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800b9aa:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800b9ae:	e9c2 3400 	strd	r3, r4, [r2]
 800b9b2:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b9b6:	011a      	lsls	r2, r3, #4
 800b9b8:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b9bc:	0f1b      	lsrs	r3, r3, #28
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 800b9c4:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b9c8:	011a      	lsls	r2, r3, #4
 800b9ca:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b9ce:	0f1b      	lsrs	r3, r3, #28
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800b9d6:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b9da:	089a      	lsrs	r2, r3, #2
 800b9dc:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b9e0:	079b      	lsls	r3, r3, #30
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 800b9e8:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b9ec:	089a      	lsrs	r2, r3, #2
 800b9ee:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b9f2:	079b      	lsls	r3, r3, #30
 800b9f4:	4313      	orrs	r3, r2
 800b9f6:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 800b9fa:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 800b9fe:	4623      	mov	r3, r4
 800ba00:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 800ba04:	4602      	mov	r2, r0
 800ba06:	4053      	eors	r3, r2
 800ba08:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	460a      	mov	r2, r1
 800ba10:	4053      	eors	r3, r2
 800ba12:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800ba16:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800ba1a:	09da      	lsrs	r2, r3, #7
 800ba1c:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800ba20:	065b      	lsls	r3, r3, #25
 800ba22:	4313      	orrs	r3, r2
 800ba24:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 800ba28:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800ba2c:	09da      	lsrs	r2, r3, #7
 800ba2e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800ba32:	065b      	lsls	r3, r3, #25
 800ba34:	4313      	orrs	r3, r2
 800ba36:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800ba3a:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 800ba3e:	4623      	mov	r3, r4
 800ba40:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 800ba44:	4602      	mov	r2, r0
 800ba46:	4053      	eors	r3, r2
 800ba48:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	460a      	mov	r2, r1
 800ba50:	4053      	eors	r3, r2
 800ba52:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800ba56:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800ba5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba5e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	ea00 0402 	and.w	r4, r0, r2
 800ba6a:	f8c7 4338 	str.w	r4, [r7, #824]	@ 0x338
 800ba6e:	400b      	ands	r3, r1
 800ba70:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800ba74:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800ba78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba7c:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	ea40 0402 	orr.w	r4, r0, r2
 800ba88:	f8c7 4330 	str.w	r4, [r7, #816]	@ 0x330
 800ba8c:	430b      	orrs	r3, r1
 800ba8e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800ba92:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4011      	ands	r1, r2
 800baa2:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 800baa6:	4629      	mov	r1, r5
 800baa8:	400b      	ands	r3, r1
 800baaa:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 800baae:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 800bab2:	4623      	mov	r3, r4
 800bab4:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 800bab8:	4602      	mov	r2, r0
 800baba:	4313      	orrs	r3, r2
 800babc:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 800bac0:	462b      	mov	r3, r5
 800bac2:	460a      	mov	r2, r1
 800bac4:	4313      	orrs	r3, r2
 800bac6:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800baca:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 800bace:	4623      	mov	r3, r4
 800bad0:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 800bad4:	4602      	mov	r2, r0
 800bad6:	189b      	adds	r3, r3, r2
 800bad8:	673b      	str	r3, [r7, #112]	@ 0x70
 800bada:	462b      	mov	r3, r5
 800badc:	460a      	mov	r2, r1
 800bade:	4153      	adcs	r3, r2
 800bae0:	677b      	str	r3, [r7, #116]	@ 0x74
 800bae2:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800bae6:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800baea:	e9c2 3400 	strd	r3, r4, [r2]
 800baee:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800baf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baf6:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800bafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafe:	1884      	adds	r4, r0, r2
 800bb00:	66bc      	str	r4, [r7, #104]	@ 0x68
 800bb02:	eb41 0303 	adc.w	r3, r1, r3
 800bb06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb08:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 800bb0c:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 800bb10:	e9c2 3400 	strd	r3, r4, [r2]
 800bb14:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800bb18:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bb1c:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800bb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb24:	1884      	adds	r4, r0, r2
 800bb26:	663c      	str	r4, [r7, #96]	@ 0x60
 800bb28:	eb41 0303 	adc.w	r3, r1, r3
 800bb2c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb2e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800bb32:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 800bb36:	e9c2 3400 	strd	r3, r4, [r2]
 800bb3a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800bb3e:	3301      	adds	r3, #1
 800bb40:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 800bb44:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800bb48:	049a      	lsls	r2, r3, #18
 800bb4a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800bb4e:	0b9b      	lsrs	r3, r3, #14
 800bb50:	4313      	orrs	r3, r2
 800bb52:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 800bb56:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800bb5a:	049a      	lsls	r2, r3, #18
 800bb5c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800bb60:	0b9b      	lsrs	r3, r3, #14
 800bb62:	4313      	orrs	r3, r2
 800bb64:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 800bb68:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800bb6c:	039a      	lsls	r2, r3, #14
 800bb6e:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800bb72:	0c9b      	lsrs	r3, r3, #18
 800bb74:	4313      	orrs	r3, r2
 800bb76:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 800bb7a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800bb7e:	039a      	lsls	r2, r3, #14
 800bb80:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800bb84:	0c9b      	lsrs	r3, r3, #18
 800bb86:	4313      	orrs	r3, r2
 800bb88:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 800bb8c:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 800bb90:	4623      	mov	r3, r4
 800bb92:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
 800bb96:	4602      	mov	r2, r0
 800bb98:	4053      	eors	r3, r2
 800bb9a:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 800bb9e:	462b      	mov	r3, r5
 800bba0:	460a      	mov	r2, r1
 800bba2:	4053      	eors	r3, r2
 800bba4:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 800bba8:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800bbac:	0a5a      	lsrs	r2, r3, #9
 800bbae:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800bbb2:	05db      	lsls	r3, r3, #23
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 800bbba:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800bbbe:	0a5a      	lsrs	r2, r3, #9
 800bbc0:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800bbc4:	05db      	lsls	r3, r3, #23
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 800bbcc:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	@ 0x308
 800bbd0:	4623      	mov	r3, r4
 800bbd2:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	4053      	eors	r3, r2
 800bbda:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800bbde:	462b      	mov	r3, r5
 800bbe0:	460a      	mov	r2, r1
 800bbe2:	4053      	eors	r3, r2
 800bbe4:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 800bbe8:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 800bbf4:	4621      	mov	r1, r4
 800bbf6:	1889      	adds	r1, r1, r2
 800bbf8:	f8c7 12f0 	str.w	r1, [r7, #752]	@ 0x2f0
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	eb41 0303 	adc.w	r3, r1, r3
 800bc02:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800bc06:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800bc0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc0e:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	ea80 0402 	eor.w	r4, r0, r2
 800bc1a:	f8c7 42e8 	str.w	r4, [r7, #744]	@ 0x2e8
 800bc1e:	404b      	eors	r3, r1
 800bc20:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800bc24:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800bc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2c:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 800bc30:	4621      	mov	r1, r4
 800bc32:	4011      	ands	r1, r2
 800bc34:	f8c7 12e0 	str.w	r1, [r7, #736]	@ 0x2e0
 800bc38:	4629      	mov	r1, r5
 800bc3a:	400b      	ands	r3, r1
 800bc3c:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800bc40:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800bc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc48:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4051      	eors	r1, r2
 800bc50:	f8c7 12d8 	str.w	r1, [r7, #728]	@ 0x2d8
 800bc54:	4629      	mov	r1, r5
 800bc56:	404b      	eors	r3, r1
 800bc58:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 800bc5c:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	@ 0x2f0
 800bc60:	4623      	mov	r3, r4
 800bc62:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 800bc66:	4602      	mov	r2, r0
 800bc68:	189b      	adds	r3, r3, r2
 800bc6a:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800bc6e:	462b      	mov	r3, r5
 800bc70:	460a      	mov	r2, r1
 800bc72:	4153      	adcs	r3, r2
 800bc74:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800bc78:	4a30      	ldr	r2, [pc, #192]	@ (800bd3c <mbedtls_internal_sha512_process+0x1844>)
 800bc7a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800bc7e:	00db      	lsls	r3, r3, #3
 800bc80:	4413      	add	r3, r2
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	1889      	adds	r1, r1, r2
 800bc8e:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 800bc92:	4629      	mov	r1, r5
 800bc94:	eb41 0303 	adc.w	r3, r1, r3
 800bc98:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 800bc9c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bca0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800bca4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800bca8:	00db      	lsls	r3, r3, #3
 800bcaa:	4413      	add	r3, r2
 800bcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb0:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	1889      	adds	r1, r1, r2
 800bcb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bcba:	4629      	mov	r1, r5
 800bcbc:	eb41 0303 	adc.w	r3, r1, r3
 800bcc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bcc2:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800bcc6:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800bcca:	e9c2 3400 	strd	r3, r4, [r2]
 800bcce:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800bcd2:	011a      	lsls	r2, r3, #4
 800bcd4:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800bcd8:	0f1b      	lsrs	r3, r3, #28
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800bce0:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800bce4:	011a      	lsls	r2, r3, #4
 800bce6:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800bcea:	0f1b      	lsrs	r3, r3, #28
 800bcec:	4313      	orrs	r3, r2
 800bcee:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 800bcf2:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800bcf6:	089a      	lsrs	r2, r3, #2
 800bcf8:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800bcfc:	079b      	lsls	r3, r3, #30
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800bd04:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800bd08:	089a      	lsrs	r2, r3, #2
 800bd0a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800bd0e:	079b      	lsls	r3, r3, #30
 800bd10:	4313      	orrs	r3, r2
 800bd12:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800bd16:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 800bd1a:	4623      	mov	r3, r4
 800bd1c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800bd20:	4602      	mov	r2, r0
 800bd22:	4053      	eors	r3, r2
 800bd24:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800bd28:	462b      	mov	r3, r5
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	4053      	eors	r3, r2
 800bd2e:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800bd32:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800bd36:	09da      	lsrs	r2, r3, #7
 800bd38:	e002      	b.n	800bd40 <mbedtls_internal_sha512_process+0x1848>
 800bd3a:	bf00      	nop
 800bd3c:	080109f8 	.word	0x080109f8
 800bd40:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800bd44:	065b      	lsls	r3, r3, #25
 800bd46:	4313      	orrs	r3, r2
 800bd48:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 800bd4c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800bd50:	09da      	lsrs	r2, r3, #7
 800bd52:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800bd56:	065b      	lsls	r3, r3, #25
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800bd5e:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 800bd62:	4623      	mov	r3, r4
 800bd64:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800bd68:	4602      	mov	r2, r0
 800bd6a:	4053      	eors	r3, r2
 800bd6c:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800bd70:	462b      	mov	r3, r5
 800bd72:	460a      	mov	r2, r1
 800bd74:	4053      	eors	r3, r2
 800bd76:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800bd7a:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800bd7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd82:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	ea00 0402 	and.w	r4, r0, r2
 800bd8e:	f8c7 4298 	str.w	r4, [r7, #664]	@ 0x298
 800bd92:	400b      	ands	r3, r1
 800bd94:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 800bd98:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800bd9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bda0:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	ea40 0402 	orr.w	r4, r0, r2
 800bdac:	f8c7 4290 	str.w	r4, [r7, #656]	@ 0x290
 800bdb0:	430b      	orrs	r3, r1
 800bdb2:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800bdb6:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800bdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdbe:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	4011      	ands	r1, r2
 800bdc6:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 800bdca:	4629      	mov	r1, r5
 800bdcc:	400b      	ands	r3, r1
 800bdce:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 800bdd2:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 800bdd6:	4623      	mov	r3, r4
 800bdd8:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 800bddc:	4602      	mov	r2, r0
 800bdde:	4313      	orrs	r3, r2
 800bde0:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800bde4:	462b      	mov	r3, r5
 800bde6:	460a      	mov	r2, r1
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800bdee:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 800bdf2:	4623      	mov	r3, r4
 800bdf4:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	189b      	adds	r3, r3, r2
 800bdfc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdfe:	462b      	mov	r3, r5
 800be00:	460a      	mov	r2, r1
 800be02:	4153      	adcs	r3, r2
 800be04:	657b      	str	r3, [r7, #84]	@ 0x54
 800be06:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800be0a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800be0e:	e9c2 3400 	strd	r3, r4, [r2]
 800be12:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800be16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be1a:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800be1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be22:	1884      	adds	r4, r0, r2
 800be24:	64bc      	str	r4, [r7, #72]	@ 0x48
 800be26:	eb41 0303 	adc.w	r3, r1, r3
 800be2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be2c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800be30:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 800be34:	e9c2 3400 	strd	r3, r4, [r2]
 800be38:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800be3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be40:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be48:	1884      	adds	r4, r0, r2
 800be4a:	643c      	str	r4, [r7, #64]	@ 0x40
 800be4c:	eb41 0303 	adc.w	r3, r1, r3
 800be50:	647b      	str	r3, [r7, #68]	@ 0x44
 800be52:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800be56:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 800be5a:	e9c2 3400 	strd	r3, r4, [r2]
 800be5e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800be62:	3301      	adds	r3, #1
 800be64:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 800be68:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800be6c:	049a      	lsls	r2, r3, #18
 800be6e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800be72:	0b9b      	lsrs	r3, r3, #14
 800be74:	4313      	orrs	r3, r2
 800be76:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 800be7a:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800be7e:	049a      	lsls	r2, r3, #18
 800be80:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800be84:	0b9b      	lsrs	r3, r3, #14
 800be86:	4313      	orrs	r3, r2
 800be88:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800be8c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800be90:	039a      	lsls	r2, r3, #14
 800be92:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800be96:	0c9b      	lsrs	r3, r3, #18
 800be98:	4313      	orrs	r3, r2
 800be9a:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800be9e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800bea2:	039a      	lsls	r2, r3, #14
 800bea4:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800bea8:	0c9b      	lsrs	r3, r3, #18
 800beaa:	4313      	orrs	r3, r2
 800beac:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 800beb0:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 800beb4:	4623      	mov	r3, r4
 800beb6:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800beba:	4602      	mov	r2, r0
 800bebc:	4053      	eors	r3, r2
 800bebe:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800bec2:	462b      	mov	r3, r5
 800bec4:	460a      	mov	r2, r1
 800bec6:	4053      	eors	r3, r2
 800bec8:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800becc:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800bed0:	0a5a      	lsrs	r2, r3, #9
 800bed2:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800bed6:	05db      	lsls	r3, r3, #23
 800bed8:	4313      	orrs	r3, r2
 800beda:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800bede:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800bee2:	0a5a      	lsrs	r2, r3, #9
 800bee4:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800bee8:	05db      	lsls	r3, r3, #23
 800beea:	4313      	orrs	r3, r2
 800beec:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 800bef0:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 800bef4:	4623      	mov	r3, r4
 800bef6:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800befa:	4602      	mov	r2, r0
 800befc:	4053      	eors	r3, r2
 800befe:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 800bf02:	462b      	mov	r3, r5
 800bf04:	460a      	mov	r2, r1
 800bf06:	4053      	eors	r3, r2
 800bf08:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800bf0c:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800bf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf14:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 800bf18:	4621      	mov	r1, r4
 800bf1a:	1889      	adds	r1, r1, r2
 800bf1c:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
 800bf20:	4629      	mov	r1, r5
 800bf22:	eb41 0303 	adc.w	r3, r1, r3
 800bf26:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800bf2a:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800bf2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf32:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	ea80 0402 	eor.w	r4, r0, r2
 800bf3e:	f8c7 4248 	str.w	r4, [r7, #584]	@ 0x248
 800bf42:	404b      	eors	r3, r1
 800bf44:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800bf48:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800bf4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf50:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 800bf54:	4621      	mov	r1, r4
 800bf56:	4011      	ands	r1, r2
 800bf58:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	400b      	ands	r3, r1
 800bf60:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800bf64:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 800bf70:	4621      	mov	r1, r4
 800bf72:	4051      	eors	r1, r2
 800bf74:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
 800bf78:	4629      	mov	r1, r5
 800bf7a:	404b      	eors	r3, r1
 800bf7c:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800bf80:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	@ 0x250
 800bf84:	4623      	mov	r3, r4
 800bf86:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	189b      	adds	r3, r3, r2
 800bf8e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 800bf92:	462b      	mov	r3, r5
 800bf94:	460a      	mov	r2, r1
 800bf96:	4153      	adcs	r3, r2
 800bf98:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800bf9c:	4af7      	ldr	r2, [pc, #988]	@ (800c37c <mbedtls_internal_sha512_process+0x1e84>)
 800bf9e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800bfa2:	00db      	lsls	r3, r3, #3
 800bfa4:	4413      	add	r3, r2
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	@ 0x230
 800bfae:	4621      	mov	r1, r4
 800bfb0:	1889      	adds	r1, r1, r2
 800bfb2:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	eb41 0303 	adc.w	r3, r1, r3
 800bfbc:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800bfc0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bfc4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800bfc8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800bfcc:	00db      	lsls	r3, r3, #3
 800bfce:	4413      	add	r3, r2
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 800bfd8:	4621      	mov	r1, r4
 800bfda:	1889      	adds	r1, r1, r2
 800bfdc:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bfde:	4629      	mov	r1, r5
 800bfe0:	eb41 0303 	adc.w	r3, r1, r3
 800bfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfe6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800bfea:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800bfee:	e9c2 3400 	strd	r3, r4, [r2]
 800bff2:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800bff6:	011a      	lsls	r2, r3, #4
 800bff8:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800bffc:	0f1b      	lsrs	r3, r3, #28
 800bffe:	4313      	orrs	r3, r2
 800c000:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 800c004:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800c008:	011a      	lsls	r2, r3, #4
 800c00a:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800c00e:	0f1b      	lsrs	r3, r3, #28
 800c010:	4313      	orrs	r3, r2
 800c012:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 800c016:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800c01a:	089a      	lsrs	r2, r3, #2
 800c01c:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800c020:	079b      	lsls	r3, r3, #30
 800c022:	4313      	orrs	r3, r2
 800c024:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800c028:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800c02c:	089a      	lsrs	r2, r3, #2
 800c02e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800c032:	079b      	lsls	r3, r3, #30
 800c034:	4313      	orrs	r3, r2
 800c036:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800c03a:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	@ 0x220
 800c03e:	4623      	mov	r3, r4
 800c040:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800c044:	4602      	mov	r2, r0
 800c046:	4053      	eors	r3, r2
 800c048:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800c04c:	462b      	mov	r3, r5
 800c04e:	460a      	mov	r2, r1
 800c050:	4053      	eors	r3, r2
 800c052:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800c056:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800c05a:	09da      	lsrs	r2, r3, #7
 800c05c:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800c060:	065b      	lsls	r3, r3, #25
 800c062:	4313      	orrs	r3, r2
 800c064:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 800c068:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800c06c:	09da      	lsrs	r2, r3, #7
 800c06e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800c072:	065b      	lsls	r3, r3, #25
 800c074:	4313      	orrs	r3, r2
 800c076:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800c07a:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 800c07e:	4623      	mov	r3, r4
 800c080:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 800c084:	4602      	mov	r2, r0
 800c086:	4053      	eors	r3, r2
 800c088:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800c08c:	462b      	mov	r3, r5
 800c08e:	460a      	mov	r2, r1
 800c090:	4053      	eors	r3, r2
 800c092:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800c096:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800c09a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c09e:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800c0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a6:	ea00 0402 	and.w	r4, r0, r2
 800c0aa:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 800c0ae:	400b      	ands	r3, r1
 800c0b0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 800c0b4:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800c0b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c0bc:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	ea40 0402 	orr.w	r4, r0, r2
 800c0c8:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 800c0cc:	430b      	orrs	r3, r1
 800c0ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800c0d2:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 800c0de:	4621      	mov	r1, r4
 800c0e0:	4011      	ands	r1, r2
 800c0e2:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	400b      	ands	r3, r1
 800c0ea:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800c0ee:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	@ 0x1f8
 800c0f2:	4623      	mov	r3, r4
 800c0f4:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800c100:	462b      	mov	r3, r5
 800c102:	460a      	mov	r2, r1
 800c104:	4313      	orrs	r3, r2
 800c106:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800c10a:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 800c10e:	4623      	mov	r3, r4
 800c110:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 800c114:	4602      	mov	r2, r0
 800c116:	189b      	adds	r3, r3, r2
 800c118:	633b      	str	r3, [r7, #48]	@ 0x30
 800c11a:	462b      	mov	r3, r5
 800c11c:	460a      	mov	r2, r1
 800c11e:	4153      	adcs	r3, r2
 800c120:	637b      	str	r3, [r7, #52]	@ 0x34
 800c122:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800c126:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800c12a:	e9c2 3400 	strd	r3, r4, [r2]
 800c12e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800c132:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c136:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800c13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c13e:	1884      	adds	r4, r0, r2
 800c140:	62bc      	str	r4, [r7, #40]	@ 0x28
 800c142:	eb41 0303 	adc.w	r3, r1, r3
 800c146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c148:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c14c:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 800c150:	e9c2 3400 	strd	r3, r4, [r2]
 800c154:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800c158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c15c:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	1884      	adds	r4, r0, r2
 800c166:	623c      	str	r4, [r7, #32]
 800c168:	eb41 0303 	adc.w	r3, r1, r3
 800c16c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c16e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c172:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 800c176:	e9c2 3400 	strd	r3, r4, [r2]
 800c17a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800c17e:	3301      	adds	r3, #1
 800c180:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 800c184:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800c188:	049a      	lsls	r2, r3, #18
 800c18a:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800c18e:	0b9b      	lsrs	r3, r3, #14
 800c190:	4313      	orrs	r3, r2
 800c192:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800c196:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800c19a:	049a      	lsls	r2, r3, #18
 800c19c:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800c1a0:	0b9b      	lsrs	r3, r3, #14
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800c1a8:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800c1ac:	039a      	lsls	r2, r3, #14
 800c1ae:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800c1b2:	0c9b      	lsrs	r3, r3, #18
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800c1ba:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800c1be:	039a      	lsls	r2, r3, #14
 800c1c0:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800c1c4:	0c9b      	lsrs	r3, r3, #18
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800c1cc:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 800c1d0:	4623      	mov	r3, r4
 800c1d2:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	4053      	eors	r3, r2
 800c1da:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800c1de:	462b      	mov	r3, r5
 800c1e0:	460a      	mov	r2, r1
 800c1e2:	4053      	eors	r3, r2
 800c1e4:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800c1e8:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800c1ec:	0a5a      	lsrs	r2, r3, #9
 800c1ee:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800c1f2:	05db      	lsls	r3, r3, #23
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800c1fa:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800c1fe:	0a5a      	lsrs	r2, r3, #9
 800c200:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800c204:	05db      	lsls	r3, r3, #23
 800c206:	4313      	orrs	r3, r2
 800c208:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800c20c:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 800c210:	4623      	mov	r3, r4
 800c212:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 800c216:	4602      	mov	r2, r0
 800c218:	4053      	eors	r3, r2
 800c21a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800c21e:	462b      	mov	r3, r5
 800c220:	460a      	mov	r2, r1
 800c222:	4053      	eors	r3, r2
 800c224:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800c228:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 800c234:	4621      	mov	r1, r4
 800c236:	1889      	adds	r1, r1, r2
 800c238:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 800c23c:	4629      	mov	r1, r5
 800c23e:	eb41 0303 	adc.w	r3, r1, r3
 800c242:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800c246:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800c24a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c24e:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800c252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c256:	ea80 0402 	eor.w	r4, r0, r2
 800c25a:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 800c25e:	404b      	eors	r3, r1
 800c260:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800c264:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800c270:	4621      	mov	r1, r4
 800c272:	4011      	ands	r1, r2
 800c274:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 800c278:	4629      	mov	r1, r5
 800c27a:	400b      	ands	r3, r1
 800c27c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800c280:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 800c28c:	4621      	mov	r1, r4
 800c28e:	4051      	eors	r1, r2
 800c290:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 800c294:	4629      	mov	r1, r5
 800c296:	404b      	eors	r3, r1
 800c298:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800c29c:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	@ 0x1b0
 800c2a0:	4623      	mov	r3, r4
 800c2a2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	189b      	adds	r3, r3, r2
 800c2aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800c2ae:	462b      	mov	r3, r5
 800c2b0:	460a      	mov	r2, r1
 800c2b2:	4153      	adcs	r3, r2
 800c2b4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800c2b8:	4a30      	ldr	r2, [pc, #192]	@ (800c37c <mbedtls_internal_sha512_process+0x1e84>)
 800c2ba:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800c2be:	00db      	lsls	r3, r3, #3
 800c2c0:	4413      	add	r3, r2
 800c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c6:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	1889      	adds	r1, r1, r2
 800c2ce:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 800c2d2:	4629      	mov	r1, r5
 800c2d4:	eb41 0303 	adc.w	r3, r1, r3
 800c2d8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800c2dc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c2e0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800c2e4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	4413      	add	r3, r2
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 800c2f4:	4621      	mov	r1, r4
 800c2f6:	1889      	adds	r1, r1, r2
 800c2f8:	61b9      	str	r1, [r7, #24]
 800c2fa:	4629      	mov	r1, r5
 800c2fc:	eb41 0303 	adc.w	r3, r1, r3
 800c300:	61fb      	str	r3, [r7, #28]
 800c302:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c306:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800c30a:	e9c2 3400 	strd	r3, r4, [r2]
 800c30e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800c312:	011a      	lsls	r2, r3, #4
 800c314:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800c318:	0f1b      	lsrs	r3, r3, #28
 800c31a:	4313      	orrs	r3, r2
 800c31c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800c320:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800c324:	011a      	lsls	r2, r3, #4
 800c326:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800c32a:	0f1b      	lsrs	r3, r3, #28
 800c32c:	4313      	orrs	r3, r2
 800c32e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800c332:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800c336:	089a      	lsrs	r2, r3, #2
 800c338:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800c33c:	079b      	lsls	r3, r3, #30
 800c33e:	4313      	orrs	r3, r2
 800c340:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800c344:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800c348:	089a      	lsrs	r2, r3, #2
 800c34a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800c34e:	079b      	lsls	r3, r3, #30
 800c350:	4313      	orrs	r3, r2
 800c352:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800c356:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	@ 0x180
 800c35a:	4623      	mov	r3, r4
 800c35c:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800c360:	4602      	mov	r2, r0
 800c362:	4053      	eors	r3, r2
 800c364:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800c368:	462b      	mov	r3, r5
 800c36a:	460a      	mov	r2, r1
 800c36c:	4053      	eors	r3, r2
 800c36e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800c372:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800c376:	09da      	lsrs	r2, r3, #7
 800c378:	e002      	b.n	800c380 <mbedtls_internal_sha512_process+0x1e88>
 800c37a:	bf00      	nop
 800c37c:	080109f8 	.word	0x080109f8
 800c380:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800c384:	065b      	lsls	r3, r3, #25
 800c386:	4313      	orrs	r3, r2
 800c388:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800c38c:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800c390:	09da      	lsrs	r2, r3, #7
 800c392:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800c396:	065b      	lsls	r3, r3, #25
 800c398:	4313      	orrs	r3, r2
 800c39a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800c39e:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800c3a2:	4623      	mov	r3, r4
 800c3a4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	4053      	eors	r3, r2
 800c3ac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800c3b0:	462b      	mov	r3, r5
 800c3b2:	460a      	mov	r2, r1
 800c3b4:	4053      	eors	r3, r2
 800c3b6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800c3ba:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800c3be:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3c2:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	ea00 0402 	and.w	r4, r0, r2
 800c3ce:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 800c3d2:	400b      	ands	r3, r1
 800c3d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800c3d8:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800c3dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c3e0:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e8:	ea40 0402 	orr.w	r4, r0, r2
 800c3ec:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 800c3f0:	430b      	orrs	r3, r1
 800c3f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800c3f6:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 800c402:	4621      	mov	r1, r4
 800c404:	4011      	ands	r1, r2
 800c406:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 800c40a:	4629      	mov	r1, r5
 800c40c:	400b      	ands	r3, r1
 800c40e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800c412:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800c416:	4623      	mov	r3, r4
 800c418:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800c41c:	4602      	mov	r2, r0
 800c41e:	4313      	orrs	r3, r2
 800c420:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800c424:	462b      	mov	r3, r5
 800c426:	460a      	mov	r2, r1
 800c428:	4313      	orrs	r3, r2
 800c42a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800c42e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800c432:	4623      	mov	r3, r4
 800c434:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800c438:	4602      	mov	r2, r0
 800c43a:	189b      	adds	r3, r3, r2
 800c43c:	613b      	str	r3, [r7, #16]
 800c43e:	462b      	mov	r3, r5
 800c440:	460a      	mov	r2, r1
 800c442:	4153      	adcs	r3, r2
 800c444:	617b      	str	r3, [r7, #20]
 800c446:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c44a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800c44e:	e9c2 3400 	strd	r3, r4, [r2]
 800c452:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800c456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c45a:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	1884      	adds	r4, r0, r2
 800c464:	60bc      	str	r4, [r7, #8]
 800c466:	eb41 0303 	adc.w	r3, r1, r3
 800c46a:	60fb      	str	r3, [r7, #12]
 800c46c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c470:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 800c474:	e9c2 3400 	strd	r3, r4, [r2]
 800c478:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800c47c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c480:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800c484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c488:	1884      	adds	r4, r0, r2
 800c48a:	603c      	str	r4, [r7, #0]
 800c48c:	eb41 0303 	adc.w	r3, r1, r3
 800c490:	607b      	str	r3, [r7, #4]
 800c492:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c496:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800c49a:	e9c2 3400 	strd	r3, r4, [r2]
 800c49e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
    }
    while( i < 80 );
 800c4a8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800c4ac:	2b4f      	cmp	r3, #79	@ 0x4f
 800c4ae:	f77e aacb 	ble.w	800aa48 <mbedtls_internal_sha512_process+0x550>

    ctx->state[0] += A;
 800c4b2:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c4b6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c4c0:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800c4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c8:	1884      	adds	r4, r0, r2
 800c4ca:	f8c7 4138 	str.w	r4, [r7, #312]	@ 0x138
 800c4ce:	eb41 0303 	adc.w	r3, r1, r3
 800c4d2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800c4d6:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c4da:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800c4e4:	e9c3 1204 	strd	r1, r2, [r3, #16]
    ctx->state[1] += B;
 800c4e8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c4ec:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c4f6:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800c4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fe:	1884      	adds	r4, r0, r2
 800c500:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 800c504:	eb41 0303 	adc.w	r3, r1, r3
 800c508:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800c50c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c510:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800c51a:	e9c3 1206 	strd	r1, r2, [r3, #24]
    ctx->state[2] += C;
 800c51e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c522:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c52c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800c530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c534:	1884      	adds	r4, r0, r2
 800c536:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 800c53a:	eb41 0303 	adc.w	r3, r1, r3
 800c53e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800c542:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c546:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800c550:	e9c3 1208 	strd	r1, r2, [r3, #32]
    ctx->state[3] += D;
 800c554:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c558:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c562:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	1884      	adds	r4, r0, r2
 800c56c:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 800c570:	eb41 0303 	adc.w	r3, r1, r3
 800c574:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800c578:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c57c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800c586:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
    ctx->state[4] += E;
 800c58a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c58e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c598:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800c59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a0:	1884      	adds	r4, r0, r2
 800c5a2:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 800c5a6:	eb41 0303 	adc.w	r3, r1, r3
 800c5aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800c5ae:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c5b2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800c5bc:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
    ctx->state[5] += F;
 800c5c0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c5c4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c5ce:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800c5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d6:	1884      	adds	r4, r0, r2
 800c5d8:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 800c5dc:	eb41 0303 	adc.w	r3, r1, r3
 800c5e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800c5e4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c5e8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800c5f2:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
    ctx->state[6] += G;
 800c5f6:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c5fa:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c604:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800c608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60c:	1884      	adds	r4, r0, r2
 800c60e:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 800c612:	eb41 0303 	adc.w	r3, r1, r3
 800c616:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800c61a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c61e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800c628:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
    ctx->state[7] += H;
 800c62c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c630:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c63a:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800c63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c642:	1884      	adds	r4, r0, r2
 800c644:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 800c648:	eb41 0303 	adc.w	r3, r1, r3
 800c64c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c650:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800c654:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800c65e:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48

    return( 0 );
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	f507 671e 	add.w	r7, r7, #2528	@ 0x9e0
 800c66a:	46bd      	mov	sp, r7
 800c66c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop

0800c674 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 800c674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c678:	b08a      	sub	sp, #40	@ 0x28
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6178      	str	r0, [r7, #20]
 800c67e:	6139      	str	r1, [r7, #16]
 800c680:	60fa      	str	r2, [r7, #12]
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <mbedtls_sha512_update_ret+0x18>
        return( 0 );
 800c688:	2300      	movs	r3, #0
 800c68a:	e079      	b.n	800c780 <mbedtls_sha512_update_ret+0x10c>

    left = (unsigned int) (ctx->total[0] & 0x7F);
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c692:	4613      	mov	r3, r2
 800c694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c698:	627b      	str	r3, [r7, #36]	@ 0x24
    fill = 128 - left;
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800c6a0:	623b      	str	r3, [r7, #32]

    ctx->total[0] += (uint64_t) ilen;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	68f9      	ldr	r1, [r7, #12]
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	4688      	mov	r8, r1
 800c6ae:	4681      	mov	r9, r0
 800c6b0:	eb12 0108 	adds.w	r1, r2, r8
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	eb43 0309 	adc.w	r3, r3, r9
 800c6ba:	607b      	str	r3, [r7, #4]
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c6c2:	e9c3 1200 	strd	r1, r2, [r3]

    if( ctx->total[0] < (uint64_t) ilen )
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	68f9      	ldr	r1, [r7, #12]
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	460c      	mov	r4, r1
 800c6d2:	4605      	mov	r5, r0
 800c6d4:	42a2      	cmp	r2, r4
 800c6d6:	41ab      	sbcs	r3, r5
 800c6d8:	d209      	bcs.n	800c6ee <mbedtls_sha512_update_ret+0x7a>
        ctx->total[1]++;
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c6e0:	f112 0a01 	adds.w	sl, r2, #1
 800c6e4:	f143 0b00 	adc.w	fp, r3, #0
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	e9c3 ab02 	strd	sl, fp, [r3, #8]

    if( left && ilen >= fill )
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d034      	beq.n	800c75e <mbedtls_sha512_update_ret+0xea>
 800c6f4:	68fa      	ldr	r2, [r7, #12]
 800c6f6:	6a3b      	ldr	r3, [r7, #32]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d330      	bcc.n	800c75e <mbedtls_sha512_update_ret+0xea>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800c6fc:	697b      	ldr	r3, [r7, #20]
 800c6fe:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800c702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c704:	4413      	add	r3, r2
 800c706:	6a3a      	ldr	r2, [r7, #32]
 800c708:	6939      	ldr	r1, [r7, #16]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f001 f851 	bl	800d7b2 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	3350      	adds	r3, #80	@ 0x50
 800c714:	4619      	mov	r1, r3
 800c716:	6978      	ldr	r0, [r7, #20]
 800c718:	f7fd feee 	bl	800a4f8 <mbedtls_internal_sha512_process>
 800c71c:	61f8      	str	r0, [r7, #28]
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <mbedtls_sha512_update_ret+0xb4>
            return( ret );
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	e02b      	b.n	800c780 <mbedtls_sha512_update_ret+0x10c>

        input += fill;
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	6a3b      	ldr	r3, [r7, #32]
 800c72c:	4413      	add	r3, r2
 800c72e:	613b      	str	r3, [r7, #16]
        ilen  -= fill;
 800c730:	68fa      	ldr	r2, [r7, #12]
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	60fb      	str	r3, [r7, #12]
        left = 0;
 800c738:	2300      	movs	r3, #0
 800c73a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    while( ilen >= 128 )
 800c73c:	e00f      	b.n	800c75e <mbedtls_sha512_update_ret+0xea>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 800c73e:	6939      	ldr	r1, [r7, #16]
 800c740:	6978      	ldr	r0, [r7, #20]
 800c742:	f7fd fed9 	bl	800a4f8 <mbedtls_internal_sha512_process>
 800c746:	61f8      	str	r0, [r7, #28]
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <mbedtls_sha512_update_ret+0xde>
            return( ret );
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	e016      	b.n	800c780 <mbedtls_sha512_update_ret+0x10c>

        input += 128;
 800c752:	693b      	ldr	r3, [r7, #16]
 800c754:	3380      	adds	r3, #128	@ 0x80
 800c756:	613b      	str	r3, [r7, #16]
        ilen  -= 128;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3b80      	subs	r3, #128	@ 0x80
 800c75c:	60fb      	str	r3, [r7, #12]
    while( ilen >= 128 )
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b7f      	cmp	r3, #127	@ 0x7f
 800c762:	d8ec      	bhi.n	800c73e <mbedtls_sha512_update_ret+0xca>
    }

    if( ilen > 0 )
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d009      	beq.n	800c77e <mbedtls_sha512_update_ret+0x10a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	4413      	add	r3, r2
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	6939      	ldr	r1, [r7, #16]
 800c778:	4618      	mov	r0, r3
 800c77a:	f001 f81a 	bl	800d7b2 <memcpy>

    return( 0 );
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3728      	adds	r7, #40	@ 0x28
 800c784:	46bd      	mov	sp, r7
 800c786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c78a <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 800c78a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c78e:	b088      	sub	sp, #32
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	4613      	mov	r3, r2
 800c79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7a2:	61fb      	str	r3, [r7, #28]

    ctx->buffer[used++] = 0x80;
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	61fa      	str	r2, [r7, #28]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	2280      	movs	r2, #128	@ 0x80
 800c7b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    if( used <= 112 )
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	2b70      	cmp	r3, #112	@ 0x70
 800c7b8:	d80c      	bhi.n	800c7d4 <mbedtls_sha512_finish_ret+0x4a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	18d0      	adds	r0, r2, r3
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	f1c3 0370 	rsb	r3, r3, #112	@ 0x70
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	f000 ff65 	bl	800d69c <memset>
 800c7d2:	e01f      	b.n	800c814 <mbedtls_sha512_finish_ret+0x8a>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	18d0      	adds	r0, r2, r3
 800c7de:	69fb      	ldr	r3, [r7, #28]
 800c7e0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	f000 ff58 	bl	800d69c <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	3350      	adds	r3, #80	@ 0x50
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f7fd fe80 	bl	800a4f8 <mbedtls_internal_sha512_process>
 800c7f8:	61b8      	str	r0, [r7, #24]
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <mbedtls_sha512_finish_ret+0x7c>
            return( ret );
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	f000 bc3c 	b.w	800d07e <mbedtls_sha512_finish_ret+0x8f4>

        memset( ctx->buffer, 0, 112 );
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3350      	adds	r3, #80	@ 0x50
 800c80a:	2270      	movs	r2, #112	@ 0x70
 800c80c:	2100      	movs	r1, #0
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 ff44 	bl	800d69c <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	f04f 0000 	mov.w	r0, #0
 800c81e:	f04f 0100 	mov.w	r1, #0
 800c822:	0f58      	lsrs	r0, r3, #29
 800c824:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800c82c:	f04f 0200 	mov.w	r2, #0
 800c830:	f04f 0300 	mov.w	r3, #0
 800c834:	00eb      	lsls	r3, r5, #3
 800c836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c83a:	00e2      	lsls	r2, r4, #3
    high = ( ctx->total[0] >> 61 )
 800c83c:	ea40 0802 	orr.w	r8, r0, r2
 800c840:	ea41 0903 	orr.w	r9, r1, r3
 800c844:	e9c7 8904 	strd	r8, r9, [r7, #16]
    low  = ( ctx->total[0] <<  3 );
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c84e:	f04f 0200 	mov.w	r2, #0
 800c852:	f04f 0300 	mov.w	r3, #0
 800c856:	00cb      	lsls	r3, r1, #3
 800c858:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800c85c:	00c2      	lsls	r2, r0, #3
 800c85e:	e9c7 2302 	strd	r2, r3, [r7, #8]

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800c862:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c866:	f04f 0200 	mov.w	r2, #0
 800c86a:	f04f 0300 	mov.w	r3, #0
 800c86e:	0e0a      	lsrs	r2, r1, #24
 800c870:	2300      	movs	r3, #0
 800c872:	b2d2      	uxtb	r2, r2
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 800c87a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c87e:	f04f 0200 	mov.w	r2, #0
 800c882:	f04f 0300 	mov.w	r3, #0
 800c886:	0c0a      	lsrs	r2, r1, #16
 800c888:	2300      	movs	r3, #0
 800c88a:	b2d2      	uxtb	r2, r2
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
 800c892:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c896:	f04f 0200 	mov.w	r2, #0
 800c89a:	f04f 0300 	mov.w	r3, #0
 800c89e:	0a0a      	lsrs	r2, r1, #8
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	b2d2      	uxtb	r2, r2
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
 800c8aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8ae:	f04f 0200 	mov.w	r2, #0
 800c8b2:	f04f 0300 	mov.w	r3, #0
 800c8b6:	000a      	movs	r2, r1
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	b2d2      	uxtb	r2, r2
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
 800c8c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8c6:	f04f 0200 	mov.w	r2, #0
 800c8ca:	f04f 0300 	mov.w	r3, #0
 800c8ce:	0e02      	lsrs	r2, r0, #24
 800c8d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c8d4:	0e0b      	lsrs	r3, r1, #24
 800c8d6:	b2d2      	uxtb	r2, r2
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
 800c8de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	f04f 0300 	mov.w	r3, #0
 800c8ea:	0c02      	lsrs	r2, r0, #16
 800c8ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c8f0:	0c0b      	lsrs	r3, r1, #16
 800c8f2:	b2d2      	uxtb	r2, r2
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
 800c8fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	f04f 0300 	mov.w	r3, #0
 800c906:	0a02      	lsrs	r2, r0, #8
 800c908:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c90c:	0a0b      	lsrs	r3, r1, #8
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
 800c916:	7c3a      	ldrb	r2, [r7, #16]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 800c91e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c922:	f04f 0200 	mov.w	r2, #0
 800c926:	f04f 0300 	mov.w	r3, #0
 800c92a:	0e0a      	lsrs	r2, r1, #24
 800c92c:	2300      	movs	r3, #0
 800c92e:	b2d2      	uxtb	r2, r2
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800c936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c93a:	f04f 0200 	mov.w	r2, #0
 800c93e:	f04f 0300 	mov.w	r3, #0
 800c942:	0c0a      	lsrs	r2, r1, #16
 800c944:	2300      	movs	r3, #0
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800c94e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c952:	f04f 0200 	mov.w	r2, #0
 800c956:	f04f 0300 	mov.w	r3, #0
 800c95a:	0a0a      	lsrs	r2, r1, #8
 800c95c:	2300      	movs	r3, #0
 800c95e:	b2d2      	uxtb	r2, r2
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800c966:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c96a:	f04f 0200 	mov.w	r2, #0
 800c96e:	f04f 0300 	mov.w	r3, #0
 800c972:	000a      	movs	r2, r1
 800c974:	2300      	movs	r3, #0
 800c976:	b2d2      	uxtb	r2, r2
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
 800c97e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c982:	f04f 0200 	mov.w	r2, #0
 800c986:	f04f 0300 	mov.w	r3, #0
 800c98a:	0e02      	lsrs	r2, r0, #24
 800c98c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c990:	0e0b      	lsrs	r3, r1, #24
 800c992:	b2d2      	uxtb	r2, r2
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 800c99a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c99e:	f04f 0200 	mov.w	r2, #0
 800c9a2:	f04f 0300 	mov.w	r3, #0
 800c9a6:	0c02      	lsrs	r2, r0, #16
 800c9a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c9ac:	0c0b      	lsrs	r3, r1, #16
 800c9ae:	b2d2      	uxtb	r2, r2
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
 800c9b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9ba:	f04f 0200 	mov.w	r2, #0
 800c9be:	f04f 0300 	mov.w	r3, #0
 800c9c2:	0a02      	lsrs	r2, r0, #8
 800c9c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c9c8:	0a0b      	lsrs	r3, r1, #8
 800c9ca:	b2d2      	uxtb	r2, r2
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 800c9d2:	7a3a      	ldrb	r2, [r7, #8]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	3350      	adds	r3, #80	@ 0x50
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7fd fd89 	bl	800a4f8 <mbedtls_internal_sha512_process>
 800c9e6:	61b8      	str	r0, [r7, #24]
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <mbedtls_sha512_finish_ret+0x268>
        return( ret );
 800c9ee:	69bb      	ldr	r3, [r7, #24]
 800c9f0:	e345      	b.n	800d07e <mbedtls_sha512_finish_ret+0x8f4>

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c9f8:	f04f 0200 	mov.w	r2, #0
 800c9fc:	f04f 0300 	mov.w	r3, #0
 800ca00:	0e0a      	lsrs	r2, r1, #24
 800ca02:	2300      	movs	r3, #0
 800ca04:	b2d2      	uxtb	r2, r2
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca10:	f04f 0200 	mov.w	r2, #0
 800ca14:	f04f 0300 	mov.w	r3, #0
 800ca18:	0c0a      	lsrs	r2, r1, #16
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	3101      	adds	r1, #1
 800ca20:	b2d3      	uxtb	r3, r2
 800ca22:	700b      	strb	r3, [r1, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca2a:	f04f 0200 	mov.w	r2, #0
 800ca2e:	f04f 0300 	mov.w	r3, #0
 800ca32:	0a0a      	lsrs	r2, r1, #8
 800ca34:	2300      	movs	r3, #0
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	3102      	adds	r1, #2
 800ca3a:	b2d3      	uxtb	r3, r2
 800ca3c:	700b      	strb	r3, [r1, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca44:	f04f 0200 	mov.w	r2, #0
 800ca48:	f04f 0300 	mov.w	r3, #0
 800ca4c:	000a      	movs	r2, r1
 800ca4e:	2300      	movs	r3, #0
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	3103      	adds	r1, #3
 800ca54:	b2d3      	uxtb	r3, r2
 800ca56:	700b      	strb	r3, [r1, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca5e:	f04f 0200 	mov.w	r2, #0
 800ca62:	f04f 0300 	mov.w	r3, #0
 800ca66:	0e02      	lsrs	r2, r0, #24
 800ca68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ca6c:	0e0b      	lsrs	r3, r1, #24
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	3104      	adds	r1, #4
 800ca72:	b2d3      	uxtb	r3, r2
 800ca74:	700b      	strb	r3, [r1, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca7c:	f04f 0200 	mov.w	r2, #0
 800ca80:	f04f 0300 	mov.w	r3, #0
 800ca84:	0c02      	lsrs	r2, r0, #16
 800ca86:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ca8a:	0c0b      	lsrs	r3, r1, #16
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	3105      	adds	r1, #5
 800ca90:	b2d3      	uxtb	r3, r2
 800ca92:	700b      	strb	r3, [r1, #0]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ca9a:	f04f 0200 	mov.w	r2, #0
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	0a02      	lsrs	r2, r0, #8
 800caa4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800caa8:	0a0b      	lsrs	r3, r1, #8
 800caaa:	6839      	ldr	r1, [r7, #0]
 800caac:	3106      	adds	r1, #6
 800caae:	b2d3      	uxtb	r3, r2
 800cab0:	700b      	strb	r3, [r1, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	3107      	adds	r1, #7
 800cabc:	b2d3      	uxtb	r3, r2
 800cabe:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cac6:	f04f 0200 	mov.w	r2, #0
 800caca:	f04f 0300 	mov.w	r3, #0
 800cace:	0e0a      	lsrs	r2, r1, #24
 800cad0:	2300      	movs	r3, #0
 800cad2:	6839      	ldr	r1, [r7, #0]
 800cad4:	3108      	adds	r1, #8
 800cad6:	b2d3      	uxtb	r3, r2
 800cad8:	700b      	strb	r3, [r1, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cae0:	f04f 0200 	mov.w	r2, #0
 800cae4:	f04f 0300 	mov.w	r3, #0
 800cae8:	0c0a      	lsrs	r2, r1, #16
 800caea:	2300      	movs	r3, #0
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	3109      	adds	r1, #9
 800caf0:	b2d3      	uxtb	r3, r2
 800caf2:	700b      	strb	r3, [r1, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cafa:	f04f 0200 	mov.w	r2, #0
 800cafe:	f04f 0300 	mov.w	r3, #0
 800cb02:	0a0a      	lsrs	r2, r1, #8
 800cb04:	2300      	movs	r3, #0
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	310a      	adds	r1, #10
 800cb0a:	b2d3      	uxtb	r3, r2
 800cb0c:	700b      	strb	r3, [r1, #0]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cb14:	f04f 0200 	mov.w	r2, #0
 800cb18:	f04f 0300 	mov.w	r3, #0
 800cb1c:	000a      	movs	r2, r1
 800cb1e:	2300      	movs	r3, #0
 800cb20:	6839      	ldr	r1, [r7, #0]
 800cb22:	310b      	adds	r1, #11
 800cb24:	b2d3      	uxtb	r3, r2
 800cb26:	700b      	strb	r3, [r1, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cb2e:	f04f 0200 	mov.w	r2, #0
 800cb32:	f04f 0300 	mov.w	r3, #0
 800cb36:	0e02      	lsrs	r2, r0, #24
 800cb38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cb3c:	0e0b      	lsrs	r3, r1, #24
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	310c      	adds	r1, #12
 800cb42:	b2d3      	uxtb	r3, r2
 800cb44:	700b      	strb	r3, [r1, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cb4c:	f04f 0200 	mov.w	r2, #0
 800cb50:	f04f 0300 	mov.w	r3, #0
 800cb54:	0c02      	lsrs	r2, r0, #16
 800cb56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cb5a:	0c0b      	lsrs	r3, r1, #16
 800cb5c:	6839      	ldr	r1, [r7, #0]
 800cb5e:	310d      	adds	r1, #13
 800cb60:	b2d3      	uxtb	r3, r2
 800cb62:	700b      	strb	r3, [r1, #0]
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800cb6a:	f04f 0200 	mov.w	r2, #0
 800cb6e:	f04f 0300 	mov.w	r3, #0
 800cb72:	0a02      	lsrs	r2, r0, #8
 800cb74:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cb78:	0a0b      	lsrs	r3, r1, #8
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	310e      	adds	r1, #14
 800cb7e:	b2d3      	uxtb	r3, r2
 800cb80:	700b      	strb	r3, [r1, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800cb88:	6839      	ldr	r1, [r7, #0]
 800cb8a:	310f      	adds	r1, #15
 800cb8c:	b2d3      	uxtb	r3, r2
 800cb8e:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cb96:	f04f 0200 	mov.w	r2, #0
 800cb9a:	f04f 0300 	mov.w	r3, #0
 800cb9e:	0e0a      	lsrs	r2, r1, #24
 800cba0:	2300      	movs	r3, #0
 800cba2:	6839      	ldr	r1, [r7, #0]
 800cba4:	3110      	adds	r1, #16
 800cba6:	b2d3      	uxtb	r3, r2
 800cba8:	700b      	strb	r3, [r1, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	f04f 0300 	mov.w	r3, #0
 800cbb8:	0c0a      	lsrs	r2, r1, #16
 800cbba:	2300      	movs	r3, #0
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	3111      	adds	r1, #17
 800cbc0:	b2d3      	uxtb	r3, r2
 800cbc2:	700b      	strb	r3, [r1, #0]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cbca:	f04f 0200 	mov.w	r2, #0
 800cbce:	f04f 0300 	mov.w	r3, #0
 800cbd2:	0a0a      	lsrs	r2, r1, #8
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	3112      	adds	r1, #18
 800cbda:	b2d3      	uxtb	r3, r2
 800cbdc:	700b      	strb	r3, [r1, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	f04f 0300 	mov.w	r3, #0
 800cbec:	000a      	movs	r2, r1
 800cbee:	2300      	movs	r3, #0
 800cbf0:	6839      	ldr	r1, [r7, #0]
 800cbf2:	3113      	adds	r1, #19
 800cbf4:	b2d3      	uxtb	r3, r2
 800cbf6:	700b      	strb	r3, [r1, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cbfe:	f04f 0200 	mov.w	r2, #0
 800cc02:	f04f 0300 	mov.w	r3, #0
 800cc06:	0e02      	lsrs	r2, r0, #24
 800cc08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cc0c:	0e0b      	lsrs	r3, r1, #24
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	3114      	adds	r1, #20
 800cc12:	b2d3      	uxtb	r3, r2
 800cc14:	700b      	strb	r3, [r1, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cc1c:	f04f 0200 	mov.w	r2, #0
 800cc20:	f04f 0300 	mov.w	r3, #0
 800cc24:	0c02      	lsrs	r2, r0, #16
 800cc26:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cc2a:	0c0b      	lsrs	r3, r1, #16
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	3115      	adds	r1, #21
 800cc30:	b2d3      	uxtb	r3, r2
 800cc32:	700b      	strb	r3, [r1, #0]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800cc3a:	f04f 0200 	mov.w	r2, #0
 800cc3e:	f04f 0300 	mov.w	r3, #0
 800cc42:	0a02      	lsrs	r2, r0, #8
 800cc44:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cc48:	0a0b      	lsrs	r3, r1, #8
 800cc4a:	6839      	ldr	r1, [r7, #0]
 800cc4c:	3116      	adds	r1, #22
 800cc4e:	b2d3      	uxtb	r3, r2
 800cc50:	700b      	strb	r3, [r1, #0]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cc58:	6839      	ldr	r1, [r7, #0]
 800cc5a:	3117      	adds	r1, #23
 800cc5c:	b2d3      	uxtb	r3, r2
 800cc5e:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800cc66:	f04f 0200 	mov.w	r2, #0
 800cc6a:	f04f 0300 	mov.w	r3, #0
 800cc6e:	0e0a      	lsrs	r2, r1, #24
 800cc70:	2300      	movs	r3, #0
 800cc72:	6839      	ldr	r1, [r7, #0]
 800cc74:	3118      	adds	r1, #24
 800cc76:	b2d3      	uxtb	r3, r2
 800cc78:	700b      	strb	r3, [r1, #0]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800cc80:	f04f 0200 	mov.w	r2, #0
 800cc84:	f04f 0300 	mov.w	r3, #0
 800cc88:	0c0a      	lsrs	r2, r1, #16
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	3119      	adds	r1, #25
 800cc90:	b2d3      	uxtb	r3, r2
 800cc92:	700b      	strb	r3, [r1, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800cc9a:	f04f 0200 	mov.w	r2, #0
 800cc9e:	f04f 0300 	mov.w	r3, #0
 800cca2:	0a0a      	lsrs	r2, r1, #8
 800cca4:	2300      	movs	r3, #0
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	311a      	adds	r1, #26
 800ccaa:	b2d3      	uxtb	r3, r2
 800ccac:	700b      	strb	r3, [r1, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800ccb4:	f04f 0200 	mov.w	r2, #0
 800ccb8:	f04f 0300 	mov.w	r3, #0
 800ccbc:	000a      	movs	r2, r1
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	6839      	ldr	r1, [r7, #0]
 800ccc2:	311b      	adds	r1, #27
 800ccc4:	b2d3      	uxtb	r3, r2
 800ccc6:	700b      	strb	r3, [r1, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800ccce:	f04f 0200 	mov.w	r2, #0
 800ccd2:	f04f 0300 	mov.w	r3, #0
 800ccd6:	0e02      	lsrs	r2, r0, #24
 800ccd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ccdc:	0e0b      	lsrs	r3, r1, #24
 800ccde:	6839      	ldr	r1, [r7, #0]
 800cce0:	311c      	adds	r1, #28
 800cce2:	b2d3      	uxtb	r3, r2
 800cce4:	700b      	strb	r3, [r1, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800ccec:	f04f 0200 	mov.w	r2, #0
 800ccf0:	f04f 0300 	mov.w	r3, #0
 800ccf4:	0c02      	lsrs	r2, r0, #16
 800ccf6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ccfa:	0c0b      	lsrs	r3, r1, #16
 800ccfc:	6839      	ldr	r1, [r7, #0]
 800ccfe:	311d      	adds	r1, #29
 800cd00:	b2d3      	uxtb	r3, r2
 800cd02:	700b      	strb	r3, [r1, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800cd0a:	f04f 0200 	mov.w	r2, #0
 800cd0e:	f04f 0300 	mov.w	r3, #0
 800cd12:	0a02      	lsrs	r2, r0, #8
 800cd14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cd18:	0a0b      	lsrs	r3, r1, #8
 800cd1a:	6839      	ldr	r1, [r7, #0]
 800cd1c:	311e      	adds	r1, #30
 800cd1e:	b2d3      	uxtb	r3, r2
 800cd20:	700b      	strb	r3, [r1, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800cd28:	6839      	ldr	r1, [r7, #0]
 800cd2a:	311f      	adds	r1, #31
 800cd2c:	b2d3      	uxtb	r3, r2
 800cd2e:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cd36:	f04f 0200 	mov.w	r2, #0
 800cd3a:	f04f 0300 	mov.w	r3, #0
 800cd3e:	0e0a      	lsrs	r2, r1, #24
 800cd40:	2300      	movs	r3, #0
 800cd42:	6839      	ldr	r1, [r7, #0]
 800cd44:	3120      	adds	r1, #32
 800cd46:	b2d3      	uxtb	r3, r2
 800cd48:	700b      	strb	r3, [r1, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cd50:	f04f 0200 	mov.w	r2, #0
 800cd54:	f04f 0300 	mov.w	r3, #0
 800cd58:	0c0a      	lsrs	r2, r1, #16
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	6839      	ldr	r1, [r7, #0]
 800cd5e:	3121      	adds	r1, #33	@ 0x21
 800cd60:	b2d3      	uxtb	r3, r2
 800cd62:	700b      	strb	r3, [r1, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cd6a:	f04f 0200 	mov.w	r2, #0
 800cd6e:	f04f 0300 	mov.w	r3, #0
 800cd72:	0a0a      	lsrs	r2, r1, #8
 800cd74:	2300      	movs	r3, #0
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	3122      	adds	r1, #34	@ 0x22
 800cd7a:	b2d3      	uxtb	r3, r2
 800cd7c:	700b      	strb	r3, [r1, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cd84:	f04f 0200 	mov.w	r2, #0
 800cd88:	f04f 0300 	mov.w	r3, #0
 800cd8c:	000a      	movs	r2, r1
 800cd8e:	2300      	movs	r3, #0
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	3123      	adds	r1, #35	@ 0x23
 800cd94:	b2d3      	uxtb	r3, r2
 800cd96:	700b      	strb	r3, [r1, #0]
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cd9e:	f04f 0200 	mov.w	r2, #0
 800cda2:	f04f 0300 	mov.w	r3, #0
 800cda6:	0e02      	lsrs	r2, r0, #24
 800cda8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cdac:	0e0b      	lsrs	r3, r1, #24
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	3124      	adds	r1, #36	@ 0x24
 800cdb2:	b2d3      	uxtb	r3, r2
 800cdb4:	700b      	strb	r3, [r1, #0]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cdbc:	f04f 0200 	mov.w	r2, #0
 800cdc0:	f04f 0300 	mov.w	r3, #0
 800cdc4:	0c02      	lsrs	r2, r0, #16
 800cdc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cdca:	0c0b      	lsrs	r3, r1, #16
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	3125      	adds	r1, #37	@ 0x25
 800cdd0:	b2d3      	uxtb	r3, r2
 800cdd2:	700b      	strb	r3, [r1, #0]
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800cdda:	f04f 0200 	mov.w	r2, #0
 800cdde:	f04f 0300 	mov.w	r3, #0
 800cde2:	0a02      	lsrs	r2, r0, #8
 800cde4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cde8:	0a0b      	lsrs	r3, r1, #8
 800cdea:	6839      	ldr	r1, [r7, #0]
 800cdec:	3126      	adds	r1, #38	@ 0x26
 800cdee:	b2d3      	uxtb	r3, r2
 800cdf0:	700b      	strb	r3, [r1, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	3127      	adds	r1, #39	@ 0x27
 800cdfc:	b2d3      	uxtb	r3, r2
 800cdfe:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ce06:	f04f 0200 	mov.w	r2, #0
 800ce0a:	f04f 0300 	mov.w	r3, #0
 800ce0e:	0e0a      	lsrs	r2, r1, #24
 800ce10:	2300      	movs	r3, #0
 800ce12:	6839      	ldr	r1, [r7, #0]
 800ce14:	3128      	adds	r1, #40	@ 0x28
 800ce16:	b2d3      	uxtb	r3, r2
 800ce18:	700b      	strb	r3, [r1, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ce20:	f04f 0200 	mov.w	r2, #0
 800ce24:	f04f 0300 	mov.w	r3, #0
 800ce28:	0c0a      	lsrs	r2, r1, #16
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	6839      	ldr	r1, [r7, #0]
 800ce2e:	3129      	adds	r1, #41	@ 0x29
 800ce30:	b2d3      	uxtb	r3, r2
 800ce32:	700b      	strb	r3, [r1, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ce3a:	f04f 0200 	mov.w	r2, #0
 800ce3e:	f04f 0300 	mov.w	r3, #0
 800ce42:	0a0a      	lsrs	r2, r1, #8
 800ce44:	2300      	movs	r3, #0
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	312a      	adds	r1, #42	@ 0x2a
 800ce4a:	b2d3      	uxtb	r3, r2
 800ce4c:	700b      	strb	r3, [r1, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ce54:	f04f 0200 	mov.w	r2, #0
 800ce58:	f04f 0300 	mov.w	r3, #0
 800ce5c:	000a      	movs	r2, r1
 800ce5e:	2300      	movs	r3, #0
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	312b      	adds	r1, #43	@ 0x2b
 800ce64:	b2d3      	uxtb	r3, r2
 800ce66:	700b      	strb	r3, [r1, #0]
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ce6e:	f04f 0200 	mov.w	r2, #0
 800ce72:	f04f 0300 	mov.w	r3, #0
 800ce76:	0e02      	lsrs	r2, r0, #24
 800ce78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ce7c:	0e0b      	lsrs	r3, r1, #24
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	312c      	adds	r1, #44	@ 0x2c
 800ce82:	b2d3      	uxtb	r3, r2
 800ce84:	700b      	strb	r3, [r1, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ce8c:	f04f 0200 	mov.w	r2, #0
 800ce90:	f04f 0300 	mov.w	r3, #0
 800ce94:	0c02      	lsrs	r2, r0, #16
 800ce96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ce9a:	0c0b      	lsrs	r3, r1, #16
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	312d      	adds	r1, #45	@ 0x2d
 800cea0:	b2d3      	uxtb	r3, r2
 800cea2:	700b      	strb	r3, [r1, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800ceaa:	f04f 0200 	mov.w	r2, #0
 800ceae:	f04f 0300 	mov.w	r3, #0
 800ceb2:	0a02      	lsrs	r2, r0, #8
 800ceb4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ceb8:	0a0b      	lsrs	r3, r1, #8
 800ceba:	6839      	ldr	r1, [r7, #0]
 800cebc:	312e      	adds	r1, #46	@ 0x2e
 800cebe:	b2d3      	uxtb	r3, r2
 800cec0:	700b      	strb	r3, [r1, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800cec8:	6839      	ldr	r1, [r7, #0]
 800ceca:	312f      	adds	r1, #47	@ 0x2f
 800cecc:	b2d3      	uxtb	r3, r2
 800cece:	700b      	strb	r3, [r1, #0]

    if( ctx->is384 == 0 )
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f040 80d0 	bne.w	800d07c <mbedtls_sha512_finish_ret+0x8f2>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cee2:	f04f 0200 	mov.w	r2, #0
 800cee6:	f04f 0300 	mov.w	r3, #0
 800ceea:	0e0a      	lsrs	r2, r1, #24
 800ceec:	2300      	movs	r3, #0
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	3130      	adds	r1, #48	@ 0x30
 800cef2:	b2d3      	uxtb	r3, r2
 800cef4:	700b      	strb	r3, [r1, #0]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cefc:	f04f 0200 	mov.w	r2, #0
 800cf00:	f04f 0300 	mov.w	r3, #0
 800cf04:	0c0a      	lsrs	r2, r1, #16
 800cf06:	2300      	movs	r3, #0
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	3131      	adds	r1, #49	@ 0x31
 800cf0c:	b2d3      	uxtb	r3, r2
 800cf0e:	700b      	strb	r3, [r1, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cf16:	f04f 0200 	mov.w	r2, #0
 800cf1a:	f04f 0300 	mov.w	r3, #0
 800cf1e:	0a0a      	lsrs	r2, r1, #8
 800cf20:	2300      	movs	r3, #0
 800cf22:	6839      	ldr	r1, [r7, #0]
 800cf24:	3132      	adds	r1, #50	@ 0x32
 800cf26:	b2d3      	uxtb	r3, r2
 800cf28:	700b      	strb	r3, [r1, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cf30:	f04f 0200 	mov.w	r2, #0
 800cf34:	f04f 0300 	mov.w	r3, #0
 800cf38:	000a      	movs	r2, r1
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	3133      	adds	r1, #51	@ 0x33
 800cf40:	b2d3      	uxtb	r3, r2
 800cf42:	700b      	strb	r3, [r1, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cf4a:	f04f 0200 	mov.w	r2, #0
 800cf4e:	f04f 0300 	mov.w	r3, #0
 800cf52:	0e02      	lsrs	r2, r0, #24
 800cf54:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800cf58:	0e0b      	lsrs	r3, r1, #24
 800cf5a:	6839      	ldr	r1, [r7, #0]
 800cf5c:	3134      	adds	r1, #52	@ 0x34
 800cf5e:	b2d3      	uxtb	r3, r2
 800cf60:	700b      	strb	r3, [r1, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	f04f 0300 	mov.w	r3, #0
 800cf70:	0c02      	lsrs	r2, r0, #16
 800cf72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800cf76:	0c0b      	lsrs	r3, r1, #16
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	3135      	adds	r1, #53	@ 0x35
 800cf7c:	b2d3      	uxtb	r3, r2
 800cf7e:	700b      	strb	r3, [r1, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800cf86:	f04f 0200 	mov.w	r2, #0
 800cf8a:	f04f 0300 	mov.w	r3, #0
 800cf8e:	0a02      	lsrs	r2, r0, #8
 800cf90:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800cf94:	0a0b      	lsrs	r3, r1, #8
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	3136      	adds	r1, #54	@ 0x36
 800cf9a:	b2d3      	uxtb	r3, r2
 800cf9c:	700b      	strb	r3, [r1, #0]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	3137      	adds	r1, #55	@ 0x37
 800cfa8:	b2d3      	uxtb	r3, r2
 800cfaa:	700b      	strb	r3, [r1, #0]
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800cfb2:	f04f 0200 	mov.w	r2, #0
 800cfb6:	f04f 0300 	mov.w	r3, #0
 800cfba:	0e0a      	lsrs	r2, r1, #24
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	3138      	adds	r1, #56	@ 0x38
 800cfc2:	b2d3      	uxtb	r3, r2
 800cfc4:	700b      	strb	r3, [r1, #0]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800cfcc:	f04f 0200 	mov.w	r2, #0
 800cfd0:	f04f 0300 	mov.w	r3, #0
 800cfd4:	0c0a      	lsrs	r2, r1, #16
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	3139      	adds	r1, #57	@ 0x39
 800cfdc:	b2d3      	uxtb	r3, r2
 800cfde:	700b      	strb	r3, [r1, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800cfe6:	f04f 0200 	mov.w	r2, #0
 800cfea:	f04f 0300 	mov.w	r3, #0
 800cfee:	0a0a      	lsrs	r2, r1, #8
 800cff0:	2300      	movs	r3, #0
 800cff2:	6839      	ldr	r1, [r7, #0]
 800cff4:	313a      	adds	r1, #58	@ 0x3a
 800cff6:	b2d3      	uxtb	r3, r2
 800cff8:	700b      	strb	r3, [r1, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800d000:	f04f 0200 	mov.w	r2, #0
 800d004:	f04f 0300 	mov.w	r3, #0
 800d008:	000a      	movs	r2, r1
 800d00a:	2300      	movs	r3, #0
 800d00c:	6839      	ldr	r1, [r7, #0]
 800d00e:	313b      	adds	r1, #59	@ 0x3b
 800d010:	b2d3      	uxtb	r3, r2
 800d012:	700b      	strb	r3, [r1, #0]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800d01a:	f04f 0200 	mov.w	r2, #0
 800d01e:	f04f 0300 	mov.w	r3, #0
 800d022:	0e02      	lsrs	r2, r0, #24
 800d024:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800d028:	0e0b      	lsrs	r3, r1, #24
 800d02a:	6839      	ldr	r1, [r7, #0]
 800d02c:	313c      	adds	r1, #60	@ 0x3c
 800d02e:	b2d3      	uxtb	r3, r2
 800d030:	700b      	strb	r3, [r1, #0]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800d038:	f04f 0200 	mov.w	r2, #0
 800d03c:	f04f 0300 	mov.w	r3, #0
 800d040:	0c02      	lsrs	r2, r0, #16
 800d042:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d046:	0c0b      	lsrs	r3, r1, #16
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	313d      	adds	r1, #61	@ 0x3d
 800d04c:	b2d3      	uxtb	r3, r2
 800d04e:	700b      	strb	r3, [r1, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800d056:	f04f 0200 	mov.w	r2, #0
 800d05a:	f04f 0300 	mov.w	r3, #0
 800d05e:	0a02      	lsrs	r2, r0, #8
 800d060:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d064:	0a0b      	lsrs	r3, r1, #8
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	313e      	adds	r1, #62	@ 0x3e
 800d06a:	b2d3      	uxtb	r3, r2
 800d06c:	700b      	strb	r3, [r1, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	313f      	adds	r1, #63	@ 0x3f
 800d078:	b2d3      	uxtb	r3, r2
 800d07a:	700b      	strb	r3, [r1, #0]
    }

    return( 0 );
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3720      	adds	r7, #32
 800d082:	46bd      	mov	sp, r7
 800d084:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800d088 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b0bc      	sub	sp, #240	@ 0xf0
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	603b      	str	r3, [r7, #0]

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 800d096:	f107 0310 	add.w	r3, r7, #16
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fd f94a 	bl	800a334 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 800d0a0:	f107 0310 	add.w	r3, r7, #16
 800d0a4:	6839      	ldr	r1, [r7, #0]
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fd f962 	bl	800a370 <mbedtls_sha512_starts_ret>
 800d0ac:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 800d0b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d118      	bne.n	800d0ea <mbedtls_sha512_ret+0x62>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 800d0b8:	f107 0310 	add.w	r3, r7, #16
 800d0bc:	68ba      	ldr	r2, [r7, #8]
 800d0be:	68f9      	ldr	r1, [r7, #12]
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f7ff fad7 	bl	800c674 <mbedtls_sha512_update_ret>
 800d0c6:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 800d0ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10d      	bne.n	800d0ee <mbedtls_sha512_ret+0x66>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 800d0d2:	f107 0310 	add.w	r3, r7, #16
 800d0d6:	6879      	ldr	r1, [r7, #4]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff fb56 	bl	800c78a <mbedtls_sha512_finish_ret>
 800d0de:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 800d0e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d0e6:	2b00      	cmp	r3, #0
        goto exit;

exit:
 800d0e8:	e002      	b.n	800d0f0 <mbedtls_sha512_ret+0x68>
        goto exit;
 800d0ea:	bf00      	nop
 800d0ec:	e000      	b.n	800d0f0 <mbedtls_sha512_ret+0x68>
        goto exit;
 800d0ee:	bf00      	nop
    mbedtls_sha512_free( &ctx );
 800d0f0:	f107 0310 	add.w	r3, r7, #16
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f7fd f92a 	bl	800a34e <mbedtls_sha512_free>

    return( ret );
 800d0fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	37f0      	adds	r7, #240	@ 0xf0
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
	...

0800d108 <calloc>:
 800d108:	4b02      	ldr	r3, [pc, #8]	@ (800d114 <calloc+0xc>)
 800d10a:	460a      	mov	r2, r1
 800d10c:	4601      	mov	r1, r0
 800d10e:	6818      	ldr	r0, [r3, #0]
 800d110:	f000 b802 	b.w	800d118 <_calloc_r>
 800d114:	20000024 	.word	0x20000024

0800d118 <_calloc_r>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	fba1 5402 	umull	r5, r4, r1, r2
 800d11e:	b93c      	cbnz	r4, 800d130 <_calloc_r+0x18>
 800d120:	4629      	mov	r1, r5
 800d122:	f000 f837 	bl	800d194 <_malloc_r>
 800d126:	4606      	mov	r6, r0
 800d128:	b928      	cbnz	r0, 800d136 <_calloc_r+0x1e>
 800d12a:	2600      	movs	r6, #0
 800d12c:	4630      	mov	r0, r6
 800d12e:	bd70      	pop	{r4, r5, r6, pc}
 800d130:	220c      	movs	r2, #12
 800d132:	6002      	str	r2, [r0, #0]
 800d134:	e7f9      	b.n	800d12a <_calloc_r+0x12>
 800d136:	462a      	mov	r2, r5
 800d138:	4621      	mov	r1, r4
 800d13a:	f000 faaf 	bl	800d69c <memset>
 800d13e:	e7f5      	b.n	800d12c <_calloc_r+0x14>

0800d140 <free>:
 800d140:	4b02      	ldr	r3, [pc, #8]	@ (800d14c <free+0xc>)
 800d142:	4601      	mov	r1, r0
 800d144:	6818      	ldr	r0, [r3, #0]
 800d146:	f000 bb43 	b.w	800d7d0 <_free_r>
 800d14a:	bf00      	nop
 800d14c:	20000024 	.word	0x20000024

0800d150 <sbrk_aligned>:
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	4e0f      	ldr	r6, [pc, #60]	@ (800d190 <sbrk_aligned+0x40>)
 800d154:	460c      	mov	r4, r1
 800d156:	6831      	ldr	r1, [r6, #0]
 800d158:	4605      	mov	r5, r0
 800d15a:	b911      	cbnz	r1, 800d162 <sbrk_aligned+0x12>
 800d15c:	f000 fada 	bl	800d714 <_sbrk_r>
 800d160:	6030      	str	r0, [r6, #0]
 800d162:	4621      	mov	r1, r4
 800d164:	4628      	mov	r0, r5
 800d166:	f000 fad5 	bl	800d714 <_sbrk_r>
 800d16a:	1c43      	adds	r3, r0, #1
 800d16c:	d103      	bne.n	800d176 <sbrk_aligned+0x26>
 800d16e:	f04f 34ff 	mov.w	r4, #4294967295
 800d172:	4620      	mov	r0, r4
 800d174:	bd70      	pop	{r4, r5, r6, pc}
 800d176:	1cc4      	adds	r4, r0, #3
 800d178:	f024 0403 	bic.w	r4, r4, #3
 800d17c:	42a0      	cmp	r0, r4
 800d17e:	d0f8      	beq.n	800d172 <sbrk_aligned+0x22>
 800d180:	1a21      	subs	r1, r4, r0
 800d182:	4628      	mov	r0, r5
 800d184:	f000 fac6 	bl	800d714 <_sbrk_r>
 800d188:	3001      	adds	r0, #1
 800d18a:	d1f2      	bne.n	800d172 <sbrk_aligned+0x22>
 800d18c:	e7ef      	b.n	800d16e <sbrk_aligned+0x1e>
 800d18e:	bf00      	nop
 800d190:	20000134 	.word	0x20000134

0800d194 <_malloc_r>:
 800d194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d198:	1ccd      	adds	r5, r1, #3
 800d19a:	f025 0503 	bic.w	r5, r5, #3
 800d19e:	3508      	adds	r5, #8
 800d1a0:	2d0c      	cmp	r5, #12
 800d1a2:	bf38      	it	cc
 800d1a4:	250c      	movcc	r5, #12
 800d1a6:	2d00      	cmp	r5, #0
 800d1a8:	4606      	mov	r6, r0
 800d1aa:	db01      	blt.n	800d1b0 <_malloc_r+0x1c>
 800d1ac:	42a9      	cmp	r1, r5
 800d1ae:	d904      	bls.n	800d1ba <_malloc_r+0x26>
 800d1b0:	230c      	movs	r3, #12
 800d1b2:	6033      	str	r3, [r6, #0]
 800d1b4:	2000      	movs	r0, #0
 800d1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d290 <_malloc_r+0xfc>
 800d1be:	f000 f869 	bl	800d294 <__malloc_lock>
 800d1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d1c6:	461c      	mov	r4, r3
 800d1c8:	bb44      	cbnz	r4, 800d21c <_malloc_r+0x88>
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f7ff ffbf 	bl	800d150 <sbrk_aligned>
 800d1d2:	1c43      	adds	r3, r0, #1
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	d158      	bne.n	800d28a <_malloc_r+0xf6>
 800d1d8:	f8d8 4000 	ldr.w	r4, [r8]
 800d1dc:	4627      	mov	r7, r4
 800d1de:	2f00      	cmp	r7, #0
 800d1e0:	d143      	bne.n	800d26a <_malloc_r+0xd6>
 800d1e2:	2c00      	cmp	r4, #0
 800d1e4:	d04b      	beq.n	800d27e <_malloc_r+0xea>
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	4630      	mov	r0, r6
 800d1ec:	eb04 0903 	add.w	r9, r4, r3
 800d1f0:	f000 fa90 	bl	800d714 <_sbrk_r>
 800d1f4:	4581      	cmp	r9, r0
 800d1f6:	d142      	bne.n	800d27e <_malloc_r+0xea>
 800d1f8:	6821      	ldr	r1, [r4, #0]
 800d1fa:	1a6d      	subs	r5, r5, r1
 800d1fc:	4629      	mov	r1, r5
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7ff ffa6 	bl	800d150 <sbrk_aligned>
 800d204:	3001      	adds	r0, #1
 800d206:	d03a      	beq.n	800d27e <_malloc_r+0xea>
 800d208:	6823      	ldr	r3, [r4, #0]
 800d20a:	442b      	add	r3, r5
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	f8d8 3000 	ldr.w	r3, [r8]
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	bb62      	cbnz	r2, 800d270 <_malloc_r+0xdc>
 800d216:	f8c8 7000 	str.w	r7, [r8]
 800d21a:	e00f      	b.n	800d23c <_malloc_r+0xa8>
 800d21c:	6822      	ldr	r2, [r4, #0]
 800d21e:	1b52      	subs	r2, r2, r5
 800d220:	d420      	bmi.n	800d264 <_malloc_r+0xd0>
 800d222:	2a0b      	cmp	r2, #11
 800d224:	d917      	bls.n	800d256 <_malloc_r+0xc2>
 800d226:	1961      	adds	r1, r4, r5
 800d228:	42a3      	cmp	r3, r4
 800d22a:	6025      	str	r5, [r4, #0]
 800d22c:	bf18      	it	ne
 800d22e:	6059      	strne	r1, [r3, #4]
 800d230:	6863      	ldr	r3, [r4, #4]
 800d232:	bf08      	it	eq
 800d234:	f8c8 1000 	streq.w	r1, [r8]
 800d238:	5162      	str	r2, [r4, r5]
 800d23a:	604b      	str	r3, [r1, #4]
 800d23c:	4630      	mov	r0, r6
 800d23e:	f000 f82f 	bl	800d2a0 <__malloc_unlock>
 800d242:	f104 000b 	add.w	r0, r4, #11
 800d246:	1d23      	adds	r3, r4, #4
 800d248:	f020 0007 	bic.w	r0, r0, #7
 800d24c:	1ac2      	subs	r2, r0, r3
 800d24e:	bf1c      	itt	ne
 800d250:	1a1b      	subne	r3, r3, r0
 800d252:	50a3      	strne	r3, [r4, r2]
 800d254:	e7af      	b.n	800d1b6 <_malloc_r+0x22>
 800d256:	6862      	ldr	r2, [r4, #4]
 800d258:	42a3      	cmp	r3, r4
 800d25a:	bf0c      	ite	eq
 800d25c:	f8c8 2000 	streq.w	r2, [r8]
 800d260:	605a      	strne	r2, [r3, #4]
 800d262:	e7eb      	b.n	800d23c <_malloc_r+0xa8>
 800d264:	4623      	mov	r3, r4
 800d266:	6864      	ldr	r4, [r4, #4]
 800d268:	e7ae      	b.n	800d1c8 <_malloc_r+0x34>
 800d26a:	463c      	mov	r4, r7
 800d26c:	687f      	ldr	r7, [r7, #4]
 800d26e:	e7b6      	b.n	800d1de <_malloc_r+0x4a>
 800d270:	461a      	mov	r2, r3
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	42a3      	cmp	r3, r4
 800d276:	d1fb      	bne.n	800d270 <_malloc_r+0xdc>
 800d278:	2300      	movs	r3, #0
 800d27a:	6053      	str	r3, [r2, #4]
 800d27c:	e7de      	b.n	800d23c <_malloc_r+0xa8>
 800d27e:	230c      	movs	r3, #12
 800d280:	6033      	str	r3, [r6, #0]
 800d282:	4630      	mov	r0, r6
 800d284:	f000 f80c 	bl	800d2a0 <__malloc_unlock>
 800d288:	e794      	b.n	800d1b4 <_malloc_r+0x20>
 800d28a:	6005      	str	r5, [r0, #0]
 800d28c:	e7d6      	b.n	800d23c <_malloc_r+0xa8>
 800d28e:	bf00      	nop
 800d290:	20000138 	.word	0x20000138

0800d294 <__malloc_lock>:
 800d294:	4801      	ldr	r0, [pc, #4]	@ (800d29c <__malloc_lock+0x8>)
 800d296:	f000 ba8a 	b.w	800d7ae <__retarget_lock_acquire_recursive>
 800d29a:	bf00      	nop
 800d29c:	2000027c 	.word	0x2000027c

0800d2a0 <__malloc_unlock>:
 800d2a0:	4801      	ldr	r0, [pc, #4]	@ (800d2a8 <__malloc_unlock+0x8>)
 800d2a2:	f000 ba85 	b.w	800d7b0 <__retarget_lock_release_recursive>
 800d2a6:	bf00      	nop
 800d2a8:	2000027c 	.word	0x2000027c

0800d2ac <std>:
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	b510      	push	{r4, lr}
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	e9c0 3300 	strd	r3, r3, [r0]
 800d2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d2ba:	6083      	str	r3, [r0, #8]
 800d2bc:	8181      	strh	r1, [r0, #12]
 800d2be:	6643      	str	r3, [r0, #100]	@ 0x64
 800d2c0:	81c2      	strh	r2, [r0, #14]
 800d2c2:	6183      	str	r3, [r0, #24]
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	2208      	movs	r2, #8
 800d2c8:	305c      	adds	r0, #92	@ 0x5c
 800d2ca:	f000 f9e7 	bl	800d69c <memset>
 800d2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d304 <std+0x58>)
 800d2d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d308 <std+0x5c>)
 800d2d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d30c <std+0x60>)
 800d2d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d2da:	4b0d      	ldr	r3, [pc, #52]	@ (800d310 <std+0x64>)
 800d2dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d2de:	4b0d      	ldr	r3, [pc, #52]	@ (800d314 <std+0x68>)
 800d2e0:	6224      	str	r4, [r4, #32]
 800d2e2:	429c      	cmp	r4, r3
 800d2e4:	d006      	beq.n	800d2f4 <std+0x48>
 800d2e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d2ea:	4294      	cmp	r4, r2
 800d2ec:	d002      	beq.n	800d2f4 <std+0x48>
 800d2ee:	33d0      	adds	r3, #208	@ 0xd0
 800d2f0:	429c      	cmp	r4, r3
 800d2f2:	d105      	bne.n	800d300 <std+0x54>
 800d2f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2fc:	f000 ba56 	b.w	800d7ac <__retarget_lock_init_recursive>
 800d300:	bd10      	pop	{r4, pc}
 800d302:	bf00      	nop
 800d304:	0800d4ed 	.word	0x0800d4ed
 800d308:	0800d50f 	.word	0x0800d50f
 800d30c:	0800d547 	.word	0x0800d547
 800d310:	0800d56b 	.word	0x0800d56b
 800d314:	2000013c 	.word	0x2000013c

0800d318 <stdio_exit_handler>:
 800d318:	4a02      	ldr	r2, [pc, #8]	@ (800d324 <stdio_exit_handler+0xc>)
 800d31a:	4903      	ldr	r1, [pc, #12]	@ (800d328 <stdio_exit_handler+0x10>)
 800d31c:	4803      	ldr	r0, [pc, #12]	@ (800d32c <stdio_exit_handler+0x14>)
 800d31e:	f000 b869 	b.w	800d3f4 <_fwalk_sglue>
 800d322:	bf00      	nop
 800d324:	20000018 	.word	0x20000018
 800d328:	0800d96d 	.word	0x0800d96d
 800d32c:	20000028 	.word	0x20000028

0800d330 <cleanup_stdio>:
 800d330:	6841      	ldr	r1, [r0, #4]
 800d332:	4b0c      	ldr	r3, [pc, #48]	@ (800d364 <cleanup_stdio+0x34>)
 800d334:	4299      	cmp	r1, r3
 800d336:	b510      	push	{r4, lr}
 800d338:	4604      	mov	r4, r0
 800d33a:	d001      	beq.n	800d340 <cleanup_stdio+0x10>
 800d33c:	f000 fb16 	bl	800d96c <_fflush_r>
 800d340:	68a1      	ldr	r1, [r4, #8]
 800d342:	4b09      	ldr	r3, [pc, #36]	@ (800d368 <cleanup_stdio+0x38>)
 800d344:	4299      	cmp	r1, r3
 800d346:	d002      	beq.n	800d34e <cleanup_stdio+0x1e>
 800d348:	4620      	mov	r0, r4
 800d34a:	f000 fb0f 	bl	800d96c <_fflush_r>
 800d34e:	68e1      	ldr	r1, [r4, #12]
 800d350:	4b06      	ldr	r3, [pc, #24]	@ (800d36c <cleanup_stdio+0x3c>)
 800d352:	4299      	cmp	r1, r3
 800d354:	d004      	beq.n	800d360 <cleanup_stdio+0x30>
 800d356:	4620      	mov	r0, r4
 800d358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d35c:	f000 bb06 	b.w	800d96c <_fflush_r>
 800d360:	bd10      	pop	{r4, pc}
 800d362:	bf00      	nop
 800d364:	2000013c 	.word	0x2000013c
 800d368:	200001a4 	.word	0x200001a4
 800d36c:	2000020c 	.word	0x2000020c

0800d370 <global_stdio_init.part.0>:
 800d370:	b510      	push	{r4, lr}
 800d372:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a0 <global_stdio_init.part.0+0x30>)
 800d374:	4c0b      	ldr	r4, [pc, #44]	@ (800d3a4 <global_stdio_init.part.0+0x34>)
 800d376:	4a0c      	ldr	r2, [pc, #48]	@ (800d3a8 <global_stdio_init.part.0+0x38>)
 800d378:	601a      	str	r2, [r3, #0]
 800d37a:	4620      	mov	r0, r4
 800d37c:	2200      	movs	r2, #0
 800d37e:	2104      	movs	r1, #4
 800d380:	f7ff ff94 	bl	800d2ac <std>
 800d384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d388:	2201      	movs	r2, #1
 800d38a:	2109      	movs	r1, #9
 800d38c:	f7ff ff8e 	bl	800d2ac <std>
 800d390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d394:	2202      	movs	r2, #2
 800d396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d39a:	2112      	movs	r1, #18
 800d39c:	f7ff bf86 	b.w	800d2ac <std>
 800d3a0:	20000274 	.word	0x20000274
 800d3a4:	2000013c 	.word	0x2000013c
 800d3a8:	0800d319 	.word	0x0800d319

0800d3ac <__sfp_lock_acquire>:
 800d3ac:	4801      	ldr	r0, [pc, #4]	@ (800d3b4 <__sfp_lock_acquire+0x8>)
 800d3ae:	f000 b9fe 	b.w	800d7ae <__retarget_lock_acquire_recursive>
 800d3b2:	bf00      	nop
 800d3b4:	2000027d 	.word	0x2000027d

0800d3b8 <__sfp_lock_release>:
 800d3b8:	4801      	ldr	r0, [pc, #4]	@ (800d3c0 <__sfp_lock_release+0x8>)
 800d3ba:	f000 b9f9 	b.w	800d7b0 <__retarget_lock_release_recursive>
 800d3be:	bf00      	nop
 800d3c0:	2000027d 	.word	0x2000027d

0800d3c4 <__sinit>:
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	f7ff fff0 	bl	800d3ac <__sfp_lock_acquire>
 800d3cc:	6a23      	ldr	r3, [r4, #32]
 800d3ce:	b11b      	cbz	r3, 800d3d8 <__sinit+0x14>
 800d3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d4:	f7ff bff0 	b.w	800d3b8 <__sfp_lock_release>
 800d3d8:	4b04      	ldr	r3, [pc, #16]	@ (800d3ec <__sinit+0x28>)
 800d3da:	6223      	str	r3, [r4, #32]
 800d3dc:	4b04      	ldr	r3, [pc, #16]	@ (800d3f0 <__sinit+0x2c>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1f5      	bne.n	800d3d0 <__sinit+0xc>
 800d3e4:	f7ff ffc4 	bl	800d370 <global_stdio_init.part.0>
 800d3e8:	e7f2      	b.n	800d3d0 <__sinit+0xc>
 800d3ea:	bf00      	nop
 800d3ec:	0800d331 	.word	0x0800d331
 800d3f0:	20000274 	.word	0x20000274

0800d3f4 <_fwalk_sglue>:
 800d3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3f8:	4607      	mov	r7, r0
 800d3fa:	4688      	mov	r8, r1
 800d3fc:	4614      	mov	r4, r2
 800d3fe:	2600      	movs	r6, #0
 800d400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d404:	f1b9 0901 	subs.w	r9, r9, #1
 800d408:	d505      	bpl.n	800d416 <_fwalk_sglue+0x22>
 800d40a:	6824      	ldr	r4, [r4, #0]
 800d40c:	2c00      	cmp	r4, #0
 800d40e:	d1f7      	bne.n	800d400 <_fwalk_sglue+0xc>
 800d410:	4630      	mov	r0, r6
 800d412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d416:	89ab      	ldrh	r3, [r5, #12]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d907      	bls.n	800d42c <_fwalk_sglue+0x38>
 800d41c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d420:	3301      	adds	r3, #1
 800d422:	d003      	beq.n	800d42c <_fwalk_sglue+0x38>
 800d424:	4629      	mov	r1, r5
 800d426:	4638      	mov	r0, r7
 800d428:	47c0      	blx	r8
 800d42a:	4306      	orrs	r6, r0
 800d42c:	3568      	adds	r5, #104	@ 0x68
 800d42e:	e7e9      	b.n	800d404 <_fwalk_sglue+0x10>

0800d430 <_puts_r>:
 800d430:	6a03      	ldr	r3, [r0, #32]
 800d432:	b570      	push	{r4, r5, r6, lr}
 800d434:	6884      	ldr	r4, [r0, #8]
 800d436:	4605      	mov	r5, r0
 800d438:	460e      	mov	r6, r1
 800d43a:	b90b      	cbnz	r3, 800d440 <_puts_r+0x10>
 800d43c:	f7ff ffc2 	bl	800d3c4 <__sinit>
 800d440:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d442:	07db      	lsls	r3, r3, #31
 800d444:	d405      	bmi.n	800d452 <_puts_r+0x22>
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	0598      	lsls	r0, r3, #22
 800d44a:	d402      	bmi.n	800d452 <_puts_r+0x22>
 800d44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d44e:	f000 f9ae 	bl	800d7ae <__retarget_lock_acquire_recursive>
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	0719      	lsls	r1, r3, #28
 800d456:	d502      	bpl.n	800d45e <_puts_r+0x2e>
 800d458:	6923      	ldr	r3, [r4, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d135      	bne.n	800d4ca <_puts_r+0x9a>
 800d45e:	4621      	mov	r1, r4
 800d460:	4628      	mov	r0, r5
 800d462:	f000 f8c5 	bl	800d5f0 <__swsetup_r>
 800d466:	b380      	cbz	r0, 800d4ca <_puts_r+0x9a>
 800d468:	f04f 35ff 	mov.w	r5, #4294967295
 800d46c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d46e:	07da      	lsls	r2, r3, #31
 800d470:	d405      	bmi.n	800d47e <_puts_r+0x4e>
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	059b      	lsls	r3, r3, #22
 800d476:	d402      	bmi.n	800d47e <_puts_r+0x4e>
 800d478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d47a:	f000 f999 	bl	800d7b0 <__retarget_lock_release_recursive>
 800d47e:	4628      	mov	r0, r5
 800d480:	bd70      	pop	{r4, r5, r6, pc}
 800d482:	2b00      	cmp	r3, #0
 800d484:	da04      	bge.n	800d490 <_puts_r+0x60>
 800d486:	69a2      	ldr	r2, [r4, #24]
 800d488:	429a      	cmp	r2, r3
 800d48a:	dc17      	bgt.n	800d4bc <_puts_r+0x8c>
 800d48c:	290a      	cmp	r1, #10
 800d48e:	d015      	beq.n	800d4bc <_puts_r+0x8c>
 800d490:	6823      	ldr	r3, [r4, #0]
 800d492:	1c5a      	adds	r2, r3, #1
 800d494:	6022      	str	r2, [r4, #0]
 800d496:	7019      	strb	r1, [r3, #0]
 800d498:	68a3      	ldr	r3, [r4, #8]
 800d49a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	60a3      	str	r3, [r4, #8]
 800d4a2:	2900      	cmp	r1, #0
 800d4a4:	d1ed      	bne.n	800d482 <_puts_r+0x52>
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	da11      	bge.n	800d4ce <_puts_r+0x9e>
 800d4aa:	4622      	mov	r2, r4
 800d4ac:	210a      	movs	r1, #10
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f000 f85f 	bl	800d572 <__swbuf_r>
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	d0d7      	beq.n	800d468 <_puts_r+0x38>
 800d4b8:	250a      	movs	r5, #10
 800d4ba:	e7d7      	b.n	800d46c <_puts_r+0x3c>
 800d4bc:	4622      	mov	r2, r4
 800d4be:	4628      	mov	r0, r5
 800d4c0:	f000 f857 	bl	800d572 <__swbuf_r>
 800d4c4:	3001      	adds	r0, #1
 800d4c6:	d1e7      	bne.n	800d498 <_puts_r+0x68>
 800d4c8:	e7ce      	b.n	800d468 <_puts_r+0x38>
 800d4ca:	3e01      	subs	r6, #1
 800d4cc:	e7e4      	b.n	800d498 <_puts_r+0x68>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	6022      	str	r2, [r4, #0]
 800d4d4:	220a      	movs	r2, #10
 800d4d6:	701a      	strb	r2, [r3, #0]
 800d4d8:	e7ee      	b.n	800d4b8 <_puts_r+0x88>
	...

0800d4dc <puts>:
 800d4dc:	4b02      	ldr	r3, [pc, #8]	@ (800d4e8 <puts+0xc>)
 800d4de:	4601      	mov	r1, r0
 800d4e0:	6818      	ldr	r0, [r3, #0]
 800d4e2:	f7ff bfa5 	b.w	800d430 <_puts_r>
 800d4e6:	bf00      	nop
 800d4e8:	20000024 	.word	0x20000024

0800d4ec <__sread>:
 800d4ec:	b510      	push	{r4, lr}
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4f4:	f000 f8fc 	bl	800d6f0 <_read_r>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	bfab      	itete	ge
 800d4fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d4fe:	89a3      	ldrhlt	r3, [r4, #12]
 800d500:	181b      	addge	r3, r3, r0
 800d502:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d506:	bfac      	ite	ge
 800d508:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d50a:	81a3      	strhlt	r3, [r4, #12]
 800d50c:	bd10      	pop	{r4, pc}

0800d50e <__swrite>:
 800d50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d512:	461f      	mov	r7, r3
 800d514:	898b      	ldrh	r3, [r1, #12]
 800d516:	05db      	lsls	r3, r3, #23
 800d518:	4605      	mov	r5, r0
 800d51a:	460c      	mov	r4, r1
 800d51c:	4616      	mov	r6, r2
 800d51e:	d505      	bpl.n	800d52c <__swrite+0x1e>
 800d520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d524:	2302      	movs	r3, #2
 800d526:	2200      	movs	r2, #0
 800d528:	f000 f8d0 	bl	800d6cc <_lseek_r>
 800d52c:	89a3      	ldrh	r3, [r4, #12]
 800d52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d532:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d536:	81a3      	strh	r3, [r4, #12]
 800d538:	4632      	mov	r2, r6
 800d53a:	463b      	mov	r3, r7
 800d53c:	4628      	mov	r0, r5
 800d53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d542:	f000 b8f7 	b.w	800d734 <_write_r>

0800d546 <__sseek>:
 800d546:	b510      	push	{r4, lr}
 800d548:	460c      	mov	r4, r1
 800d54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d54e:	f000 f8bd 	bl	800d6cc <_lseek_r>
 800d552:	1c43      	adds	r3, r0, #1
 800d554:	89a3      	ldrh	r3, [r4, #12]
 800d556:	bf15      	itete	ne
 800d558:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d55a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d55e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d562:	81a3      	strheq	r3, [r4, #12]
 800d564:	bf18      	it	ne
 800d566:	81a3      	strhne	r3, [r4, #12]
 800d568:	bd10      	pop	{r4, pc}

0800d56a <__sclose>:
 800d56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56e:	f000 b89d 	b.w	800d6ac <_close_r>

0800d572 <__swbuf_r>:
 800d572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d574:	460e      	mov	r6, r1
 800d576:	4614      	mov	r4, r2
 800d578:	4605      	mov	r5, r0
 800d57a:	b118      	cbz	r0, 800d584 <__swbuf_r+0x12>
 800d57c:	6a03      	ldr	r3, [r0, #32]
 800d57e:	b90b      	cbnz	r3, 800d584 <__swbuf_r+0x12>
 800d580:	f7ff ff20 	bl	800d3c4 <__sinit>
 800d584:	69a3      	ldr	r3, [r4, #24]
 800d586:	60a3      	str	r3, [r4, #8]
 800d588:	89a3      	ldrh	r3, [r4, #12]
 800d58a:	071a      	lsls	r2, r3, #28
 800d58c:	d501      	bpl.n	800d592 <__swbuf_r+0x20>
 800d58e:	6923      	ldr	r3, [r4, #16]
 800d590:	b943      	cbnz	r3, 800d5a4 <__swbuf_r+0x32>
 800d592:	4621      	mov	r1, r4
 800d594:	4628      	mov	r0, r5
 800d596:	f000 f82b 	bl	800d5f0 <__swsetup_r>
 800d59a:	b118      	cbz	r0, 800d5a4 <__swbuf_r+0x32>
 800d59c:	f04f 37ff 	mov.w	r7, #4294967295
 800d5a0:	4638      	mov	r0, r7
 800d5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	6922      	ldr	r2, [r4, #16]
 800d5a8:	1a98      	subs	r0, r3, r2
 800d5aa:	6963      	ldr	r3, [r4, #20]
 800d5ac:	b2f6      	uxtb	r6, r6
 800d5ae:	4283      	cmp	r3, r0
 800d5b0:	4637      	mov	r7, r6
 800d5b2:	dc05      	bgt.n	800d5c0 <__swbuf_r+0x4e>
 800d5b4:	4621      	mov	r1, r4
 800d5b6:	4628      	mov	r0, r5
 800d5b8:	f000 f9d8 	bl	800d96c <_fflush_r>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d1ed      	bne.n	800d59c <__swbuf_r+0x2a>
 800d5c0:	68a3      	ldr	r3, [r4, #8]
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	60a3      	str	r3, [r4, #8]
 800d5c6:	6823      	ldr	r3, [r4, #0]
 800d5c8:	1c5a      	adds	r2, r3, #1
 800d5ca:	6022      	str	r2, [r4, #0]
 800d5cc:	701e      	strb	r6, [r3, #0]
 800d5ce:	6962      	ldr	r2, [r4, #20]
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d004      	beq.n	800d5e0 <__swbuf_r+0x6e>
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	07db      	lsls	r3, r3, #31
 800d5da:	d5e1      	bpl.n	800d5a0 <__swbuf_r+0x2e>
 800d5dc:	2e0a      	cmp	r6, #10
 800d5de:	d1df      	bne.n	800d5a0 <__swbuf_r+0x2e>
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	f000 f9c2 	bl	800d96c <_fflush_r>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	d0d9      	beq.n	800d5a0 <__swbuf_r+0x2e>
 800d5ec:	e7d6      	b.n	800d59c <__swbuf_r+0x2a>
	...

0800d5f0 <__swsetup_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	4b29      	ldr	r3, [pc, #164]	@ (800d698 <__swsetup_r+0xa8>)
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	6818      	ldr	r0, [r3, #0]
 800d5f8:	460c      	mov	r4, r1
 800d5fa:	b118      	cbz	r0, 800d604 <__swsetup_r+0x14>
 800d5fc:	6a03      	ldr	r3, [r0, #32]
 800d5fe:	b90b      	cbnz	r3, 800d604 <__swsetup_r+0x14>
 800d600:	f7ff fee0 	bl	800d3c4 <__sinit>
 800d604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d608:	0719      	lsls	r1, r3, #28
 800d60a:	d422      	bmi.n	800d652 <__swsetup_r+0x62>
 800d60c:	06da      	lsls	r2, r3, #27
 800d60e:	d407      	bmi.n	800d620 <__swsetup_r+0x30>
 800d610:	2209      	movs	r2, #9
 800d612:	602a      	str	r2, [r5, #0]
 800d614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d618:	81a3      	strh	r3, [r4, #12]
 800d61a:	f04f 30ff 	mov.w	r0, #4294967295
 800d61e:	e033      	b.n	800d688 <__swsetup_r+0x98>
 800d620:	0758      	lsls	r0, r3, #29
 800d622:	d512      	bpl.n	800d64a <__swsetup_r+0x5a>
 800d624:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d626:	b141      	cbz	r1, 800d63a <__swsetup_r+0x4a>
 800d628:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d62c:	4299      	cmp	r1, r3
 800d62e:	d002      	beq.n	800d636 <__swsetup_r+0x46>
 800d630:	4628      	mov	r0, r5
 800d632:	f000 f8cd 	bl	800d7d0 <_free_r>
 800d636:	2300      	movs	r3, #0
 800d638:	6363      	str	r3, [r4, #52]	@ 0x34
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d640:	81a3      	strh	r3, [r4, #12]
 800d642:	2300      	movs	r3, #0
 800d644:	6063      	str	r3, [r4, #4]
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	f043 0308 	orr.w	r3, r3, #8
 800d650:	81a3      	strh	r3, [r4, #12]
 800d652:	6923      	ldr	r3, [r4, #16]
 800d654:	b94b      	cbnz	r3, 800d66a <__swsetup_r+0x7a>
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d65c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d660:	d003      	beq.n	800d66a <__swsetup_r+0x7a>
 800d662:	4621      	mov	r1, r4
 800d664:	4628      	mov	r0, r5
 800d666:	f000 f9cf 	bl	800da08 <__smakebuf_r>
 800d66a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d66e:	f013 0201 	ands.w	r2, r3, #1
 800d672:	d00a      	beq.n	800d68a <__swsetup_r+0x9a>
 800d674:	2200      	movs	r2, #0
 800d676:	60a2      	str	r2, [r4, #8]
 800d678:	6962      	ldr	r2, [r4, #20]
 800d67a:	4252      	negs	r2, r2
 800d67c:	61a2      	str	r2, [r4, #24]
 800d67e:	6922      	ldr	r2, [r4, #16]
 800d680:	b942      	cbnz	r2, 800d694 <__swsetup_r+0xa4>
 800d682:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d686:	d1c5      	bne.n	800d614 <__swsetup_r+0x24>
 800d688:	bd38      	pop	{r3, r4, r5, pc}
 800d68a:	0799      	lsls	r1, r3, #30
 800d68c:	bf58      	it	pl
 800d68e:	6962      	ldrpl	r2, [r4, #20]
 800d690:	60a2      	str	r2, [r4, #8]
 800d692:	e7f4      	b.n	800d67e <__swsetup_r+0x8e>
 800d694:	2000      	movs	r0, #0
 800d696:	e7f7      	b.n	800d688 <__swsetup_r+0x98>
 800d698:	20000024 	.word	0x20000024

0800d69c <memset>:
 800d69c:	4402      	add	r2, r0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d100      	bne.n	800d6a6 <memset+0xa>
 800d6a4:	4770      	bx	lr
 800d6a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6aa:	e7f9      	b.n	800d6a0 <memset+0x4>

0800d6ac <_close_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	4d06      	ldr	r5, [pc, #24]	@ (800d6c8 <_close_r+0x1c>)
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	602b      	str	r3, [r5, #0]
 800d6b8:	f7f3 fbd7 	bl	8000e6a <_close>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d102      	bne.n	800d6c6 <_close_r+0x1a>
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	b103      	cbz	r3, 800d6c6 <_close_r+0x1a>
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}
 800d6c8:	20000278 	.word	0x20000278

0800d6cc <_lseek_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	4d07      	ldr	r5, [pc, #28]	@ (800d6ec <_lseek_r+0x20>)
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	4608      	mov	r0, r1
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	602a      	str	r2, [r5, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	f7f3 fbec 	bl	8000eb8 <_lseek>
 800d6e0:	1c43      	adds	r3, r0, #1
 800d6e2:	d102      	bne.n	800d6ea <_lseek_r+0x1e>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	b103      	cbz	r3, 800d6ea <_lseek_r+0x1e>
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	20000278 	.word	0x20000278

0800d6f0 <_read_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	4d07      	ldr	r5, [pc, #28]	@ (800d710 <_read_r+0x20>)
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	4608      	mov	r0, r1
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	602a      	str	r2, [r5, #0]
 800d6fe:	461a      	mov	r2, r3
 800d700:	f7f3 fb7a 	bl	8000df8 <_read>
 800d704:	1c43      	adds	r3, r0, #1
 800d706:	d102      	bne.n	800d70e <_read_r+0x1e>
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	b103      	cbz	r3, 800d70e <_read_r+0x1e>
 800d70c:	6023      	str	r3, [r4, #0]
 800d70e:	bd38      	pop	{r3, r4, r5, pc}
 800d710:	20000278 	.word	0x20000278

0800d714 <_sbrk_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	4d06      	ldr	r5, [pc, #24]	@ (800d730 <_sbrk_r+0x1c>)
 800d718:	2300      	movs	r3, #0
 800d71a:	4604      	mov	r4, r0
 800d71c:	4608      	mov	r0, r1
 800d71e:	602b      	str	r3, [r5, #0]
 800d720:	f7f3 fbd8 	bl	8000ed4 <_sbrk>
 800d724:	1c43      	adds	r3, r0, #1
 800d726:	d102      	bne.n	800d72e <_sbrk_r+0x1a>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	b103      	cbz	r3, 800d72e <_sbrk_r+0x1a>
 800d72c:	6023      	str	r3, [r4, #0]
 800d72e:	bd38      	pop	{r3, r4, r5, pc}
 800d730:	20000278 	.word	0x20000278

0800d734 <_write_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	4d07      	ldr	r5, [pc, #28]	@ (800d754 <_write_r+0x20>)
 800d738:	4604      	mov	r4, r0
 800d73a:	4608      	mov	r0, r1
 800d73c:	4611      	mov	r1, r2
 800d73e:	2200      	movs	r2, #0
 800d740:	602a      	str	r2, [r5, #0]
 800d742:	461a      	mov	r2, r3
 800d744:	f7f3 fb75 	bl	8000e32 <_write>
 800d748:	1c43      	adds	r3, r0, #1
 800d74a:	d102      	bne.n	800d752 <_write_r+0x1e>
 800d74c:	682b      	ldr	r3, [r5, #0]
 800d74e:	b103      	cbz	r3, 800d752 <_write_r+0x1e>
 800d750:	6023      	str	r3, [r4, #0]
 800d752:	bd38      	pop	{r3, r4, r5, pc}
 800d754:	20000278 	.word	0x20000278

0800d758 <__errno>:
 800d758:	4b01      	ldr	r3, [pc, #4]	@ (800d760 <__errno+0x8>)
 800d75a:	6818      	ldr	r0, [r3, #0]
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	20000024 	.word	0x20000024

0800d764 <__libc_init_array>:
 800d764:	b570      	push	{r4, r5, r6, lr}
 800d766:	4d0d      	ldr	r5, [pc, #52]	@ (800d79c <__libc_init_array+0x38>)
 800d768:	4c0d      	ldr	r4, [pc, #52]	@ (800d7a0 <__libc_init_array+0x3c>)
 800d76a:	1b64      	subs	r4, r4, r5
 800d76c:	10a4      	asrs	r4, r4, #2
 800d76e:	2600      	movs	r6, #0
 800d770:	42a6      	cmp	r6, r4
 800d772:	d109      	bne.n	800d788 <__libc_init_array+0x24>
 800d774:	4d0b      	ldr	r5, [pc, #44]	@ (800d7a4 <__libc_init_array+0x40>)
 800d776:	4c0c      	ldr	r4, [pc, #48]	@ (800d7a8 <__libc_init_array+0x44>)
 800d778:	f000 f9a4 	bl	800dac4 <_init>
 800d77c:	1b64      	subs	r4, r4, r5
 800d77e:	10a4      	asrs	r4, r4, #2
 800d780:	2600      	movs	r6, #0
 800d782:	42a6      	cmp	r6, r4
 800d784:	d105      	bne.n	800d792 <__libc_init_array+0x2e>
 800d786:	bd70      	pop	{r4, r5, r6, pc}
 800d788:	f855 3b04 	ldr.w	r3, [r5], #4
 800d78c:	4798      	blx	r3
 800d78e:	3601      	adds	r6, #1
 800d790:	e7ee      	b.n	800d770 <__libc_init_array+0xc>
 800d792:	f855 3b04 	ldr.w	r3, [r5], #4
 800d796:	4798      	blx	r3
 800d798:	3601      	adds	r6, #1
 800d79a:	e7f2      	b.n	800d782 <__libc_init_array+0x1e>
 800d79c:	08010c80 	.word	0x08010c80
 800d7a0:	08010c80 	.word	0x08010c80
 800d7a4:	08010c80 	.word	0x08010c80
 800d7a8:	08010c84 	.word	0x08010c84

0800d7ac <__retarget_lock_init_recursive>:
 800d7ac:	4770      	bx	lr

0800d7ae <__retarget_lock_acquire_recursive>:
 800d7ae:	4770      	bx	lr

0800d7b0 <__retarget_lock_release_recursive>:
 800d7b0:	4770      	bx	lr

0800d7b2 <memcpy>:
 800d7b2:	440a      	add	r2, r1
 800d7b4:	4291      	cmp	r1, r2
 800d7b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7ba:	d100      	bne.n	800d7be <memcpy+0xc>
 800d7bc:	4770      	bx	lr
 800d7be:	b510      	push	{r4, lr}
 800d7c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c8:	4291      	cmp	r1, r2
 800d7ca:	d1f9      	bne.n	800d7c0 <memcpy+0xe>
 800d7cc:	bd10      	pop	{r4, pc}
	...

0800d7d0 <_free_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	2900      	cmp	r1, #0
 800d7d6:	d041      	beq.n	800d85c <_free_r+0x8c>
 800d7d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7dc:	1f0c      	subs	r4, r1, #4
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	bfb8      	it	lt
 800d7e2:	18e4      	addlt	r4, r4, r3
 800d7e4:	f7ff fd56 	bl	800d294 <__malloc_lock>
 800d7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d860 <_free_r+0x90>)
 800d7ea:	6813      	ldr	r3, [r2, #0]
 800d7ec:	b933      	cbnz	r3, 800d7fc <_free_r+0x2c>
 800d7ee:	6063      	str	r3, [r4, #4]
 800d7f0:	6014      	str	r4, [r2, #0]
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f8:	f7ff bd52 	b.w	800d2a0 <__malloc_unlock>
 800d7fc:	42a3      	cmp	r3, r4
 800d7fe:	d908      	bls.n	800d812 <_free_r+0x42>
 800d800:	6820      	ldr	r0, [r4, #0]
 800d802:	1821      	adds	r1, r4, r0
 800d804:	428b      	cmp	r3, r1
 800d806:	bf01      	itttt	eq
 800d808:	6819      	ldreq	r1, [r3, #0]
 800d80a:	685b      	ldreq	r3, [r3, #4]
 800d80c:	1809      	addeq	r1, r1, r0
 800d80e:	6021      	streq	r1, [r4, #0]
 800d810:	e7ed      	b.n	800d7ee <_free_r+0x1e>
 800d812:	461a      	mov	r2, r3
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	b10b      	cbz	r3, 800d81c <_free_r+0x4c>
 800d818:	42a3      	cmp	r3, r4
 800d81a:	d9fa      	bls.n	800d812 <_free_r+0x42>
 800d81c:	6811      	ldr	r1, [r2, #0]
 800d81e:	1850      	adds	r0, r2, r1
 800d820:	42a0      	cmp	r0, r4
 800d822:	d10b      	bne.n	800d83c <_free_r+0x6c>
 800d824:	6820      	ldr	r0, [r4, #0]
 800d826:	4401      	add	r1, r0
 800d828:	1850      	adds	r0, r2, r1
 800d82a:	4283      	cmp	r3, r0
 800d82c:	6011      	str	r1, [r2, #0]
 800d82e:	d1e0      	bne.n	800d7f2 <_free_r+0x22>
 800d830:	6818      	ldr	r0, [r3, #0]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	6053      	str	r3, [r2, #4]
 800d836:	4408      	add	r0, r1
 800d838:	6010      	str	r0, [r2, #0]
 800d83a:	e7da      	b.n	800d7f2 <_free_r+0x22>
 800d83c:	d902      	bls.n	800d844 <_free_r+0x74>
 800d83e:	230c      	movs	r3, #12
 800d840:	602b      	str	r3, [r5, #0]
 800d842:	e7d6      	b.n	800d7f2 <_free_r+0x22>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	1821      	adds	r1, r4, r0
 800d848:	428b      	cmp	r3, r1
 800d84a:	bf04      	itt	eq
 800d84c:	6819      	ldreq	r1, [r3, #0]
 800d84e:	685b      	ldreq	r3, [r3, #4]
 800d850:	6063      	str	r3, [r4, #4]
 800d852:	bf04      	itt	eq
 800d854:	1809      	addeq	r1, r1, r0
 800d856:	6021      	streq	r1, [r4, #0]
 800d858:	6054      	str	r4, [r2, #4]
 800d85a:	e7ca      	b.n	800d7f2 <_free_r+0x22>
 800d85c:	bd38      	pop	{r3, r4, r5, pc}
 800d85e:	bf00      	nop
 800d860:	20000138 	.word	0x20000138

0800d864 <__sflush_r>:
 800d864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d86c:	0716      	lsls	r6, r2, #28
 800d86e:	4605      	mov	r5, r0
 800d870:	460c      	mov	r4, r1
 800d872:	d454      	bmi.n	800d91e <__sflush_r+0xba>
 800d874:	684b      	ldr	r3, [r1, #4]
 800d876:	2b00      	cmp	r3, #0
 800d878:	dc02      	bgt.n	800d880 <__sflush_r+0x1c>
 800d87a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	dd48      	ble.n	800d912 <__sflush_r+0xae>
 800d880:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d882:	2e00      	cmp	r6, #0
 800d884:	d045      	beq.n	800d912 <__sflush_r+0xae>
 800d886:	2300      	movs	r3, #0
 800d888:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d88c:	682f      	ldr	r7, [r5, #0]
 800d88e:	6a21      	ldr	r1, [r4, #32]
 800d890:	602b      	str	r3, [r5, #0]
 800d892:	d030      	beq.n	800d8f6 <__sflush_r+0x92>
 800d894:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d896:	89a3      	ldrh	r3, [r4, #12]
 800d898:	0759      	lsls	r1, r3, #29
 800d89a:	d505      	bpl.n	800d8a8 <__sflush_r+0x44>
 800d89c:	6863      	ldr	r3, [r4, #4]
 800d89e:	1ad2      	subs	r2, r2, r3
 800d8a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d8a2:	b10b      	cbz	r3, 800d8a8 <__sflush_r+0x44>
 800d8a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d8a6:	1ad2      	subs	r2, r2, r3
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8ac:	6a21      	ldr	r1, [r4, #32]
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	47b0      	blx	r6
 800d8b2:	1c43      	adds	r3, r0, #1
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	d106      	bne.n	800d8c6 <__sflush_r+0x62>
 800d8b8:	6829      	ldr	r1, [r5, #0]
 800d8ba:	291d      	cmp	r1, #29
 800d8bc:	d82b      	bhi.n	800d916 <__sflush_r+0xb2>
 800d8be:	4a2a      	ldr	r2, [pc, #168]	@ (800d968 <__sflush_r+0x104>)
 800d8c0:	410a      	asrs	r2, r1
 800d8c2:	07d6      	lsls	r6, r2, #31
 800d8c4:	d427      	bmi.n	800d916 <__sflush_r+0xb2>
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	6062      	str	r2, [r4, #4]
 800d8ca:	04d9      	lsls	r1, r3, #19
 800d8cc:	6922      	ldr	r2, [r4, #16]
 800d8ce:	6022      	str	r2, [r4, #0]
 800d8d0:	d504      	bpl.n	800d8dc <__sflush_r+0x78>
 800d8d2:	1c42      	adds	r2, r0, #1
 800d8d4:	d101      	bne.n	800d8da <__sflush_r+0x76>
 800d8d6:	682b      	ldr	r3, [r5, #0]
 800d8d8:	b903      	cbnz	r3, 800d8dc <__sflush_r+0x78>
 800d8da:	6560      	str	r0, [r4, #84]	@ 0x54
 800d8dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8de:	602f      	str	r7, [r5, #0]
 800d8e0:	b1b9      	cbz	r1, 800d912 <__sflush_r+0xae>
 800d8e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8e6:	4299      	cmp	r1, r3
 800d8e8:	d002      	beq.n	800d8f0 <__sflush_r+0x8c>
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	f7ff ff70 	bl	800d7d0 <_free_r>
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8f4:	e00d      	b.n	800d912 <__sflush_r+0xae>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	47b0      	blx	r6
 800d8fc:	4602      	mov	r2, r0
 800d8fe:	1c50      	adds	r0, r2, #1
 800d900:	d1c9      	bne.n	800d896 <__sflush_r+0x32>
 800d902:	682b      	ldr	r3, [r5, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d0c6      	beq.n	800d896 <__sflush_r+0x32>
 800d908:	2b1d      	cmp	r3, #29
 800d90a:	d001      	beq.n	800d910 <__sflush_r+0xac>
 800d90c:	2b16      	cmp	r3, #22
 800d90e:	d11e      	bne.n	800d94e <__sflush_r+0xea>
 800d910:	602f      	str	r7, [r5, #0]
 800d912:	2000      	movs	r0, #0
 800d914:	e022      	b.n	800d95c <__sflush_r+0xf8>
 800d916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d91a:	b21b      	sxth	r3, r3
 800d91c:	e01b      	b.n	800d956 <__sflush_r+0xf2>
 800d91e:	690f      	ldr	r7, [r1, #16]
 800d920:	2f00      	cmp	r7, #0
 800d922:	d0f6      	beq.n	800d912 <__sflush_r+0xae>
 800d924:	0793      	lsls	r3, r2, #30
 800d926:	680e      	ldr	r6, [r1, #0]
 800d928:	bf08      	it	eq
 800d92a:	694b      	ldreq	r3, [r1, #20]
 800d92c:	600f      	str	r7, [r1, #0]
 800d92e:	bf18      	it	ne
 800d930:	2300      	movne	r3, #0
 800d932:	eba6 0807 	sub.w	r8, r6, r7
 800d936:	608b      	str	r3, [r1, #8]
 800d938:	f1b8 0f00 	cmp.w	r8, #0
 800d93c:	dde9      	ble.n	800d912 <__sflush_r+0xae>
 800d93e:	6a21      	ldr	r1, [r4, #32]
 800d940:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d942:	4643      	mov	r3, r8
 800d944:	463a      	mov	r2, r7
 800d946:	4628      	mov	r0, r5
 800d948:	47b0      	blx	r6
 800d94a:	2800      	cmp	r0, #0
 800d94c:	dc08      	bgt.n	800d960 <__sflush_r+0xfc>
 800d94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d952:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d956:	81a3      	strh	r3, [r4, #12]
 800d958:	f04f 30ff 	mov.w	r0, #4294967295
 800d95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d960:	4407      	add	r7, r0
 800d962:	eba8 0800 	sub.w	r8, r8, r0
 800d966:	e7e7      	b.n	800d938 <__sflush_r+0xd4>
 800d968:	dfbffffe 	.word	0xdfbffffe

0800d96c <_fflush_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	690b      	ldr	r3, [r1, #16]
 800d970:	4605      	mov	r5, r0
 800d972:	460c      	mov	r4, r1
 800d974:	b913      	cbnz	r3, 800d97c <_fflush_r+0x10>
 800d976:	2500      	movs	r5, #0
 800d978:	4628      	mov	r0, r5
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
 800d97c:	b118      	cbz	r0, 800d986 <_fflush_r+0x1a>
 800d97e:	6a03      	ldr	r3, [r0, #32]
 800d980:	b90b      	cbnz	r3, 800d986 <_fflush_r+0x1a>
 800d982:	f7ff fd1f 	bl	800d3c4 <__sinit>
 800d986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0f3      	beq.n	800d976 <_fflush_r+0xa>
 800d98e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d990:	07d0      	lsls	r0, r2, #31
 800d992:	d404      	bmi.n	800d99e <_fflush_r+0x32>
 800d994:	0599      	lsls	r1, r3, #22
 800d996:	d402      	bmi.n	800d99e <_fflush_r+0x32>
 800d998:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d99a:	f7ff ff08 	bl	800d7ae <__retarget_lock_acquire_recursive>
 800d99e:	4628      	mov	r0, r5
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	f7ff ff5f 	bl	800d864 <__sflush_r>
 800d9a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9a8:	07da      	lsls	r2, r3, #31
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	d4e4      	bmi.n	800d978 <_fflush_r+0xc>
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	059b      	lsls	r3, r3, #22
 800d9b2:	d4e1      	bmi.n	800d978 <_fflush_r+0xc>
 800d9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9b6:	f7ff fefb 	bl	800d7b0 <__retarget_lock_release_recursive>
 800d9ba:	e7dd      	b.n	800d978 <_fflush_r+0xc>

0800d9bc <__swhatbuf_r>:
 800d9bc:	b570      	push	{r4, r5, r6, lr}
 800d9be:	460c      	mov	r4, r1
 800d9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c4:	2900      	cmp	r1, #0
 800d9c6:	b096      	sub	sp, #88	@ 0x58
 800d9c8:	4615      	mov	r5, r2
 800d9ca:	461e      	mov	r6, r3
 800d9cc:	da0d      	bge.n	800d9ea <__swhatbuf_r+0x2e>
 800d9ce:	89a3      	ldrh	r3, [r4, #12]
 800d9d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d9d4:	f04f 0100 	mov.w	r1, #0
 800d9d8:	bf14      	ite	ne
 800d9da:	2340      	movne	r3, #64	@ 0x40
 800d9dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	6031      	str	r1, [r6, #0]
 800d9e4:	602b      	str	r3, [r5, #0]
 800d9e6:	b016      	add	sp, #88	@ 0x58
 800d9e8:	bd70      	pop	{r4, r5, r6, pc}
 800d9ea:	466a      	mov	r2, sp
 800d9ec:	f000 f848 	bl	800da80 <_fstat_r>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	dbec      	blt.n	800d9ce <__swhatbuf_r+0x12>
 800d9f4:	9901      	ldr	r1, [sp, #4]
 800d9f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d9fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d9fe:	4259      	negs	r1, r3
 800da00:	4159      	adcs	r1, r3
 800da02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da06:	e7eb      	b.n	800d9e0 <__swhatbuf_r+0x24>

0800da08 <__smakebuf_r>:
 800da08:	898b      	ldrh	r3, [r1, #12]
 800da0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da0c:	079d      	lsls	r5, r3, #30
 800da0e:	4606      	mov	r6, r0
 800da10:	460c      	mov	r4, r1
 800da12:	d507      	bpl.n	800da24 <__smakebuf_r+0x1c>
 800da14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	6123      	str	r3, [r4, #16]
 800da1c:	2301      	movs	r3, #1
 800da1e:	6163      	str	r3, [r4, #20]
 800da20:	b003      	add	sp, #12
 800da22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da24:	ab01      	add	r3, sp, #4
 800da26:	466a      	mov	r2, sp
 800da28:	f7ff ffc8 	bl	800d9bc <__swhatbuf_r>
 800da2c:	9f00      	ldr	r7, [sp, #0]
 800da2e:	4605      	mov	r5, r0
 800da30:	4639      	mov	r1, r7
 800da32:	4630      	mov	r0, r6
 800da34:	f7ff fbae 	bl	800d194 <_malloc_r>
 800da38:	b948      	cbnz	r0, 800da4e <__smakebuf_r+0x46>
 800da3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3e:	059a      	lsls	r2, r3, #22
 800da40:	d4ee      	bmi.n	800da20 <__smakebuf_r+0x18>
 800da42:	f023 0303 	bic.w	r3, r3, #3
 800da46:	f043 0302 	orr.w	r3, r3, #2
 800da4a:	81a3      	strh	r3, [r4, #12]
 800da4c:	e7e2      	b.n	800da14 <__smakebuf_r+0xc>
 800da4e:	89a3      	ldrh	r3, [r4, #12]
 800da50:	6020      	str	r0, [r4, #0]
 800da52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da56:	81a3      	strh	r3, [r4, #12]
 800da58:	9b01      	ldr	r3, [sp, #4]
 800da5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800da5e:	b15b      	cbz	r3, 800da78 <__smakebuf_r+0x70>
 800da60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da64:	4630      	mov	r0, r6
 800da66:	f000 f81d 	bl	800daa4 <_isatty_r>
 800da6a:	b128      	cbz	r0, 800da78 <__smakebuf_r+0x70>
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	f023 0303 	bic.w	r3, r3, #3
 800da72:	f043 0301 	orr.w	r3, r3, #1
 800da76:	81a3      	strh	r3, [r4, #12]
 800da78:	89a3      	ldrh	r3, [r4, #12]
 800da7a:	431d      	orrs	r5, r3
 800da7c:	81a5      	strh	r5, [r4, #12]
 800da7e:	e7cf      	b.n	800da20 <__smakebuf_r+0x18>

0800da80 <_fstat_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4d07      	ldr	r5, [pc, #28]	@ (800daa0 <_fstat_r+0x20>)
 800da84:	2300      	movs	r3, #0
 800da86:	4604      	mov	r4, r0
 800da88:	4608      	mov	r0, r1
 800da8a:	4611      	mov	r1, r2
 800da8c:	602b      	str	r3, [r5, #0]
 800da8e:	f7f3 f9f8 	bl	8000e82 <_fstat>
 800da92:	1c43      	adds	r3, r0, #1
 800da94:	d102      	bne.n	800da9c <_fstat_r+0x1c>
 800da96:	682b      	ldr	r3, [r5, #0]
 800da98:	b103      	cbz	r3, 800da9c <_fstat_r+0x1c>
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	bd38      	pop	{r3, r4, r5, pc}
 800da9e:	bf00      	nop
 800daa0:	20000278 	.word	0x20000278

0800daa4 <_isatty_r>:
 800daa4:	b538      	push	{r3, r4, r5, lr}
 800daa6:	4d06      	ldr	r5, [pc, #24]	@ (800dac0 <_isatty_r+0x1c>)
 800daa8:	2300      	movs	r3, #0
 800daaa:	4604      	mov	r4, r0
 800daac:	4608      	mov	r0, r1
 800daae:	602b      	str	r3, [r5, #0]
 800dab0:	f7f3 f9f7 	bl	8000ea2 <_isatty>
 800dab4:	1c43      	adds	r3, r0, #1
 800dab6:	d102      	bne.n	800dabe <_isatty_r+0x1a>
 800dab8:	682b      	ldr	r3, [r5, #0]
 800daba:	b103      	cbz	r3, 800dabe <_isatty_r+0x1a>
 800dabc:	6023      	str	r3, [r4, #0]
 800dabe:	bd38      	pop	{r3, r4, r5, pc}
 800dac0:	20000278 	.word	0x20000278

0800dac4 <_init>:
 800dac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac6:	bf00      	nop
 800dac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daca:	bc08      	pop	{r3}
 800dacc:	469e      	mov	lr, r3
 800dace:	4770      	bx	lr

0800dad0 <_fini>:
 800dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad2:	bf00      	nop
 800dad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dad6:	bc08      	pop	{r3}
 800dad8:	469e      	mov	lr, r3
 800dada:	4770      	bx	lr
