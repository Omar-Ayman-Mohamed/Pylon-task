
Pylon_task_submission_clean_ver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008564  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025a8  08008700  08008700  00009700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca8  0800aca8  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800aca8  0800aca8  0000bca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acb0  0800acb0  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb0  0800acb0  0000bcb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800acb4  0800acb4  0000bcb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800acb8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  0800ad28  0000c070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800ad28  0000c27c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e2bf  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002814  00000000  00000000  0001a35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  0001cb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e7  00000000  00000000  0001d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018069  00000000  00000000  0001e237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012259  00000000  00000000  000362a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2e3  00000000  00000000  000484f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d77dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab0  00000000  00000000  000d7820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000db2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080086e4 	.word	0x080086e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080086e4 	.word	0x080086e4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <padding_data_for_AES_CBC_encryption>:
/**
 * function to pad data for AES-CBC encryption , as this format deals with data blocks of 16 bytes
 * if the data is shorter , we will need padding
 * this padding is inspired by PKCS#7 , but i padded the values with zero's instead
 * */
void padding_data_for_AES_CBC_encryption(unsigned char*original_text,size_t original_text_length,unsigned char * output){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
    memcpy(output, original_text, original_text_length);
 80004e4:	68ba      	ldr	r2, [r7, #8]
 80004e6:	68f9      	ldr	r1, [r7, #12]
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f007 ff72 	bl	80083d2 <memcpy>
    memset(output + original_text_length, 0x00, 128 - original_text_length);  //padding
 80004ee:	687a      	ldr	r2, [r7, #4]
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	18d0      	adds	r0, r2, r3
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80004fa:	461a      	mov	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f007 fedd 	bl	80082bc <memset>
}
 8000502:	bf00      	nop
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <AES_Encryption>:
 * Parms : padded_message_len length of message to be encrypted after padding
 * padded_clear_message : padded message to be encrypted
 * padded_encrypted_message : output buffer for data after encryption
 *
 *  */
void AES_Encryption(unsigned char *key,unsigned char *iv,size_t padded_message_len ,  unsigned char * padded_clear_message, unsigned char*padded_encrypted_message){
 800050c:	b590      	push	{r4, r7, lr}
 800050e:	b0cd      	sub	sp, #308	@ 0x134
 8000510:	af02      	add	r7, sp, #8
 8000512:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8000516:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 800051a:	6020      	str	r0, [r4, #0]
 800051c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8000520:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8000524:	6001      	str	r1, [r0, #0]
 8000526:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800052a:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 800052e:	600a      	str	r2, [r1, #0]
 8000530:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000534:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000538:	6013      	str	r3, [r2, #0]
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 800053a:	f107 0310 	add.w	r3, r7, #16
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fd73 	bl	800302a <mbedtls_aes_init>
	if (mbedtls_aes_setkey_enc(&aes, key, 256) != 0) {
 8000544:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000548:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800054c:	f107 0010 	add.w	r0, r7, #16
 8000550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000554:	6819      	ldr	r1, [r3, #0]
 8000556:	f002 fd87 	bl	8003068 <mbedtls_aes_setkey_enc>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d003      	beq.n	8000568 <AES_Encryption+0x5c>
    printf("Failed to set AES encryption key\n");
 8000560:	4815      	ldr	r0, [pc, #84]	@ (80005b8 <AES_Encryption+0xac>)
 8000562:	f007 fdcb 	bl	80080fc <puts>
    return 1;
 8000566:	e023      	b.n	80005b0 <AES_Encryption+0xa4>
}

if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, padded_message_len, iv, padded_clear_message, padded_encrypted_message) != 0) {
 8000568:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800056c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000570:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000574:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8000578:	f107 0010 	add.w	r0, r7, #16
 800057c:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8000580:	9101      	str	r1, [sp, #4]
 8000582:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8000586:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 800058a:	6809      	ldr	r1, [r1, #0]
 800058c:	9100      	str	r1, [sp, #0]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	2101      	movs	r1, #1
 8000594:	f003 fe4d 	bl	8004232 <mbedtls_aes_crypt_cbc>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d003      	beq.n	80005a6 <AES_Encryption+0x9a>
    printf("Encryption failed\n");
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <AES_Encryption+0xb0>)
 80005a0:	f007 fdac 	bl	80080fc <puts>
    return 1;
 80005a4:	e004      	b.n	80005b0 <AES_Encryption+0xa4>
}
mbedtls_aes_free(&aes);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fd4b 	bl	8003046 <mbedtls_aes_free>
}
 80005b0:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	08008700 	.word	0x08008700
 80005bc:	08008724 	.word	0x08008724

080005c0 <AES_Decryption>:
void AES_Decryption(unsigned char *key,unsigned char *iv,size_t padded_message_len ,unsigned char * padded_Encrypted_message,unsigned char*padded_decrytped_message){
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b0cd      	sub	sp, #308	@ 0x134
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 80005ca:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80005ce:	6020      	str	r0, [r4, #0]
 80005d0:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80005d4:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 80005d8:	6001      	str	r1, [r0, #0]
 80005da:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 80005de:	f5a1 7192 	sub.w	r1, r1, #292	@ 0x124
 80005e2:	600a      	str	r2, [r1, #0]
 80005e4:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80005e8:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 80005ec:	6013      	str	r3, [r2, #0]

// Decryption
//   memcpy(iv_copy, iv, AES_BLOCK_SIZE); // Reset IV for decryption
    mbedtls_aes_context aes;
    mbedtls_aes_init(&aes);
 80005ee:	f107 0310 	add.w	r3, r7, #16
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fd19 	bl	800302a <mbedtls_aes_init>
if (mbedtls_aes_setkey_dec(&aes, key, 256) != 0) {
 80005f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80005fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000600:	f107 0010 	add.w	r0, r7, #16
 8000604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000608:	6819      	ldr	r1, [r3, #0]
 800060a:	f002 ff03 	bl	8003414 <mbedtls_aes_setkey_dec>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <AES_Decryption+0x5c>
    printf("Failed to set AES decryption key\n");
 8000614:	4815      	ldr	r0, [pc, #84]	@ (800066c <AES_Decryption+0xac>)
 8000616:	f007 fd71 	bl	80080fc <puts>
    return 1;
 800061a:	e023      	b.n	8000664 <AES_Decryption+0xa4>
}

if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, padded_message_len, iv, padded_Encrypted_message, padded_decrytped_message) != 0) {
 800061c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8000620:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000624:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8000628:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800062c:	f107 0010 	add.w	r0, r7, #16
 8000630:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8000634:	9101      	str	r1, [sp, #4]
 8000636:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 800063a:	f5a1 7194 	sub.w	r1, r1, #296	@ 0x128
 800063e:	6809      	ldr	r1, [r1, #0]
 8000640:	9100      	str	r1, [sp, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6812      	ldr	r2, [r2, #0]
 8000646:	2100      	movs	r1, #0
 8000648:	f003 fdf3 	bl	8004232 <mbedtls_aes_crypt_cbc>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <AES_Decryption+0x9a>
    printf("Decryption failed\n");
 8000652:	4807      	ldr	r0, [pc, #28]	@ (8000670 <AES_Decryption+0xb0>)
 8000654:	f007 fd52 	bl	80080fc <puts>
    return 1;
 8000658:	e004      	b.n	8000664 <AES_Decryption+0xa4>
}
mbedtls_aes_free(&aes);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fcf1 	bl	8003046 <mbedtls_aes_free>
}
 8000664:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 8000668:	46bd      	mov	sp, r7
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	08008738 	.word	0x08008738
 8000670:	0800875c 	.word	0x0800875c

08000674 <generate_random>:
    mbedtls_gcm_free(&gcm);
    return ret;
}


void generate_random(unsigned char *buffer, size_t length,unsigned char*personalized_text,size_t personalized_text_len) {
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800067a:	af02      	add	r7, sp, #8
 800067c:	f507 7418 	add.w	r4, r7, #608	@ 0x260
 8000680:	f5a4 7415 	sub.w	r4, r4, #596	@ 0x254
 8000684:	6020      	str	r0, [r4, #0]
 8000686:	f507 7018 	add.w	r0, r7, #608	@ 0x260
 800068a:	f5a0 7016 	sub.w	r0, r0, #600	@ 0x258
 800068e:	6001      	str	r1, [r0, #0]
 8000690:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8000694:	f5a1 7117 	sub.w	r1, r1, #604	@ 0x25c
 8000698:	600a      	str	r2, [r1, #0]
 800069a:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 800069e:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80006a2:	6013      	str	r3, [r2, #0]
    mbedtls_entropy_context entropy;
    mbedtls_ctr_drbg_context ctr_drbg;

    mbedtls_entropy_init(&entropy);
 80006a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80006a8:	4618      	mov	r0, r3
 80006aa:	f004 fa80 	bl	8004bae <mbedtls_entropy_init>
    mbedtls_ctr_drbg_init(&ctr_drbg);
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fe3e 	bl	8004334 <mbedtls_ctr_drbg_init>
    mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, personalized_text, personalized_text_len);
 80006b8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80006bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80006c0:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80006c4:	f107 0010 	add.w	r0, r7, #16
 80006c8:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80006cc:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80006d0:	6812      	ldr	r2, [r2, #0]
 80006d2:	9200      	str	r2, [sp, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	460a      	mov	r2, r1
 80006d8:	490f      	ldr	r1, [pc, #60]	@ (8000718 <generate_random+0xa4>)
 80006da:	f003 fe7a 	bl	80043d2 <mbedtls_ctr_drbg_seed>
    mbedtls_ctr_drbg_random(&ctr_drbg, buffer, length);
 80006de:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80006e2:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80006e6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80006ea:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80006ee:	f107 0010 	add.w	r0, r7, #16
 80006f2:	6812      	ldr	r2, [r2, #0]
 80006f4:	6819      	ldr	r1, [r3, #0]
 80006f6:	f004 fa44 	bl	8004b82 <mbedtls_ctr_drbg_random>

    mbedtls_ctr_drbg_free(&ctr_drbg);
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fe7d 	bl	80043fe <mbedtls_ctr_drbg_free>
    mbedtls_entropy_free(&entropy);
 8000704:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fa6b 	bl	8004be4 <mbedtls_entropy_free>
}
 800070e:	bf00      	nop
 8000710:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	08004dfb 	.word	0x08004dfb

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8000722:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	  unsigned char plaintext[] = "This is a secret message";
 8000724:	4b39      	ldr	r3, [pc, #228]	@ (800080c <main+0xf0>)
 8000726:	f507 740d 	add.w	r4, r7, #564	@ 0x234
 800072a:	461d      	mov	r5, r3
 800072c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000734:	c403      	stmia	r4!, {r0, r1}
 8000736:	7022      	strb	r2, [r4, #0]
	    unsigned char ciphertext[128];
	    unsigned char decrypted[128];
	    unsigned char padded_plaintext[128];/*padded buffer for use with AES-CBC encryption*/
	    unsigned char Recieved_encrypted_data[128];
	    unsigned char Tag[TAG_SIZE];/*tag for AES-GCM encryption*/
	    size_t plaintext_len = strlen((char *)plaintext);
 8000738:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fd4b 	bl	80001d8 <strlen>
 8000742:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254

	    /*for testing purposes*/
	    unsigned char rand_key[16] = "0123456789123456";
 8000746:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800074a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800074e:	4a30      	ldr	r2, [pc, #192]	@ (8000810 <main+0xf4>)
 8000750:	461c      	mov	r4, r3
 8000752:	4613      	mov	r3, r2
 8000754:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000756:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    unsigned char rand_iv[16] = "aasd1245anmios78";
 800075a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800075e:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8000762:	4a2c      	ldr	r2, [pc, #176]	@ (8000814 <main+0xf8>)
 8000764:	461c      	mov	r4, r3
 8000766:	4613      	mov	r3, r2
 8000768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800076a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    generate_random(rand_key,16,pers,pers_len);
 800076e:	4b2a      	ldr	r3, [pc, #168]	@ (8000818 <main+0xfc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f107 0014 	add.w	r0, r7, #20
 8000776:	4a29      	ldr	r2, [pc, #164]	@ (800081c <main+0x100>)
 8000778:	2110      	movs	r1, #16
 800077a:	f7ff ff7b 	bl	8000674 <generate_random>
	    generate_random(rand_iv,16,pers,pers_len);
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <main+0xfc>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1d38      	adds	r0, r7, #4
 8000784:	4a25      	ldr	r2, [pc, #148]	@ (800081c <main+0x100>)
 8000786:	2110      	movs	r1, #16
 8000788:	f7ff ff74 	bl	8000674 <generate_random>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 fb0e 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f84c 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f000 f902 	bl	800099c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000798:	f000 f8a8 	bl	80008ec <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800079c:	f000 f8d4 	bl	8000948 <MX_USART1_UART_Init>
  MX_MBEDTLS_Init();
 80007a0:	f002 fc3c 	bl	800301c <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */
 /* aes_gcm_encrypt(GCM_key,AES_GCM_KEY_SIZE,GCM_iv,AES_GCM_IV_SIZE,plaintext,plaintext_len,ciphertext,aad,aad_len,Tag);
  HAL_UART_Transmit(&huart1,ciphertext,padded_len,HAL_MAX_DELAY);
  aes_gcm_decrypt(GCM_key,AES_GCM_KEY_SIZE,GCM_iv,AES_GCM_IV_SIZE,ciphertext,plaintext_len,decrypted,aad,aad_len,Tag);
 */
  size_t padded_len = ((plaintext_len + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE; // Pad to block size
 80007a4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80007a8:	330f      	adds	r3, #15
 80007aa:	f023 030f 	bic.w	r3, r3, #15
 80007ae:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  padding_data_for_AES_CBC_encryption(plaintext,plaintext_len,padded_plaintext);
 80007b2:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80007b6:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 80007ba:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff fe8a 	bl	80004d8 <padding_data_for_AES_CBC_encryption>
  AES_Encryption(key,iv,padded_len,padded_plaintext,ciphertext);
 80007c4:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80007c8:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80007cc:	9300      	str	r3, [sp, #0]
 80007ce:	4613      	mov	r3, r2
 80007d0:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 80007d4:	4912      	ldr	r1, [pc, #72]	@ (8000820 <main+0x104>)
 80007d6:	4813      	ldr	r0, [pc, #76]	@ (8000824 <main+0x108>)
 80007d8:	f7ff fe98 	bl	800050c <AES_Encryption>
  HAL_UART_Transmit(&huart1,ciphertext,padded_len,HAL_MAX_DELAY);
 80007dc:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	f507 71da 	add.w	r1, r7, #436	@ 0x1b4
 80007e6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ea:	480f      	ldr	r0, [pc, #60]	@ (8000828 <main+0x10c>)
 80007ec:	f001 fc64 	bl	80020b8 <HAL_UART_Transmit>
  AES_Decryption(key,iv,padded_len,ciphertext,decrypted);
 80007f0:	f507 72da 	add.w	r2, r7, #436	@ 0x1b4
 80007f4:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	4613      	mov	r3, r2
 80007fc:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8000800:	4907      	ldr	r1, [pc, #28]	@ (8000820 <main+0x104>)
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <main+0x108>)
 8000804:	f7ff fedc 	bl	80005c0 <AES_Decryption>
/*  printf("Decrypted text: %s\n", decrypted);*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <main+0xec>
 800080c:	08008770 	.word	0x08008770
 8000810:	0800878c 	.word	0x0800878c
 8000814:	0800879c 	.word	0x0800879c
 8000818:	20000000 	.word	0x20000000
 800081c:	080087dc 	.word	0x080087dc
 8000820:	080087cc 	.word	0x080087cc
 8000824:	080087ac 	.word	0x080087ac
 8000828:	200000e0 	.word	0x200000e0

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	@ 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	2230      	movs	r2, #48	@ 0x30
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f007 fd3e 	bl	80082bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	4b23      	ldr	r3, [pc, #140]	@ (80008e4 <SystemClock_Config+0xb8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a22      	ldr	r2, [pc, #136]	@ (80008e4 <SystemClock_Config+0xb8>)
 800085a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <SystemClock_Config+0xb8>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <SystemClock_Config+0xbc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000878:	4a1b      	ldr	r2, [pc, #108]	@ (80008e8 <SystemClock_Config+0xbc>)
 800087a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800087e:	6013      	str	r3, [r2, #0]
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <SystemClock_Config+0xbc>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088c:	2302      	movs	r3, #2
 800088e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 ff61 	bl	8001768 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008ac:	f000 f89e 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 f9c4 	bl	8001c58 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008d6:	f000 f889 	bl	80009ec <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3750      	adds	r7, #80	@ 0x50
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b12      	ldr	r3, [pc, #72]	@ (800093c <MX_I2C1_Init+0x50>)
 80008f2:	4a13      	ldr	r2, [pc, #76]	@ (8000940 <MX_I2C1_Init+0x54>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_I2C1_Init+0x50>)
 80008f8:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <MX_I2C1_Init+0x58>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <MX_I2C1_Init+0x50>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_I2C1_Init+0x50>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_I2C1_Init+0x50>)
 800090a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800090e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_I2C1_Init+0x50>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_I2C1_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_I2C1_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_I2C1_Init+0x50>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_I2C1_Init+0x50>)
 800092a:	f000 fdd9 	bl	80014e0 <HAL_I2C_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000934:	f000 f85a 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2000008c 	.word	0x2000008c
 8000940:	40005400 	.word	0x40005400
 8000944:	000186a0 	.word	0x000186a0

08000948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <MX_USART1_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	@ (8000994 <MX_USART1_UART_Init+0x4c>)
 8000980:	f001 fb4a 	bl	8002018 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f82f 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200000e0 	.word	0x200000e0
 8000998:	40011000 	.word	0x40011000

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_GPIO_Init+0x4c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <MX_GPIO_Init+0x4c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <MX_GPIO_Init+0x4c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_GPIO_Init+0x4c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <MX_GPIO_Init+0x4c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_GPIO_Init+0x4c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a19      	ldr	r2, [pc, #100]	@ (8000acc <HAL_I2C_MspInit+0x84>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d12b      	bne.n	8000ac2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a17      	ldr	r2, [pc, #92]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a86:	23c0      	movs	r3, #192	@ 0xc0
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8a:	2312      	movs	r3, #18
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a96:	2304      	movs	r3, #4
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <HAL_I2C_MspInit+0x8c>)
 8000aa2:	f000 fb99 	bl	80011d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	4a08      	ldr	r2, [pc, #32]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <HAL_I2C_MspInit+0x88>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	@ 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b6c <HAL_UART_MspInit+0x94>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d134      	bne.n	8000b64 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_UART_MspInit+0x98>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b02:	4a1b      	ldr	r2, [pc, #108]	@ (8000b70 <HAL_UART_MspInit+0x98>)
 8000b04:	f043 0310 	orr.w	r3, r3, #16
 8000b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <HAL_UART_MspInit+0x98>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0e:	f003 0310 	and.w	r3, r3, #16
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_UART_MspInit+0x98>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <HAL_UART_MspInit+0x98>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_UART_MspInit+0x98>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <HAL_UART_MspInit+0x9c>)
 8000b50:	f000 fb42 	bl	80011d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2025      	movs	r0, #37	@ 0x25
 8000b5a:	f000 fa74 	bl	8001046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b5e:	2025      	movs	r0, #37	@ 0x25
 8000b60:	f000 fa8d 	bl	800107e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40011000 	.word	0x40011000
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f93f 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <USART1_IRQHandler+0x10>)
 8000bde:	f001 faf7 	bl	80021d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200000e0 	.word	0x200000e0

08000bec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e00a      	b.n	8000c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bfe:	f3af 8000 	nop.w
 8000c02:	4601      	mov	r1, r0
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	b2ca      	uxtb	r2, r1
 8000c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	3301      	adds	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbf0      	blt.n	8000bfe <_read+0x12>
  }

  return len;
 8000c1c:	687b      	ldr	r3, [r7, #4]
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e009      	b.n	8000c4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	60ba      	str	r2, [r7, #8]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbf1      	blt.n	8000c38 <_write+0x12>
  }
  return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <_close>:

int _close(int file)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b083      	sub	sp, #12
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c86:	605a      	str	r2, [r3, #4]
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <_isatty>:

int _isatty(int file)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f007 fb3e 	bl	8008378 <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20010000 	.word	0x20010000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	20000128 	.word	0x20000128
 8000d30:	20000280 	.word	0x20000280

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d5c:	f7ff ffea 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	@ (8000da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f007 fafd 	bl	8008384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fcc7 	bl	800071c <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d9c:	0800acb8 	.word	0x0800acb8
  ldr r2, =_sbss
 8000da0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da4:	2000027c 	.word	0x2000027c

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f92b 	bl	8001030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fe0a 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f943 	bl	800109a <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f90b 	bl	8001046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000004 	.word	0x20000004
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	20000008 	.word	0x20000008

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	2000012c 	.word	0x2000012c

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000012c 	.word	0x2000012c

08000e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000eac:	4013      	ands	r3, r2
 8000eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec2:	4a04      	ldr	r2, [pc, #16]	@ (8000ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	60d3      	str	r3, [r2, #12]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000edc:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	f003 0307 	and.w	r3, r3, #7
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	db0b      	blt.n	8000f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	f003 021f 	and.w	r2, r3, #31
 8000f0c:	4907      	ldr	r1, [pc, #28]	@ (8000f2c <__NVIC_EnableIRQ+0x38>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	095b      	lsrs	r3, r3, #5
 8000f14:	2001      	movs	r0, #1
 8000f16:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	6039      	str	r1, [r7, #0]
 8000f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	db0a      	blt.n	8000f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	490c      	ldr	r1, [pc, #48]	@ (8000f7c <__NVIC_SetPriority+0x4c>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	440b      	add	r3, r1
 8000f54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f58:	e00a      	b.n	8000f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4908      	ldr	r1, [pc, #32]	@ (8000f80 <__NVIC_SetPriority+0x50>)
 8000f60:	79fb      	ldrb	r3, [r7, #7]
 8000f62:	f003 030f 	and.w	r3, r3, #15
 8000f66:	3b04      	subs	r3, #4
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	761a      	strb	r2, [r3, #24]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b089      	sub	sp, #36	@ 0x24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f1c3 0307 	rsb	r3, r3, #7
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	bf28      	it	cs
 8000fa2:	2304      	movcs	r3, #4
 8000fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3304      	adds	r3, #4
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d902      	bls.n	8000fb4 <NVIC_EncodePriority+0x30>
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3b03      	subs	r3, #3
 8000fb2:	e000      	b.n	8000fb6 <NVIC_EncodePriority+0x32>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43d9      	mvns	r1, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	4313      	orrs	r3, r2
         );
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3724      	adds	r7, #36	@ 0x24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ffc:	d301      	bcc.n	8001002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00f      	b.n	8001022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <SysTick_Config+0x40>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100a:	210f      	movs	r1, #15
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f7ff ff8e 	bl	8000f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <SysTick_Config+0x40>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	@ (800102c <SysTick_Config+0x40>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ff29 	bl	8000e90 <__NVIC_SetPriorityGrouping>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001058:	f7ff ff3e 	bl	8000ed8 <__NVIC_GetPriorityGrouping>
 800105c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	6978      	ldr	r0, [r7, #20]
 8001064:	f7ff ff8e 	bl	8000f84 <NVIC_EncodePriority>
 8001068:	4602      	mov	r2, r0
 800106a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff5d 	bl	8000f30 <__NVIC_SetPriority>
}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff31 	bl	8000ef4 <__NVIC_EnableIRQ>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ffa2 	bl	8000fec <SysTick_Config>
 80010a8:	4603      	mov	r3, r0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010c0:	f7ff feda 	bl	8000e78 <HAL_GetTick>
 80010c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d008      	beq.n	80010e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2280      	movs	r2, #128	@ 0x80
 80010d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e052      	b.n	800118a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0216 	bic.w	r2, r2, #22
 80010f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001102:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <HAL_DMA_Abort+0x62>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f022 0208 	bic.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001134:	e013      	b.n	800115e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001136:	f7ff fe9f 	bl	8000e78 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b05      	cmp	r3, #5
 8001142:	d90c      	bls.n	800115e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2220      	movs	r2, #32
 8001148:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2203      	movs	r2, #3
 800114e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e015      	b.n	800118a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1e4      	bne.n	8001136 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001170:	223f      	movs	r2, #63	@ 0x3f
 8001172:	409a      	lsls	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3710      	adds	r7, #16
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d004      	beq.n	80011b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2280      	movs	r2, #128	@ 0x80
 80011aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e00c      	b.n	80011ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2205      	movs	r2, #5
 80011b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f022 0201 	bic.w	r2, r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d8:	b480      	push	{r7}
 80011da:	b089      	sub	sp, #36	@ 0x24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
 80011f2:	e159      	b.n	80014a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	429a      	cmp	r2, r3
 800120e:	f040 8148 	bne.w	80014a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001226:	2b02      	cmp	r3, #2
 8001228:	d130      	bne.n	800128c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001260:	2201      	movs	r2, #1
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 0201 	and.w	r2, r3, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4313      	orrs	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b03      	cmp	r3, #3
 8001296:	d017      	beq.n	80012c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d123      	bne.n	800131c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	08da      	lsrs	r2, r3, #3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3208      	adds	r2, #8
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	69b9      	ldr	r1, [r7, #24]
 8001318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0203 	and.w	r2, r3, #3
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 80a2 	beq.w	80014a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b57      	ldr	r3, [pc, #348]	@ (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a56      	ldr	r2, [pc, #344]	@ (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b54      	ldr	r3, [pc, #336]	@ (80014c0 <HAL_GPIO_Init+0x2e8>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137a:	4a52      	ldr	r2, [pc, #328]	@ (80014c4 <HAL_GPIO_Init+0x2ec>)
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	089b      	lsrs	r3, r3, #2
 8001380:	3302      	adds	r3, #2
 8001382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	220f      	movs	r2, #15
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a49      	ldr	r2, [pc, #292]	@ (80014c8 <HAL_GPIO_Init+0x2f0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x202>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a48      	ldr	r2, [pc, #288]	@ (80014cc <HAL_GPIO_Init+0x2f4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x1fe>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a47      	ldr	r2, [pc, #284]	@ (80014d0 <HAL_GPIO_Init+0x2f8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x1fa>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a46      	ldr	r2, [pc, #280]	@ (80014d4 <HAL_GPIO_Init+0x2fc>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x1f6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a45      	ldr	r2, [pc, #276]	@ (80014d8 <HAL_GPIO_Init+0x300>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x1f2>
 80013c6:	2304      	movs	r3, #4
 80013c8:	e008      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013ca:	2307      	movs	r3, #7
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x204>
 80013da:	2300      	movs	r3, #0
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f002 0203 	and.w	r2, r2, #3
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	@ (80014c4 <HAL_GPIO_Init+0x2ec>)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fa:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <HAL_GPIO_Init+0x304>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800141e:	4a2f      	ldr	r2, [pc, #188]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001424:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001448:	4a24      	ldr	r2, [pc, #144]	@ (80014dc <HAL_GPIO_Init+0x304>)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800144e:	4b23      	ldr	r3, [pc, #140]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001472:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <HAL_GPIO_Init+0x304>)
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001478:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_GPIO_Init+0x304>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	43db      	mvns	r3, r3
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	4013      	ands	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800149c:	4a0f      	ldr	r2, [pc, #60]	@ (80014dc <HAL_GPIO_Init+0x304>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	2b0f      	cmp	r3, #15
 80014ac:	f67f aea2 	bls.w	80011f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3724      	adds	r7, #36	@ 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40013800 	.word	0x40013800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40013c00 	.word	0x40013c00

080014e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e12b      	b.n	800174a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fa9e 	bl	8000a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2224      	movs	r2, #36	@ 0x24
 8001510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0201 	bic.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001544:	f000 fd40 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8001548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4a81      	ldr	r2, [pc, #516]	@ (8001754 <HAL_I2C_Init+0x274>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d807      	bhi.n	8001564 <HAL_I2C_Init+0x84>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4a80      	ldr	r2, [pc, #512]	@ (8001758 <HAL_I2C_Init+0x278>)
 8001558:	4293      	cmp	r3, r2
 800155a:	bf94      	ite	ls
 800155c:	2301      	movls	r3, #1
 800155e:	2300      	movhi	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	e006      	b.n	8001572 <HAL_I2C_Init+0x92>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4a7d      	ldr	r2, [pc, #500]	@ (800175c <HAL_I2C_Init+0x27c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	bf94      	ite	ls
 800156c:	2301      	movls	r3, #1
 800156e:	2300      	movhi	r3, #0
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0e7      	b.n	800174a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	4a78      	ldr	r2, [pc, #480]	@ (8001760 <HAL_I2C_Init+0x280>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	0c9b      	lsrs	r3, r3, #18
 8001584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	430a      	orrs	r2, r1
 8001598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001754 <HAL_I2C_Init+0x274>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d802      	bhi.n	80015b4 <HAL_I2C_Init+0xd4>
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3301      	adds	r3, #1
 80015b2:	e009      	b.n	80015c8 <HAL_I2C_Init+0xe8>
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	4a69      	ldr	r2, [pc, #420]	@ (8001764 <HAL_I2C_Init+0x284>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	3301      	adds	r3, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	430b      	orrs	r3, r1
 80015ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	495c      	ldr	r1, [pc, #368]	@ (8001754 <HAL_I2C_Init+0x274>)
 80015e4:	428b      	cmp	r3, r1
 80015e6:	d819      	bhi.n	800161c <HAL_I2C_Init+0x13c>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e59      	subs	r1, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f6:	1c59      	adds	r1, r3, #1
 80015f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015fc:	400b      	ands	r3, r1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00a      	beq.n	8001618 <HAL_I2C_Init+0x138>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1e59      	subs	r1, r3, #1
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001610:	3301      	adds	r3, #1
 8001612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001616:	e051      	b.n	80016bc <HAL_I2C_Init+0x1dc>
 8001618:	2304      	movs	r3, #4
 800161a:	e04f      	b.n	80016bc <HAL_I2C_Init+0x1dc>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d111      	bne.n	8001648 <HAL_I2C_Init+0x168>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	1e58      	subs	r0, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6859      	ldr	r1, [r3, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	440b      	add	r3, r1
 8001632:	fbb0 f3f3 	udiv	r3, r0, r3
 8001636:	3301      	adds	r3, #1
 8001638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	e012      	b.n	800166e <HAL_I2C_Init+0x18e>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	1e58      	subs	r0, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6859      	ldr	r1, [r3, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	0099      	lsls	r1, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	fbb0 f3f3 	udiv	r3, r0, r3
 800165e:	3301      	adds	r3, #1
 8001660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf0c      	ite	eq
 8001668:	2301      	moveq	r3, #1
 800166a:	2300      	movne	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_Init+0x196>
 8001672:	2301      	movs	r3, #1
 8001674:	e022      	b.n	80016bc <HAL_I2C_Init+0x1dc>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10e      	bne.n	800169c <HAL_I2C_Init+0x1bc>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1e58      	subs	r0, r3, #1
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	440b      	add	r3, r1
 800168c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001690:	3301      	adds	r3, #1
 8001692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169a:	e00f      	b.n	80016bc <HAL_I2C_Init+0x1dc>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1e58      	subs	r0, r3, #1
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	0099      	lsls	r1, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	6809      	ldr	r1, [r1, #0]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69da      	ldr	r2, [r3, #28]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	430a      	orrs	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80016ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6911      	ldr	r1, [r2, #16]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68d2      	ldr	r2, [r2, #12]
 80016f6:	4311      	orrs	r1, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0201 	orr.w	r2, r2, #1
 800172a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2220      	movs	r2, #32
 8001736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	000186a0 	.word	0x000186a0
 8001758:	001e847f 	.word	0x001e847f
 800175c:	003d08ff 	.word	0x003d08ff
 8001760:	431bde83 	.word	0x431bde83
 8001764:	10624dd3 	.word	0x10624dd3

08001768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e267      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d075      	beq.n	8001872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001786:	4b88      	ldr	r3, [pc, #544]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b04      	cmp	r3, #4
 8001790:	d00c      	beq.n	80017ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001792:	4b85      	ldr	r3, [pc, #532]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800179a:	2b08      	cmp	r3, #8
 800179c:	d112      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800179e:	4b82      	ldr	r3, [pc, #520]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017aa:	d10b      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	4b7e      	ldr	r3, [pc, #504]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d05b      	beq.n	8001870 <HAL_RCC_OscConfig+0x108>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d157      	bne.n	8001870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e242      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x74>
 80017ce:	4b76      	ldr	r3, [pc, #472]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a75      	ldr	r2, [pc, #468]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	e01d      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017e4:	d10c      	bne.n	8001800 <HAL_RCC_OscConfig+0x98>
 80017e6:	4b70      	ldr	r3, [pc, #448]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6f      	ldr	r2, [pc, #444]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	4b6d      	ldr	r3, [pc, #436]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a6c      	ldr	r2, [pc, #432]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80017f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xb0>
 8001800:	4b69      	ldr	r3, [pc, #420]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a68      	ldr	r2, [pc, #416]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a65      	ldr	r2, [pc, #404]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001812:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d013      	beq.n	8001848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fb2a 	bl	8000e78 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001828:	f7ff fb26 	bl	8000e78 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b64      	cmp	r3, #100	@ 0x64
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e207      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b5b      	ldr	r3, [pc, #364]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0xc0>
 8001846:	e014      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001848:	f7ff fb16 	bl	8000e78 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb12 	bl	8000e78 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e1f3      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	4b51      	ldr	r3, [pc, #324]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0xe8>
 800186e:	e000      	b.n	8001872 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d063      	beq.n	8001946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800187e:	4b4a      	ldr	r3, [pc, #296]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 030c 	and.w	r3, r3, #12
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00b      	beq.n	80018a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188a:	4b47      	ldr	r3, [pc, #284]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001892:	2b08      	cmp	r3, #8
 8001894:	d11c      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	4b44      	ldr	r3, [pc, #272]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a2:	4b41      	ldr	r3, [pc, #260]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e1c7      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4b3b      	ldr	r3, [pc, #236]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4937      	ldr	r1, [pc, #220]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	e03a      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d020      	beq.n	800191a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d8:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <HAL_RCC_OscConfig+0x244>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff facb 	bl	8000e78 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff fac7 	bl	8000e78 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1a8      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4925      	ldr	r1, [pc, #148]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_RCC_OscConfig+0x244>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff faaa 	bl	8000e78 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001928:	f7ff faa6 	bl	8000e78 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e187      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193a:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b00      	cmp	r3, #0
 8001950:	d036      	beq.n	80019c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d016      	beq.n	8001988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195a:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_RCC_OscConfig+0x248>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001960:	f7ff fa8a 	bl	8000e78 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff fa86 	bl	8000e78 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e167      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	4b0b      	ldr	r3, [pc, #44]	@ (80019a8 <HAL_RCC_OscConfig+0x240>)
 800197c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x200>
 8001986:	e01b      	b.n	80019c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001988:	4b09      	ldr	r3, [pc, #36]	@ (80019b0 <HAL_RCC_OscConfig+0x248>)
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff fa73 	bl	8000e78 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	e00e      	b.n	80019b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff fa6f 	bl	8000e78 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d907      	bls.n	80019b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e150      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	42470000 	.word	0x42470000
 80019b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b88      	ldr	r3, [pc, #544]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ea      	bne.n	8001996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 8097 	beq.w	8001afc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b81      	ldr	r3, [pc, #516]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	4a7c      	ldr	r2, [pc, #496]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ee:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019fa:	2301      	movs	r3, #1
 80019fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fe:	4b77      	ldr	r3, [pc, #476]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d118      	bne.n	8001a3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a0a:	4b74      	ldr	r3, [pc, #464]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a73      	ldr	r2, [pc, #460]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a16:	f7ff fa2f 	bl	8000e78 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1e:	f7ff fa2b 	bl	8000e78 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e10c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	4b6a      	ldr	r3, [pc, #424]	@ (8001bdc <HAL_RCC_OscConfig+0x474>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d0f0      	beq.n	8001a1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d106      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2ea>
 8001a44:	4b64      	ldr	r3, [pc, #400]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a63      	ldr	r2, [pc, #396]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x30c>
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	4a5b      	ldr	r2, [pc, #364]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x324>
 8001a74:	4b58      	ldr	r3, [pc, #352]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a57      	ldr	r2, [pc, #348]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a80:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a54      	ldr	r2, [pc, #336]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff f9f0 	bl	8000e78 <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f9ec 	bl	8000e78 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0cb      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab2:	4b49      	ldr	r3, [pc, #292]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x334>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f9da 	bl	8000e78 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f9d6 	bl	8000e78 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e0b5      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ade:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	4a38      	ldr	r2, [pc, #224]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80a1 	beq.w	8001c48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b06:	4b34      	ldr	r3, [pc, #208]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d05c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d141      	bne.n	8001b9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9aa 	bl	8000e78 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff f9a6 	bl	8000e78 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e087      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3a:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	431a      	orrs	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	085b      	lsrs	r3, r3, #1
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b68:	061b      	lsls	r3, r3, #24
 8001b6a:	491b      	ldr	r1, [pc, #108]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b76:	f7ff f97f 	bl	8000e78 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f97b 	bl	8000e78 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e05c      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x416>
 8001b9c:	e054      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_RCC_OscConfig+0x478>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f968 	bl	8000e78 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f964 	bl	8000e78 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e045      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x444>
 8001bca:	e03d      	b.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e038      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x4ec>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d028      	beq.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d121      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d11a      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d111      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0cc      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b68      	ldr	r3, [pc, #416]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d90c      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b65      	ldr	r3, [pc, #404]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b63      	ldr	r3, [pc, #396]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b8      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b59      	ldr	r3, [pc, #356]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc4:	4b53      	ldr	r3, [pc, #332]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b50      	ldr	r3, [pc, #320]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	494d      	ldr	r1, [pc, #308]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d044      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d119      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d107      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d16:	4b3f      	ldr	r3, [pc, #252]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e06f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d26:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e067      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	4b37      	ldr	r3, [pc, #220]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f023 0203 	bic.w	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4934      	ldr	r1, [pc, #208]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d48:	f7ff f896 	bl	8000e78 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff f892 	bl	8000e78 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e04f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d66:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 020c 	and.w	r2, r3, #12
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d1eb      	bne.n	8001d50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d78:	4b25      	ldr	r3, [pc, #148]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d20c      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e032      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b19      	ldr	r3, [pc, #100]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4916      	ldr	r1, [pc, #88]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490e      	ldr	r1, [pc, #56]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 f821 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	@ (8001e18 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	4a09      	ldr	r2, [pc, #36]	@ (8001e1c <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_RCC_ClockConfig+0x1c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fff6 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00
 8001e14:	40023800 	.word	0x40023800
 8001e18:	080087e8 	.word	0x080087e8
 8001e1c:	20000004 	.word	0x20000004
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e28:	b090      	sub	sp, #64	@ 0x40
 8001e2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e3c:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d00d      	beq.n	8001e64 <HAL_RCC_GetSysClockFreq+0x40>
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	f200 80a1 	bhi.w	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x34>
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001e56:	e09b      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e58:	4b53      	ldr	r3, [pc, #332]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e5c:	e09b      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e5e:	4b53      	ldr	r3, [pc, #332]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e62:	e098      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e64:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d028      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	099b      	lsrs	r3, r3, #6
 8001e80:	2200      	movs	r2, #0
 8001e82:	623b      	str	r3, [r7, #32]
 8001e84:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e90:	fb03 f201 	mul.w	r2, r3, r1
 8001e94:	2300      	movs	r3, #0
 8001e96:	fb00 f303 	mul.w	r3, r0, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a43      	ldr	r2, [pc, #268]	@ (8001fac <HAL_RCC_GetSysClockFreq+0x188>)
 8001e9e:	fba0 1202 	umull	r1, r2, r0, r2
 8001ea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eaa:	4413      	add	r3, r2
 8001eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	61fa      	str	r2, [r7, #28]
 8001eb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ebe:	f7fe f993 	bl	80001e8 <__aeabi_uldivmod>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eca:	e053      	b.n	8001f74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ecc:	4b35      	ldr	r3, [pc, #212]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	617a      	str	r2, [r7, #20]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ede:	f04f 0b00 	mov.w	fp, #0
 8001ee2:	4652      	mov	r2, sl
 8001ee4:	465b      	mov	r3, fp
 8001ee6:	f04f 0000 	mov.w	r0, #0
 8001eea:	f04f 0100 	mov.w	r1, #0
 8001eee:	0159      	lsls	r1, r3, #5
 8001ef0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ef4:	0150      	lsls	r0, r2, #5
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	ebb2 080a 	subs.w	r8, r2, sl
 8001efe:	eb63 090b 	sbc.w	r9, r3, fp
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f16:	ebb2 0408 	subs.w	r4, r2, r8
 8001f1a:	eb63 0509 	sbc.w	r5, r3, r9
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	00eb      	lsls	r3, r5, #3
 8001f28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f2c:	00e2      	lsls	r2, r4, #3
 8001f2e:	4614      	mov	r4, r2
 8001f30:	461d      	mov	r5, r3
 8001f32:	eb14 030a 	adds.w	r3, r4, sl
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	eb45 030b 	adc.w	r3, r5, fp
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	028b      	lsls	r3, r1, #10
 8001f4e:	4621      	mov	r1, r4
 8001f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f54:	4621      	mov	r1, r4
 8001f56:	028a      	lsls	r2, r1, #10
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	60fa      	str	r2, [r7, #12]
 8001f64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f68:	f7fe f93e 	bl	80001e8 <__aeabi_uldivmod>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4613      	mov	r3, r2
 8001f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f8e:	e002      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3740      	adds	r7, #64	@ 0x40
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	00f42400 	.word	0x00f42400
 8001fac:	017d7840 	.word	0x017d7840

08001fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fcc:	f7ff fff0 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4b05      	ldr	r3, [pc, #20]	@ (8001fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	0a9b      	lsrs	r3, r3, #10
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	4903      	ldr	r1, [pc, #12]	@ (8001fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fde:	5ccb      	ldrb	r3, [r1, r3]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	080087f8 	.word	0x080087f8

08001ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ff4:	f7ff ffdc 	bl	8001fb0 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	0b5b      	lsrs	r3, r3, #13
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4903      	ldr	r1, [pc, #12]	@ (8002014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	bd80      	pop	{r7, pc}
 8002010:	40023800 	.word	0x40023800
 8002014:	080087f8 	.word	0x080087f8

08002018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e042      	b.n	80020b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fd4a 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	@ 0x24
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800205a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fd69 	bl	8002b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	@ 0x28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d175      	bne.n	80021c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_UART_Transmit+0x2c>
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e06e      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2221      	movs	r2, #33	@ 0x21
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f6:	f7fe febf 	bl	8000e78 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	88fa      	ldrh	r2, [r7, #6]
 8002100:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002110:	d108      	bne.n	8002124 <HAL_UART_Transmit+0x6c>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e003      	b.n	800212c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800212c:	e02e      	b.n	800218c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	@ 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fb05 	bl	8002748 <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e03a      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002164:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3302      	adds	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e007      	b.n	800217e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3301      	adds	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002182:	b29b      	uxth	r3, r3
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002190:	b29b      	uxth	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1cb      	bne.n	800212e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	2200      	movs	r2, #0
 800219e:	2140      	movs	r1, #64	@ 0x40
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fad1 	bl	8002748 <UART_WaitOnFlagUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d005      	beq.n	80021b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e006      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b0ba      	sub	sp, #232	@ 0xe8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800220e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10f      	bne.n	8002236 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_UART_IRQHandler+0x66>
 8002222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002226:	f003 0320 	and.w	r3, r3, #32
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fbc2 	bl	80029b8 <UART_Receive_IT>
      return;
 8002234:	e25b      	b.n	80026ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80de 	beq.w	80023fc <HAL_UART_IRQHandler+0x22c>
 8002240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800224c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002250:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80d1 	beq.w	80023fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800225a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_UART_IRQHandler+0xae>
 8002266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800227e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_UART_IRQHandler+0xd2>
 800228a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f043 0202 	orr.w	r2, r3, #2
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00b      	beq.n	80022c6 <HAL_UART_IRQHandler+0xf6>
 80022ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022be:	f043 0204 	orr.w	r2, r3, #4
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d011      	beq.n	80022f6 <HAL_UART_IRQHandler+0x126>
 80022d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d105      	bne.n	80022ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	f043 0208 	orr.w	r2, r3, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 81f2 	beq.w	80026e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_UART_IRQHandler+0x14e>
 800230c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002310:	f003 0320 	and.w	r3, r3, #32
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fb4d 	bl	80029b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002328:	2b40      	cmp	r3, #64	@ 0x40
 800232a:	bf0c      	ite	eq
 800232c:	2301      	moveq	r3, #1
 800232e:	2300      	movne	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <HAL_UART_IRQHandler+0x17a>
 8002342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d04f      	beq.n	80023ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 fa55 	bl	80027fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800235a:	2b40      	cmp	r3, #64	@ 0x40
 800235c:	d141      	bne.n	80023e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3314      	adds	r3, #20
 8002364:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800236c:	e853 3f00 	ldrex	r3, [r3]
 8002370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002374:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800237c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	3314      	adds	r3, #20
 8002386:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800238a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800238e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002392:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002396:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800239a:	e841 2300 	strex	r3, r2, [r1]
 800239e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1d9      	bne.n	800235e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d013      	beq.n	80023da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b6:	4a7e      	ldr	r2, [pc, #504]	@ (80025b0 <HAL_UART_IRQHandler+0x3e0>)
 80023b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fee7 	bl	8001192 <HAL_DMA_Abort_IT>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023d4:	4610      	mov	r0, r2
 80023d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023d8:	e00e      	b.n	80023f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f99e 	bl	800271c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e0:	e00a      	b.n	80023f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f99a 	bl	800271c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e8:	e006      	b.n	80023f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f996 	bl	800271c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80023f6:	e175      	b.n	80026e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f8:	bf00      	nop
    return;
 80023fa:	e173      	b.n	80026e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	2b01      	cmp	r3, #1
 8002402:	f040 814f 	bne.w	80026a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800240a:	f003 0310 	and.w	r3, r3, #16
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8148 	beq.w	80026a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002418:	f003 0310 	and.w	r3, r3, #16
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8141 	beq.w	80026a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002442:	2b40      	cmp	r3, #64	@ 0x40
 8002444:	f040 80b6 	bne.w	80025b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002454:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 8145 	beq.w	80026e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002462:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002466:	429a      	cmp	r2, r3
 8002468:	f080 813e 	bcs.w	80026e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002472:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247e:	f000 8088 	beq.w	8002592 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002490:	e853 3f00 	ldrex	r3, [r3]
 8002494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800249c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	330c      	adds	r3, #12
 80024aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80024ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80024b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80024ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80024be:	e841 2300 	strex	r3, r2, [r1]
 80024c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80024c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1d9      	bne.n	8002482 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3314      	adds	r3, #20
 80024d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024d8:	e853 3f00 	ldrex	r3, [r3]
 80024dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80024de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	3314      	adds	r3, #20
 80024ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80024f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e1      	bne.n	80024ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3314      	adds	r3, #20
 8002510:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800251a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800251c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3314      	adds	r3, #20
 800252a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800252e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002530:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002532:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002534:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002536:	e841 2300 	strex	r3, r2, [r1]
 800253a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800253c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e3      	bne.n	800250a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800255a:	e853 3f00 	ldrex	r3, [r3]
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002562:	f023 0310 	bic.w	r3, r3, #16
 8002566:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	330c      	adds	r3, #12
 8002570:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002574:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002576:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002578:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800257a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800257c:	e841 2300 	strex	r3, r2, [r1]
 8002580:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e3      	bne.n	8002550 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fd90 	bl	80010b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f8c1 	bl	8002730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025ae:	e09b      	b.n	80026e8 <HAL_UART_IRQHandler+0x518>
 80025b0:	080028c1 	.word	0x080028c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 808e 	beq.w	80026ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8089 	beq.w	80026ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	330c      	adds	r3, #12
 80025e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	e853 3f00 	ldrex	r3, [r3]
 80025e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80025ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80025fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002600:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002602:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002604:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002606:	e841 2300 	strex	r3, r2, [r1]
 800260a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800260c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1e3      	bne.n	80025da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3314      	adds	r3, #20
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	e853 3f00 	ldrex	r3, [r3]
 8002620:	623b      	str	r3, [r7, #32]
   return(result);
 8002622:	6a3b      	ldr	r3, [r7, #32]
 8002624:	f023 0301 	bic.w	r3, r3, #1
 8002628:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3314      	adds	r3, #20
 8002632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002636:	633a      	str	r2, [r7, #48]	@ 0x30
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800263c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800263e:	e841 2300 	strex	r3, r2, [r1]
 8002642:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1e3      	bne.n	8002612 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	e853 3f00 	ldrex	r3, [r3]
 8002666:	60fb      	str	r3, [r7, #12]
   return(result);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0310 	bic.w	r3, r3, #16
 800266e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800267c:	61fa      	str	r2, [r7, #28]
 800267e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002680:	69b9      	ldr	r1, [r7, #24]
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	e841 2300 	strex	r3, r2, [r1]
 8002688:	617b      	str	r3, [r7, #20]
   return(result);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1e3      	bne.n	8002658 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f847 	bl	8002730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026a2:	e023      	b.n	80026ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <HAL_UART_IRQHandler+0x4f4>
 80026b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f913 	bl	80028e8 <UART_Transmit_IT>
    return;
 80026c2:	e014      	b.n	80026ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80026c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <HAL_UART_IRQHandler+0x51e>
 80026d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f953 	bl	8002988 <UART_EndTransmit_IT>
    return;
 80026e2:	e004      	b.n	80026ee <HAL_UART_IRQHandler+0x51e>
    return;
 80026e4:	bf00      	nop
 80026e6:	e002      	b.n	80026ee <HAL_UART_IRQHandler+0x51e>
      return;
 80026e8:	bf00      	nop
 80026ea:	e000      	b.n	80026ee <HAL_UART_IRQHandler+0x51e>
      return;
 80026ec:	bf00      	nop
  }
}
 80026ee:	37e8      	adds	r7, #232	@ 0xe8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002758:	e03b      	b.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d037      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002762:	f7fe fb89 	bl	8000e78 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	429a      	cmp	r2, r3
 8002770:	d302      	bcc.n	8002778 <UART_WaitOnFlagUntilTimeout+0x30>
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e03a      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d023      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b80      	cmp	r3, #128	@ 0x80
 800278e:	d020      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	2b40      	cmp	r3, #64	@ 0x40
 8002794:	d01d      	beq.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d116      	bne.n	80027d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f81d 	bl	80027fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2208      	movs	r2, #8
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d0b4      	beq.n	800275a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b095      	sub	sp, #84	@ 0x54
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280c:	e853 3f00 	ldrex	r3, [r3]
 8002810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330c      	adds	r3, #12
 8002820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002822:	643a      	str	r2, [r7, #64]	@ 0x40
 8002824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800282a:	e841 2300 	strex	r3, r2, [r1]
 800282e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1e5      	bne.n	8002802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	61fb      	str	r3, [r7, #28]
   return(result);
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3314      	adds	r3, #20
 8002854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800285c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e5      	bne.n	8002836 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	2b01      	cmp	r3, #1
 8002870:	d119      	bne.n	80028a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	330c      	adds	r3, #12
 8002878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	60bb      	str	r3, [r7, #8]
   return(result);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f023 0310 	bic.w	r3, r3, #16
 8002888:	647b      	str	r3, [r7, #68]	@ 0x44
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002892:	61ba      	str	r2, [r7, #24]
 8002894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6979      	ldr	r1, [r7, #20]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	613b      	str	r3, [r7, #16]
   return(result);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e5      	bne.n	8002872 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028b4:	bf00      	nop
 80028b6:	3754      	adds	r7, #84	@ 0x54
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028da:	68f8      	ldr	r0, [r7, #12]
 80028dc:	f7ff ff1e 	bl	800271c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b21      	cmp	r3, #33	@ 0x21
 80028fa:	d13e      	bne.n	800297a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002904:	d114      	bne.n	8002930 <UART_Transmit_IT+0x48>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d110      	bne.n	8002930 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002922:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	1c9a      	adds	r2, r3, #2
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	621a      	str	r2, [r3, #32]
 800292e:	e008      	b.n	8002942 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	1c59      	adds	r1, r3, #1
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6211      	str	r1, [r2, #32]
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4619      	mov	r1, r3
 8002950:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002964:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002974:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800299e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fea3 	bl	80026f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08c      	sub	sp, #48	@ 0x30
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b22      	cmp	r3, #34	@ 0x22
 80029ca:	f040 80ae 	bne.w	8002b2a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d6:	d117      	bne.n	8002a08 <UART_Receive_IT+0x50>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d113      	bne.n	8002a08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a00:	1c9a      	adds	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a06:	e026      	b.n	8002a56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a1a:	d007      	beq.n	8002a2c <UART_Receive_IT+0x74>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <UART_Receive_IT+0x82>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a36:	701a      	strb	r2, [r3, #0]
 8002a38:	e008      	b.n	8002a4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4619      	mov	r1, r3
 8002a64:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d15d      	bne.n	8002b26 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0220 	bic.w	r2, r2, #32
 8002a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d135      	bne.n	8002b1c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
 8002abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f023 0310 	bic.w	r3, r3, #16
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad6:	623a      	str	r2, [r7, #32]
 8002ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	69f9      	ldr	r1, [r7, #28]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e5      	bne.n	8002ab6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0310 	and.w	r3, r3, #16
 8002af4:	2b10      	cmp	r3, #16
 8002af6:	d10a      	bne.n	8002b0e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b12:	4619      	mov	r1, r3
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff fe0b 	bl	8002730 <HAL_UARTEx_RxEventCallback>
 8002b1a:	e002      	b.n	8002b22 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fdf3 	bl	8002708 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e002      	b.n	8002b2c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	e000      	b.n	8002b2c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b2a:	2302      	movs	r3, #2
  }
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3730      	adds	r7, #48	@ 0x30
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b0c0      	sub	sp, #256	@ 0x100
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	ea40 0301 	orr.w	r3, r0, r1
 8002b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b8c:	f021 010c 	bic.w	r1, r1, #12
 8002b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b9a:	430b      	orrs	r3, r1
 8002b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bae:	6999      	ldr	r1, [r3, #24]
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	ea40 0301 	orr.w	r3, r0, r1
 8002bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8002e00 <UART_SetConfig+0x2cc>)
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d005      	beq.n	8002bd4 <UART_SetConfig+0xa0>
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b8d      	ldr	r3, [pc, #564]	@ (8002e04 <UART_SetConfig+0x2d0>)
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d104      	bne.n	8002bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bd4:	f7ff fa0c 	bl	8001ff0 <HAL_RCC_GetPCLK2Freq>
 8002bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002bdc:	e003      	b.n	8002be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002bde:	f7ff f9f3 	bl	8001fc8 <HAL_RCC_GetPCLK1Freq>
 8002be2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bf0:	f040 810c 	bne.w	8002e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c06:	4622      	mov	r2, r4
 8002c08:	462b      	mov	r3, r5
 8002c0a:	1891      	adds	r1, r2, r2
 8002c0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c0e:	415b      	adcs	r3, r3
 8002c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c16:	4621      	mov	r1, r4
 8002c18:	eb12 0801 	adds.w	r8, r2, r1
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb43 0901 	adc.w	r9, r3, r1
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	f04f 0300 	mov.w	r3, #0
 8002c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c36:	4690      	mov	r8, r2
 8002c38:	4699      	mov	r9, r3
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	eb18 0303 	adds.w	r3, r8, r3
 8002c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c44:	462b      	mov	r3, r5
 8002c46:	eb49 0303 	adc.w	r3, r9, r3
 8002c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c62:	460b      	mov	r3, r1
 8002c64:	18db      	adds	r3, r3, r3
 8002c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c68:	4613      	mov	r3, r2
 8002c6a:	eb42 0303 	adc.w	r3, r2, r3
 8002c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c78:	f7fd fab6 	bl	80001e8 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4b61      	ldr	r3, [pc, #388]	@ (8002e08 <UART_SetConfig+0x2d4>)
 8002c82:	fba3 2302 	umull	r2, r3, r3, r2
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	011c      	lsls	r4, r3, #4
 8002c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	1891      	adds	r1, r2, r2
 8002ca2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ca4:	415b      	adcs	r3, r3
 8002ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cac:	4641      	mov	r1, r8
 8002cae:	eb12 0a01 	adds.w	sl, r2, r1
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ccc:	4692      	mov	sl, r2
 8002cce:	469b      	mov	fp, r3
 8002cd0:	4643      	mov	r3, r8
 8002cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8002ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	18db      	adds	r3, r3, r3
 8002cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cfe:	4613      	mov	r3, r2
 8002d00:	eb42 0303 	adc.w	r3, r2, r3
 8002d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d0e:	f7fd fa6b 	bl	80001e8 <__aeabi_uldivmod>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	4b3b      	ldr	r3, [pc, #236]	@ (8002e08 <UART_SetConfig+0x2d4>)
 8002d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2264      	movs	r2, #100	@ 0x64
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	1acb      	subs	r3, r1, r3
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d2e:	4b36      	ldr	r3, [pc, #216]	@ (8002e08 <UART_SetConfig+0x2d4>)
 8002d30:	fba3 2302 	umull	r2, r3, r3, r2
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d50:	4642      	mov	r2, r8
 8002d52:	464b      	mov	r3, r9
 8002d54:	1891      	adds	r1, r2, r2
 8002d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d58:	415b      	adcs	r3, r3
 8002d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d60:	4641      	mov	r1, r8
 8002d62:	1851      	adds	r1, r2, r1
 8002d64:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d66:	4649      	mov	r1, r9
 8002d68:	414b      	adcs	r3, r1
 8002d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d78:	4659      	mov	r1, fp
 8002d7a:	00cb      	lsls	r3, r1, #3
 8002d7c:	4651      	mov	r1, sl
 8002d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d82:	4651      	mov	r1, sl
 8002d84:	00ca      	lsls	r2, r1, #3
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	189b      	adds	r3, r3, r2
 8002d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d94:	464b      	mov	r3, r9
 8002d96:	460a      	mov	r2, r1
 8002d98:	eb42 0303 	adc.w	r3, r2, r3
 8002d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002dac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002db4:	460b      	mov	r3, r1
 8002db6:	18db      	adds	r3, r3, r3
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dba:	4613      	mov	r3, r2
 8002dbc:	eb42 0303 	adc.w	r3, r2, r3
 8002dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002dca:	f7fd fa0d 	bl	80001e8 <__aeabi_uldivmod>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <UART_SetConfig+0x2d4>)
 8002dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	2164      	movs	r1, #100	@ 0x64
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	3332      	adds	r3, #50	@ 0x32
 8002de6:	4a08      	ldr	r2, [pc, #32]	@ (8002e08 <UART_SetConfig+0x2d4>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	095b      	lsrs	r3, r3, #5
 8002dee:	f003 0207 	and.w	r2, r3, #7
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4422      	add	r2, r4
 8002dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dfc:	e106      	b.n	800300c <UART_SetConfig+0x4d8>
 8002dfe:	bf00      	nop
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40011400 	.word	0x40011400
 8002e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e10:	2200      	movs	r2, #0
 8002e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e1e:	4642      	mov	r2, r8
 8002e20:	464b      	mov	r3, r9
 8002e22:	1891      	adds	r1, r2, r2
 8002e24:	6239      	str	r1, [r7, #32]
 8002e26:	415b      	adcs	r3, r3
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e2e:	4641      	mov	r1, r8
 8002e30:	1854      	adds	r4, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb43 0501 	adc.w	r5, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	00eb      	lsls	r3, r5, #3
 8002e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e46:	00e2      	lsls	r2, r4, #3
 8002e48:	4614      	mov	r4, r2
 8002e4a:	461d      	mov	r5, r3
 8002e4c:	4643      	mov	r3, r8
 8002e4e:	18e3      	adds	r3, r4, r3
 8002e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e54:	464b      	mov	r3, r9
 8002e56:	eb45 0303 	adc.w	r3, r5, r3
 8002e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	008b      	lsls	r3, r1, #2
 8002e7e:	4621      	mov	r1, r4
 8002e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e84:	4621      	mov	r1, r4
 8002e86:	008a      	lsls	r2, r1, #2
 8002e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e8c:	f7fd f9ac 	bl	80001e8 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b60      	ldr	r3, [pc, #384]	@ (8003018 <UART_SetConfig+0x4e4>)
 8002e96:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	011c      	lsls	r4, r3, #4
 8002e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002eb0:	4642      	mov	r2, r8
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	1891      	adds	r1, r2, r2
 8002eb6:	61b9      	str	r1, [r7, #24]
 8002eb8:	415b      	adcs	r3, r3
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	1851      	adds	r1, r2, r1
 8002ec4:	6139      	str	r1, [r7, #16]
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	414b      	adcs	r3, r1
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed8:	4659      	mov	r1, fp
 8002eda:	00cb      	lsls	r3, r1, #3
 8002edc:	4651      	mov	r1, sl
 8002ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	00ca      	lsls	r2, r1, #3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4603      	mov	r3, r0
 8002eec:	4642      	mov	r2, r8
 8002eee:	189b      	adds	r3, r3, r2
 8002ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ef4:	464b      	mov	r3, r9
 8002ef6:	460a      	mov	r2, r1
 8002ef8:	eb42 0303 	adc.w	r3, r2, r3
 8002efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f18:	4649      	mov	r1, r9
 8002f1a:	008b      	lsls	r3, r1, #2
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f22:	4641      	mov	r1, r8
 8002f24:	008a      	lsls	r2, r1, #2
 8002f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f2a:	f7fd f95d 	bl	80001e8 <__aeabi_uldivmod>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	4b38      	ldr	r3, [pc, #224]	@ (8003018 <UART_SetConfig+0x4e4>)
 8002f36:	fba3 2301 	umull	r2, r3, r3, r1
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	2264      	movs	r2, #100	@ 0x64
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	1acb      	subs	r3, r1, r3
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	3332      	adds	r3, #50	@ 0x32
 8002f48:	4a33      	ldr	r2, [pc, #204]	@ (8003018 <UART_SetConfig+0x4e4>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f54:	441c      	add	r4, r3
 8002f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	1891      	adds	r1, r2, r2
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	415b      	adcs	r3, r3
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f74:	4641      	mov	r1, r8
 8002f76:	1851      	adds	r1, r2, r1
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	4649      	mov	r1, r9
 8002f7c:	414b      	adcs	r3, r1
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f8c:	4659      	mov	r1, fp
 8002f8e:	00cb      	lsls	r3, r1, #3
 8002f90:	4651      	mov	r1, sl
 8002f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f96:	4651      	mov	r1, sl
 8002f98:	00ca      	lsls	r2, r1, #3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	4642      	mov	r2, r8
 8002fa2:	189b      	adds	r3, r3, r2
 8002fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	460a      	mov	r2, r1
 8002faa:	eb42 0303 	adc.w	r3, r2, r3
 8002fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002fba:	667a      	str	r2, [r7, #100]	@ 0x64
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002fc8:	4649      	mov	r1, r9
 8002fca:	008b      	lsls	r3, r1, #2
 8002fcc:	4641      	mov	r1, r8
 8002fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	008a      	lsls	r2, r1, #2
 8002fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002fda:	f7fd f905 	bl	80001e8 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8003018 <UART_SetConfig+0x4e4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	@ 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	3332      	adds	r3, #50	@ 0x32
 8002ff6:	4a08      	ldr	r2, [pc, #32]	@ (8003018 <UART_SetConfig+0x4e4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 020f 	and.w	r2, r3, #15
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4422      	add	r2, r4
 800300a:	609a      	str	r2, [r3, #8]
}
 800300c:	bf00      	nop
 800300e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003012:	46bd      	mov	sp, r7
 8003014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003018:	51eb851f 	.word	0x51eb851f

0800301c <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8003032:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8003036:	2100      	movs	r1, #0
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f005 f93f 	bl	80082bc <memset>
}
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8003054:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f001 ff8b 	bl	8004f74 <mbedtls_platform_zeroize>
 800305e:	e000      	b.n	8003062 <mbedtls_aes_free+0x1c>
        return;
 8003060:	bf00      	nop
}
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800307a:	d012      	beq.n	80030a2 <mbedtls_aes_setkey_enc+0x3a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003082:	d812      	bhi.n	80030aa <mbedtls_aes_setkey_enc+0x42>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b80      	cmp	r3, #128	@ 0x80
 8003088:	d003      	beq.n	8003092 <mbedtls_aes_setkey_enc+0x2a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2bc0      	cmp	r3, #192	@ 0xc0
 800308e:	d004      	beq.n	800309a <mbedtls_aes_setkey_enc+0x32>
 8003090:	e00b      	b.n	80030aa <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	220a      	movs	r2, #10
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	e00a      	b.n	80030b0 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	220c      	movs	r2, #12
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e006      	b.n	80030b0 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	220e      	movs	r2, #14
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e002      	b.n	80030b0 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80030aa:	f06f 031f 	mvn.w	r3, #31
 80030ae:	e1a7      	b.n	8003400 <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3308      	adds	r3, #8
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e027      	b.n	8003112 <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	68ba      	ldr	r2, [r7, #8]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	3301      	adds	r3, #1
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4413      	add	r3, r2
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	ea41 0203 	orr.w	r2, r1, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	440b      	add	r3, r1
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	ea42 0103 	orr.w	r1, r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	3303      	adds	r3, #3
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	061a      	lsls	r2, r3, #24
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	6938      	ldr	r0, [r7, #16]
 8003106:	4403      	add	r3, r0
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3301      	adds	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3d2      	bcc.n	80030c2 <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b0e      	cmp	r3, #14
 8003122:	f000 80ca 	beq.w	80032ba <mbedtls_aes_setkey_enc+0x252>
 8003126:	2b0e      	cmp	r3, #14
 8003128:	f300 8169 	bgt.w	80033fe <mbedtls_aes_setkey_enc+0x396>
 800312c:	2b0a      	cmp	r3, #10
 800312e:	d002      	beq.n	8003136 <mbedtls_aes_setkey_enc+0xce>
 8003130:	2b0c      	cmp	r3, #12
 8003132:	d057      	beq.n	80031e4 <mbedtls_aes_setkey_enc+0x17c>
 8003134:	e163      	b.n	80033fe <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8003136:	2300      	movs	r3, #0
 8003138:	617b      	str	r3, [r7, #20]
 800313a:	e04f      	b.n	80031dc <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	495f      	ldr	r1, [pc, #380]	@ (80032c0 <mbedtls_aes_setkey_enc+0x258>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003148:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	320c      	adds	r2, #12
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	0a12      	lsrs	r2, r2, #8
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	495b      	ldr	r1, [pc, #364]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003156:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8003158:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	330c      	adds	r3, #12
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4957      	ldr	r1, [pc, #348]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 800316a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	330c      	adds	r3, #12
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0e1b      	lsrs	r3, r3, #24
 8003174:	4953      	ldr	r1, [pc, #332]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003176:	5ccb      	ldrb	r3, [r1, r3]
 8003178:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 800317a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	330c      	adds	r3, #12
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	4a4f      	ldr	r2, [pc, #316]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003188:	5cd3      	ldrb	r3, [r2, r3]
 800318a:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8003190:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8003192:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	3304      	adds	r3, #4
 8003198:	6819      	ldr	r1, [r3, #0]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	3310      	adds	r3, #16
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	3314      	adds	r3, #20
 80031a4:	404a      	eors	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	3308      	adds	r3, #8
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	3314      	adds	r3, #20
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	3318      	adds	r3, #24
 80031b8:	404a      	eors	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	330c      	adds	r3, #12
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	3318      	adds	r3, #24
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	331c      	adds	r3, #28
 80031cc:	404a      	eors	r2, r1
 80031ce:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3310      	adds	r3, #16
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	2b09      	cmp	r3, #9
 80031e0:	d9ac      	bls.n	800313c <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 80031e2:	e10c      	b.n	80033fe <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	e063      	b.n	80032b2 <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4934      	ldr	r1, [pc, #208]	@ (80032c0 <mbedtls_aes_setkey_enc+0x258>)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80031f6:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	3214      	adds	r2, #20
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	0a12      	lsrs	r2, r2, #8
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	4930      	ldr	r1, [pc, #192]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003204:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8003206:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3314      	adds	r3, #20
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0c1b      	lsrs	r3, r3, #16
 8003210:	b2db      	uxtb	r3, r3
 8003212:	492c      	ldr	r1, [pc, #176]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003214:	5ccb      	ldrb	r3, [r1, r3]
 8003216:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003218:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3314      	adds	r3, #20
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e1b      	lsrs	r3, r3, #24
 8003222:	4928      	ldr	r1, [pc, #160]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003224:	5ccb      	ldrb	r3, [r1, r3]
 8003226:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003228:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	3314      	adds	r3, #20
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4a23      	ldr	r2, [pc, #140]	@ (80032c4 <mbedtls_aes_setkey_enc+0x25c>)
 8003236:	5cd3      	ldrb	r3, [r2, r3]
 8003238:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800323e:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8003240:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	3304      	adds	r3, #4
 8003246:	6819      	ldr	r1, [r3, #0]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	3318      	adds	r3, #24
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	331c      	adds	r3, #28
 8003252:	404a      	eors	r2, r1
 8003254:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3308      	adds	r3, #8
 800325a:	6819      	ldr	r1, [r3, #0]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	331c      	adds	r3, #28
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	3320      	adds	r3, #32
 8003266:	404a      	eors	r2, r1
 8003268:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	330c      	adds	r3, #12
 800326e:	6819      	ldr	r1, [r3, #0]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3320      	adds	r3, #32
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	3324      	adds	r3, #36	@ 0x24
 800327a:	404a      	eors	r2, r1
 800327c:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3310      	adds	r3, #16
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3324      	adds	r3, #36	@ 0x24
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	3328      	adds	r3, #40	@ 0x28
 800328e:	404a      	eors	r2, r1
 8003290:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3314      	adds	r3, #20
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	3328      	adds	r3, #40	@ 0x28
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	332c      	adds	r3, #44	@ 0x2c
 80032a2:	404a      	eors	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3318      	adds	r3, #24
 80032b0:	613b      	str	r3, [r7, #16]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b07      	cmp	r3, #7
 80032b6:	d998      	bls.n	80031ea <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 80032b8:	e0a1      	b.n	80033fe <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	e099      	b.n	80033f4 <mbedtls_aes_setkey_enc+0x38c>
 80032c0:	0800aa00 	.word	0x0800aa00
 80032c4:	08008800 	.word	0x08008800
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	494f      	ldr	r1, [pc, #316]	@ (800340c <mbedtls_aes_setkey_enc+0x3a4>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032d4:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	321c      	adds	r2, #28
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	0a12      	lsrs	r2, r2, #8
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	494b      	ldr	r1, [pc, #300]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 80032e2:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 80032e4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	331c      	adds	r3, #28
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4947      	ldr	r1, [pc, #284]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 80032f6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	331c      	adds	r3, #28
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e1b      	lsrs	r3, r3, #24
 8003300:	4943      	ldr	r1, [pc, #268]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003306:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	331c      	adds	r3, #28
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4a3f      	ldr	r2, [pc, #252]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800331c:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800331e:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	3304      	adds	r3, #4
 8003324:	6819      	ldr	r1, [r3, #0]
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	3320      	adds	r3, #32
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	3324      	adds	r3, #36	@ 0x24
 8003330:	404a      	eors	r2, r1
 8003332:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	3308      	adds	r3, #8
 8003338:	6819      	ldr	r1, [r3, #0]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	3324      	adds	r3, #36	@ 0x24
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	3328      	adds	r3, #40	@ 0x28
 8003344:	404a      	eors	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	330c      	adds	r3, #12
 800334c:	6819      	ldr	r1, [r3, #0]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3328      	adds	r3, #40	@ 0x28
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	332c      	adds	r3, #44	@ 0x2c
 8003358:	404a      	eors	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	3310      	adds	r3, #16
 8003360:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	322c      	adds	r2, #44	@ 0x2c
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	4929      	ldr	r1, [pc, #164]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 800336c:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800336e:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	332c      	adds	r3, #44	@ 0x2c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	b2db      	uxtb	r3, r3
 800337a:	4925      	ldr	r1, [pc, #148]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8003380:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	332c      	adds	r3, #44	@ 0x2c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4920      	ldr	r1, [pc, #128]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8003392:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	332c      	adds	r3, #44	@ 0x2c
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	0e1b      	lsrs	r3, r3, #24
 800339e:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <mbedtls_aes_setkey_enc+0x3a8>)
 80033a0:	5cd3      	ldrb	r3, [r2, r3]
 80033a2:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80033a8:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80033aa:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	3314      	adds	r3, #20
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	3330      	adds	r3, #48	@ 0x30
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	3334      	adds	r3, #52	@ 0x34
 80033bc:	404a      	eors	r2, r1
 80033be:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	3318      	adds	r3, #24
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	3334      	adds	r3, #52	@ 0x34
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	3338      	adds	r3, #56	@ 0x38
 80033d0:	404a      	eors	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	331c      	adds	r3, #28
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	3338      	adds	r3, #56	@ 0x38
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	333c      	adds	r3, #60	@ 0x3c
 80033e4:	404a      	eors	r2, r1
 80033e6:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3301      	adds	r3, #1
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	3320      	adds	r3, #32
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b06      	cmp	r3, #6
 80033f8:	f67f af66 	bls.w	80032c8 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 80033fc:	bf00      	nop
    }

    return( 0 );
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	0800aa00 	.word	0x0800aa00
 8003410:	08008800 	.word	0x08008800

08003414 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b0d0      	sub	sp, #320	@ 0x140
 8003418:	af00      	add	r7, sp, #0
 800341a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800341e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003422:	6018      	str	r0, [r3, #0]
 8003424:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003428:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800342c:	6019      	str	r1, [r3, #0]
 800342e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003432:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003436:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8003438:	f107 0314 	add.w	r3, r7, #20
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fdf4 	bl	800302a <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8003442:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003446:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3308      	adds	r3, #8
 800344e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003452:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003456:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8003460:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 8003462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003466:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800346a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800346e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003472:	f107 0014 	add.w	r0, r7, #20
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	6819      	ldr	r1, [r3, #0]
 800347a:	f7ff fdf5 	bl	8003068 <mbedtls_aes_setkey_enc>
 800347e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 8003482:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 80dd 	bne.w	8003646 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 800348c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800349a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80034a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80034a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80034b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	4413      	add	r3, r2
 80034ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 80034be:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80034c2:	1d13      	adds	r3, r2, #4
 80034c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80034c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034cc:	1d19      	adds	r1, r3, #4
 80034ce:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80034d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80034da:	1d13      	adds	r3, r2, #4
 80034dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80034e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034e4:	1d19      	adds	r1, r3, #4
 80034e6:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80034ee:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80034f2:	1d13      	adds	r3, r2, #4
 80034f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80034f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034fc:	1d19      	adds	r1, r3, #4
 80034fe:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003506:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800350a:	1d13      	adds	r3, r2, #4
 800350c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003510:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003514:	1d19      	adds	r1, r3, #4
 8003516:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800351a:	6812      	ldr	r2, [r2, #0]
 800351c:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800351e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003522:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3b01      	subs	r3, #1
 800352c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003530:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003534:	3b20      	subs	r3, #32
 8003536:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800353a:	e04f      	b.n	80035dc <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003542:	e03d      	b.n	80035c0 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003544:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	4a44      	ldr	r2, [pc, #272]	@ (8003660 <mbedtls_aes_setkey_dec+0x24c>)
 800354e:	5cd3      	ldrb	r3, [r2, r3]
 8003550:	461a      	mov	r2, r3
 8003552:	4b44      	ldr	r3, [pc, #272]	@ (8003664 <mbedtls_aes_setkey_dec+0x250>)
 8003554:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003558:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	0a1b      	lsrs	r3, r3, #8
 8003560:	b2db      	uxtb	r3, r3
 8003562:	493f      	ldr	r1, [pc, #252]	@ (8003660 <mbedtls_aes_setkey_dec+0x24c>)
 8003564:	5ccb      	ldrb	r3, [r1, r3]
 8003566:	4619      	mov	r1, r3
 8003568:	4b3f      	ldr	r3, [pc, #252]	@ (8003668 <mbedtls_aes_setkey_dec+0x254>)
 800356a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800356e:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003570:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4939      	ldr	r1, [pc, #228]	@ (8003660 <mbedtls_aes_setkey_dec+0x24c>)
 800357c:	5ccb      	ldrb	r3, [r1, r3]
 800357e:	4619      	mov	r1, r3
 8003580:	4b3a      	ldr	r3, [pc, #232]	@ (800366c <mbedtls_aes_setkey_dec+0x258>)
 8003582:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003586:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 800358a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0e1b      	lsrs	r3, r3, #24
 8003592:	4a33      	ldr	r2, [pc, #204]	@ (8003660 <mbedtls_aes_setkey_dec+0x24c>)
 8003594:	5cd3      	ldrb	r3, [r2, r3]
 8003596:	461a      	mov	r2, r3
 8003598:	4b35      	ldr	r3, [pc, #212]	@ (8003670 <mbedtls_aes_setkey_dec+0x25c>)
 800359a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800359e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80035a2:	1d18      	adds	r0, r3, #4
 80035a4:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80035a8:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80035aa:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80035ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80035b0:	3301      	adds	r3, #1
 80035b2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80035b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80035ba:	3304      	adds	r3, #4
 80035bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80035c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	ddbd      	ble.n	8003544 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80035c8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80035cc:	3b01      	subs	r3, #1
 80035ce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80035d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80035d6:	3b20      	subs	r3, #32
 80035d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80035dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	dcab      	bgt.n	800353c <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 80035e4:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80035e8:	1d13      	adds	r3, r2, #4
 80035ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80035ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80035f2:	1d19      	adds	r1, r3, #4
 80035f4:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80035fc:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003600:	1d13      	adds	r3, r2, #4
 8003602:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003606:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800360a:	1d19      	adds	r1, r3, #4
 800360c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003614:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003618:	1d13      	adds	r3, r2, #4
 800361a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800361e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003622:	1d19      	adds	r1, r3, #4
 8003624:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800362c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003630:	1d13      	adds	r3, r2, #4
 8003632:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003636:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800363a:	1d19      	adds	r1, r3, #4
 800363c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e000      	b.n	8003648 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 8003646:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8003648:	f107 0314 	add.w	r3, r7, #20
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fcfa 	bl	8003046 <mbedtls_aes_free>

    return( ret );
 8003652:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8003656:	4618      	mov	r0, r3
 8003658:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	08008800 	.word	0x08008800
 8003664:	08009a00 	.word	0x08009a00
 8003668:	08009e00 	.word	0x08009e00
 800366c:	0800a200 	.word	0x0800a200
 8003670:	0800a600 	.word	0x0800a600

08003674 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003674:	b480      	push	{r7}
 8003676:	b08f      	sub	sp, #60	@ 0x3c
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	461a      	mov	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	3301      	adds	r3, #1
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	431a      	orrs	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	3302      	adds	r3, #2
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	431a      	orrs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	3303      	adds	r3, #3
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	061b      	lsls	r3, r3, #24
 80036a8:	4313      	orrs	r3, r2
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ae:	1d1a      	adds	r2, r3, #4
 80036b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b6:	4053      	eors	r3, r2
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3304      	adds	r3, #4
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3305      	adds	r3, #5
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	431a      	orrs	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	3306      	adds	r3, #6
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	041b      	lsls	r3, r3, #16
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	3307      	adds	r3, #7
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	4313      	orrs	r3, r2
 80036e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e4:	1d1a      	adds	r2, r3, #4
 80036e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036ec:	4053      	eors	r3, r2
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	3308      	adds	r3, #8
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	3309      	adds	r3, #9
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	431a      	orrs	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	330a      	adds	r3, #10
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	041b      	lsls	r3, r3, #16
 800370a:	431a      	orrs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	330b      	adds	r3, #11
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	061b      	lsls	r3, r3, #24
 8003714:	4313      	orrs	r3, r2
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
 8003718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371a:	1d1a      	adds	r2, r3, #4
 800371c:	633a      	str	r2, [r7, #48]	@ 0x30
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003722:	4053      	eors	r3, r2
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	330c      	adds	r3, #12
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	330d      	adds	r3, #13
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	431a      	orrs	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	330e      	adds	r3, #14
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	041b      	lsls	r3, r3, #16
 8003740:	431a      	orrs	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	330f      	adds	r3, #15
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	061b      	lsls	r3, r3, #24
 800374a:	4313      	orrs	r3, r2
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	1d1a      	adds	r2, r3, #4
 8003752:	633a      	str	r2, [r7, #48]	@ 0x30
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	4053      	eors	r3, r2
 800375a:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	105b      	asrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
 8003766:	e0fa      	b.n	800395e <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	633a      	str	r2, [r7, #48]	@ 0x30
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003772:	b2db      	uxtb	r3, r3
 8003774:	49ab      	ldr	r1, [pc, #684]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800377a:	405a      	eors	r2, r3
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	b2db      	uxtb	r3, r3
 8003782:	49a9      	ldr	r1, [pc, #676]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003784:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003788:	405a      	eors	r2, r3
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	b2db      	uxtb	r3, r3
 8003790:	49a6      	ldr	r1, [pc, #664]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003796:	405a      	eors	r2, r3
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	0e1b      	lsrs	r3, r3, #24
 800379c:	49a4      	ldr	r1, [pc, #656]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 800379e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037a2:	4053      	eors	r3, r2
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	1d1a      	adds	r2, r3, #4
 80037aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	499c      	ldr	r1, [pc, #624]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 80037b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037b8:	405a      	eors	r2, r3
 80037ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	4999      	ldr	r1, [pc, #612]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 80037c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037c6:	405a      	eors	r2, r3
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	4997      	ldr	r1, [pc, #604]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 80037d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037d4:	405a      	eors	r2, r3
 80037d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d8:	0e1b      	lsrs	r3, r3, #24
 80037da:	4995      	ldr	r1, [pc, #596]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 80037dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037e0:	4053      	eors	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	1d1a      	adds	r2, r3, #4
 80037e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	498c      	ldr	r1, [pc, #560]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 80037f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037f6:	405a      	eors	r2, r3
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	498a      	ldr	r1, [pc, #552]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003800:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003804:	405a      	eors	r2, r3
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	0c1b      	lsrs	r3, r3, #16
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4987      	ldr	r1, [pc, #540]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 800380e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003812:	405a      	eors	r2, r3
 8003814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003816:	0e1b      	lsrs	r3, r3, #24
 8003818:	4985      	ldr	r1, [pc, #532]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 800381a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800381e:	4053      	eors	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	633a      	str	r2, [r7, #48]	@ 0x30
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	497d      	ldr	r1, [pc, #500]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003830:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003834:	405a      	eors	r2, r3
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	0a1b      	lsrs	r3, r3, #8
 800383a:	b2db      	uxtb	r3, r3
 800383c:	497a      	ldr	r1, [pc, #488]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 800383e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003842:	405a      	eors	r2, r3
 8003844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003846:	0c1b      	lsrs	r3, r3, #16
 8003848:	b2db      	uxtb	r3, r3
 800384a:	4978      	ldr	r1, [pc, #480]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 800384c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003850:	405a      	eors	r2, r3
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	0e1b      	lsrs	r3, r3, #24
 8003856:	4976      	ldr	r1, [pc, #472]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003858:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800385c:	4053      	eors	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	1d1a      	adds	r2, r3, #4
 8003864:	633a      	str	r2, [r7, #48]	@ 0x30
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	496d      	ldr	r1, [pc, #436]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 800386e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003872:	405a      	eors	r2, r3
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	b2db      	uxtb	r3, r3
 800387a:	496b      	ldr	r1, [pc, #428]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 800387c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003880:	405a      	eors	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	b2db      	uxtb	r3, r3
 8003888:	4968      	ldr	r1, [pc, #416]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 800388a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800388e:	405a      	eors	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	0e1b      	lsrs	r3, r3, #24
 8003894:	4966      	ldr	r1, [pc, #408]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800389a:	4053      	eors	r3, r2
 800389c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a0:	1d1a      	adds	r2, r3, #4
 80038a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	495e      	ldr	r1, [pc, #376]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 80038ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038b0:	405a      	eors	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	495b      	ldr	r1, [pc, #364]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 80038ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038be:	405a      	eors	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	4959      	ldr	r1, [pc, #356]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 80038c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038cc:	405a      	eors	r2, r3
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	0e1b      	lsrs	r3, r3, #24
 80038d2:	4957      	ldr	r1, [pc, #348]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 80038d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038d8:	4053      	eors	r3, r2
 80038da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038de:	1d1a      	adds	r2, r3, #4
 80038e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	494e      	ldr	r1, [pc, #312]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 80038ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038ee:	405a      	eors	r2, r3
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	494c      	ldr	r1, [pc, #304]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 80038f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038fc:	405a      	eors	r2, r3
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	b2db      	uxtb	r3, r3
 8003904:	4949      	ldr	r1, [pc, #292]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800390a:	405a      	eors	r2, r3
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	0e1b      	lsrs	r3, r3, #24
 8003910:	4947      	ldr	r1, [pc, #284]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003916:	4053      	eors	r3, r2
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
 800391a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800391c:	1d1a      	adds	r2, r3, #4
 800391e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	493f      	ldr	r1, [pc, #252]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003928:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800392c:	405a      	eors	r2, r3
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	0a1b      	lsrs	r3, r3, #8
 8003932:	b2db      	uxtb	r3, r3
 8003934:	493c      	ldr	r1, [pc, #240]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800393a:	405a      	eors	r2, r3
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	b2db      	uxtb	r3, r3
 8003942:	493a      	ldr	r1, [pc, #232]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003944:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003948:	405a      	eors	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	0e1b      	lsrs	r3, r3, #24
 800394e:	4938      	ldr	r1, [pc, #224]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003950:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003954:	4053      	eors	r3, r2
 8003956:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395a:	3b01      	subs	r3, #1
 800395c:	637b      	str	r3, [r7, #52]	@ 0x34
 800395e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003960:	2b00      	cmp	r3, #0
 8003962:	f73f af01 	bgt.w	8003768 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	633a      	str	r2, [r7, #48]	@ 0x30
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003970:	b2db      	uxtb	r3, r3
 8003972:	492c      	ldr	r1, [pc, #176]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003978:	405a      	eors	r2, r3
 800397a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397c:	0a1b      	lsrs	r3, r3, #8
 800397e:	b2db      	uxtb	r3, r3
 8003980:	4929      	ldr	r1, [pc, #164]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003982:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003986:	405a      	eors	r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	b2db      	uxtb	r3, r3
 800398e:	4927      	ldr	r1, [pc, #156]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003990:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003994:	405a      	eors	r2, r3
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	0e1b      	lsrs	r3, r3, #24
 800399a:	4925      	ldr	r1, [pc, #148]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 800399c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a0:	4053      	eors	r3, r2
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	1d1a      	adds	r2, r3, #4
 80039a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	491c      	ldr	r1, [pc, #112]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 80039b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039b6:	405a      	eors	r2, r3
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	491a      	ldr	r1, [pc, #104]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 80039c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039c4:	405a      	eors	r2, r3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4917      	ldr	r1, [pc, #92]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 80039ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039d2:	405a      	eors	r2, r3
 80039d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d6:	0e1b      	lsrs	r3, r3, #24
 80039d8:	4915      	ldr	r1, [pc, #84]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 80039da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039de:	4053      	eors	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	490d      	ldr	r1, [pc, #52]	@ (8003a24 <mbedtls_internal_aes_encrypt+0x3b0>)
 80039f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039f4:	405a      	eors	r2, r3
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	490a      	ldr	r1, [pc, #40]	@ (8003a28 <mbedtls_internal_aes_encrypt+0x3b4>)
 80039fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a02:	405a      	eors	r2, r3
 8003a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a06:	0c1b      	lsrs	r3, r3, #16
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	@ (8003a2c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a10:	405a      	eors	r2, r3
 8003a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a14:	0e1b      	lsrs	r3, r3, #24
 8003a16:	4906      	ldr	r1, [pc, #24]	@ (8003a30 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a1c:	4053      	eors	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	e007      	b.n	8003a34 <mbedtls_internal_aes_encrypt+0x3c0>
 8003a24:	08008900 	.word	0x08008900
 8003a28:	08008d00 	.word	0x08008d00
 8003a2c:	08009100 	.word	0x08009100
 8003a30:	08009500 	.word	0x08009500
 8003a34:	1d1a      	adds	r2, r3, #4
 8003a36:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4979      	ldr	r1, [pc, #484]	@ (8003c24 <mbedtls_internal_aes_encrypt+0x5b0>)
 8003a40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a44:	405a      	eors	r2, r3
 8003a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	4976      	ldr	r1, [pc, #472]	@ (8003c28 <mbedtls_internal_aes_encrypt+0x5b4>)
 8003a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a52:	405a      	eors	r2, r3
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4974      	ldr	r1, [pc, #464]	@ (8003c2c <mbedtls_internal_aes_encrypt+0x5b8>)
 8003a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a60:	405a      	eors	r2, r3
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	0e1b      	lsrs	r3, r3, #24
 8003a66:	4972      	ldr	r1, [pc, #456]	@ (8003c30 <mbedtls_internal_aes_encrypt+0x5bc>)
 8003a68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a6c:	4053      	eors	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8003a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a76:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	496d      	ldr	r1, [pc, #436]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a7e:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8003a80:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	496a      	ldr	r1, [pc, #424]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a8a:	5ccb      	ldrb	r3, [r1, r3]
 8003a8c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003a8e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4967      	ldr	r1, [pc, #412]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a98:	5ccb      	ldrb	r3, [r1, r3]
 8003a9a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003a9c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	4964      	ldr	r1, [pc, #400]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003aa4:	5ccb      	ldrb	r3, [r1, r3]
 8003aa6:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003aa8:	4053      	eors	r3, r2
 8003aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ab2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	495e      	ldr	r1, [pc, #376]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003aba:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003abc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	0a1b      	lsrs	r3, r3, #8
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	495b      	ldr	r1, [pc, #364]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003aca:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	0c1b      	lsrs	r3, r3, #16
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	4958      	ldr	r1, [pc, #352]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ad4:	5ccb      	ldrb	r3, [r1, r3]
 8003ad6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ad8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	0e1b      	lsrs	r3, r3, #24
 8003ade:	4955      	ldr	r1, [pc, #340]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003ae4:	4053      	eors	r3, r2
 8003ae6:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	1d1a      	adds	r2, r3, #4
 8003aec:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aee:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	494f      	ldr	r1, [pc, #316]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003af6:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003af8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	0a1b      	lsrs	r3, r3, #8
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	494c      	ldr	r1, [pc, #304]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003b06:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	0c1b      	lsrs	r3, r3, #16
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4949      	ldr	r1, [pc, #292]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b14:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	4946      	ldr	r1, [pc, #280]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b1c:	5ccb      	ldrb	r3, [r1, r3]
 8003b1e:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003b20:	4053      	eors	r3, r2
 8003b22:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b2a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	4940      	ldr	r1, [pc, #256]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b32:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003b34:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	493d      	ldr	r1, [pc, #244]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b3e:	5ccb      	ldrb	r3, [r1, r3]
 8003b40:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003b42:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	0c1b      	lsrs	r3, r3, #16
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	493a      	ldr	r1, [pc, #232]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b4c:	5ccb      	ldrb	r3, [r1, r3]
 8003b4e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b50:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	0e1b      	lsrs	r3, r3, #24
 8003b56:	4937      	ldr	r1, [pc, #220]	@ (8003c34 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003b5c:	4053      	eors	r3, r2
 8003b5e:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8003b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6a:	0a1a      	lsrs	r2, r3, #8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b76:	0c1a      	lsrs	r2, r3, #16
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b82:	0e1a      	lsrs	r2, r3, #24
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3303      	adds	r3, #3
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b98:	0a1a      	lsrs	r2, r3, #8
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3305      	adds	r3, #5
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	0c1a      	lsrs	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3306      	adds	r3, #6
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb0:	0e1a      	lsrs	r2, r3, #24
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3307      	adds	r3, #7
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc6:	0a1a      	lsrs	r2, r3, #8
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3309      	adds	r3, #9
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	0c1a      	lsrs	r2, r3, #16
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	330a      	adds	r3, #10
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bde:	0e1a      	lsrs	r2, r3, #24
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	330b      	adds	r3, #11
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	330c      	adds	r3, #12
 8003bec:	6a3a      	ldr	r2, [r7, #32]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	0a1a      	lsrs	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	330d      	adds	r3, #13
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	0c1a      	lsrs	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	330e      	adds	r3, #14
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	0e1a      	lsrs	r2, r3, #24
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	330f      	adds	r3, #15
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	373c      	adds	r7, #60	@ 0x3c
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	08008900 	.word	0x08008900
 8003c28:	08008d00 	.word	0x08008d00
 8003c2c:	08009100 	.word	0x08009100
 8003c30:	08009500 	.word	0x08009500
 8003c34:	08008800 	.word	0x08008800

08003c38 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b08f      	sub	sp, #60	@ 0x3c
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3301      	adds	r3, #1
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3303      	adds	r3, #3
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	061b      	lsls	r3, r3, #24
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	1d1a      	adds	r2, r3, #4
 8003c74:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c7a:	4053      	eors	r3, r2
 8003c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	3304      	adds	r3, #4
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	461a      	mov	r2, r3
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	3305      	adds	r3, #5
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	021b      	lsls	r3, r3, #8
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3306      	adds	r3, #6
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	041b      	lsls	r3, r3, #16
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	3307      	adds	r3, #7
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca8:	1d1a      	adds	r2, r3, #4
 8003caa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cb0:	4053      	eors	r3, r2
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	3309      	adds	r3, #9
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	330a      	adds	r3, #10
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	041b      	lsls	r3, r3, #16
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	330b      	adds	r3, #11
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	061b      	lsls	r3, r3, #24
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cde:	1d1a      	adds	r2, r3, #4
 8003ce0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce6:	4053      	eors	r3, r2
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	330c      	adds	r3, #12
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	330d      	adds	r3, #13
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	330e      	adds	r3, #14
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	041b      	lsls	r3, r3, #16
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	330f      	adds	r3, #15
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	623b      	str	r3, [r7, #32]
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	1d1a      	adds	r2, r3, #4
 8003d16:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a3a      	ldr	r2, [r7, #32]
 8003d1c:	4053      	eors	r3, r2
 8003d1e:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	105b      	asrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2a:	e0fa      	b.n	8003f22 <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	49ab      	ldr	r1, [pc, #684]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d3e:	405a      	eors	r2, r3
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	49a9      	ldr	r1, [pc, #676]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d4c:	405a      	eors	r2, r3
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	49a6      	ldr	r1, [pc, #664]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d5a:	405a      	eors	r2, r3
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	0e1b      	lsrs	r3, r3, #24
 8003d60:	49a4      	ldr	r1, [pc, #656]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d66:	4053      	eors	r3, r2
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	1d1a      	adds	r2, r3, #4
 8003d6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	499c      	ldr	r1, [pc, #624]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d7c:	405a      	eors	r2, r3
 8003d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	4999      	ldr	r1, [pc, #612]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d8a:	405a      	eors	r2, r3
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	0c1b      	lsrs	r3, r3, #16
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	4997      	ldr	r1, [pc, #604]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d98:	405a      	eors	r2, r3
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	4995      	ldr	r1, [pc, #596]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003da0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003da4:	4053      	eors	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	1d1a      	adds	r2, r3, #4
 8003dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	498c      	ldr	r1, [pc, #560]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dba:	405a      	eors	r2, r3
 8003dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	498a      	ldr	r1, [pc, #552]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003dc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dc8:	405a      	eors	r2, r3
 8003dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	4987      	ldr	r1, [pc, #540]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd6:	405a      	eors	r2, r3
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	0e1b      	lsrs	r3, r3, #24
 8003ddc:	4985      	ldr	r1, [pc, #532]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003dde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003de2:	4053      	eors	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de8:	1d1a      	adds	r2, r3, #4
 8003dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	497d      	ldr	r1, [pc, #500]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003df8:	405a      	eors	r2, r3
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	497a      	ldr	r1, [pc, #488]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e06:	405a      	eors	r2, r3
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	4978      	ldr	r1, [pc, #480]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e14:	405a      	eors	r2, r3
 8003e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e18:	0e1b      	lsrs	r3, r3, #24
 8003e1a:	4976      	ldr	r1, [pc, #472]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e20:	4053      	eors	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	496d      	ldr	r1, [pc, #436]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e36:	405a      	eors	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	496b      	ldr	r1, [pc, #428]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e44:	405a      	eors	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	0c1b      	lsrs	r3, r3, #16
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	4968      	ldr	r1, [pc, #416]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e52:	405a      	eors	r2, r3
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	0e1b      	lsrs	r3, r3, #24
 8003e58:	4966      	ldr	r1, [pc, #408]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e5e:	4053      	eors	r3, r2
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e64:	1d1a      	adds	r2, r3, #4
 8003e66:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	495e      	ldr	r1, [pc, #376]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e74:	405a      	eors	r2, r3
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	495b      	ldr	r1, [pc, #364]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e82:	405a      	eors	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	4959      	ldr	r1, [pc, #356]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e90:	405a      	eors	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	0e1b      	lsrs	r3, r3, #24
 8003e96:	4957      	ldr	r1, [pc, #348]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e9c:	4053      	eors	r3, r2
 8003e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea2:	1d1a      	adds	r2, r3, #4
 8003ea4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	494e      	ldr	r1, [pc, #312]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003eae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eb2:	405a      	eors	r2, r3
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	494c      	ldr	r1, [pc, #304]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ebc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ec0:	405a      	eors	r2, r3
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	0c1b      	lsrs	r3, r3, #16
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	4949      	ldr	r1, [pc, #292]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003eca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ece:	405a      	eors	r2, r3
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	0e1b      	lsrs	r3, r3, #24
 8003ed4:	4947      	ldr	r1, [pc, #284]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003ed6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eda:	4053      	eors	r3, r2
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	1d1a      	adds	r2, r3, #4
 8003ee2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	493f      	ldr	r1, [pc, #252]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003eec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef0:	405a      	eors	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	0a1b      	lsrs	r3, r3, #8
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	493c      	ldr	r1, [pc, #240]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003efa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003efe:	405a      	eors	r2, r3
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	493a      	ldr	r1, [pc, #232]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f0c:	405a      	eors	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	0e1b      	lsrs	r3, r3, #24
 8003f12:	4938      	ldr	r1, [pc, #224]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f18:	4053      	eors	r3, r2
 8003f1a:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f73f af01 	bgt.w	8003d2c <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2c:	1d1a      	adds	r2, r3, #4
 8003f2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	492c      	ldr	r1, [pc, #176]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f3c:	405a      	eors	r2, r3
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	4929      	ldr	r1, [pc, #164]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f4a:	405a      	eors	r2, r3
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	0c1b      	lsrs	r3, r3, #16
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	4927      	ldr	r1, [pc, #156]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f58:	405a      	eors	r2, r3
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	0e1b      	lsrs	r3, r3, #24
 8003f5e:	4925      	ldr	r1, [pc, #148]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f64:	4053      	eors	r3, r2
 8003f66:	61fb      	str	r3, [r7, #28]
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	1d1a      	adds	r2, r3, #4
 8003f6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	491c      	ldr	r1, [pc, #112]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f7a:	405a      	eors	r2, r3
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	491a      	ldr	r1, [pc, #104]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f88:	405a      	eors	r2, r3
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	4917      	ldr	r1, [pc, #92]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f96:	405a      	eors	r2, r3
 8003f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9a:	0e1b      	lsrs	r3, r3, #24
 8003f9c:	4915      	ldr	r1, [pc, #84]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fa2:	4053      	eors	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	1d1a      	adds	r2, r3, #4
 8003faa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	490d      	ldr	r1, [pc, #52]	@ (8003fe8 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003fb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fb8:	405a      	eors	r2, r3
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	490a      	ldr	r1, [pc, #40]	@ (8003fec <mbedtls_internal_aes_decrypt+0x3b4>)
 8003fc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fc6:	405a      	eors	r2, r3
 8003fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4908      	ldr	r1, [pc, #32]	@ (8003ff0 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003fd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fd4:	405a      	eors	r2, r3
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	0e1b      	lsrs	r3, r3, #24
 8003fda:	4906      	ldr	r1, [pc, #24]	@ (8003ff4 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003fdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fe0:	4053      	eors	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	e007      	b.n	8003ff8 <mbedtls_internal_aes_decrypt+0x3c0>
 8003fe8:	08009a00 	.word	0x08009a00
 8003fec:	08009e00 	.word	0x08009e00
 8003ff0:	0800a200 	.word	0x0800a200
 8003ff4:	0800a600 	.word	0x0800a600
 8003ff8:	1d1a      	adds	r2, r3, #4
 8003ffa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	4979      	ldr	r1, [pc, #484]	@ (80041e8 <mbedtls_internal_aes_decrypt+0x5b0>)
 8004004:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004008:	405a      	eors	r2, r3
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	b2db      	uxtb	r3, r3
 8004010:	4976      	ldr	r1, [pc, #472]	@ (80041ec <mbedtls_internal_aes_decrypt+0x5b4>)
 8004012:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004016:	405a      	eors	r2, r3
 8004018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401a:	0c1b      	lsrs	r3, r3, #16
 800401c:	b2db      	uxtb	r3, r3
 800401e:	4974      	ldr	r1, [pc, #464]	@ (80041f0 <mbedtls_internal_aes_decrypt+0x5b8>)
 8004020:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004024:	405a      	eors	r2, r3
 8004026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004028:	0e1b      	lsrs	r3, r3, #24
 800402a:	4972      	ldr	r1, [pc, #456]	@ (80041f4 <mbedtls_internal_aes_decrypt+0x5bc>)
 800402c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004030:	4053      	eors	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	1d1a      	adds	r2, r3, #4
 8004038:	633a      	str	r2, [r7, #48]	@ 0x30
 800403a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	b2d2      	uxtb	r2, r2
 8004040:	496d      	ldr	r1, [pc, #436]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004042:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8004044:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b2db      	uxtb	r3, r3
 800404c:	496a      	ldr	r1, [pc, #424]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8004052:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	b2db      	uxtb	r3, r3
 800405a:	4967      	ldr	r1, [pc, #412]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8004060:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	4964      	ldr	r1, [pc, #400]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004068:	5ccb      	ldrb	r3, [r1, r3]
 800406a:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 800406c:	4053      	eors	r3, r2
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	633a      	str	r2, [r7, #48]	@ 0x30
 8004076:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	495e      	ldr	r1, [pc, #376]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800407e:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8004080:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	b2db      	uxtb	r3, r3
 8004088:	495b      	ldr	r1, [pc, #364]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800408e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	4958      	ldr	r1, [pc, #352]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004098:	5ccb      	ldrb	r3, [r1, r3]
 800409a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800409c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	0e1b      	lsrs	r3, r3, #24
 80040a2:	4955      	ldr	r1, [pc, #340]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040a4:	5ccb      	ldrb	r3, [r1, r3]
 80040a6:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 80040a8:	4053      	eors	r3, r2
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	1d1a      	adds	r2, r3, #4
 80040b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80040b2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	494f      	ldr	r1, [pc, #316]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040ba:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 80040bc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	0a1b      	lsrs	r3, r3, #8
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	494c      	ldr	r1, [pc, #304]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040c6:	5ccb      	ldrb	r3, [r1, r3]
 80040c8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 80040ca:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	4949      	ldr	r1, [pc, #292]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040d4:	5ccb      	ldrb	r3, [r1, r3]
 80040d6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80040d8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	0e1b      	lsrs	r3, r3, #24
 80040de:	4946      	ldr	r1, [pc, #280]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040e0:	5ccb      	ldrb	r3, [r1, r3]
 80040e2:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 80040e4:	4053      	eors	r3, r2
 80040e6:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ee:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	4940      	ldr	r1, [pc, #256]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040f6:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 80040f8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	493d      	ldr	r1, [pc, #244]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8004106:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	b2db      	uxtb	r3, r3
 800410e:	493a      	ldr	r1, [pc, #232]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004110:	5ccb      	ldrb	r3, [r1, r3]
 8004112:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004114:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	0e1b      	lsrs	r3, r3, #24
 800411a:	4937      	ldr	r1, [pc, #220]	@ (80041f8 <mbedtls_internal_aes_decrypt+0x5c0>)
 800411c:	5ccb      	ldrb	r3, [r1, r3]
 800411e:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8004120:	4053      	eors	r3, r2
 8004122:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8004124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004126:	b2da      	uxtb	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	0a1a      	lsrs	r2, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3301      	adds	r3, #1
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	0c1a      	lsrs	r2, r3, #16
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3302      	adds	r3, #2
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004146:	0e1a      	lsrs	r2, r3, #24
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3303      	adds	r3, #3
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415c:	0a1a      	lsrs	r2, r3, #8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3305      	adds	r3, #5
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	0c1a      	lsrs	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	3306      	adds	r3, #6
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004174:	0e1a      	lsrs	r2, r3, #24
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3307      	adds	r3, #7
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3308      	adds	r3, #8
 8004182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418a:	0a1a      	lsrs	r2, r3, #8
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3309      	adds	r3, #9
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	0c1a      	lsrs	r2, r3, #16
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	330a      	adds	r3, #10
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	0e1a      	lsrs	r2, r3, #24
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	330b      	adds	r3, #11
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	330c      	adds	r3, #12
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	0a1a      	lsrs	r2, r3, #8
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	330d      	adds	r3, #13
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	0c1a      	lsrs	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	330e      	adds	r3, #14
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	0e1a      	lsrs	r2, r3, #24
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	330f      	adds	r3, #15
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    return( 0 );
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	373c      	adds	r7, #60	@ 0x3c
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	08009a00 	.word	0x08009a00
 80041ec:	08009e00 	.word	0x08009e00
 80041f0:	0800a200 	.word	0x0800a200
 80041f4:	0800a600 	.word	0x0800a600
 80041f8:	08009900 	.word	0x08009900

080041fc <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fa2d 	bl	8003674 <mbedtls_internal_aes_encrypt>
 800421a:	4603      	mov	r3, r0
 800421c:	e005      	b.n	800422a <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7ff fd08 	bl	8003c38 <mbedtls_internal_aes_decrypt>
 8004228:	4603      	mov	r3, r0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 8004232:	b5b0      	push	{r4, r5, r7, lr}
 8004234:	b08a      	sub	sp, #40	@ 0x28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 800424a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800424e:	e06d      	b.n	800432c <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d166      	bne.n	8004324 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 8004256:	e036      	b.n	80042c6 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8004258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800425a:	f107 0414 	add.w	r4, r7, #20
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	6859      	ldr	r1, [r3, #4]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8004268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff ffc4 	bl	80041fc <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8004274:	2300      	movs	r3, #0
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24
 8004278:	e010      	b.n	800429c <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800427e:	4413      	add	r3, r2
 8004280:	7819      	ldrb	r1, [r3, #0]
 8004282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	4413      	add	r3, r2
 8004288:	781a      	ldrb	r2, [r3, #0]
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800428e:	4403      	add	r3, r0
 8004290:	404a      	eors	r2, r1
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	3301      	adds	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	ddeb      	ble.n	800427a <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	461d      	mov	r5, r3
 80042a6:	f107 0414 	add.w	r4, r7, #20
 80042aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ac:	6028      	str	r0, [r5, #0]
 80042ae:	6069      	str	r1, [r5, #4]
 80042b0:	60aa      	str	r2, [r5, #8]
 80042b2:	60eb      	str	r3, [r5, #12]

            input  += 16;
 80042b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b6:	3310      	adds	r3, #16
 80042b8:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 80042ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042bc:	3310      	adds	r3, #16
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3b10      	subs	r3, #16
 80042c4:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1c5      	bne.n	8004258 <mbedtls_aes_crypt_cbc+0x26>
 80042cc:	e02d      	b.n	800432a <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 80042ce:	2300      	movs	r3, #0
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d2:	e010      	b.n	80042f6 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 80042d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042d8:	4413      	add	r3, r2
 80042da:	7819      	ldrb	r1, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4413      	add	r3, r2
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80042e8:	4403      	add	r3, r0
 80042ea:	404a      	eors	r2, r1
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	3301      	adds	r3, #1
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	2b0f      	cmp	r3, #15
 80042fa:	ddeb      	ble.n	80042d4 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 80042fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff ff7a 	bl	80041fc <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8004308:	2210      	movs	r2, #16
 800430a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800430c:	6838      	ldr	r0, [r7, #0]
 800430e:	f004 f860 	bl	80083d2 <memcpy>

            input  += 16;
 8004312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004314:	3310      	adds	r3, #16
 8004316:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431a:	3310      	adds	r3, #16
 800431c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3b10      	subs	r3, #16
 8004322:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1d1      	bne.n	80042ce <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3728      	adds	r7, #40	@ 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bdb0      	pop	{r4, r5, r7, pc}

08004334 <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 800433c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8004340:	2100      	movs	r1, #0
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f003 ffba 	bl	80082bc <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 8004348:	bf00      	nop
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	@ 0x38
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 800435e:	f107 0314 	add.w	r3, r7, #20
 8004362:	2220      	movs	r2, #32
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f003 ffa8 	bl	80082bc <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3320      	adds	r3, #32
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe fe5a 	bl	800302a <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    ctx->p_entropy = p_entropy;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

    ctx->entropy_len = entropy_len;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800438a:	619a      	str	r2, [r3, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004392:	61da      	str	r2, [r3, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3320      	adds	r3, #32
 8004398:	f107 0114 	add.w	r1, r7, #20
 800439c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fe61 	bl	8003068 <mbedtls_aes_setkey_enc>
 80043a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80043a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <mbedtls_ctr_drbg_seed_entropy_len+0x62>
    {
        return( ret );
 80043ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b0:	e00b      	b.n	80043ca <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 80043b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043b4:	6839      	ldr	r1, [r7, #0]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa6d 	bl	8004896 <mbedtls_ctr_drbg_reseed>
 80043bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80043be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <mbedtls_ctr_drbg_seed_entropy_len+0x78>
    {
        return( ret );
 80043c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c6:	e000      	b.n	80043ca <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }
    return( 0 );
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3738      	adds	r7, #56	@ 0x38
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af02      	add	r7, sp, #8
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	603b      	str	r3, [r7, #0]
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 80043e0:	2330      	movs	r3, #48	@ 0x30
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f7ff ffae 	bl	8004350 <mbedtls_ctr_drbg_seed_entropy_len>
 80043f4:	4603      	mov	r3, r0
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <mbedtls_ctr_drbg_free>:

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b082      	sub	sp, #8
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <mbedtls_ctr_drbg_free+0x24>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3320      	adds	r3, #32
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fe18 	bl	8003046 <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 8004416:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fdaa 	bl	8004f74 <mbedtls_platform_zeroize>
 8004420:	e000      	b.n	8004424 <mbedtls_ctr_drbg_free+0x26>
        return;
 8004422:	bf00      	nop
}
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 800442a:	b5b0      	push	{r4, r5, r7, lr}
 800442c:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8004430:	af00      	add	r7, sp, #0
 8004432:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004436:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800443a:	6018      	str	r0, [r3, #0]
 800443c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004440:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8004444:	6019      	str	r1, [r3, #0]
 8004446:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800444a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 800444e:	601a      	str	r2, [r3, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    mbedtls_aes_context aes_ctx;
    int ret = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 8004456:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800445a:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8004464:	d902      	bls.n	800446c <block_cipher_df+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8004466:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 800446a:	e191      	b.n	8004790 <block_cipher_df+0x366>

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 800446c:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8004470:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8004474:	2100      	movs	r1, #0
 8004476:	4618      	mov	r0, r3
 8004478:	f003 ff20 	bl	80082bc <memset>
    mbedtls_aes_init( &aes_ctx );
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fdd2 	bl	800302a <mbedtls_aes_init>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8004486:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800448a:	3310      	adds	r3, #16
 800448c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = ( data_len >> 24 ) & 0xff;
 8004490:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004494:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	0e19      	lsrs	r1, r3, #24
 800449c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80044a6:	b2ca      	uxtb	r2, r1
 80044a8:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 16 ) & 0xff;
 80044aa:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80044ae:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0c19      	lsrs	r1, r3, #16
 80044b6:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80044c0:	b2ca      	uxtb	r2, r1
 80044c2:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 8  ) & 0xff;
 80044c4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80044c8:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	0a19      	lsrs	r1, r3, #8
 80044d0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80044da:	b2ca      	uxtb	r2, r1
 80044dc:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len       ) & 0xff;
 80044de:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80044e8:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 80044ec:	f5a2 7251 	sub.w	r2, r2, #836	@ 0x344
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
    p += 3;
 80044f6:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80044fa:	3303      	adds	r3, #3
 80044fc:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 8004500:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 800450a:	2230      	movs	r2, #48	@ 0x30
 800450c:	701a      	strb	r2, [r3, #0]
    memcpy( p, data, data_len );
 800450e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004512:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 8004516:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800451a:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	6819      	ldr	r1, [r3, #0]
 8004522:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 8004526:	f003 ff54 	bl	80083d2 <memcpy>
    p[data_len] = 0x80;
 800452a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800452e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8004532:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4413      	add	r3, r2
 800453a:	2280      	movs	r2, #128	@ 0x80
 800453c:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 800453e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004542:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3319      	adds	r3, #25
 800454a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8004554:	e010      	b.n	8004578 <block_cipher_df+0x14e>
        key[i] = i;
 8004556:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800455a:	b2d9      	uxtb	r1, r3
 800455c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004560:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8004564:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8004568:	4413      	add	r3, r2
 800456a:	460a      	mov	r2, r1
 800456c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 800456e:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8004572:	3301      	adds	r3, #1
 8004574:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8004578:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800457c:	2b1f      	cmp	r3, #31
 800457e:	ddea      	ble.n	8004556 <block_cipher_df+0x12c>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8004580:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fd6b 	bl	8003068 <mbedtls_aes_setkey_enc>
 8004592:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8004596:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 80c5 	bne.w	800472a <block_cipher_df+0x300>
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80045a0:	2300      	movs	r3, #0
 80045a2:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80045a6:	e078      	b.n	800469a <block_cipher_df+0x270>
    {
        p = buf;
 80045a8:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80045ac:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80045b0:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80045b4:	2210      	movs	r2, #16
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fe7f 	bl	80082bc <memset>
        use_len = buf_len;
 80045be:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80045c2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

        while( use_len > 0 )
 80045c6:	e043      	b.n	8004650 <block_cipher_df+0x226>
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80045ce:	e01d      	b.n	800460c <block_cipher_df+0x1e2>
                chain[i] ^= p[i];
 80045d0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80045d4:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80045d8:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80045dc:	4413      	add	r3, r2
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80045e4:	f8d7 1344 	ldr.w	r1, [r7, #836]	@ 0x344
 80045e8:	440b      	add	r3, r1
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	4053      	eors	r3, r2
 80045ee:	b2d9      	uxtb	r1, r3
 80045f0:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80045f4:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80045f8:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80045fc:	4413      	add	r3, r2
 80045fe:	460a      	mov	r2, r1
 8004600:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8004602:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8004606:	3301      	adds	r3, #1
 8004608:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800460c:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8004610:	2b0f      	cmp	r3, #15
 8004612:	dddd      	ble.n	80045d0 <block_cipher_df+0x1a6>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8004614:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8004618:	3310      	adds	r3, #16
 800461a:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 800461e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8004622:	2b10      	cmp	r3, #16
 8004624:	bf28      	it	cs
 8004626:	2310      	movcs	r3, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 8004628:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 8004632:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8004636:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 800463a:	f107 0014 	add.w	r0, r7, #20
 800463e:	2101      	movs	r1, #1
 8004640:	f7ff fddc 	bl	80041fc <mbedtls_aes_crypt_ecb>
 8004644:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 8004648:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800464c:	2b00      	cmp	r3, #0
 800464e:	d16e      	bne.n	800472e <block_cipher_df+0x304>
        while( use_len > 0 )
 8004650:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1b7      	bne.n	80045c8 <block_cipher_df+0x19e>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8004658:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800465c:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8004660:	441a      	add	r2, r3
 8004662:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004666:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800466a:	4614      	mov	r4, r2
 800466c:	461d      	mov	r5, r3
 800466e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004670:	6020      	str	r0, [r4, #0]
 8004672:	6061      	str	r1, [r4, #4]
 8004674:	60a2      	str	r2, [r4, #8]
 8004676:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 8004678:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800467c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004680:	78db      	ldrb	r3, [r3, #3]
 8004682:	3301      	adds	r3, #1
 8004684:	b2da      	uxtb	r2, r3
 8004686:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800468a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800468e:	70da      	strb	r2, [r3, #3]
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8004690:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8004694:	3310      	adds	r3, #16
 8004696:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 800469a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800469e:	2b2f      	cmp	r3, #47	@ 0x2f
 80046a0:	dd82      	ble.n	80045a8 <block_cipher_df+0x17e>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 80046a2:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 80046a6:	f107 0314 	add.w	r3, r7, #20
 80046aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fcda 	bl	8003068 <mbedtls_aes_setkey_enc>
 80046b4:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 80046b8:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d138      	bne.n	8004732 <block_cipher_df+0x308>
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 80046c0:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80046c4:	3320      	adds	r3, #32
 80046c6:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    p = output;
 80046ca:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80046ce:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80046de:	e01f      	b.n	8004720 <block_cipher_df+0x2f6>
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 80046e0:	f107 0014 	add.w	r0, r7, #20
 80046e4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80046e8:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80046ec:	2101      	movs	r1, #1
 80046ee:	f7ff fd85 	bl	80041fc <mbedtls_aes_crypt_ecb>
 80046f2:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 80046f6:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11b      	bne.n	8004736 <block_cipher_df+0x30c>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80046fe:	2210      	movs	r2, #16
 8004700:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 8004704:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 8004708:	f003 fe63 	bl	80083d2 <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800470c:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8004710:	3310      	adds	r3, #16
 8004712:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8004716:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800471a:	3310      	adds	r3, #16
 800471c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8004720:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8004724:	2b2f      	cmp	r3, #47	@ 0x2f
 8004726:	dddb      	ble.n	80046e0 <block_cipher_df+0x2b6>
    }
exit:
 8004728:	e006      	b.n	8004738 <block_cipher_df+0x30e>
        goto exit;
 800472a:	bf00      	nop
 800472c:	e004      	b.n	8004738 <block_cipher_df+0x30e>
                goto exit;
 800472e:	bf00      	nop
 8004730:	e002      	b.n	8004738 <block_cipher_df+0x30e>
        goto exit;
 8004732:	bf00      	nop
 8004734:	e000      	b.n	8004738 <block_cipher_df+0x30e>
            goto exit;
 8004736:	bf00      	nop
    mbedtls_aes_free( &aes_ctx );
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	4618      	mov	r0, r3
 800473e:	f7fe fc82 	bl	8003046 <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8004742:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8004746:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fc12 	bl	8004f74 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8004750:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8004754:	2130      	movs	r1, #48	@ 0x30
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fc0c 	bl	8004f74 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 800475c:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8004760:	2120      	movs	r1, #32
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fc06 	bl	8004f74 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 8004768:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800476c:	2110      	movs	r1, #16
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fc00 	bl	8004f74 <mbedtls_platform_zeroize>
    if( 0 != ret )
 8004774:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <block_cipher_df+0x362>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 800477c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8004780:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8004784:	2130      	movs	r1, #48	@ 0x30
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	f000 fbf4 	bl	8004f74 <mbedtls_platform_zeroize>
    }

    return( ret );
 800478c:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
}
 8004790:	4618      	mov	r0, r3
 8004792:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 8004796:	46bd      	mov	sp, r7
 8004798:	bdb0      	pop	{r4, r5, r7, pc}

0800479a <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b092      	sub	sp, #72	@ 0x48
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 80047a4:	f107 0308 	add.w	r3, r7, #8
 80047a8:	647b      	str	r3, [r7, #68]	@ 0x44
    int i, j;
    int ret = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	63bb      	str	r3, [r7, #56]	@ 0x38

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	2230      	movs	r2, #48	@ 0x30
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f003 fd80 	bl	80082bc <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80047bc:	2300      	movs	r3, #0
 80047be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047c0:	e028      	b.n	8004814 <ctr_drbg_update_internal+0x7a>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80047c2:	2310      	movs	r3, #16
 80047c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047c6:	e00e      	b.n	80047e6 <ctr_drbg_update_internal+0x4c>
            if( ++ctx->counter[i - 1] != 0 )
 80047c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ca:	3b01      	subs	r3, #1
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	5cd2      	ldrb	r2, [r2, r3]
 80047d0:	3201      	adds	r2, #1
 80047d2:	b2d1      	uxtb	r1, r2
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	54d1      	strb	r1, [r2, r3]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	5cd3      	ldrb	r3, [r2, r3]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d106      	bne.n	80047ee <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80047e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e2:	3b01      	subs	r3, #1
 80047e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	dced      	bgt.n	80047c8 <ctr_drbg_update_internal+0x2e>
 80047ec:	e000      	b.n	80047f0 <ctr_drbg_update_internal+0x56>
                break;
 80047ee:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f103 0020 	add.w	r0, r3, #32
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047fa:	2101      	movs	r1, #1
 80047fc:	f7ff fcfe 	bl	80041fc <mbedtls_aes_crypt_ecb>
 8004800:	63b8      	str	r0, [r7, #56]	@ 0x38
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	2b00      	cmp	r3, #0
 8004806:	d138      	bne.n	800487a <ctr_drbg_update_internal+0xe0>
            goto exit;

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8004808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800480a:	3310      	adds	r3, #16
 800480c:	647b      	str	r3, [r7, #68]	@ 0x44
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800480e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004810:	3310      	adds	r3, #16
 8004812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004816:	2b2f      	cmp	r3, #47	@ 0x2f
 8004818:	ddd3      	ble.n	80047c2 <ctr_drbg_update_internal+0x28>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 800481a:	2300      	movs	r3, #0
 800481c:	643b      	str	r3, [r7, #64]	@ 0x40
 800481e:	e013      	b.n	8004848 <ctr_drbg_update_internal+0xae>
        tmp[i] ^= data[i];
 8004820:	f107 0208 	add.w	r2, r7, #8
 8004824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004826:	4413      	add	r3, r2
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	440b      	add	r3, r1
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	4053      	eors	r3, r2
 8004834:	b2d9      	uxtb	r1, r3
 8004836:	f107 0208 	add.w	r2, r7, #8
 800483a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800483c:	4413      	add	r3, r2
 800483e:	460a      	mov	r2, r1
 8004840:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8004842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004844:	3301      	adds	r3, #1
 8004846:	643b      	str	r3, [r7, #64]	@ 0x40
 8004848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800484a:	2b2f      	cmp	r3, #47	@ 0x2f
 800484c:	dde8      	ble.n	8004820 <ctr_drbg_update_internal+0x86>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3320      	adds	r3, #32
 8004852:	f107 0108 	add.w	r1, r7, #8
 8004856:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe fc04 	bl	8003068 <mbedtls_aes_setkey_enc>
 8004860:	63b8      	str	r0, [r7, #56]	@ 0x38
 8004862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <ctr_drbg_update_internal+0xe4>
        goto exit;
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f107 0308 	add.w	r3, r7, #8
 800486e:	3320      	adds	r3, #32
 8004870:	2210      	movs	r2, #16
 8004872:	4619      	mov	r1, r3
 8004874:	f003 fdad 	bl	80083d2 <memcpy>
 8004878:	e002      	b.n	8004880 <ctr_drbg_update_internal+0xe6>
            goto exit;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <ctr_drbg_update_internal+0xe6>
        goto exit;
 800487e:	bf00      	nop

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8004880:	f107 0308 	add.w	r3, r7, #8
 8004884:	2130      	movs	r1, #48	@ 0x30
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fb74 	bl	8004f74 <mbedtls_platform_zeroize>
    return( ret );
 800488c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800488e:	4618      	mov	r0, r3
 8004890:	3748      	adds	r7, #72	@ 0x48
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b0e6      	sub	sp, #408	@ 0x198
 800489a:	af00      	add	r7, sp, #0
 800489c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80048a0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048a4:	6018      	str	r0, [r3, #0]
 80048a6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80048aa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80048ae:	6019      	str	r1, [r3, #0]
 80048b0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80048b4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80048b8:	601a      	str	r2, [r3, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80048c0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80048c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80048d0:	d80e      	bhi.n	80048f0 <mbedtls_ctr_drbg_reseed+0x5a>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 80048d2:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80048d6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80048e2:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80048e6:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d902      	bls.n	80048f6 <mbedtls_ctr_drbg_reseed+0x60>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80048f0:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 80048f4:	e08b      	b.n	8004a0e <mbedtls_ctr_drbg_reseed+0x178>

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 80048f6:	f107 0310 	add.w	r3, r7, #16
 80048fa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f003 fcdb 	bl	80082bc <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 8004906:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800490a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8004914:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8004918:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	f8d2 013c 	ldr.w	r0, [r2, #316]	@ 0x13c
 8004922:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8004926:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	6992      	ldr	r2, [r2, #24]
 800492e:	f107 0110 	add.w	r1, r7, #16
 8004932:	4798      	blx	r3
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <mbedtls_ctr_drbg_reseed+0xaa>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 800493a:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 800493e:	e066      	b.n	8004a0e <mbedtls_ctr_drbg_reseed+0x178>
    }

    seedlen += ctx->entropy_len;
 8004940:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004944:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004950:	4413      	add	r3, r2
 8004952:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    /*
     * Add additional data
     */
    if( additional && len )
 8004956:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 800495a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d021      	beq.n	80049a8 <mbedtls_ctr_drbg_reseed+0x112>
 8004964:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004968:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01a      	beq.n	80049a8 <mbedtls_ctr_drbg_reseed+0x112>
    {
        memcpy( seed + seedlen, additional, len );
 8004972:	f107 0210 	add.w	r2, r7, #16
 8004976:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800497a:	18d0      	adds	r0, r2, r3
 800497c:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004980:	f5a3 72ca 	sub.w	r2, r3, #404	@ 0x194
 8004984:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004988:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800498c:	6812      	ldr	r2, [r2, #0]
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	f003 fd1f 	bl	80083d2 <memcpy>
        seedlen += len;
 8004994:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8004998:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800499c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4413      	add	r3, r2
 80049a4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 80049a8:	f107 0110 	add.w	r1, r7, #16
 80049ac:	f107 0310 	add.w	r3, r7, #16
 80049b0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fd38 	bl	800442a <block_cipher_df>
 80049ba:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 80049be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d117      	bne.n	80049f6 <mbedtls_ctr_drbg_reseed+0x160>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 80049c6:	f107 0210 	add.w	r2, r7, #16
 80049ca:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80049ce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80049d2:	4611      	mov	r1, r2
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	f7ff fee0 	bl	800479a <ctr_drbg_update_internal>
 80049da:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 80049de:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <mbedtls_ctr_drbg_reseed+0x164>
        goto exit;
    ctx->reseed_counter = 1;
 80049e6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80049ea:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	611a      	str	r2, [r3, #16]
 80049f4:	e002      	b.n	80049fc <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 80049fa:	bf00      	nop

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fab5 	bl	8004f74 <mbedtls_platform_zeroize>
    return( ret );
 8004a0a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b09a      	sub	sp, #104	@ 0x68
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = output;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	667b      	str	r3, [r7, #100]	@ 0x64
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a38:	d902      	bls.n	8004a40 <mbedtls_ctr_drbg_random_with_add+0x28>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 8004a3a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8004a3e:	e09c      	b.n	8004b7a <mbedtls_ctr_drbg_random_with_add+0x162>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 8004a40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a46:	d902      	bls.n	8004a4e <mbedtls_ctr_drbg_random_with_add+0x36>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8004a48:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 8004a4c:	e095      	b.n	8004b7a <mbedtls_ctr_drbg_random_with_add+0x162>

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8004a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a52:	2230      	movs	r2, #48	@ 0x30
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f003 fc30 	bl	80082bc <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8004a5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	dc03      	bgt.n	8004a70 <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance )
 8004a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a6a:	695b      	ldr	r3, [r3, #20]
    if( ctx->reseed_counter > ctx->reseed_interval ||
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <mbedtls_ctr_drbg_random_with_add+0x72>
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8004a70:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004a72:	6839      	ldr	r1, [r7, #0]
 8004a74:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004a76:	f7ff ff0e 	bl	8004896 <mbedtls_ctr_drbg_reseed>
 8004a7a:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <mbedtls_ctr_drbg_random_with_add+0x6e>
        {
            return( ret );
 8004a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a84:	e079      	b.n	8004b7a <mbedtls_ctr_drbg_random_with_add+0x162>
        }
        add_len = 0;
 8004a86:	2300      	movs	r3, #0
 8004a88:	673b      	str	r3, [r7, #112]	@ 0x70
    }

    if( add_len > 0 )
 8004a8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d04d      	beq.n	8004b2c <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 8004a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a94:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004a96:	6839      	ldr	r1, [r7, #0]
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f7ff fcc6 	bl	800442a <block_cipher_df>
 8004a9e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8004aa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d155      	bne.n	8004b52 <mbedtls_ctr_drbg_random_with_add+0x13a>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8004aa6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004aae:	f7ff fe74 	bl	800479a <ctr_drbg_update_internal>
 8004ab2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8004ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d14d      	bne.n	8004b56 <mbedtls_ctr_drbg_random_with_add+0x13e>
            goto exit;
    }

    while( output_len > 0 )
 8004aba:	e037      	b.n	8004b2c <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8004abc:	2310      	movs	r3, #16
 8004abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ac0:	e00e      	b.n	8004ae0 <mbedtls_ctr_drbg_random_with_add+0xc8>
            if( ++ctx->counter[i - 1] != 0 )
 8004ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ac8:	5cd2      	ldrb	r2, [r2, r3]
 8004aca:	3201      	adds	r2, #1
 8004acc:	b2d1      	uxtb	r1, r2
 8004ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ad0:	54d1      	strb	r1, [r2, r3]
 8004ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ad4:	5cd3      	ldrb	r3, [r2, r3]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <mbedtls_ctr_drbg_random_with_add+0xd0>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8004ada:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004adc:	3b01      	subs	r3, #1
 8004ade:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ae0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	dced      	bgt.n	8004ac2 <mbedtls_ctr_drbg_random_with_add+0xaa>
 8004ae6:	e000      	b.n	8004aea <mbedtls_ctr_drbg_random_with_add+0xd2>
                break;
 8004ae8:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 8004aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aec:	f103 0020 	add.w	r0, r3, #32
 8004af0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	2101      	movs	r1, #1
 8004af8:	f7ff fb80 	bl	80041fc <mbedtls_aes_crypt_ecb>
 8004afc:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8004afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d12a      	bne.n	8004b5a <mbedtls_ctr_drbg_random_with_add+0x142>
            goto exit;

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	bf28      	it	cs
 8004b0a:	2310      	movcs	r3, #16
 8004b0c:	657b      	str	r3, [r7, #84]	@ 0x54
                                                       output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b14:	4619      	mov	r1, r3
 8004b16:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004b18:	f003 fc5b 	bl	80083d2 <memcpy>
        p += use_len;
 8004b1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b20:	4413      	add	r3, r2
 8004b22:	667b      	str	r3, [r7, #100]	@ 0x64
        output_len -= use_len;
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	607b      	str	r3, [r7, #4]
    while( output_len > 0 )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1c4      	bne.n	8004abc <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8004b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b36:	4619      	mov	r1, r3
 8004b38:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b3a:	f7ff fe2e 	bl	800479a <ctr_drbg_update_internal>
 8004b3e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8004b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <mbedtls_ctr_drbg_random_with_add+0x146>
        goto exit;

    ctx->reseed_counter++;
 8004b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b4e:	611a      	str	r2, [r3, #16]
 8004b50:	e006      	b.n	8004b60 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8004b52:	bf00      	nop
 8004b54:	e004      	b.n	8004b60 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <mbedtls_ctr_drbg_random_with_add+0x148>
        goto exit;
 8004b5e:	bf00      	nop

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 8004b60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b64:	2130      	movs	r1, #48	@ 0x30
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 fa04 	bl	8004f74 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8004b6c:	f107 0314 	add.w	r3, r7, #20
 8004b70:	2110      	movs	r1, #16
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 f9fe 	bl	8004f74 <mbedtls_platform_zeroize>
    return( 0 );
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3768      	adds	r7, #104	@ 0x68
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b088      	sub	sp, #32
 8004b86:	af02      	add	r7, sp, #8
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8004b92:	2300      	movs	r3, #0
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f7ff ff3b 	bl	8004a18 <mbedtls_ctr_drbg_random_with_add>
 8004ba2:	6138      	str	r0, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 8004ba4:	693b      	ldr	r3, [r7, #16]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b082      	sub	sp, #8
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	33e4      	adds	r3, #228	@ 0xe4
 8004bc2:	2228      	movs	r2, #40	@ 0x28
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f003 fb78 	bl	80082bc <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f9de 	bl	8004f98 <mbedtls_sha512_init>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <mbedtls_entropy_free>:

void mbedtls_entropy_free( mbedtls_entropy_context *ctx )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
#endif
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_free( &ctx->accumulator );
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f9de 	bl	8004fb2 <mbedtls_sha512_free>
    mbedtls_sha256_free( &ctx->accumulator );
#endif
#if defined(MBEDTLS_ENTROPY_NV_SEED)
    ctx->initial_entropy_run = 0;
#endif
    ctx->source_count = 0;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	33e4      	adds	r3, #228	@ 0xe4
 8004c02:	2128      	movs	r1, #40	@ 0x28
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 f9b5 	bl	8004f74 <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
}
 8004c10:	bf00      	nop
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b098      	sub	sp, #96	@ 0x60
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	460b      	mov	r3, r1
 8004c26:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const unsigned char *p = data;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    int ret = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	657b      	str	r3, [r7, #84]	@ 0x54

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8004c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c36:	2b40      	cmp	r3, #64	@ 0x40
 8004c38:	d90f      	bls.n	8004c5a <entropy_update+0x42>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 8004c3a:	f107 0210 	add.w	r2, r7, #16
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6839      	ldr	r1, [r7, #0]
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f003 f854 	bl	8007cf0 <mbedtls_sha512_ret>
 8004c48:	6578      	str	r0, [r7, #84]	@ 0x54
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d131      	bne.n	8004cb4 <entropy_update+0x9c>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	65bb      	str	r3, [r7, #88]	@ 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8004c56:	2340      	movs	r3, #64	@ 0x40
 8004c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    header[0] = source_id;
 8004c5a:	7afb      	ldrb	r3, [r7, #11]
 8004c5c:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    header[1] = use_len & 0xFF;
 8004c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <entropy_update+0x6c>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3308      	adds	r3, #8
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f9ae 	bl	8004fd8 <mbedtls_sha512_starts_ret>
 8004c7c:	6578      	str	r0, [r7, #84]	@ 0x54
    if( ctx->accumulator_started == 0 &&
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d119      	bne.n	8004cb8 <entropy_update+0xa0>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004c92:	2202      	movs	r2, #2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f002 fb21 	bl	80072dc <mbedtls_sha512_update_ret>
 8004c9a:	6578      	str	r0, [r7, #84]	@ 0x54
 8004c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10c      	bne.n	8004cbc <entropy_update+0xa4>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004ca8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004caa:	4618      	mov	r0, r3
 8004cac:	f002 fb16 	bl	80072dc <mbedtls_sha512_update_ret>
 8004cb0:	6578      	str	r0, [r7, #84]	@ 0x54
 8004cb2:	e004      	b.n	8004cbe <entropy_update+0xa6>
            goto cleanup;
 8004cb4:	bf00      	nop
 8004cb6:	e002      	b.n	8004cbe <entropy_update+0xa6>
        goto cleanup;
 8004cb8:	bf00      	nop
 8004cba:	e000      	b.n	8004cbe <entropy_update+0xa6>
        goto cleanup;
 8004cbc:	bf00      	nop
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8004cbe:	f107 0310 	add.w	r3, r7, #16
 8004cc2:	2140      	movs	r1, #64	@ 0x40
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f955 	bl	8004f74 <mbedtls_platform_zeroize>

    return( ret );
 8004cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3760      	adds	r7, #96	@ 0x60
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b0a7      	sub	sp, #156	@ 0x9c
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
    int ret, i, have_one_strong = 0;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d102      	bne.n	8004cf2 <entropy_gather_internal+0x1e>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 8004cec:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 8004cf0:	e07f      	b.n	8004df2 <entropy_gather_internal+0x11e>

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cf8:	e060      	b.n	8004dbc <entropy_gather_internal+0xe8>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	33f4      	adds	r3, #244	@ 0xf4
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d102      	bne.n	8004d18 <entropy_gather_internal+0x44>
            have_one_strong = 1;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        olen = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	60bb      	str	r3, [r7, #8]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	33e4      	adds	r3, #228	@ 0xe4
 8004d2e:	681c      	ldr	r4, [r3, #0]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	33e8      	adds	r3, #232	@ 0xe8
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	f107 0308 	add.w	r3, r7, #8
 8004d48:	f107 010c 	add.w	r1, r7, #12
 8004d4c:	2280      	movs	r2, #128	@ 0x80
 8004d4e:	47a0      	blx	r4
 8004d50:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8004d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d13f      	bne.n	8004ddc <entropy_gather_internal+0x108>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d027      	beq.n	8004db2 <entropy_gather_internal+0xde>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 8004d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004d66:	b2d9      	uxtb	r1, r3
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f107 020c 	add.w	r2, r7, #12
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7ff ff52 	bl	8004c18 <entropy_update>
 8004d74:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8004d78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <entropy_gather_internal+0xb2>
                                        buf, olen ) ) != 0 )
                return( ret );
 8004d80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d84:	e035      	b.n	8004df2 <entropy_gather_internal+0x11e>
            ctx->source[i].size += olen;
 8004d86:	6879      	ldr	r1, [r7, #4]
 8004d88:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	440b      	add	r3, r1
 8004d96:	33ec      	adds	r3, #236	@ 0xec
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	18d1      	adds	r1, r2, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4403      	add	r3, r0
 8004dae:	33ec      	adds	r3, #236	@ 0xec
 8004db0:	6019      	str	r1, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 8004db2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004db6:	3301      	adds	r3, #1
 8004db8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004dc2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	db97      	blt.n	8004cfa <entropy_gather_internal+0x26>
        }
    }

    if( have_one_strong == 0 )
 8004dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <entropy_gather_internal+0x10c>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 8004dd2:	f06f 033c 	mvn.w	r3, #60	@ 0x3c
 8004dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004dda:	e002      	b.n	8004de2 <entropy_gather_internal+0x10e>
            goto cleanup;
 8004ddc:	bf00      	nop
 8004dde:	e000      	b.n	8004de2 <entropy_gather_internal+0x10e>

cleanup:
 8004de0:	bf00      	nop
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8004de2:	f107 030c 	add.w	r3, r7, #12
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 f8c3 	bl	8004f74 <mbedtls_platform_zeroize>

    return( ret );
 8004dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	379c      	adds	r7, #156	@ 0x9c
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}

08004dfa <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b09a      	sub	sp, #104	@ 0x68
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, done;
 8004e06:	2300      	movs	r3, #0
 8004e08:	663b      	str	r3, [r7, #96]	@ 0x60
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	657b      	str	r3, [r7, #84]	@ 0x54
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b40      	cmp	r3, #64	@ 0x40
 8004e12:	d902      	bls.n	8004e1a <mbedtls_entropy_func+0x20>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 8004e14:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 8004e18:	e0a7      	b.n	8004f6a <mbedtls_entropy_func+0x170>
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 8004e1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	663a      	str	r2, [r7, #96]	@ 0x60
 8004e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e24:	dd03      	ble.n	8004e2e <mbedtls_entropy_func+0x34>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 8004e26:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 8004e2a:	667b      	str	r3, [r7, #100]	@ 0x64
            goto exit;
 8004e2c:	e096      	b.n	8004f5c <mbedtls_entropy_func+0x162>
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8004e2e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004e30:	f7ff ff50 	bl	8004cd4 <entropy_gather_internal>
 8004e34:	6678      	str	r0, [r7, #100]	@ 0x64
 8004e36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f040 8086 	bne.w	8004f4a <mbedtls_entropy_func+0x150>
            goto exit;

        done = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 8004e42:	2300      	movs	r3, #0
 8004e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e46:	e018      	b.n	8004e7a <mbedtls_entropy_func+0x80>
            if( ctx->source[i].size < ctx->source[i].threshold )
 8004e48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e4a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	33ec      	adds	r3, #236	@ 0xec
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004e5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4403      	add	r3, r0
 8004e68:	33f0      	adds	r3, #240	@ 0xf0
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	d201      	bcs.n	8004e74 <mbedtls_entropy_func+0x7a>
                done = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 8004e74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e76:	3301      	adds	r3, #1
 8004e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004e82:	429a      	cmp	r2, r3
 8004e84:	dbe0      	blt.n	8004e48 <mbedtls_entropy_func+0x4e>
    }
    while( ! done );
 8004e86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0c6      	beq.n	8004e1a <mbedtls_entropy_func+0x20>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8004e8c:	f107 0314 	add.w	r3, r7, #20
 8004e90:	2240      	movs	r2, #64	@ 0x40
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f003 fa11 	bl	80082bc <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 8004e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	f107 0214 	add.w	r2, r7, #20
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f002 faa4 	bl	80073f2 <mbedtls_sha512_finish_ret>
 8004eaa:	6678      	str	r0, [r7, #100]	@ 0x64
 8004eac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d14d      	bne.n	8004f4e <mbedtls_entropy_func+0x154>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 8004eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f87b 	bl	8004fb2 <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 8004ebc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ebe:	3308      	adds	r3, #8
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f869 	bl	8004f98 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8004ec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ec8:	3308      	adds	r3, #8
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 f883 	bl	8004fd8 <mbedtls_sha512_starts_ret>
 8004ed2:	6678      	str	r0, [r7, #100]	@ 0x64
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d13b      	bne.n	8004f52 <mbedtls_entropy_func+0x158>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 8004eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004edc:	3308      	adds	r3, #8
 8004ede:	f107 0114 	add.w	r1, r7, #20
 8004ee2:	2240      	movs	r2, #64	@ 0x40
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f002 f9f9 	bl	80072dc <mbedtls_sha512_update_ret>
 8004eea:	6678      	str	r0, [r7, #100]	@ 0x64
 8004eec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d131      	bne.n	8004f56 <mbedtls_entropy_func+0x15c>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 8004ef2:	f107 0214 	add.w	r2, r7, #20
 8004ef6:	f107 0014 	add.w	r0, r7, #20
 8004efa:	2300      	movs	r3, #0
 8004efc:	2140      	movs	r1, #64	@ 0x40
 8004efe:	f002 fef7 	bl	8007cf0 <mbedtls_sha512_ret>
 8004f02:	6678      	str	r0, [r7, #100]	@ 0x64
 8004f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d127      	bne.n	8004f5a <mbedtls_entropy_func+0x160>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f0e:	e00c      	b.n	8004f2a <mbedtls_entropy_func+0x130>
        ctx->source[i].size = 0;
 8004f10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	33ec      	adds	r3, #236	@ 0xec
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 8004f24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f26:	3301      	adds	r3, #1
 8004f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f32:	429a      	cmp	r2, r3
 8004f34:	dbec      	blt.n	8004f10 <mbedtls_entropy_func+0x116>

    memcpy( output, buf, len );
 8004f36:	f107 0314 	add.w	r3, r7, #20
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	68b8      	ldr	r0, [r7, #8]
 8004f40:	f003 fa47 	bl	80083d2 <memcpy>

    ret = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f48:	e008      	b.n	8004f5c <mbedtls_entropy_func+0x162>
            goto exit;
 8004f4a:	bf00      	nop
 8004f4c:	e006      	b.n	8004f5c <mbedtls_entropy_func+0x162>
        goto exit;
 8004f4e:	bf00      	nop
 8004f50:	e004      	b.n	8004f5c <mbedtls_entropy_func+0x162>
        goto exit;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <mbedtls_entropy_func+0x162>
        goto exit;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <mbedtls_entropy_func+0x162>
        goto exit;
 8004f5a:	bf00      	nop

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8004f5c:	f107 0314 	add.w	r3, r7, #20
 8004f60:	2140      	movs	r1, #64	@ 0x40
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 f806 	bl	8004f74 <mbedtls_platform_zeroize>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 8004f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3768      	adds	r7, #104	@ 0x68
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
	...

08004f74 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8004f7e:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <mbedtls_platform_zeroize+0x20>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	2100      	movs	r1, #0
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000010 	.word	0x20000010

08004f98 <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8004fa0:	22d8      	movs	r2, #216	@ 0xd8
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f003 f989 	bl	80082bc <memset>
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <mbedtls_sha512_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 8004fc0:	21d8      	movs	r1, #216	@ 0xd8
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff ffd6 	bl	8004f74 <mbedtls_platform_zeroize>
 8004fc8:	e000      	b.n	8004fcc <mbedtls_sha512_free+0x1a>
        return;
 8004fca:	bf00      	nop
}
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	0000      	movs	r0, r0
 8004fd4:	0000      	movs	r0, r0
	...

08004fd8 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9c1 2300 	strd	r2, r3, [r1]
    ctx->total[1] = 0;
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if( is384 == 0 )
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d130      	bne.n	8005066 <mbedtls_sha512_starts_ret+0x8e>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	a336      	add	r3, pc, #216	@ (adr r3, 80050e0 <mbedtls_sha512_starts_ret+0x108>)
 8005008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	a335      	add	r3, pc, #212	@ (adr r3, 80050e8 <mbedtls_sha512_starts_ret+0x110>)
 8005014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005018:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	a334      	add	r3, pc, #208	@ (adr r3, 80050f0 <mbedtls_sha512_starts_ret+0x118>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	a333      	add	r3, pc, #204	@ (adr r3, 80050f8 <mbedtls_sha512_starts_ret+0x120>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	a332      	add	r3, pc, #200	@ (adr r3, 8005100 <mbedtls_sha512_starts_ret+0x128>)
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 8005040:	6879      	ldr	r1, [r7, #4]
 8005042:	a331      	add	r3, pc, #196	@ (adr r3, 8005108 <mbedtls_sha512_starts_ret+0x130>)
 8005044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005048:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	a330      	add	r3, pc, #192	@ (adr r3, 8005110 <mbedtls_sha512_starts_ret+0x138>)
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	a32f      	add	r3, pc, #188	@ (adr r3, 8005118 <mbedtls_sha512_starts_ret+0x140>)
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8005064:	e02f      	b.n	80050c6 <mbedtls_sha512_starts_ret+0xee>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	a32d      	add	r3, pc, #180	@ (adr r3, 8005120 <mbedtls_sha512_starts_ret+0x148>)
 800506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506e:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	a32c      	add	r3, pc, #176	@ (adr r3, 8005128 <mbedtls_sha512_starts_ret+0x150>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	a32b      	add	r3, pc, #172	@ (adr r3, 8005130 <mbedtls_sha512_starts_ret+0x158>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	a32a      	add	r3, pc, #168	@ (adr r3, 8005138 <mbedtls_sha512_starts_ret+0x160>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	a329      	add	r3, pc, #164	@ (adr r3, 8005140 <mbedtls_sha512_starts_ret+0x168>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	a328      	add	r3, pc, #160	@ (adr r3, 8005148 <mbedtls_sha512_starts_ret+0x170>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	a327      	add	r3, pc, #156	@ (adr r3, 8005150 <mbedtls_sha512_starts_ret+0x178>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	a326      	add	r3, pc, #152	@ (adr r3, 8005158 <mbedtls_sha512_starts_ret+0x180>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    }

    ctx->is384 = is384;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    return( 0 );
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	f3af 8000 	nop.w
 80050e0:	f3bcc908 	.word	0xf3bcc908
 80050e4:	6a09e667 	.word	0x6a09e667
 80050e8:	84caa73b 	.word	0x84caa73b
 80050ec:	bb67ae85 	.word	0xbb67ae85
 80050f0:	fe94f82b 	.word	0xfe94f82b
 80050f4:	3c6ef372 	.word	0x3c6ef372
 80050f8:	5f1d36f1 	.word	0x5f1d36f1
 80050fc:	a54ff53a 	.word	0xa54ff53a
 8005100:	ade682d1 	.word	0xade682d1
 8005104:	510e527f 	.word	0x510e527f
 8005108:	2b3e6c1f 	.word	0x2b3e6c1f
 800510c:	9b05688c 	.word	0x9b05688c
 8005110:	fb41bd6b 	.word	0xfb41bd6b
 8005114:	1f83d9ab 	.word	0x1f83d9ab
 8005118:	137e2179 	.word	0x137e2179
 800511c:	5be0cd19 	.word	0x5be0cd19
 8005120:	c1059ed8 	.word	0xc1059ed8
 8005124:	cbbb9d5d 	.word	0xcbbb9d5d
 8005128:	367cd507 	.word	0x367cd507
 800512c:	629a292a 	.word	0x629a292a
 8005130:	3070dd17 	.word	0x3070dd17
 8005134:	9159015a 	.word	0x9159015a
 8005138:	f70e5939 	.word	0xf70e5939
 800513c:	152fecd8 	.word	0x152fecd8
 8005140:	ffc00b31 	.word	0xffc00b31
 8005144:	67332667 	.word	0x67332667
 8005148:	68581511 	.word	0x68581511
 800514c:	8eb44a87 	.word	0x8eb44a87
 8005150:	64f98fa7 	.word	0x64f98fa7
 8005154:	db0c2e0d 	.word	0xdb0c2e0d
 8005158:	befa4fa4 	.word	0xbefa4fa4
 800515c:	47b5481d 	.word	0x47b5481d

08005160 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 8005160:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005164:	f5ad 6d1e 	sub.w	sp, sp, #2528	@ 0x9e0
 8005168:	af00      	add	r7, sp, #0
 800516a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800516e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8005172:	6018      	str	r0, [r3, #0]
 8005174:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005178:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800517c:	6019      	str	r1, [r3, #0]
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 800517e:	2300      	movs	r3, #0
 8005180:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8005184:	e11f      	b.n	80053c6 <mbedtls_internal_sha512_process+0x266>
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 8005186:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	461a      	mov	r2, r3
 800518e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005192:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4413      	add	r3, r2
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2200      	movs	r2, #0
 80051a0:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 80051a4:	f8c7 26d4 	str.w	r2, [r7, #1748]	@ 0x6d4
 80051a8:	f04f 0000 	mov.w	r0, #0
 80051ac:	f04f 0100 	mov.w	r1, #0
 80051b0:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	@ 0x6d0
 80051b4:	0619      	lsls	r1, r3, #24
 80051b6:	2000      	movs	r0, #0
 80051b8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80051c4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4413      	add	r3, r2
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 80051d6:	f8c7 26cc 	str.w	r2, [r7, #1740]	@ 0x6cc
 80051da:	f04f 0200 	mov.w	r2, #0
 80051de:	f04f 0300 	mov.w	r3, #0
 80051e2:	f8d7 66c8 	ldr.w	r6, [r7, #1736]	@ 0x6c8
 80051e6:	0433      	lsls	r3, r6, #16
 80051e8:	2200      	movs	r2, #0
 80051ea:	ea40 0602 	orr.w	r6, r0, r2
 80051ee:	f8c7 66e8 	str.w	r6, [r7, #1768]	@ 0x6e8
 80051f2:	430b      	orrs	r3, r1
 80051f4:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 80051f8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	1c9a      	adds	r2, r3, #2
 8005200:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005204:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4413      	add	r3, r2
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2200      	movs	r2, #0
 8005212:	f8c7 36c0 	str.w	r3, [r7, #1728]	@ 0x6c0
 8005216:	f8c7 26c4 	str.w	r2, [r7, #1732]	@ 0x6c4
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 8005226:	020b      	lsls	r3, r1, #8
 8005228:	2200      	movs	r2, #0
 800522a:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 800522e:	4311      	orrs	r1, r2
 8005230:	f8c7 16e0 	str.w	r1, [r7, #1760]	@ 0x6e0
 8005234:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 8005238:	430b      	orrs	r3, r1
 800523a:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 800523e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	1cda      	adds	r2, r3, #3
 8005246:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800524a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4413      	add	r3, r2
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2200      	movs	r2, #0
 8005258:	f8c7 36b8 	str.w	r3, [r7, #1720]	@ 0x6b8
 800525c:	f8c7 26bc 	str.w	r2, [r7, #1724]	@ 0x6bc
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 800526c:	000b      	movs	r3, r1
 800526e:	2200      	movs	r2, #0
 8005270:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 8005274:	4311      	orrs	r1, r2
 8005276:	f8c7 16d8 	str.w	r1, [r7, #1752]	@ 0x6d8
 800527a:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 800527e:	430b      	orrs	r3, r1
 8005280:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 8005284:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005290:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4413      	add	r3, r2
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2200      	movs	r2, #0
 800529e:	f8c7 36b0 	str.w	r3, [r7, #1712]	@ 0x6b0
 80052a2:	f8c7 26b4 	str.w	r2, [r7, #1716]	@ 0x6b4
 80052a6:	f507 63d6 	add.w	r3, r7, #1712	@ 0x6b0
 80052aa:	e9d3 1200 	ldrd	r1, r2, [r3]
 80052ae:	460b      	mov	r3, r1
 80052b0:	0a1b      	lsrs	r3, r3, #8
 80052b2:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 80052b6:	460b      	mov	r3, r1
 80052b8:	061b      	lsls	r3, r3, #24
 80052ba:	f8c7 36a8 	str.w	r3, [r7, #1704]	@ 0x6a8
 80052be:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	@ 0x6d8
 80052c2:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 80052c6:	e9d2 0100 	ldrd	r0, r1, [r2]
 80052ca:	4602      	mov	r2, r0
 80052cc:	ea43 0a02 	orr.w	sl, r3, r2
 80052d0:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	@ 0x6dc
 80052d4:	460a      	mov	r2, r1
 80052d6:	ea43 0b02 	orr.w	fp, r3, r2
 80052da:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	1d5a      	adds	r2, r3, #5
 80052e2:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80052e6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4413      	add	r3, r2
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 36f8 	str.w	r3, [r7, #1784]	@ 0x6f8
 80052f8:	f8c7 26fc 	str.w	r2, [r7, #1788]	@ 0x6fc
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 8005308:	040b      	lsls	r3, r1, #16
 800530a:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 800530e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8005312:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8005316:	040a      	lsls	r2, r1, #16
 8005318:	ea4a 0802 	orr.w	r8, sl, r2
 800531c:	ea4b 0903 	orr.w	r9, fp, r3
 8005320:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	1d9a      	adds	r2, r3, #6
 8005328:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800532c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4413      	add	r3, r2
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2200      	movs	r2, #0
 800533a:	f8c7 36f0 	str.w	r3, [r7, #1776]	@ 0x6f0
 800533e:	f8c7 26f4 	str.w	r2, [r7, #1780]	@ 0x6f4
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 800534e:	020b      	lsls	r3, r1, #8
 8005350:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8005354:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8005358:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 800535c:	020a      	lsls	r2, r1, #8
 800535e:	ea48 0402 	orr.w	r4, r8, r2
 8005362:	ea49 0503 	orr.w	r5, r9, r3
 8005366:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	1dda      	adds	r2, r3, #7
 800536e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005372:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4413      	add	r3, r2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2200      	movs	r2, #0
 8005380:	f8c7 36a0 	str.w	r3, [r7, #1696]	@ 0x6a0
 8005384:	f8c7 26a4 	str.w	r2, [r7, #1700]	@ 0x6a4
 8005388:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 800538c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005390:	460b      	mov	r3, r1
 8005392:	4323      	orrs	r3, r4
 8005394:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
 8005398:	4613      	mov	r3, r2
 800539a:	432b      	orrs	r3, r5
 800539c:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 80053a0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80053a4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80053a8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	4413      	add	r3, r2
 80053b0:	f507 62d3 	add.w	r2, r7, #1688	@ 0x698
 80053b4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80053b8:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 16; i++ )
 80053bc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80053c0:	3301      	adds	r3, #1
 80053c2:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 80053c6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80053ca:	2b0f      	cmp	r3, #15
 80053cc:	f77f aedb 	ble.w	8005186 <mbedtls_internal_sha512_process+0x26>
    }

    for( ; i < 80; i++ )
 80053d0:	e10e      	b.n	80055f0 <mbedtls_internal_sha512_process+0x490>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80053d2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80053d6:	1e99      	subs	r1, r3, #2
 80053d8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80053dc:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80053e0:	00cb      	lsls	r3, r1, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	0358      	lsls	r0, r3, #13
 80053ea:	0cd1      	lsrs	r1, r2, #19
 80053ec:	4301      	orrs	r1, r0
 80053ee:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 80053f2:	0351      	lsls	r1, r2, #13
 80053f4:	0cdb      	lsrs	r3, r3, #19
 80053f6:	430b      	orrs	r3, r1
 80053f8:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 80053fc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005400:	1e99      	subs	r1, r3, #2
 8005402:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005406:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800540a:	00cb      	lsls	r3, r1, #3
 800540c:	4413      	add	r3, r2
 800540e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005412:	0f50      	lsrs	r0, r2, #29
 8005414:	00d9      	lsls	r1, r3, #3
 8005416:	4301      	orrs	r1, r0
 8005418:	f8c7 168c 	str.w	r1, [r7, #1676]	@ 0x68c
 800541c:	0f59      	lsrs	r1, r3, #29
 800541e:	00d3      	lsls	r3, r2, #3
 8005420:	430b      	orrs	r3, r1
 8005422:	f8c7 3688 	str.w	r3, [r7, #1672]	@ 0x688
 8005426:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 800542a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800542e:	4623      	mov	r3, r4
 8005430:	f507 62d1 	add.w	r2, r7, #1672	@ 0x688
 8005434:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005438:	4602      	mov	r2, r0
 800543a:	4053      	eors	r3, r2
 800543c:	f8c7 3680 	str.w	r3, [r7, #1664]	@ 0x680
 8005440:	462b      	mov	r3, r5
 8005442:	460a      	mov	r2, r1
 8005444:	4053      	eors	r3, r2
 8005446:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 800544a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800544e:	1e99      	subs	r1, r3, #2
 8005450:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005454:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8005458:	00cb      	lsls	r3, r1, #3
 800545a:	4413      	add	r3, r2
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f04f 0000 	mov.w	r0, #0
 8005464:	f04f 0100 	mov.w	r1, #0
 8005468:	0990      	lsrs	r0, r2, #6
 800546a:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 800546e:	0999      	lsrs	r1, r3, #6
 8005470:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 8005474:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005478:	4623      	mov	r3, r4
 800547a:	4043      	eors	r3, r0
 800547c:	f8c7 3678 	str.w	r3, [r7, #1656]	@ 0x678
 8005480:	462b      	mov	r3, r5
 8005482:	404b      	eors	r3, r1
 8005484:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 8005488:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800548c:	1fd9      	subs	r1, r3, #7
 800548e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005492:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8005496:	00cb      	lsls	r3, r1, #3
 8005498:	4413      	add	r3, r2
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f507 61cf 	add.w	r1, r7, #1656	@ 0x678
 80054a2:	e9d1 4500 	ldrd	r4, r5, [r1]
 80054a6:	4621      	mov	r1, r4
 80054a8:	1889      	adds	r1, r1, r2
 80054aa:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 80054ae:	4629      	mov	r1, r5
 80054b0:	eb41 0303 	adc.w	r3, r1, r3
 80054b4:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
               S0(W[i - 15]) + W[i - 16];
 80054b8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80054bc:	f1a3 010f 	sub.w	r1, r3, #15
 80054c0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80054c4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80054c8:	00cb      	lsls	r3, r1, #3
 80054ca:	4413      	add	r3, r2
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	07d8      	lsls	r0, r3, #31
 80054d2:	0851      	lsrs	r1, r2, #1
 80054d4:	4301      	orrs	r1, r0
 80054d6:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 80054da:	07d1      	lsls	r1, r2, #31
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	430b      	orrs	r3, r1
 80054e0:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 80054e4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80054e8:	f1a3 010f 	sub.w	r1, r3, #15
 80054ec:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80054f0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80054f4:	00cb      	lsls	r3, r1, #3
 80054f6:	4413      	add	r3, r2
 80054f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fc:	0618      	lsls	r0, r3, #24
 80054fe:	0a11      	lsrs	r1, r2, #8
 8005500:	4301      	orrs	r1, r0
 8005502:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 8005506:	0611      	lsls	r1, r2, #24
 8005508:	0a1b      	lsrs	r3, r3, #8
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 8005510:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 8005514:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005518:	4623      	mov	r3, r4
 800551a:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 800551e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005522:	4602      	mov	r2, r0
 8005524:	4053      	eors	r3, r2
 8005526:	f8c7 3658 	str.w	r3, [r7, #1624]	@ 0x658
 800552a:	462b      	mov	r3, r5
 800552c:	460a      	mov	r2, r1
 800552e:	4053      	eors	r3, r2
 8005530:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 8005534:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005538:	f1a3 010f 	sub.w	r1, r3, #15
 800553c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005540:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8005544:	00cb      	lsls	r3, r1, #3
 8005546:	4413      	add	r3, r2
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	f04f 0000 	mov.w	r0, #0
 8005550:	f04f 0100 	mov.w	r1, #0
 8005554:	09d0      	lsrs	r0, r2, #7
 8005556:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800555a:	09d9      	lsrs	r1, r3, #7
 800555c:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8005560:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005564:	4623      	mov	r3, r4
 8005566:	4043      	eors	r3, r0
 8005568:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
 800556c:	462b      	mov	r3, r5
 800556e:	404b      	eors	r3, r1
 8005570:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8005574:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8005578:	e9d3 4500 	ldrd	r4, r5, [r3]
 800557c:	4623      	mov	r3, r4
 800557e:	f507 62ca 	add.w	r2, r7, #1616	@ 0x650
 8005582:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005586:	4602      	mov	r2, r0
 8005588:	189b      	adds	r3, r3, r2
 800558a:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 800558e:	462b      	mov	r3, r5
 8005590:	460a      	mov	r2, r1
 8005592:	4153      	adcs	r3, r2
 8005594:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
               S0(W[i - 15]) + W[i - 16];
 8005598:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800559c:	f1a3 0110 	sub.w	r1, r3, #16
 80055a0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80055a4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80055a8:	00cb      	lsls	r3, r1, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 80055b4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80055b8:	4621      	mov	r1, r4
 80055ba:	1889      	adds	r1, r1, r2
 80055bc:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 80055c0:	4629      	mov	r1, r5
 80055c2:	eb41 0303 	adc.w	r3, r1, r3
 80055c6:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
        W[i] = S1(W[i -  2]) + W[i -  7] +
 80055ca:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80055ce:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80055d2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	f507 62c8 	add.w	r2, r7, #1600	@ 0x640
 80055de:	e9d2 1200 	ldrd	r1, r2, [r2]
 80055e2:	e9c3 1200 	strd	r1, r2, [r3]
    for( ; i < 80; i++ )
 80055e6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80055ea:	3301      	adds	r3, #1
 80055ec:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 80055f0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80055f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80055f6:	f77f aeec 	ble.w	80053d2 <mbedtls_internal_sha512_process+0x272>
    }

    A = ctx->state[0];
 80055fa:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80055fe:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005608:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 800560c:	e9c1 2300 	strd	r2, r3, [r1]
    B = ctx->state[1];
 8005610:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005614:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800561e:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8005622:	e9c1 2300 	strd	r2, r3, [r1]
    C = ctx->state[2];
 8005626:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800562a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005634:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8005638:	e9c1 2300 	strd	r2, r3, [r1]
    D = ctx->state[3];
 800563c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005640:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800564a:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 800564e:	e9c1 2300 	strd	r2, r3, [r1]
    E = ctx->state[4];
 8005652:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005656:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005660:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8005664:	e9c1 2300 	strd	r2, r3, [r1]
    F = ctx->state[5];
 8005668:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800566c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005676:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 800567a:	e9c1 2300 	strd	r2, r3, [r1]
    G = ctx->state[6];
 800567e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005682:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800568c:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 8005690:	e9c1 2300 	strd	r2, r3, [r1]
    H = ctx->state[7];
 8005694:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005698:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80056a2:	f607 1198 	addw	r1, r7, #2456	@ 0x998
 80056a6:	e9c1 2300 	strd	r2, r3, [r1]
    i = 0;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 80056b0:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80056b4:	049a      	lsls	r2, r3, #18
 80056b6:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80056ba:	0b9b      	lsrs	r3, r3, #14
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
 80056c2:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80056c6:	049a      	lsls	r2, r3, #18
 80056c8:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80056cc:	0b9b      	lsrs	r3, r3, #14
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 80056d4:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80056d8:	039a      	lsls	r2, r3, #14
 80056da:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80056de:	0c9b      	lsrs	r3, r3, #18
 80056e0:	4313      	orrs	r3, r2
 80056e2:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 80056e6:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 80056ea:	039a      	lsls	r2, r3, #14
 80056ec:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 80056f0:	0c9b      	lsrs	r3, r3, #18
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 80056f8:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 80056fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005700:	4623      	mov	r3, r4
 8005702:	f507 62c6 	add.w	r2, r7, #1584	@ 0x630
 8005706:	e9d2 0100 	ldrd	r0, r1, [r2]
 800570a:	4602      	mov	r2, r0
 800570c:	4053      	eors	r3, r2
 800570e:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 8005712:	462b      	mov	r3, r5
 8005714:	460a      	mov	r2, r1
 8005716:	4053      	eors	r3, r2
 8005718:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 800571c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8005720:	0a5a      	lsrs	r2, r3, #9
 8005722:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8005726:	05db      	lsls	r3, r3, #23
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 800572e:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8005732:	0a5a      	lsrs	r2, r3, #9
 8005734:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8005738:	05db      	lsls	r3, r3, #23
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 8005740:	f507 63c5 	add.w	r3, r7, #1576	@ 0x628
 8005744:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005748:	4623      	mov	r3, r4
 800574a:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 800574e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005752:	4602      	mov	r2, r0
 8005754:	4053      	eors	r3, r2
 8005756:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 800575a:	462b      	mov	r3, r5
 800575c:	460a      	mov	r2, r1
 800575e:	4053      	eors	r3, r2
 8005760:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8005764:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 8005770:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005774:	4621      	mov	r1, r4
 8005776:	1889      	adds	r1, r1, r2
 8005778:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 800577c:	4629      	mov	r1, r5
 800577e:	eb41 0303 	adc.w	r3, r1, r3
 8005782:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8005786:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800578a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800578e:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	ea80 0402 	eor.w	r4, r0, r2
 800579a:	f8c7 4608 	str.w	r4, [r7, #1544]	@ 0x608
 800579e:	404b      	eors	r3, r1
 80057a0:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 80057a4:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ac:	f507 61c1 	add.w	r1, r7, #1544	@ 0x608
 80057b0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80057b4:	4621      	mov	r1, r4
 80057b6:	4011      	ands	r1, r2
 80057b8:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 80057bc:	4629      	mov	r1, r5
 80057be:	400b      	ands	r3, r1
 80057c0:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 80057c4:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80057c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057cc:	f507 61c0 	add.w	r1, r7, #1536	@ 0x600
 80057d0:	e9d1 4500 	ldrd	r4, r5, [r1]
 80057d4:	4621      	mov	r1, r4
 80057d6:	4051      	eors	r1, r2
 80057d8:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 80057dc:	4629      	mov	r1, r5
 80057de:	404b      	eors	r3, r1
 80057e0:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 80057e4:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 80057e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80057ec:	4623      	mov	r3, r4
 80057ee:	f507 62bf 	add.w	r2, r7, #1528	@ 0x5f8
 80057f2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80057f6:	4602      	mov	r2, r0
 80057f8:	189b      	adds	r3, r3, r2
 80057fa:	f8c7 35f0 	str.w	r3, [r7, #1520]	@ 0x5f0
 80057fe:	462b      	mov	r3, r5
 8005800:	460a      	mov	r2, r1
 8005802:	4153      	adcs	r3, r2
 8005804:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 8005808:	4afc      	ldr	r2, [pc, #1008]	@ (8005bfc <mbedtls_internal_sha512_process+0xa9c>)
 800580a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4413      	add	r3, r2
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f507 61be 	add.w	r1, r7, #1520	@ 0x5f0
 800581a:	e9d1 4500 	ldrd	r4, r5, [r1]
 800581e:	4621      	mov	r1, r4
 8005820:	1889      	adds	r1, r1, r2
 8005822:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 8005826:	4629      	mov	r1, r5
 8005828:	eb41 0303 	adc.w	r3, r1, r3
 800582c:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 8005830:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005834:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8005838:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4413      	add	r3, r2
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f507 61bd 	add.w	r1, r7, #1512	@ 0x5e8
 8005848:	e9d1 4500 	ldrd	r4, r5, [r1]
 800584c:	4621      	mov	r1, r4
 800584e:	1889      	adds	r1, r1, r2
 8005850:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8005854:	4629      	mov	r1, r5
 8005856:	eb41 0303 	adc.w	r3, r1, r3
 800585a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800585e:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8005862:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8005866:	e9c2 3400 	strd	r3, r4, [r2]
 800586a:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800586e:	011a      	lsls	r2, r3, #4
 8005870:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8005874:	0f1b      	lsrs	r3, r3, #28
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c7 35e0 	str.w	r3, [r7, #1504]	@ 0x5e0
 800587c:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8005880:	011a      	lsls	r2, r3, #4
 8005882:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8005886:	0f1b      	lsrs	r3, r3, #28
 8005888:	4313      	orrs	r3, r2
 800588a:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 800588e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8005892:	089a      	lsrs	r2, r3, #2
 8005894:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8005898:	079b      	lsls	r3, r3, #30
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 80058a0:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80058a4:	089a      	lsrs	r2, r3, #2
 80058a6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80058aa:	079b      	lsls	r3, r3, #30
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
 80058b2:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 80058b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80058ba:	4623      	mov	r3, r4
 80058bc:	f507 62bb 	add.w	r2, r7, #1496	@ 0x5d8
 80058c0:	e9d2 0100 	ldrd	r0, r1, [r2]
 80058c4:	4602      	mov	r2, r0
 80058c6:	4053      	eors	r3, r2
 80058c8:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 80058cc:	462b      	mov	r3, r5
 80058ce:	460a      	mov	r2, r1
 80058d0:	4053      	eors	r3, r2
 80058d2:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 80058d6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80058da:	09da      	lsrs	r2, r3, #7
 80058dc:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80058e0:	065b      	lsls	r3, r3, #25
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 80058e8:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80058ec:	09da      	lsrs	r2, r3, #7
 80058ee:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80058f2:	065b      	lsls	r3, r3, #25
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 80058fa:	f507 63ba 	add.w	r3, r7, #1488	@ 0x5d0
 80058fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005902:	4623      	mov	r3, r4
 8005904:	f507 62b9 	add.w	r2, r7, #1480	@ 0x5c8
 8005908:	e9d2 0100 	ldrd	r0, r1, [r2]
 800590c:	4602      	mov	r2, r0
 800590e:	4053      	eors	r3, r2
 8005910:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
 8005914:	462b      	mov	r3, r5
 8005916:	460a      	mov	r2, r1
 8005918:	4053      	eors	r3, r2
 800591a:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 800591e:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005926:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	ea00 0402 	and.w	r4, r0, r2
 8005932:	f8c7 45b8 	str.w	r4, [r7, #1464]	@ 0x5b8
 8005936:	400b      	ands	r3, r1
 8005938:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 800593c:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005944:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8005948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594c:	ea40 0402 	orr.w	r4, r0, r2
 8005950:	f8c7 45b0 	str.w	r4, [r7, #1456]	@ 0x5b0
 8005954:	430b      	orrs	r3, r1
 8005956:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 800595a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f507 61b6 	add.w	r1, r7, #1456	@ 0x5b0
 8005966:	e9d1 4500 	ldrd	r4, r5, [r1]
 800596a:	4621      	mov	r1, r4
 800596c:	4011      	ands	r1, r2
 800596e:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 8005972:	4629      	mov	r1, r5
 8005974:	400b      	ands	r3, r1
 8005976:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 800597a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800597e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005982:	4623      	mov	r3, r4
 8005984:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 8005988:	e9d2 0100 	ldrd	r0, r1, [r2]
 800598c:	4602      	mov	r2, r0
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c7 35a0 	str.w	r3, [r7, #1440]	@ 0x5a0
 8005994:	462b      	mov	r3, r5
 8005996:	460a      	mov	r2, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 800599e:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 80059a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80059a6:	4623      	mov	r3, r4
 80059a8:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 80059ac:	e9d2 0100 	ldrd	r0, r1, [r2]
 80059b0:	4602      	mov	r2, r0
 80059b2:	189b      	adds	r3, r3, r2
 80059b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80059b8:	462b      	mov	r3, r5
 80059ba:	460a      	mov	r2, r1
 80059bc:	4153      	adcs	r3, r2
 80059be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059c2:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80059c6:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 80059ca:	e9c2 3400 	strd	r3, r4, [r2]
 80059ce:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80059d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80059d6:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	1884      	adds	r4, r0, r2
 80059e0:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 80059e4:	eb41 0303 	adc.w	r3, r1, r3
 80059e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80059ec:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 80059f0:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 80059f4:	e9c2 3400 	strd	r3, r4, [r2]
 80059f8:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80059fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a00:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	1884      	adds	r4, r0, r2
 8005a0a:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8005a0e:	eb41 0303 	adc.w	r3, r1, r3
 8005a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a16:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8005a1a:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 8005a1e:	e9c2 3400 	strd	r3, r4, [r2]
 8005a22:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005a26:	3301      	adds	r3, #1
 8005a28:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 8005a2c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8005a30:	049a      	lsls	r2, r3, #18
 8005a32:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8005a36:	0b9b      	lsrs	r3, r3, #14
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c7 3598 	str.w	r3, [r7, #1432]	@ 0x598
 8005a3e:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8005a42:	049a      	lsls	r2, r3, #18
 8005a44:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8005a48:	0b9b      	lsrs	r3, r3, #14
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 8005a50:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8005a54:	039a      	lsls	r2, r3, #14
 8005a56:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8005a5a:	0c9b      	lsrs	r3, r3, #18
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590
 8005a62:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8005a66:	039a      	lsls	r2, r3, #14
 8005a68:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8005a6c:	0c9b      	lsrs	r3, r3, #18
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 8005a74:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 8005a78:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005a7c:	4623      	mov	r3, r4
 8005a7e:	f507 62b2 	add.w	r2, r7, #1424	@ 0x590
 8005a82:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005a86:	4602      	mov	r2, r0
 8005a88:	4053      	eors	r3, r2
 8005a8a:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
 8005a8e:	462b      	mov	r3, r5
 8005a90:	460a      	mov	r2, r1
 8005a92:	4053      	eors	r3, r2
 8005a94:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 8005a98:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8005a9c:	0a5a      	lsrs	r2, r3, #9
 8005a9e:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8005aa2:	05db      	lsls	r3, r3, #23
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 8005aaa:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8005aae:	0a5a      	lsrs	r2, r3, #9
 8005ab0:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8005ab4:	05db      	lsls	r3, r3, #23
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c7 3580 	str.w	r3, [r7, #1408]	@ 0x580
 8005abc:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 8005ac0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ac4:	4623      	mov	r3, r4
 8005ac6:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
 8005aca:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4053      	eors	r3, r2
 8005ad2:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	460a      	mov	r2, r1
 8005ada:	4053      	eors	r3, r2
 8005adc:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 8005ae0:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 8005aec:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005af0:	4621      	mov	r1, r4
 8005af2:	1889      	adds	r1, r1, r2
 8005af4:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 8005af8:	4629      	mov	r1, r5
 8005afa:	eb41 0303 	adc.w	r3, r1, r3
 8005afe:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 8005b02:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8005b06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b0a:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8005b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b12:	ea80 0402 	eor.w	r4, r0, r2
 8005b16:	f8c7 4568 	str.w	r4, [r7, #1384]	@ 0x568
 8005b1a:	404b      	eors	r3, r1
 8005b1c:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 8005b20:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8005b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b28:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005b2c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005b30:	4621      	mov	r1, r4
 8005b32:	4011      	ands	r1, r2
 8005b34:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 8005b38:	4629      	mov	r1, r5
 8005b3a:	400b      	ands	r3, r1
 8005b3c:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 8005b40:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 8005b4c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005b50:	4621      	mov	r1, r4
 8005b52:	4051      	eors	r1, r2
 8005b54:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 8005b58:	4629      	mov	r1, r5
 8005b5a:	404b      	eors	r3, r1
 8005b5c:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 8005b60:	f507 63ae 	add.w	r3, r7, #1392	@ 0x570
 8005b64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005b68:	4623      	mov	r3, r4
 8005b6a:	f507 62ab 	add.w	r2, r7, #1368	@ 0x558
 8005b6e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005b72:	4602      	mov	r2, r0
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
 8005b7a:	462b      	mov	r3, r5
 8005b7c:	460a      	mov	r2, r1
 8005b7e:	4153      	adcs	r3, r2
 8005b80:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 8005b84:	4a1d      	ldr	r2, [pc, #116]	@ (8005bfc <mbedtls_internal_sha512_process+0xa9c>)
 8005b86:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f507 61aa 	add.w	r1, r7, #1360	@ 0x550
 8005b96:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005b9a:	4621      	mov	r1, r4
 8005b9c:	1889      	adds	r1, r1, r2
 8005b9e:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 8005ba2:	4629      	mov	r1, r5
 8005ba4:	eb41 0303 	adc.w	r3, r1, r3
 8005ba8:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 8005bac:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005bb0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8005bb4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 8005bc4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005bc8:	4621      	mov	r1, r4
 8005bca:	1889      	adds	r1, r1, r2
 8005bcc:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	eb41 0303 	adc.w	r3, r1, r3
 8005bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bda:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 8005bde:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8005be2:	e9c2 3400 	strd	r3, r4, [r2]
 8005be6:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8005bea:	011a      	lsls	r2, r3, #4
 8005bec:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8005bf0:	0f1b      	lsrs	r3, r3, #28
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 8005bf8:	e002      	b.n	8005c00 <mbedtls_internal_sha512_process+0xaa0>
 8005bfa:	bf00      	nop
 8005bfc:	0800aa28 	.word	0x0800aa28
 8005c00:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8005c04:	011a      	lsls	r2, r3, #4
 8005c06:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8005c0a:	0f1b      	lsrs	r3, r3, #28
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8005c12:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8005c16:	089a      	lsrs	r2, r3, #2
 8005c18:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8005c1c:	079b      	lsls	r3, r3, #30
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8005c24:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8005c28:	089a      	lsrs	r2, r3, #2
 8005c2a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8005c2e:	079b      	lsls	r3, r3, #30
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 8005c36:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8005c3a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c3e:	4623      	mov	r3, r4
 8005c40:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 8005c44:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4053      	eors	r3, r2
 8005c4c:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 8005c50:	462b      	mov	r3, r5
 8005c52:	460a      	mov	r2, r1
 8005c54:	4053      	eors	r3, r2
 8005c56:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8005c5a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8005c5e:	09da      	lsrs	r2, r3, #7
 8005c60:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8005c64:	065b      	lsls	r3, r3, #25
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8005c6c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8005c70:	09da      	lsrs	r2, r3, #7
 8005c72:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8005c76:	065b      	lsls	r3, r3, #25
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005c7e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005c82:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c86:	4623      	mov	r3, r4
 8005c88:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 8005c8c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005c90:	4602      	mov	r2, r0
 8005c92:	4053      	eors	r3, r2
 8005c94:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8005c98:	462b      	mov	r3, r5
 8005c9a:	460a      	mov	r2, r1
 8005c9c:	4053      	eors	r3, r2
 8005c9e:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8005ca2:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8005ca6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005caa:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	ea00 0402 	and.w	r4, r0, r2
 8005cb6:	f8c7 4518 	str.w	r4, [r7, #1304]	@ 0x518
 8005cba:	400b      	ands	r3, r1
 8005cbc:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8005cc0:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8005cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cc8:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	ea40 0402 	orr.w	r4, r0, r2
 8005cd4:	f8c7 4510 	str.w	r4, [r7, #1296]	@ 0x510
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 8005cde:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 8005cea:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4011      	ands	r1, r2
 8005cf2:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	400b      	ands	r3, r1
 8005cfa:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8005cfe:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8005d02:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d06:	4623      	mov	r3, r4
 8005d08:	f507 62a1 	add.w	r2, r7, #1288	@ 0x508
 8005d0c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005d10:	4602      	mov	r2, r0
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8005d18:	462b      	mov	r3, r5
 8005d1a:	460a      	mov	r2, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8005d22:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8005d26:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 8005d30:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005d34:	4602      	mov	r2, r0
 8005d36:	189b      	adds	r3, r3, r2
 8005d38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d3c:	462b      	mov	r3, r5
 8005d3e:	460a      	mov	r2, r1
 8005d40:	4153      	adcs	r3, r2
 8005d42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d46:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8005d4a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8005d4e:	e9c2 3400 	strd	r3, r4, [r2]
 8005d52:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8005d56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d5a:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	1884      	adds	r4, r0, r2
 8005d64:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 8005d68:	eb41 0303 	adc.w	r3, r1, r3
 8005d6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d70:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8005d74:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 8005d78:	e9c2 3400 	strd	r3, r4, [r2]
 8005d7c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8005d80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d84:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	1884      	adds	r4, r0, r2
 8005d8e:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 8005d92:	eb41 0303 	adc.w	r3, r1, r3
 8005d96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d9a:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8005d9e:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 8005da2:	e9c2 3400 	strd	r3, r4, [r2]
 8005da6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005daa:	3301      	adds	r3, #1
 8005dac:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 8005db0:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8005db4:	049a      	lsls	r2, r3, #18
 8005db6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8005dba:	0b9b      	lsrs	r3, r3, #14
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 8005dc2:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8005dc6:	049a      	lsls	r2, r3, #18
 8005dc8:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8005dcc:	0b9b      	lsrs	r3, r3, #14
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8005dd4:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8005dd8:	039a      	lsls	r2, r3, #14
 8005dda:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8005dde:	0c9b      	lsrs	r3, r3, #18
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 8005de6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8005dea:	039a      	lsls	r2, r3, #14
 8005dec:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8005df0:	0c9b      	lsrs	r3, r3, #18
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8005df8:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8005dfc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005e00:	4623      	mov	r3, r4
 8005e02:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8005e06:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4053      	eors	r3, r2
 8005e0e:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8005e12:	462b      	mov	r3, r5
 8005e14:	460a      	mov	r2, r1
 8005e16:	4053      	eors	r3, r2
 8005e18:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8005e1c:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8005e20:	0a5a      	lsrs	r2, r3, #9
 8005e22:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8005e26:	05db      	lsls	r3, r3, #23
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8005e2e:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8005e32:	0a5a      	lsrs	r2, r3, #9
 8005e34:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8005e38:	05db      	lsls	r3, r3, #23
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8005e40:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8005e44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005e48:	4623      	mov	r3, r4
 8005e4a:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 8005e4e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005e52:	4602      	mov	r2, r0
 8005e54:	4053      	eors	r3, r2
 8005e56:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8005e5a:	462b      	mov	r3, r5
 8005e5c:	460a      	mov	r2, r1
 8005e5e:	4053      	eors	r3, r2
 8005e60:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8005e64:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8005e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6c:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8005e70:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005e74:	4621      	mov	r1, r4
 8005e76:	1889      	adds	r1, r1, r2
 8005e78:	f8c7 14d0 	str.w	r1, [r7, #1232]	@ 0x4d0
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	eb41 0303 	adc.w	r3, r1, r3
 8005e82:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8005e86:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8005e8a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e8e:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	ea80 0402 	eor.w	r4, r0, r2
 8005e9a:	f8c7 44c8 	str.w	r4, [r7, #1224]	@ 0x4c8
 8005e9e:	404b      	eors	r3, r1
 8005ea0:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8005ea4:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 8005eb0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4011      	ands	r1, r2
 8005eb8:	f8c7 14c0 	str.w	r1, [r7, #1216]	@ 0x4c0
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	400b      	ands	r3, r1
 8005ec0:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8005ec4:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f507 6198 	add.w	r1, r7, #1216	@ 0x4c0
 8005ed0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4051      	eors	r1, r2
 8005ed8:	f8c7 14b8 	str.w	r1, [r7, #1208]	@ 0x4b8
 8005edc:	4629      	mov	r1, r5
 8005ede:	404b      	eors	r3, r1
 8005ee0:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8005ee4:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8005ee8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005eec:	4623      	mov	r3, r4
 8005eee:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8005ef2:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	189b      	adds	r3, r3, r2
 8005efa:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 8005efe:	462b      	mov	r3, r5
 8005f00:	460a      	mov	r2, r1
 8005f02:	4153      	adcs	r3, r2
 8005f04:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 8005f08:	4afc      	ldr	r2, [pc, #1008]	@ (80062fc <mbedtls_internal_sha512_process+0x119c>)
 8005f0a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4413      	add	r3, r2
 8005f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f16:	f507 6196 	add.w	r1, r7, #1200	@ 0x4b0
 8005f1a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005f1e:	4621      	mov	r1, r4
 8005f20:	1889      	adds	r1, r1, r2
 8005f22:	f8c7 14a8 	str.w	r1, [r7, #1192]	@ 0x4a8
 8005f26:	4629      	mov	r1, r5
 8005f28:	eb41 0303 	adc.w	r3, r1, r3
 8005f2c:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 8005f30:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8005f34:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8005f38:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	4413      	add	r3, r2
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f507 6195 	add.w	r1, r7, #1192	@ 0x4a8
 8005f48:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	1889      	adds	r1, r1, r2
 8005f50:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8005f54:	4629      	mov	r1, r5
 8005f56:	eb41 0303 	adc.w	r3, r1, r3
 8005f5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f5e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8005f62:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8005f66:	e9c2 3400 	strd	r3, r4, [r2]
 8005f6a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8005f6e:	011a      	lsls	r2, r3, #4
 8005f70:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8005f74:	0f1b      	lsrs	r3, r3, #28
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 8005f7c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8005f80:	011a      	lsls	r2, r3, #4
 8005f82:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8005f86:	0f1b      	lsrs	r3, r3, #28
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8005f8e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8005f92:	089a      	lsrs	r2, r3, #2
 8005f94:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8005f98:	079b      	lsls	r3, r3, #30
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 8005fa0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8005fa4:	089a      	lsrs	r2, r3, #2
 8005fa6:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8005faa:	079b      	lsls	r3, r3, #30
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 8005fb2:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8005fb6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005fba:	4623      	mov	r3, r4
 8005fbc:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 8005fc0:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4053      	eors	r3, r2
 8005fc8:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 8005fcc:	462b      	mov	r3, r5
 8005fce:	460a      	mov	r2, r1
 8005fd0:	4053      	eors	r3, r2
 8005fd2:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 8005fd6:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8005fda:	09da      	lsrs	r2, r3, #7
 8005fdc:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8005fe0:	065b      	lsls	r3, r3, #25
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 8005fe8:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8005fec:	09da      	lsrs	r2, r3, #7
 8005fee:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8005ff2:	065b      	lsls	r3, r3, #25
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 8005ffa:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8005ffe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006002:	4623      	mov	r3, r4
 8006004:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 8006008:	e9d2 0100 	ldrd	r0, r1, [r2]
 800600c:	4602      	mov	r2, r0
 800600e:	4053      	eors	r3, r2
 8006010:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
 8006014:	462b      	mov	r3, r5
 8006016:	460a      	mov	r2, r1
 8006018:	4053      	eors	r3, r2
 800601a:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 800601e:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8006022:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006026:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	ea00 0402 	and.w	r4, r0, r2
 8006032:	f8c7 4478 	str.w	r4, [r7, #1144]	@ 0x478
 8006036:	400b      	ands	r3, r1
 8006038:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 800603c:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8006040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006044:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	ea40 0402 	orr.w	r4, r0, r2
 8006050:	f8c7 4470 	str.w	r4, [r7, #1136]	@ 0x470
 8006054:	430b      	orrs	r3, r1
 8006056:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 800605a:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006062:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8006066:	e9d1 4500 	ldrd	r4, r5, [r1]
 800606a:	4621      	mov	r1, r4
 800606c:	4011      	ands	r1, r2
 800606e:	f8c7 1468 	str.w	r1, [r7, #1128]	@ 0x468
 8006072:	4629      	mov	r1, r5
 8006074:	400b      	ands	r3, r1
 8006076:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 800607a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800607e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006082:	4623      	mov	r3, r4
 8006084:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 8006088:	e9d2 0100 	ldrd	r0, r1, [r2]
 800608c:	4602      	mov	r2, r0
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8006094:	462b      	mov	r3, r5
 8006096:	460a      	mov	r2, r1
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800609e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80060a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80060a6:	4623      	mov	r3, r4
 80060a8:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80060ac:	e9d2 0100 	ldrd	r0, r1, [r2]
 80060b0:	4602      	mov	r2, r0
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060b8:	462b      	mov	r3, r5
 80060ba:	460a      	mov	r2, r1
 80060bc:	4153      	adcs	r3, r2
 80060be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060c2:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 80060c6:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 80060ca:	e9c2 3400 	strd	r3, r4, [r2]
 80060ce:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 80060d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80060d6:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	1884      	adds	r4, r0, r2
 80060e0:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80060e4:	eb41 0303 	adc.w	r3, r1, r3
 80060e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060ec:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80060f0:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 80060f4:	e9c2 3400 	strd	r3, r4, [r2]
 80060f8:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80060fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006100:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	1884      	adds	r4, r0, r2
 800610a:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 800610e:	eb41 0303 	adc.w	r3, r1, r3
 8006112:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006116:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 800611a:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 800611e:	e9c2 3400 	strd	r3, r4, [r2]
 8006122:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006126:	3301      	adds	r3, #1
 8006128:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 800612c:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006130:	049a      	lsls	r2, r3, #18
 8006132:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006136:	0b9b      	lsrs	r3, r3, #14
 8006138:	4313      	orrs	r3, r2
 800613a:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 800613e:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006142:	049a      	lsls	r2, r3, #18
 8006144:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006148:	0b9b      	lsrs	r3, r3, #14
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 8006150:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006154:	039a      	lsls	r2, r3, #14
 8006156:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800615a:	0c9b      	lsrs	r3, r3, #18
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 8006162:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006166:	039a      	lsls	r2, r3, #14
 8006168:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800616c:	0c9b      	lsrs	r3, r3, #18
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 8006174:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8006178:	e9d3 4500 	ldrd	r4, r5, [r3]
 800617c:	4623      	mov	r3, r4
 800617e:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8006182:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006186:	4602      	mov	r2, r0
 8006188:	4053      	eors	r3, r2
 800618a:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 800618e:	462b      	mov	r3, r5
 8006190:	460a      	mov	r2, r1
 8006192:	4053      	eors	r3, r2
 8006194:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8006198:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800619c:	0a5a      	lsrs	r2, r3, #9
 800619e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80061a2:	05db      	lsls	r3, r3, #23
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80061aa:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 80061ae:	0a5a      	lsrs	r2, r3, #9
 80061b0:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 80061b4:	05db      	lsls	r3, r3, #23
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 80061bc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80061c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80061c4:	4623      	mov	r3, r4
 80061c6:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 80061ca:	e9d2 0100 	ldrd	r0, r1, [r2]
 80061ce:	4602      	mov	r2, r0
 80061d0:	4053      	eors	r3, r2
 80061d2:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 80061d6:	462b      	mov	r3, r5
 80061d8:	460a      	mov	r2, r1
 80061da:	4053      	eors	r3, r2
 80061dc:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 80061e0:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 80061ec:	e9d1 4500 	ldrd	r4, r5, [r1]
 80061f0:	4621      	mov	r1, r4
 80061f2:	1889      	adds	r1, r1, r2
 80061f4:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 80061f8:	4629      	mov	r1, r5
 80061fa:	eb41 0303 	adc.w	r3, r1, r3
 80061fe:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8006202:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8006206:	e9d3 0100 	ldrd	r0, r1, [r3]
 800620a:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800620e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006212:	ea80 0402 	eor.w	r4, r0, r2
 8006216:	f8c7 4428 	str.w	r4, [r7, #1064]	@ 0x428
 800621a:	404b      	eors	r3, r1
 800621c:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8006220:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 800622c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006230:	4621      	mov	r1, r4
 8006232:	4011      	ands	r1, r2
 8006234:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 8006238:	4629      	mov	r1, r5
 800623a:	400b      	ands	r3, r1
 800623c:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 8006240:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 800624c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8006250:	4621      	mov	r1, r4
 8006252:	4051      	eors	r1, r2
 8006254:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 8006258:	4629      	mov	r1, r5
 800625a:	404b      	eors	r3, r1
 800625c:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8006260:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8006264:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006268:	4623      	mov	r3, r4
 800626a:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800626e:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006272:	4602      	mov	r2, r0
 8006274:	189b      	adds	r3, r3, r2
 8006276:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 800627a:	462b      	mov	r3, r5
 800627c:	460a      	mov	r2, r1
 800627e:	4153      	adcs	r3, r2
 8006280:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8006284:	4a1d      	ldr	r2, [pc, #116]	@ (80062fc <mbedtls_internal_sha512_process+0x119c>)
 8006286:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4413      	add	r3, r2
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8006296:	e9d1 4500 	ldrd	r4, r5, [r1]
 800629a:	4621      	mov	r1, r4
 800629c:	1889      	adds	r1, r1, r2
 800629e:	f8c7 1408 	str.w	r1, [r7, #1032]	@ 0x408
 80062a2:	4629      	mov	r1, r5
 80062a4:	eb41 0303 	adc.w	r3, r1, r3
 80062a8:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 80062ac:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80062b0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80062b4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c0:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 80062c4:	e9d1 4500 	ldrd	r4, r5, [r1]
 80062c8:	4621      	mov	r1, r4
 80062ca:	1889      	adds	r1, r1, r2
 80062cc:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80062d0:	4629      	mov	r1, r5
 80062d2:	eb41 0303 	adc.w	r3, r1, r3
 80062d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062da:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80062de:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 80062e2:	e9c2 3400 	strd	r3, r4, [r2]
 80062e6:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 80062ea:	011a      	lsls	r2, r3, #4
 80062ec:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 80062f0:	0f1b      	lsrs	r3, r3, #28
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 80062f8:	e002      	b.n	8006300 <mbedtls_internal_sha512_process+0x11a0>
 80062fa:	bf00      	nop
 80062fc:	0800aa28 	.word	0x0800aa28
 8006300:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006304:	011a      	lsls	r2, r3, #4
 8006306:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800630a:	0f1b      	lsrs	r3, r3, #28
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8006312:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006316:	089a      	lsrs	r2, r3, #2
 8006318:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800631c:	079b      	lsls	r3, r3, #30
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 8006324:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006328:	089a      	lsrs	r2, r3, #2
 800632a:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800632e:	079b      	lsls	r3, r3, #30
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 8006336:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800633a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800633e:	4623      	mov	r3, r4
 8006340:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 8006344:	4602      	mov	r2, r0
 8006346:	4053      	eors	r3, r2
 8006348:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 800634c:	462b      	mov	r3, r5
 800634e:	460a      	mov	r2, r1
 8006350:	4053      	eors	r3, r2
 8006352:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 8006356:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800635a:	09da      	lsrs	r2, r3, #7
 800635c:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006360:	065b      	lsls	r3, r3, #25
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 8006368:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800636c:	09da      	lsrs	r2, r3, #7
 800636e:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006372:	065b      	lsls	r3, r3, #25
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
 800637a:	e9d7 45fc 	ldrd	r4, r5, [r7, #1008]	@ 0x3f0
 800637e:	4623      	mov	r3, r4
 8006380:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 8006384:	4602      	mov	r2, r0
 8006386:	4053      	eors	r3, r2
 8006388:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 800638c:	462b      	mov	r3, r5
 800638e:	460a      	mov	r2, r1
 8006390:	4053      	eors	r3, r2
 8006392:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8006396:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800639a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800639e:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	ea00 0402 	and.w	r4, r0, r2
 80063aa:	f8c7 43d8 	str.w	r4, [r7, #984]	@ 0x3d8
 80063ae:	400b      	ands	r3, r1
 80063b0:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 80063b4:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 80063b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063bc:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	ea40 0402 	orr.w	r4, r0, r2
 80063c8:	f8c7 43d0 	str.w	r4, [r7, #976]	@ 0x3d0
 80063cc:	430b      	orrs	r3, r1
 80063ce:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 80063d2:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80063d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063da:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 80063de:	4621      	mov	r1, r4
 80063e0:	4011      	ands	r1, r2
 80063e2:	f8c7 13c8 	str.w	r1, [r7, #968]	@ 0x3c8
 80063e6:	4629      	mov	r1, r5
 80063e8:	400b      	ands	r3, r1
 80063ea:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80063ee:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 80063f2:	4623      	mov	r3, r4
 80063f4:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	@ 0x3c8
 80063f8:	4602      	mov	r2, r0
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8006400:	462b      	mov	r3, r5
 8006402:	460a      	mov	r2, r1
 8006404:	4313      	orrs	r3, r2
 8006406:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800640a:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	@ 0x3e0
 800640e:	4623      	mov	r3, r4
 8006410:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	@ 0x3c0
 8006414:	4602      	mov	r2, r0
 8006416:	189b      	adds	r3, r3, r2
 8006418:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800641c:	462b      	mov	r3, r5
 800641e:	460a      	mov	r2, r1
 8006420:	4153      	adcs	r3, r2
 8006422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006426:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800642a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800642e:	e9c2 3400 	strd	r3, r4, [r2]
 8006432:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8006436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800643a:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	1884      	adds	r4, r0, r2
 8006444:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8006448:	eb41 0303 	adc.w	r3, r1, r3
 800644c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006450:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8006454:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8006458:	e9c2 3400 	strd	r3, r4, [r2]
 800645c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8006460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006464:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8006468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646c:	1884      	adds	r4, r0, r2
 800646e:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 8006472:	eb41 0303 	adc.w	r3, r1, r3
 8006476:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800647a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800647e:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 8006482:	e9c2 3400 	strd	r3, r4, [r2]
 8006486:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800648a:	3301      	adds	r3, #1
 800648c:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 8006490:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 8006494:	049a      	lsls	r2, r3, #18
 8006496:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800649a:	0b9b      	lsrs	r3, r3, #14
 800649c:	4313      	orrs	r3, r2
 800649e:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 80064a2:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80064a6:	049a      	lsls	r2, r3, #18
 80064a8:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80064ac:	0b9b      	lsrs	r3, r3, #14
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 80064b4:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80064b8:	039a      	lsls	r2, r3, #14
 80064ba:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80064be:	0c9b      	lsrs	r3, r3, #18
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 80064c6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80064ca:	039a      	lsls	r2, r3, #14
 80064cc:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80064d0:	0c9b      	lsrs	r3, r3, #18
 80064d2:	4313      	orrs	r3, r2
 80064d4:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80064d8:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 80064dc:	4623      	mov	r3, r4
 80064de:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	@ 0x3b0
 80064e2:	4602      	mov	r2, r0
 80064e4:	4053      	eors	r3, r2
 80064e6:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 80064ea:	462b      	mov	r3, r5
 80064ec:	460a      	mov	r2, r1
 80064ee:	4053      	eors	r3, r2
 80064f0:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 80064f4:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 80064f8:	0a5a      	lsrs	r2, r3, #9
 80064fa:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 80064fe:	05db      	lsls	r3, r3, #23
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8006506:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800650a:	0a5a      	lsrs	r2, r3, #9
 800650c:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 8006510:	05db      	lsls	r3, r3, #23
 8006512:	4313      	orrs	r3, r2
 8006514:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8006518:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800651c:	4623      	mov	r3, r4
 800651e:	e9d7 01e8 	ldrd	r0, r1, [r7, #928]	@ 0x3a0
 8006522:	4602      	mov	r2, r0
 8006524:	4053      	eors	r3, r2
 8006526:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 800652a:	462b      	mov	r3, r5
 800652c:	460a      	mov	r2, r1
 800652e:	4053      	eors	r3, r2
 8006530:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8006534:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 8006540:	4621      	mov	r1, r4
 8006542:	1889      	adds	r1, r1, r2
 8006544:	f8c7 1390 	str.w	r1, [r7, #912]	@ 0x390
 8006548:	4629      	mov	r1, r5
 800654a:	eb41 0303 	adc.w	r3, r1, r3
 800654e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8006552:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8006556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800655a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	ea80 0402 	eor.w	r4, r0, r2
 8006566:	f8c7 4388 	str.w	r4, [r7, #904]	@ 0x388
 800656a:	404b      	eors	r3, r1
 800656c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8006570:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 800657c:	4621      	mov	r1, r4
 800657e:	4011      	ands	r1, r2
 8006580:	f8c7 1380 	str.w	r1, [r7, #896]	@ 0x380
 8006584:	4629      	mov	r1, r5
 8006586:	400b      	ands	r3, r1
 8006588:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800658c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 8006598:	4621      	mov	r1, r4
 800659a:	4051      	eors	r1, r2
 800659c:	f8c7 1378 	str.w	r1, [r7, #888]	@ 0x378
 80065a0:	4629      	mov	r1, r5
 80065a2:	404b      	eors	r3, r1
 80065a4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80065a8:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 80065ac:	4623      	mov	r3, r4
 80065ae:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	@ 0x378
 80065b2:	4602      	mov	r2, r0
 80065b4:	189b      	adds	r3, r3, r2
 80065b6:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 80065ba:	462b      	mov	r3, r5
 80065bc:	460a      	mov	r2, r1
 80065be:	4153      	adcs	r3, r2
 80065c0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80065c4:	4af7      	ldr	r2, [pc, #988]	@ (80069a4 <mbedtls_internal_sha512_process+0x1844>)
 80065c6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	@ 0x370
 80065d6:	4621      	mov	r1, r4
 80065d8:	1889      	adds	r1, r1, r2
 80065da:	f8c7 1368 	str.w	r1, [r7, #872]	@ 0x368
 80065de:	4629      	mov	r1, r5
 80065e0:	eb41 0303 	adc.w	r3, r1, r3
 80065e4:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 80065e8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80065ec:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80065f0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 8006600:	4621      	mov	r1, r4
 8006602:	1889      	adds	r1, r1, r2
 8006604:	67b9      	str	r1, [r7, #120]	@ 0x78
 8006606:	4629      	mov	r1, r5
 8006608:	eb41 0303 	adc.w	r3, r1, r3
 800660c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800660e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8006612:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8006616:	e9c2 3400 	strd	r3, r4, [r2]
 800661a:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800661e:	011a      	lsls	r2, r3, #4
 8006620:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8006624:	0f1b      	lsrs	r3, r3, #28
 8006626:	4313      	orrs	r3, r2
 8006628:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 800662c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8006636:	0f1b      	lsrs	r3, r3, #28
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800663e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8006642:	089a      	lsrs	r2, r3, #2
 8006644:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8006648:	079b      	lsls	r3, r3, #30
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8006650:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8006654:	089a      	lsrs	r2, r3, #2
 8006656:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800665a:	079b      	lsls	r3, r3, #30
 800665c:	4313      	orrs	r3, r2
 800665e:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8006662:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 8006666:	4623      	mov	r3, r4
 8006668:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 800666c:	4602      	mov	r2, r0
 800666e:	4053      	eors	r3, r2
 8006670:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8006674:	462b      	mov	r3, r5
 8006676:	460a      	mov	r2, r1
 8006678:	4053      	eors	r3, r2
 800667a:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800667e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 8006682:	09da      	lsrs	r2, r3, #7
 8006684:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8006688:	065b      	lsls	r3, r3, #25
 800668a:	4313      	orrs	r3, r2
 800668c:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8006690:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 8006694:	09da      	lsrs	r2, r3, #7
 8006696:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800669a:	065b      	lsls	r3, r3, #25
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 80066a2:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 80066a6:	4623      	mov	r3, r4
 80066a8:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 80066ac:	4602      	mov	r2, r0
 80066ae:	4053      	eors	r3, r2
 80066b0:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 80066b4:	462b      	mov	r3, r5
 80066b6:	460a      	mov	r2, r1
 80066b8:	4053      	eors	r3, r2
 80066ba:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80066be:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80066c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066c6:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	ea00 0402 	and.w	r4, r0, r2
 80066d2:	f8c7 4338 	str.w	r4, [r7, #824]	@ 0x338
 80066d6:	400b      	ands	r3, r1
 80066d8:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80066dc:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80066e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066e4:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	ea40 0402 	orr.w	r4, r0, r2
 80066f0:	f8c7 4330 	str.w	r4, [r7, #816]	@ 0x330
 80066f4:	430b      	orrs	r3, r1
 80066f6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80066fa:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 8006706:	4621      	mov	r1, r4
 8006708:	4011      	ands	r1, r2
 800670a:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 800670e:	4629      	mov	r1, r5
 8006710:	400b      	ands	r3, r1
 8006712:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8006716:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 800671a:	4623      	mov	r3, r4
 800671c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8006720:	4602      	mov	r2, r0
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 8006728:	462b      	mov	r3, r5
 800672a:	460a      	mov	r2, r1
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8006732:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 8006736:	4623      	mov	r3, r4
 8006738:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 800673c:	4602      	mov	r2, r0
 800673e:	189b      	adds	r3, r3, r2
 8006740:	673b      	str	r3, [r7, #112]	@ 0x70
 8006742:	462b      	mov	r3, r5
 8006744:	460a      	mov	r2, r1
 8006746:	4153      	adcs	r3, r2
 8006748:	677b      	str	r3, [r7, #116]	@ 0x74
 800674a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800674e:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8006752:	e9c2 3400 	strd	r3, r4, [r2]
 8006756:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800675a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800675e:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	1884      	adds	r4, r0, r2
 8006768:	66bc      	str	r4, [r7, #104]	@ 0x68
 800676a:	eb41 0303 	adc.w	r3, r1, r3
 800676e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006770:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8006774:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 8006778:	e9c2 3400 	strd	r3, r4, [r2]
 800677c:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8006780:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006784:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	1884      	adds	r4, r0, r2
 800678e:	663c      	str	r4, [r7, #96]	@ 0x60
 8006790:	eb41 0303 	adc.w	r3, r1, r3
 8006794:	667b      	str	r3, [r7, #100]	@ 0x64
 8006796:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800679a:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 800679e:	e9c2 3400 	strd	r3, r4, [r2]
 80067a2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80067a6:	3301      	adds	r3, #1
 80067a8:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 80067ac:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80067b0:	049a      	lsls	r2, r3, #18
 80067b2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80067b6:	0b9b      	lsrs	r3, r3, #14
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 80067be:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80067c2:	049a      	lsls	r2, r3, #18
 80067c4:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80067c8:	0b9b      	lsrs	r3, r3, #14
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80067d0:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80067d4:	039a      	lsls	r2, r3, #14
 80067d6:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80067da:	0c9b      	lsrs	r3, r3, #18
 80067dc:	4313      	orrs	r3, r2
 80067de:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 80067e2:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 80067e6:	039a      	lsls	r2, r3, #14
 80067e8:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 80067ec:	0c9b      	lsrs	r3, r3, #18
 80067ee:	4313      	orrs	r3, r2
 80067f0:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 80067f4:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 80067f8:	4623      	mov	r3, r4
 80067fa:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
 80067fe:	4602      	mov	r2, r0
 8006800:	4053      	eors	r3, r2
 8006802:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8006806:	462b      	mov	r3, r5
 8006808:	460a      	mov	r2, r1
 800680a:	4053      	eors	r3, r2
 800680c:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8006810:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 8006814:	0a5a      	lsrs	r2, r3, #9
 8006816:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800681a:	05db      	lsls	r3, r3, #23
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8006822:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 8006826:	0a5a      	lsrs	r2, r3, #9
 8006828:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800682c:	05db      	lsls	r3, r3, #23
 800682e:	4313      	orrs	r3, r2
 8006830:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8006834:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	@ 0x308
 8006838:	4623      	mov	r3, r4
 800683a:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 800683e:	4602      	mov	r2, r0
 8006840:	4053      	eors	r3, r2
 8006842:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8006846:	462b      	mov	r3, r5
 8006848:	460a      	mov	r2, r1
 800684a:	4053      	eors	r3, r2
 800684c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8006850:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 800685c:	4621      	mov	r1, r4
 800685e:	1889      	adds	r1, r1, r2
 8006860:	f8c7 12f0 	str.w	r1, [r7, #752]	@ 0x2f0
 8006864:	4629      	mov	r1, r5
 8006866:	eb41 0303 	adc.w	r3, r1, r3
 800686a:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800686e:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8006872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006876:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	ea80 0402 	eor.w	r4, r0, r2
 8006882:	f8c7 42e8 	str.w	r4, [r7, #744]	@ 0x2e8
 8006886:	404b      	eors	r3, r1
 8006888:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800688c:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 8006898:	4621      	mov	r1, r4
 800689a:	4011      	ands	r1, r2
 800689c:	f8c7 12e0 	str.w	r1, [r7, #736]	@ 0x2e0
 80068a0:	4629      	mov	r1, r5
 80068a2:	400b      	ands	r3, r1
 80068a4:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 80068a8:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 80068b4:	4621      	mov	r1, r4
 80068b6:	4051      	eors	r1, r2
 80068b8:	f8c7 12d8 	str.w	r1, [r7, #728]	@ 0x2d8
 80068bc:	4629      	mov	r1, r5
 80068be:	404b      	eors	r3, r1
 80068c0:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 80068c4:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	@ 0x2f0
 80068c8:	4623      	mov	r3, r4
 80068ca:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 80068ce:	4602      	mov	r2, r0
 80068d0:	189b      	adds	r3, r3, r2
 80068d2:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80068d6:	462b      	mov	r3, r5
 80068d8:	460a      	mov	r2, r1
 80068da:	4153      	adcs	r3, r2
 80068dc:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 80068e0:	4a30      	ldr	r2, [pc, #192]	@ (80069a4 <mbedtls_internal_sha512_process+0x1844>)
 80068e2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	4413      	add	r3, r2
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 80068f2:	4621      	mov	r1, r4
 80068f4:	1889      	adds	r1, r1, r2
 80068f6:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 80068fa:	4629      	mov	r1, r5
 80068fc:	eb41 0303 	adc.w	r3, r1, r3
 8006900:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8006904:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8006908:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800690c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	4413      	add	r3, r2
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 800691c:	4621      	mov	r1, r4
 800691e:	1889      	adds	r1, r1, r2
 8006920:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006922:	4629      	mov	r1, r5
 8006924:	eb41 0303 	adc.w	r3, r1, r3
 8006928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800692a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800692e:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8006932:	e9c2 3400 	strd	r3, r4, [r2]
 8006936:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800693a:	011a      	lsls	r2, r3, #4
 800693c:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8006940:	0f1b      	lsrs	r3, r3, #28
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 8006948:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800694c:	011a      	lsls	r2, r3, #4
 800694e:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8006952:	0f1b      	lsrs	r3, r3, #28
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 800695a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800695e:	089a      	lsrs	r2, r3, #2
 8006960:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8006964:	079b      	lsls	r3, r3, #30
 8006966:	4313      	orrs	r3, r2
 8006968:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800696c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 8006970:	089a      	lsrs	r2, r3, #2
 8006972:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 8006976:	079b      	lsls	r3, r3, #30
 8006978:	4313      	orrs	r3, r2
 800697a:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800697e:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 8006982:	4623      	mov	r3, r4
 8006984:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8006988:	4602      	mov	r2, r0
 800698a:	4053      	eors	r3, r2
 800698c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8006990:	462b      	mov	r3, r5
 8006992:	460a      	mov	r2, r1
 8006994:	4053      	eors	r3, r2
 8006996:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800699a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800699e:	09da      	lsrs	r2, r3, #7
 80069a0:	e002      	b.n	80069a8 <mbedtls_internal_sha512_process+0x1848>
 80069a2:	bf00      	nop
 80069a4:	0800aa28 	.word	0x0800aa28
 80069a8:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 80069ac:	065b      	lsls	r3, r3, #25
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80069b4:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 80069b8:	09da      	lsrs	r2, r3, #7
 80069ba:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 80069be:	065b      	lsls	r3, r3, #25
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 80069c6:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 80069ca:	4623      	mov	r3, r4
 80069cc:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 80069d0:	4602      	mov	r2, r0
 80069d2:	4053      	eors	r3, r2
 80069d4:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80069d8:	462b      	mov	r3, r5
 80069da:	460a      	mov	r2, r1
 80069dc:	4053      	eors	r3, r2
 80069de:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 80069e2:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80069e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069ea:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80069ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f2:	ea00 0402 	and.w	r4, r0, r2
 80069f6:	f8c7 4298 	str.w	r4, [r7, #664]	@ 0x298
 80069fa:	400b      	ands	r3, r1
 80069fc:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8006a00:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8006a04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a08:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	ea40 0402 	orr.w	r4, r0, r2
 8006a14:	f8c7 4290 	str.w	r4, [r7, #656]	@ 0x290
 8006a18:	430b      	orrs	r3, r1
 8006a1a:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8006a1e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8006a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a26:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	4011      	ands	r1, r2
 8006a2e:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 8006a32:	4629      	mov	r1, r5
 8006a34:	400b      	ands	r3, r1
 8006a36:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8006a3a:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 8006a3e:	4623      	mov	r3, r4
 8006a40:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 8006a44:	4602      	mov	r2, r0
 8006a46:	4313      	orrs	r3, r2
 8006a48:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8006a4c:	462b      	mov	r3, r5
 8006a4e:	460a      	mov	r2, r1
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8006a56:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 8006a5a:	4623      	mov	r3, r4
 8006a5c:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8006a60:	4602      	mov	r2, r0
 8006a62:	189b      	adds	r3, r3, r2
 8006a64:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a66:	462b      	mov	r3, r5
 8006a68:	460a      	mov	r2, r1
 8006a6a:	4153      	adcs	r3, r2
 8006a6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a6e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8006a72:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8006a76:	e9c2 3400 	strd	r3, r4, [r2]
 8006a7a:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8006a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a82:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	1884      	adds	r4, r0, r2
 8006a8c:	64bc      	str	r4, [r7, #72]	@ 0x48
 8006a8e:	eb41 0303 	adc.w	r3, r1, r3
 8006a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a94:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8006a98:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 8006a9c:	e9c2 3400 	strd	r3, r4, [r2]
 8006aa0:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8006aa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006aa8:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8006aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab0:	1884      	adds	r4, r0, r2
 8006ab2:	643c      	str	r4, [r7, #64]	@ 0x40
 8006ab4:	eb41 0303 	adc.w	r3, r1, r3
 8006ab8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8006abe:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 8006ac2:	e9c2 3400 	strd	r3, r4, [r2]
 8006ac6:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006aca:	3301      	adds	r3, #1
 8006acc:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 8006ad0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8006ad4:	049a      	lsls	r2, r3, #18
 8006ad6:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8006ada:	0b9b      	lsrs	r3, r3, #14
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8006ae2:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8006ae6:	049a      	lsls	r2, r3, #18
 8006ae8:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8006aec:	0b9b      	lsrs	r3, r3, #14
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8006af4:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8006af8:	039a      	lsls	r2, r3, #14
 8006afa:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8006afe:	0c9b      	lsrs	r3, r3, #18
 8006b00:	4313      	orrs	r3, r2
 8006b02:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8006b06:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8006b0a:	039a      	lsls	r2, r3, #14
 8006b0c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8006b10:	0c9b      	lsrs	r3, r3, #18
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8006b18:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 8006b1c:	4623      	mov	r3, r4
 8006b1e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 8006b22:	4602      	mov	r2, r0
 8006b24:	4053      	eors	r3, r2
 8006b26:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8006b2a:	462b      	mov	r3, r5
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	4053      	eors	r3, r2
 8006b30:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8006b34:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8006b38:	0a5a      	lsrs	r2, r3, #9
 8006b3a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8006b3e:	05db      	lsls	r3, r3, #23
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8006b46:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 8006b4a:	0a5a      	lsrs	r2, r3, #9
 8006b4c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 8006b50:	05db      	lsls	r3, r3, #23
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8006b58:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 8006b5c:	4623      	mov	r3, r4
 8006b5e:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 8006b62:	4602      	mov	r2, r0
 8006b64:	4053      	eors	r3, r2
 8006b66:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8006b6a:	462b      	mov	r3, r5
 8006b6c:	460a      	mov	r2, r1
 8006b6e:	4053      	eors	r3, r2
 8006b70:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8006b74:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 8006b80:	4621      	mov	r1, r4
 8006b82:	1889      	adds	r1, r1, r2
 8006b84:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
 8006b88:	4629      	mov	r1, r5
 8006b8a:	eb41 0303 	adc.w	r3, r1, r3
 8006b8e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8006b92:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8006b96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006b9a:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	ea80 0402 	eor.w	r4, r0, r2
 8006ba6:	f8c7 4248 	str.w	r4, [r7, #584]	@ 0x248
 8006baa:	404b      	eors	r3, r1
 8006bac:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8006bb0:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	4011      	ands	r1, r2
 8006bc0:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	400b      	ands	r3, r1
 8006bc8:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 8006bcc:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8006bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd4:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 8006bd8:	4621      	mov	r1, r4
 8006bda:	4051      	eors	r1, r2
 8006bdc:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
 8006be0:	4629      	mov	r1, r5
 8006be2:	404b      	eors	r3, r1
 8006be4:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8006be8:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	@ 0x250
 8006bec:	4623      	mov	r3, r4
 8006bee:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	189b      	adds	r3, r3, r2
 8006bf6:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	460a      	mov	r2, r1
 8006bfe:	4153      	adcs	r3, r2
 8006c00:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8006c04:	4af7      	ldr	r2, [pc, #988]	@ (8006fe4 <mbedtls_internal_sha512_process+0x1e84>)
 8006c06:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	@ 0x230
 8006c16:	4621      	mov	r1, r4
 8006c18:	1889      	adds	r1, r1, r2
 8006c1a:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
 8006c1e:	4629      	mov	r1, r5
 8006c20:	eb41 0303 	adc.w	r3, r1, r3
 8006c24:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 8006c28:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8006c2c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8006c30:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4413      	add	r3, r2
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 8006c40:	4621      	mov	r1, r4
 8006c42:	1889      	adds	r1, r1, r2
 8006c44:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c46:	4629      	mov	r1, r5
 8006c48:	eb41 0303 	adc.w	r3, r1, r3
 8006c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c4e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8006c52:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8006c56:	e9c2 3400 	strd	r3, r4, [r2]
 8006c5a:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8006c5e:	011a      	lsls	r2, r3, #4
 8006c60:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8006c64:	0f1b      	lsrs	r3, r3, #28
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8006c6c:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8006c70:	011a      	lsls	r2, r3, #4
 8006c72:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8006c76:	0f1b      	lsrs	r3, r3, #28
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8006c7e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8006c82:	089a      	lsrs	r2, r3, #2
 8006c84:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8006c88:	079b      	lsls	r3, r3, #30
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8006c90:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8006c94:	089a      	lsrs	r2, r3, #2
 8006c96:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8006c9a:	079b      	lsls	r3, r3, #30
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8006ca2:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	@ 0x220
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8006cac:	4602      	mov	r2, r0
 8006cae:	4053      	eors	r3, r2
 8006cb0:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	460a      	mov	r2, r1
 8006cb8:	4053      	eors	r3, r2
 8006cba:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8006cbe:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8006cc2:	09da      	lsrs	r2, r3, #7
 8006cc4:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8006cc8:	065b      	lsls	r3, r3, #25
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8006cd0:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 8006cd4:	09da      	lsrs	r2, r3, #7
 8006cd6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 8006cda:	065b      	lsls	r3, r3, #25
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8006ce2:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 8006ce6:	4623      	mov	r3, r4
 8006ce8:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 8006cec:	4602      	mov	r2, r0
 8006cee:	4053      	eors	r3, r2
 8006cf0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	460a      	mov	r2, r1
 8006cf8:	4053      	eors	r3, r2
 8006cfa:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8006cfe:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8006d02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d06:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	ea00 0402 	and.w	r4, r0, r2
 8006d12:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 8006d16:	400b      	ands	r3, r1
 8006d18:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8006d1c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8006d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d24:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8006d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2c:	ea40 0402 	orr.w	r4, r0, r2
 8006d30:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 8006d34:	430b      	orrs	r3, r1
 8006d36:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8006d3a:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8006d46:	4621      	mov	r1, r4
 8006d48:	4011      	ands	r1, r2
 8006d4a:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 8006d4e:	4629      	mov	r1, r5
 8006d50:	400b      	ands	r3, r1
 8006d52:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8006d56:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	@ 0x1f8
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8006d60:	4602      	mov	r2, r0
 8006d62:	4313      	orrs	r3, r2
 8006d64:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8006d68:	462b      	mov	r3, r5
 8006d6a:	460a      	mov	r2, r1
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8006d72:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 8006d76:	4623      	mov	r3, r4
 8006d78:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	189b      	adds	r3, r3, r2
 8006d80:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d82:	462b      	mov	r3, r5
 8006d84:	460a      	mov	r2, r1
 8006d86:	4153      	adcs	r3, r2
 8006d88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8006d8e:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 8006d92:	e9c2 3400 	strd	r3, r4, [r2]
 8006d96:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8006d9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d9e:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	1884      	adds	r4, r0, r2
 8006da8:	62bc      	str	r4, [r7, #40]	@ 0x28
 8006daa:	eb41 0303 	adc.w	r3, r1, r3
 8006dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8006db4:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 8006db8:	e9c2 3400 	strd	r3, r4, [r2]
 8006dbc:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 8006dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dc4:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	1884      	adds	r4, r0, r2
 8006dce:	623c      	str	r4, [r7, #32]
 8006dd0:	eb41 0303 	adc.w	r3, r1, r3
 8006dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8006dda:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 8006dde:	e9c2 3400 	strd	r3, r4, [r2]
 8006de2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006de6:	3301      	adds	r3, #1
 8006de8:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 8006dec:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006df0:	049a      	lsls	r2, r3, #18
 8006df2:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006df6:	0b9b      	lsrs	r3, r3, #14
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8006dfe:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006e02:	049a      	lsls	r2, r3, #18
 8006e04:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006e08:	0b9b      	lsrs	r3, r3, #14
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8006e10:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006e14:	039a      	lsls	r2, r3, #14
 8006e16:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006e1a:	0c9b      	lsrs	r3, r3, #18
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8006e22:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006e26:	039a      	lsls	r2, r3, #14
 8006e28:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006e2c:	0c9b      	lsrs	r3, r3, #18
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8006e34:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 8006e38:	4623      	mov	r3, r4
 8006e3a:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8006e3e:	4602      	mov	r2, r0
 8006e40:	4053      	eors	r3, r2
 8006e42:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8006e46:	462b      	mov	r3, r5
 8006e48:	460a      	mov	r2, r1
 8006e4a:	4053      	eors	r3, r2
 8006e4c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8006e50:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006e54:	0a5a      	lsrs	r2, r3, #9
 8006e56:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006e5a:	05db      	lsls	r3, r3, #23
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006e62:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 8006e66:	0a5a      	lsrs	r2, r3, #9
 8006e68:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 8006e6c:	05db      	lsls	r3, r3, #23
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8006e74:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 8006e78:	4623      	mov	r3, r4
 8006e7a:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8006e7e:	4602      	mov	r2, r0
 8006e80:	4053      	eors	r3, r2
 8006e82:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8006e86:	462b      	mov	r3, r5
 8006e88:	460a      	mov	r2, r1
 8006e8a:	4053      	eors	r3, r2
 8006e8c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8006e90:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	1889      	adds	r1, r1, r2
 8006ea0:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	eb41 0303 	adc.w	r3, r1, r3
 8006eaa:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8006eae:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8006eb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006eb6:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	ea80 0402 	eor.w	r4, r0, r2
 8006ec2:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 8006ec6:	404b      	eors	r3, r1
 8006ec8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8006ecc:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4011      	ands	r1, r2
 8006edc:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	400b      	ands	r3, r1
 8006ee4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8006ee8:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4051      	eors	r1, r2
 8006ef8:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 8006efc:	4629      	mov	r1, r5
 8006efe:	404b      	eors	r3, r1
 8006f00:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8006f04:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	@ 0x1b0
 8006f08:	4623      	mov	r3, r4
 8006f0a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8006f0e:	4602      	mov	r2, r0
 8006f10:	189b      	adds	r3, r3, r2
 8006f12:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8006f16:	462b      	mov	r3, r5
 8006f18:	460a      	mov	r2, r1
 8006f1a:	4153      	adcs	r3, r2
 8006f1c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8006f20:	4a30      	ldr	r2, [pc, #192]	@ (8006fe4 <mbedtls_internal_sha512_process+0x1e84>)
 8006f22:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	4413      	add	r3, r2
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 8006f32:	4621      	mov	r1, r4
 8006f34:	1889      	adds	r1, r1, r2
 8006f36:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	eb41 0303 	adc.w	r3, r1, r3
 8006f40:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8006f44:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8006f48:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8006f4c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	4413      	add	r3, r2
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	1889      	adds	r1, r1, r2
 8006f60:	61b9      	str	r1, [r7, #24]
 8006f62:	4629      	mov	r1, r5
 8006f64:	eb41 0303 	adc.w	r3, r1, r3
 8006f68:	61fb      	str	r3, [r7, #28]
 8006f6a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006f6e:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 8006f72:	e9c2 3400 	strd	r3, r4, [r2]
 8006f76:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006f7a:	011a      	lsls	r2, r3, #4
 8006f7c:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006f80:	0f1b      	lsrs	r3, r3, #28
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006f88:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006f8c:	011a      	lsls	r2, r3, #4
 8006f8e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006f92:	0f1b      	lsrs	r3, r3, #28
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8006f9a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006f9e:	089a      	lsrs	r2, r3, #2
 8006fa0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006fa4:	079b      	lsls	r3, r3, #30
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8006fac:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006fb0:	089a      	lsrs	r2, r3, #2
 8006fb2:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006fb6:	079b      	lsls	r3, r3, #30
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8006fbe:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	@ 0x180
 8006fc2:	4623      	mov	r3, r4
 8006fc4:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 8006fc8:	4602      	mov	r2, r0
 8006fca:	4053      	eors	r3, r2
 8006fcc:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	460a      	mov	r2, r1
 8006fd4:	4053      	eors	r3, r2
 8006fd6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8006fda:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006fde:	09da      	lsrs	r2, r3, #7
 8006fe0:	e002      	b.n	8006fe8 <mbedtls_internal_sha512_process+0x1e88>
 8006fe2:	bf00      	nop
 8006fe4:	0800aa28 	.word	0x0800aa28
 8006fe8:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006fec:	065b      	lsls	r3, r3, #25
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8006ff4:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 8006ff8:	09da      	lsrs	r2, r3, #7
 8006ffa:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 8006ffe:	065b      	lsls	r3, r3, #25
 8007000:	4313      	orrs	r3, r2
 8007002:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8007006:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800700a:	4623      	mov	r3, r4
 800700c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 8007010:	4602      	mov	r2, r0
 8007012:	4053      	eors	r3, r2
 8007014:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8007018:	462b      	mov	r3, r5
 800701a:	460a      	mov	r2, r1
 800701c:	4053      	eors	r3, r2
 800701e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8007022:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8007026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800702a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	ea00 0402 	and.w	r4, r0, r2
 8007036:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 800703a:	400b      	ands	r3, r1
 800703c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8007040:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8007044:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007048:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	ea40 0402 	orr.w	r4, r0, r2
 8007054:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 8007058:	430b      	orrs	r3, r1
 800705a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800705e:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8007062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007066:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 800706a:	4621      	mov	r1, r4
 800706c:	4011      	ands	r1, r2
 800706e:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 8007072:	4629      	mov	r1, r5
 8007074:	400b      	ands	r3, r1
 8007076:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800707a:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800707e:	4623      	mov	r3, r4
 8007080:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8007084:	4602      	mov	r2, r0
 8007086:	4313      	orrs	r3, r2
 8007088:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800708c:	462b      	mov	r3, r5
 800708e:	460a      	mov	r2, r1
 8007090:	4313      	orrs	r3, r2
 8007092:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8007096:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800709a:	4623      	mov	r3, r4
 800709c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 80070a0:	4602      	mov	r2, r0
 80070a2:	189b      	adds	r3, r3, r2
 80070a4:	613b      	str	r3, [r7, #16]
 80070a6:	462b      	mov	r3, r5
 80070a8:	460a      	mov	r2, r1
 80070aa:	4153      	adcs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80070b2:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 80070b6:	e9c2 3400 	strd	r3, r4, [r2]
 80070ba:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80070be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070c2:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	1884      	adds	r4, r0, r2
 80070cc:	60bc      	str	r4, [r7, #8]
 80070ce:	eb41 0303 	adc.w	r3, r1, r3
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80070d8:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 80070dc:	e9c2 3400 	strd	r3, r4, [r2]
 80070e0:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 80070e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070e8:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	1884      	adds	r4, r0, r2
 80070f2:	603c      	str	r4, [r7, #0]
 80070f4:	eb41 0303 	adc.w	r3, r1, r3
 80070f8:	607b      	str	r3, [r7, #4]
 80070fa:	e9d7 3400 	ldrd	r3, r4, [r7]
 80070fe:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 8007102:	e9c2 3400 	strd	r3, r4, [r2]
 8007106:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800710a:	3301      	adds	r3, #1
 800710c:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
    }
    while( i < 80 );
 8007110:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8007114:	2b4f      	cmp	r3, #79	@ 0x4f
 8007116:	f77e aacb 	ble.w	80056b0 <mbedtls_internal_sha512_process+0x550>

    ctx->state[0] += A;
 800711a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800711e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007128:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	1884      	adds	r4, r0, r2
 8007132:	f8c7 4138 	str.w	r4, [r7, #312]	@ 0x138
 8007136:	eb41 0303 	adc.w	r3, r1, r3
 800713a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800713e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8007142:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800714c:	e9c3 1204 	strd	r1, r2, [r3, #16]
    ctx->state[1] += B;
 8007150:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8007154:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800715e:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8007162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007166:	1884      	adds	r4, r0, r2
 8007168:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 800716c:	eb41 0303 	adc.w	r3, r1, r3
 8007170:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8007174:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8007178:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8007182:	e9c3 1206 	strd	r1, r2, [r3, #24]
    ctx->state[2] += C;
 8007186:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800718a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007194:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8007198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719c:	1884      	adds	r4, r0, r2
 800719e:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 80071a2:	eb41 0303 	adc.w	r3, r1, r3
 80071a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80071aa:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80071ae:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80071b8:	e9c3 1208 	strd	r1, r2, [r3, #32]
    ctx->state[3] += D;
 80071bc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80071c0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80071ca:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	1884      	adds	r4, r0, r2
 80071d4:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80071d8:	eb41 0303 	adc.w	r3, r1, r3
 80071dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80071e0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80071e4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 80071ee:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
    ctx->state[4] += E;
 80071f2:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80071f6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007200:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	1884      	adds	r4, r0, r2
 800720a:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 800720e:	eb41 0303 	adc.w	r3, r1, r3
 8007212:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8007216:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800721a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8007224:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
    ctx->state[5] += F;
 8007228:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800722c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007236:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	1884      	adds	r4, r0, r2
 8007240:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8007244:	eb41 0303 	adc.w	r3, r1, r3
 8007248:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800724c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8007250:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800725a:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
    ctx->state[6] += G;
 800725e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8007262:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800726c:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	1884      	adds	r4, r0, r2
 8007276:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 800727a:	eb41 0303 	adc.w	r3, r1, r3
 800727e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007282:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8007286:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007290:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
    ctx->state[7] += H;
 8007294:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8007298:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80072a2:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	1884      	adds	r4, r0, r2
 80072ac:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 80072b0:	eb41 0303 	adc.w	r3, r1, r3
 80072b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80072b8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80072bc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80072c6:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48

    return( 0 );
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	f507 671e 	add.w	r7, r7, #2528	@ 0x9e0
 80072d2:	46bd      	mov	sp, r7
 80072d4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop

080072dc <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 80072dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e0:	b08a      	sub	sp, #40	@ 0x28
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6178      	str	r0, [r7, #20]
 80072e6:	6139      	str	r1, [r7, #16]
 80072e8:	60fa      	str	r2, [r7, #12]
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <mbedtls_sha512_update_ret+0x18>
        return( 0 );
 80072f0:	2300      	movs	r3, #0
 80072f2:	e079      	b.n	80073e8 <mbedtls_sha512_update_ret+0x10c>

    left = (unsigned int) (ctx->total[0] & 0x7F);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	4613      	mov	r3, r2
 80072fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007300:	627b      	str	r3, [r7, #36]	@ 0x24
    fill = 128 - left;
 8007302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007304:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8007308:	623b      	str	r3, [r7, #32]

    ctx->total[0] += (uint64_t) ilen;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	2000      	movs	r0, #0
 8007314:	4688      	mov	r8, r1
 8007316:	4681      	mov	r9, r0
 8007318:	eb12 0108 	adds.w	r1, r2, r8
 800731c:	6039      	str	r1, [r7, #0]
 800731e:	eb43 0309 	adc.w	r3, r3, r9
 8007322:	607b      	str	r3, [r7, #4]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	e9d7 1200 	ldrd	r1, r2, [r7]
 800732a:	e9c3 1200 	strd	r1, r2, [r3]

    if( ctx->total[0] < (uint64_t) ilen )
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007334:	68f9      	ldr	r1, [r7, #12]
 8007336:	2000      	movs	r0, #0
 8007338:	460c      	mov	r4, r1
 800733a:	4605      	mov	r5, r0
 800733c:	42a2      	cmp	r2, r4
 800733e:	41ab      	sbcs	r3, r5
 8007340:	d209      	bcs.n	8007356 <mbedtls_sha512_update_ret+0x7a>
        ctx->total[1]++;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007348:	f112 0a01 	adds.w	sl, r2, #1
 800734c:	f143 0b00 	adc.w	fp, r3, #0
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	e9c3 ab02 	strd	sl, fp, [r3, #8]

    if( left && ilen >= fill )
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d034      	beq.n	80073c6 <mbedtls_sha512_update_ret+0xea>
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	429a      	cmp	r2, r3
 8007362:	d330      	bcc.n	80073c6 <mbedtls_sha512_update_ret+0xea>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800736a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736c:	4413      	add	r3, r2
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	6939      	ldr	r1, [r7, #16]
 8007372:	4618      	mov	r0, r3
 8007374:	f001 f82d 	bl	80083d2 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	3350      	adds	r3, #80	@ 0x50
 800737c:	4619      	mov	r1, r3
 800737e:	6978      	ldr	r0, [r7, #20]
 8007380:	f7fd feee 	bl	8005160 <mbedtls_internal_sha512_process>
 8007384:	61f8      	str	r0, [r7, #28]
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <mbedtls_sha512_update_ret+0xb4>
            return( ret );
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	e02b      	b.n	80073e8 <mbedtls_sha512_update_ret+0x10c>

        input += fill;
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	4413      	add	r3, r2
 8007396:	613b      	str	r3, [r7, #16]
        ilen  -= fill;
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	6a3b      	ldr	r3, [r7, #32]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	60fb      	str	r3, [r7, #12]
        left = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    while( ilen >= 128 )
 80073a4:	e00f      	b.n	80073c6 <mbedtls_sha512_update_ret+0xea>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 80073a6:	6939      	ldr	r1, [r7, #16]
 80073a8:	6978      	ldr	r0, [r7, #20]
 80073aa:	f7fd fed9 	bl	8005160 <mbedtls_internal_sha512_process>
 80073ae:	61f8      	str	r0, [r7, #28]
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <mbedtls_sha512_update_ret+0xde>
            return( ret );
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	e016      	b.n	80073e8 <mbedtls_sha512_update_ret+0x10c>

        input += 128;
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	3380      	adds	r3, #128	@ 0x80
 80073be:	613b      	str	r3, [r7, #16]
        ilen  -= 128;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b80      	subs	r3, #128	@ 0x80
 80073c4:	60fb      	str	r3, [r7, #12]
    while( ilen >= 128 )
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80073ca:	d8ec      	bhi.n	80073a6 <mbedtls_sha512_update_ret+0xca>
    }

    if( ilen > 0 )
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <mbedtls_sha512_update_ret+0x10a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80073d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073da:	4413      	add	r3, r2
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	6939      	ldr	r1, [r7, #16]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fff6 	bl	80083d2 <memcpy>

    return( 0 );
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3728      	adds	r7, #40	@ 0x28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080073f2 <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 80073f2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	4613      	mov	r3, r2
 8007406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800740a:	61fb      	str	r3, [r7, #28]

    ctx->buffer[used++] = 0x80;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	61fa      	str	r2, [r7, #28]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	2280      	movs	r2, #128	@ 0x80
 8007418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    if( used <= 112 )
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b70      	cmp	r3, #112	@ 0x70
 8007420:	d80c      	bhi.n	800743c <mbedtls_sha512_finish_ret+0x4a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	18d0      	adds	r0, r2, r3
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f1c3 0370 	rsb	r3, r3, #112	@ 0x70
 8007432:	461a      	mov	r2, r3
 8007434:	2100      	movs	r1, #0
 8007436:	f000 ff41 	bl	80082bc <memset>
 800743a:	e01f      	b.n	800747c <mbedtls_sha512_finish_ret+0x8a>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	18d0      	adds	r0, r2, r3
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800744c:	461a      	mov	r2, r3
 800744e:	2100      	movs	r1, #0
 8007450:	f000 ff34 	bl	80082bc <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3350      	adds	r3, #80	@ 0x50
 8007458:	4619      	mov	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7fd fe80 	bl	8005160 <mbedtls_internal_sha512_process>
 8007460:	61b8      	str	r0, [r7, #24]
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <mbedtls_sha512_finish_ret+0x7c>
            return( ret );
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	f000 bc3c 	b.w	8007ce6 <mbedtls_sha512_finish_ret+0x8f4>

        memset( ctx->buffer, 0, 112 );
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3350      	adds	r3, #80	@ 0x50
 8007472:	2270      	movs	r2, #112	@ 0x70
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f000 ff20 	bl	80082bc <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f04f 0000 	mov.w	r0, #0
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	0f58      	lsrs	r0, r3, #29
 800748c:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	00eb      	lsls	r3, r5, #3
 800749e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074a2:	00e2      	lsls	r2, r4, #3
    high = ( ctx->total[0] >> 61 )
 80074a4:	ea40 0802 	orr.w	r8, r0, r2
 80074a8:	ea41 0903 	orr.w	r9, r1, r3
 80074ac:	e9c7 8904 	strd	r8, r9, [r7, #16]
    low  = ( ctx->total[0] <<  3 );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80074b6:	f04f 0200 	mov.w	r2, #0
 80074ba:	f04f 0300 	mov.w	r3, #0
 80074be:	00cb      	lsls	r3, r1, #3
 80074c0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80074c4:	00c2      	lsls	r2, r0, #3
 80074c6:	e9c7 2302 	strd	r2, r3, [r7, #8]

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 80074ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	0e0a      	lsrs	r2, r1, #24
 80074d8:	2300      	movs	r3, #0
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 80074e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	0c0a      	lsrs	r2, r1, #16
 80074f0:	2300      	movs	r3, #0
 80074f2:	b2d2      	uxtb	r2, r2
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
 80074fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074fe:	f04f 0200 	mov.w	r2, #0
 8007502:	f04f 0300 	mov.w	r3, #0
 8007506:	0a0a      	lsrs	r2, r1, #8
 8007508:	2300      	movs	r3, #0
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
 8007512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	000a      	movs	r2, r1
 8007520:	2300      	movs	r3, #0
 8007522:	b2d2      	uxtb	r2, r2
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
 800752a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	0e02      	lsrs	r2, r0, #24
 8007538:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800753c:	0e0b      	lsrs	r3, r1, #24
 800753e:	b2d2      	uxtb	r2, r2
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
 8007546:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	0c02      	lsrs	r2, r0, #16
 8007554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007558:	0c0b      	lsrs	r3, r1, #16
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
 8007562:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007566:	f04f 0200 	mov.w	r2, #0
 800756a:	f04f 0300 	mov.w	r3, #0
 800756e:	0a02      	lsrs	r2, r0, #8
 8007570:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007574:	0a0b      	lsrs	r3, r1, #8
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
 800757e:	7c3a      	ldrb	r2, [r7, #16]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 8007586:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	0e0a      	lsrs	r2, r1, #24
 8007594:	2300      	movs	r3, #0
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800759e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075a2:	f04f 0200 	mov.w	r2, #0
 80075a6:	f04f 0300 	mov.w	r3, #0
 80075aa:	0c0a      	lsrs	r2, r1, #16
 80075ac:	2300      	movs	r3, #0
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 80075b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	f04f 0300 	mov.w	r3, #0
 80075c2:	0a0a      	lsrs	r2, r1, #8
 80075c4:	2300      	movs	r3, #0
 80075c6:	b2d2      	uxtb	r2, r2
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 80075ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	000a      	movs	r2, r1
 80075dc:	2300      	movs	r3, #0
 80075de:	b2d2      	uxtb	r2, r2
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
 80075e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	0e02      	lsrs	r2, r0, #24
 80075f4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80075f8:	0e0b      	lsrs	r3, r1, #24
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 8007602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007606:	f04f 0200 	mov.w	r2, #0
 800760a:	f04f 0300 	mov.w	r3, #0
 800760e:	0c02      	lsrs	r2, r0, #16
 8007610:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007614:	0c0b      	lsrs	r3, r1, #16
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
 800761e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	0a02      	lsrs	r2, r0, #8
 800762c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007630:	0a0b      	lsrs	r3, r1, #8
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 800763a:	7a3a      	ldrb	r2, [r7, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3350      	adds	r3, #80	@ 0x50
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f7fd fd89 	bl	8005160 <mbedtls_internal_sha512_process>
 800764e:	61b8      	str	r0, [r7, #24]
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <mbedtls_sha512_finish_ret+0x268>
        return( ret );
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	e345      	b.n	8007ce6 <mbedtls_sha512_finish_ret+0x8f4>

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	0e0a      	lsrs	r2, r1, #24
 800766a:	2300      	movs	r3, #0
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	0c0a      	lsrs	r2, r1, #16
 8007682:	2300      	movs	r3, #0
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	3101      	adds	r1, #1
 8007688:	b2d3      	uxtb	r3, r2
 800768a:	700b      	strb	r3, [r1, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	f04f 0300 	mov.w	r3, #0
 800769a:	0a0a      	lsrs	r2, r1, #8
 800769c:	2300      	movs	r3, #0
 800769e:	6839      	ldr	r1, [r7, #0]
 80076a0:	3102      	adds	r1, #2
 80076a2:	b2d3      	uxtb	r3, r2
 80076a4:	700b      	strb	r3, [r1, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80076ac:	f04f 0200 	mov.w	r2, #0
 80076b0:	f04f 0300 	mov.w	r3, #0
 80076b4:	000a      	movs	r2, r1
 80076b6:	2300      	movs	r3, #0
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	3103      	adds	r1, #3
 80076bc:	b2d3      	uxtb	r3, r2
 80076be:	700b      	strb	r3, [r1, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80076c6:	f04f 0200 	mov.w	r2, #0
 80076ca:	f04f 0300 	mov.w	r3, #0
 80076ce:	0e02      	lsrs	r2, r0, #24
 80076d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80076d4:	0e0b      	lsrs	r3, r1, #24
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	3104      	adds	r1, #4
 80076da:	b2d3      	uxtb	r3, r2
 80076dc:	700b      	strb	r3, [r1, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	0c02      	lsrs	r2, r0, #16
 80076ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80076f2:	0c0b      	lsrs	r3, r1, #16
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	3105      	adds	r1, #5
 80076f8:	b2d3      	uxtb	r3, r2
 80076fa:	700b      	strb	r3, [r1, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007702:	f04f 0200 	mov.w	r2, #0
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	0a02      	lsrs	r2, r0, #8
 800770c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007710:	0a0b      	lsrs	r3, r1, #8
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	3106      	adds	r1, #6
 8007716:	b2d3      	uxtb	r3, r2
 8007718:	700b      	strb	r3, [r1, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	3107      	adds	r1, #7
 8007724:	b2d3      	uxtb	r3, r2
 8007726:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800772e:	f04f 0200 	mov.w	r2, #0
 8007732:	f04f 0300 	mov.w	r3, #0
 8007736:	0e0a      	lsrs	r2, r1, #24
 8007738:	2300      	movs	r3, #0
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	3108      	adds	r1, #8
 800773e:	b2d3      	uxtb	r3, r2
 8007740:	700b      	strb	r3, [r1, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	f04f 0300 	mov.w	r3, #0
 8007750:	0c0a      	lsrs	r2, r1, #16
 8007752:	2300      	movs	r3, #0
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	3109      	adds	r1, #9
 8007758:	b2d3      	uxtb	r3, r2
 800775a:	700b      	strb	r3, [r1, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	f04f 0300 	mov.w	r3, #0
 800776a:	0a0a      	lsrs	r2, r1, #8
 800776c:	2300      	movs	r3, #0
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	310a      	adds	r1, #10
 8007772:	b2d3      	uxtb	r3, r2
 8007774:	700b      	strb	r3, [r1, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800777c:	f04f 0200 	mov.w	r2, #0
 8007780:	f04f 0300 	mov.w	r3, #0
 8007784:	000a      	movs	r2, r1
 8007786:	2300      	movs	r3, #0
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	310b      	adds	r1, #11
 800778c:	b2d3      	uxtb	r3, r2
 800778e:	700b      	strb	r3, [r1, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	f04f 0300 	mov.w	r3, #0
 800779e:	0e02      	lsrs	r2, r0, #24
 80077a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80077a4:	0e0b      	lsrs	r3, r1, #24
 80077a6:	6839      	ldr	r1, [r7, #0]
 80077a8:	310c      	adds	r1, #12
 80077aa:	b2d3      	uxtb	r3, r2
 80077ac:	700b      	strb	r3, [r1, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	0c02      	lsrs	r2, r0, #16
 80077be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80077c2:	0c0b      	lsrs	r3, r1, #16
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	310d      	adds	r1, #13
 80077c8:	b2d3      	uxtb	r3, r2
 80077ca:	700b      	strb	r3, [r1, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	f04f 0300 	mov.w	r3, #0
 80077da:	0a02      	lsrs	r2, r0, #8
 80077dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80077e0:	0a0b      	lsrs	r3, r1, #8
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	310e      	adds	r1, #14
 80077e6:	b2d3      	uxtb	r3, r2
 80077e8:	700b      	strb	r3, [r1, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	310f      	adds	r1, #15
 80077f4:	b2d3      	uxtb	r3, r2
 80077f6:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80077fe:	f04f 0200 	mov.w	r2, #0
 8007802:	f04f 0300 	mov.w	r3, #0
 8007806:	0e0a      	lsrs	r2, r1, #24
 8007808:	2300      	movs	r3, #0
 800780a:	6839      	ldr	r1, [r7, #0]
 800780c:	3110      	adds	r1, #16
 800780e:	b2d3      	uxtb	r3, r2
 8007810:	700b      	strb	r3, [r1, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	f04f 0300 	mov.w	r3, #0
 8007820:	0c0a      	lsrs	r2, r1, #16
 8007822:	2300      	movs	r3, #0
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	3111      	adds	r1, #17
 8007828:	b2d3      	uxtb	r3, r2
 800782a:	700b      	strb	r3, [r1, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007832:	f04f 0200 	mov.w	r2, #0
 8007836:	f04f 0300 	mov.w	r3, #0
 800783a:	0a0a      	lsrs	r2, r1, #8
 800783c:	2300      	movs	r3, #0
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	3112      	adds	r1, #18
 8007842:	b2d3      	uxtb	r3, r2
 8007844:	700b      	strb	r3, [r1, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	000a      	movs	r2, r1
 8007856:	2300      	movs	r3, #0
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	3113      	adds	r1, #19
 800785c:	b2d3      	uxtb	r3, r2
 800785e:	700b      	strb	r3, [r1, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	f04f 0300 	mov.w	r3, #0
 800786e:	0e02      	lsrs	r2, r0, #24
 8007870:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007874:	0e0b      	lsrs	r3, r1, #24
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	3114      	adds	r1, #20
 800787a:	b2d3      	uxtb	r3, r2
 800787c:	700b      	strb	r3, [r1, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	f04f 0300 	mov.w	r3, #0
 800788c:	0c02      	lsrs	r2, r0, #16
 800788e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007892:	0c0b      	lsrs	r3, r1, #16
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	3115      	adds	r1, #21
 8007898:	b2d3      	uxtb	r3, r2
 800789a:	700b      	strb	r3, [r1, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	0a02      	lsrs	r2, r0, #8
 80078ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80078b0:	0a0b      	lsrs	r3, r1, #8
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	3116      	adds	r1, #22
 80078b6:	b2d3      	uxtb	r3, r2
 80078b8:	700b      	strb	r3, [r1, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	3117      	adds	r1, #23
 80078c4:	b2d3      	uxtb	r3, r2
 80078c6:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	0e0a      	lsrs	r2, r1, #24
 80078d8:	2300      	movs	r3, #0
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	3118      	adds	r1, #24
 80078de:	b2d3      	uxtb	r3, r2
 80078e0:	700b      	strb	r3, [r1, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80078e8:	f04f 0200 	mov.w	r2, #0
 80078ec:	f04f 0300 	mov.w	r3, #0
 80078f0:	0c0a      	lsrs	r2, r1, #16
 80078f2:	2300      	movs	r3, #0
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	3119      	adds	r1, #25
 80078f8:	b2d3      	uxtb	r3, r2
 80078fa:	700b      	strb	r3, [r1, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	0a0a      	lsrs	r2, r1, #8
 800790c:	2300      	movs	r3, #0
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	311a      	adds	r1, #26
 8007912:	b2d3      	uxtb	r3, r2
 8007914:	700b      	strb	r3, [r1, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800791c:	f04f 0200 	mov.w	r2, #0
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	000a      	movs	r2, r1
 8007926:	2300      	movs	r3, #0
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	311b      	adds	r1, #27
 800792c:	b2d3      	uxtb	r3, r2
 800792e:	700b      	strb	r3, [r1, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007936:	f04f 0200 	mov.w	r2, #0
 800793a:	f04f 0300 	mov.w	r3, #0
 800793e:	0e02      	lsrs	r2, r0, #24
 8007940:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007944:	0e0b      	lsrs	r3, r1, #24
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	311c      	adds	r1, #28
 800794a:	b2d3      	uxtb	r3, r2
 800794c:	700b      	strb	r3, [r1, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	f04f 0300 	mov.w	r3, #0
 800795c:	0c02      	lsrs	r2, r0, #16
 800795e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007962:	0c0b      	lsrs	r3, r1, #16
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	311d      	adds	r1, #29
 8007968:	b2d3      	uxtb	r3, r2
 800796a:	700b      	strb	r3, [r1, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007972:	f04f 0200 	mov.w	r2, #0
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	0a02      	lsrs	r2, r0, #8
 800797c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007980:	0a0b      	lsrs	r3, r1, #8
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	311e      	adds	r1, #30
 8007986:	b2d3      	uxtb	r3, r2
 8007988:	700b      	strb	r3, [r1, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	311f      	adds	r1, #31
 8007994:	b2d3      	uxtb	r3, r2
 8007996:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800799e:	f04f 0200 	mov.w	r2, #0
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	0e0a      	lsrs	r2, r1, #24
 80079a8:	2300      	movs	r3, #0
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	3120      	adds	r1, #32
 80079ae:	b2d3      	uxtb	r3, r2
 80079b0:	700b      	strb	r3, [r1, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	0c0a      	lsrs	r2, r1, #16
 80079c2:	2300      	movs	r3, #0
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	3121      	adds	r1, #33	@ 0x21
 80079c8:	b2d3      	uxtb	r3, r2
 80079ca:	700b      	strb	r3, [r1, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	0a0a      	lsrs	r2, r1, #8
 80079dc:	2300      	movs	r3, #0
 80079de:	6839      	ldr	r1, [r7, #0]
 80079e0:	3122      	adds	r1, #34	@ 0x22
 80079e2:	b2d3      	uxtb	r3, r2
 80079e4:	700b      	strb	r3, [r1, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	f04f 0300 	mov.w	r3, #0
 80079f4:	000a      	movs	r2, r1
 80079f6:	2300      	movs	r3, #0
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	3123      	adds	r1, #35	@ 0x23
 80079fc:	b2d3      	uxtb	r3, r2
 80079fe:	700b      	strb	r3, [r1, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	0e02      	lsrs	r2, r0, #24
 8007a10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007a14:	0e0b      	lsrs	r3, r1, #24
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	3124      	adds	r1, #36	@ 0x24
 8007a1a:	b2d3      	uxtb	r3, r2
 8007a1c:	700b      	strb	r3, [r1, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	0c02      	lsrs	r2, r0, #16
 8007a2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007a32:	0c0b      	lsrs	r3, r1, #16
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	3125      	adds	r1, #37	@ 0x25
 8007a38:	b2d3      	uxtb	r3, r2
 8007a3a:	700b      	strb	r3, [r1, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8007a42:	f04f 0200 	mov.w	r2, #0
 8007a46:	f04f 0300 	mov.w	r3, #0
 8007a4a:	0a02      	lsrs	r2, r0, #8
 8007a4c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a50:	0a0b      	lsrs	r3, r1, #8
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	3126      	adds	r1, #38	@ 0x26
 8007a56:	b2d3      	uxtb	r3, r2
 8007a58:	700b      	strb	r3, [r1, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	3127      	adds	r1, #39	@ 0x27
 8007a64:	b2d3      	uxtb	r3, r2
 8007a66:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	f04f 0300 	mov.w	r3, #0
 8007a76:	0e0a      	lsrs	r2, r1, #24
 8007a78:	2300      	movs	r3, #0
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	3128      	adds	r1, #40	@ 0x28
 8007a7e:	b2d3      	uxtb	r3, r2
 8007a80:	700b      	strb	r3, [r1, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	0c0a      	lsrs	r2, r1, #16
 8007a92:	2300      	movs	r3, #0
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	3129      	adds	r1, #41	@ 0x29
 8007a98:	b2d3      	uxtb	r3, r2
 8007a9a:	700b      	strb	r3, [r1, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f04f 0300 	mov.w	r3, #0
 8007aaa:	0a0a      	lsrs	r2, r1, #8
 8007aac:	2300      	movs	r3, #0
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	312a      	adds	r1, #42	@ 0x2a
 8007ab2:	b2d3      	uxtb	r3, r2
 8007ab4:	700b      	strb	r3, [r1, #0]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007abc:	f04f 0200 	mov.w	r2, #0
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	000a      	movs	r2, r1
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	6839      	ldr	r1, [r7, #0]
 8007aca:	312b      	adds	r1, #43	@ 0x2b
 8007acc:	b2d3      	uxtb	r3, r2
 8007ace:	700b      	strb	r3, [r1, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	f04f 0300 	mov.w	r3, #0
 8007ade:	0e02      	lsrs	r2, r0, #24
 8007ae0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007ae4:	0e0b      	lsrs	r3, r1, #24
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	312c      	adds	r1, #44	@ 0x2c
 8007aea:	b2d3      	uxtb	r3, r2
 8007aec:	700b      	strb	r3, [r1, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	0c02      	lsrs	r2, r0, #16
 8007afe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007b02:	0c0b      	lsrs	r3, r1, #16
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	312d      	adds	r1, #45	@ 0x2d
 8007b08:	b2d3      	uxtb	r3, r2
 8007b0a:	700b      	strb	r3, [r1, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	0a02      	lsrs	r2, r0, #8
 8007b1c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007b20:	0a0b      	lsrs	r3, r1, #8
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	312e      	adds	r1, #46	@ 0x2e
 8007b26:	b2d3      	uxtb	r3, r2
 8007b28:	700b      	strb	r3, [r1, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	312f      	adds	r1, #47	@ 0x2f
 8007b34:	b2d3      	uxtb	r3, r2
 8007b36:	700b      	strb	r3, [r1, #0]

    if( ctx->is384 == 0 )
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f040 80d0 	bne.w	8007ce4 <mbedtls_sha512_finish_ret+0x8f2>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	0e0a      	lsrs	r2, r1, #24
 8007b54:	2300      	movs	r3, #0
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	3130      	adds	r1, #48	@ 0x30
 8007b5a:	b2d3      	uxtb	r3, r2
 8007b5c:	700b      	strb	r3, [r1, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	f04f 0300 	mov.w	r3, #0
 8007b6c:	0c0a      	lsrs	r2, r1, #16
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	3131      	adds	r1, #49	@ 0x31
 8007b74:	b2d3      	uxtb	r3, r2
 8007b76:	700b      	strb	r3, [r1, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007b7e:	f04f 0200 	mov.w	r2, #0
 8007b82:	f04f 0300 	mov.w	r3, #0
 8007b86:	0a0a      	lsrs	r2, r1, #8
 8007b88:	2300      	movs	r3, #0
 8007b8a:	6839      	ldr	r1, [r7, #0]
 8007b8c:	3132      	adds	r1, #50	@ 0x32
 8007b8e:	b2d3      	uxtb	r3, r2
 8007b90:	700b      	strb	r3, [r1, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	000a      	movs	r2, r1
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	3133      	adds	r1, #51	@ 0x33
 8007ba8:	b2d3      	uxtb	r3, r2
 8007baa:	700b      	strb	r3, [r1, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007bb2:	f04f 0200 	mov.w	r2, #0
 8007bb6:	f04f 0300 	mov.w	r3, #0
 8007bba:	0e02      	lsrs	r2, r0, #24
 8007bbc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007bc0:	0e0b      	lsrs	r3, r1, #24
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	3134      	adds	r1, #52	@ 0x34
 8007bc6:	b2d3      	uxtb	r3, r2
 8007bc8:	700b      	strb	r3, [r1, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007bd0:	f04f 0200 	mov.w	r2, #0
 8007bd4:	f04f 0300 	mov.w	r3, #0
 8007bd8:	0c02      	lsrs	r2, r0, #16
 8007bda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007bde:	0c0b      	lsrs	r3, r1, #16
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	3135      	adds	r1, #53	@ 0x35
 8007be4:	b2d3      	uxtb	r3, r2
 8007be6:	700b      	strb	r3, [r1, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8007bee:	f04f 0200 	mov.w	r2, #0
 8007bf2:	f04f 0300 	mov.w	r3, #0
 8007bf6:	0a02      	lsrs	r2, r0, #8
 8007bf8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007bfc:	0a0b      	lsrs	r3, r1, #8
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	3136      	adds	r1, #54	@ 0x36
 8007c02:	b2d3      	uxtb	r3, r2
 8007c04:	700b      	strb	r3, [r1, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	3137      	adds	r1, #55	@ 0x37
 8007c10:	b2d3      	uxtb	r3, r2
 8007c12:	700b      	strb	r3, [r1, #0]
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007c1a:	f04f 0200 	mov.w	r2, #0
 8007c1e:	f04f 0300 	mov.w	r3, #0
 8007c22:	0e0a      	lsrs	r2, r1, #24
 8007c24:	2300      	movs	r3, #0
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	3138      	adds	r1, #56	@ 0x38
 8007c2a:	b2d3      	uxtb	r3, r2
 8007c2c:	700b      	strb	r3, [r1, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007c34:	f04f 0200 	mov.w	r2, #0
 8007c38:	f04f 0300 	mov.w	r3, #0
 8007c3c:	0c0a      	lsrs	r2, r1, #16
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	3139      	adds	r1, #57	@ 0x39
 8007c44:	b2d3      	uxtb	r3, r2
 8007c46:	700b      	strb	r3, [r1, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	0a0a      	lsrs	r2, r1, #8
 8007c58:	2300      	movs	r3, #0
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	313a      	adds	r1, #58	@ 0x3a
 8007c5e:	b2d3      	uxtb	r3, r2
 8007c60:	700b      	strb	r3, [r1, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	f04f 0300 	mov.w	r3, #0
 8007c70:	000a      	movs	r2, r1
 8007c72:	2300      	movs	r3, #0
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	313b      	adds	r1, #59	@ 0x3b
 8007c78:	b2d3      	uxtb	r3, r2
 8007c7a:	700b      	strb	r3, [r1, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	0e02      	lsrs	r2, r0, #24
 8007c8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007c90:	0e0b      	lsrs	r3, r1, #24
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	313c      	adds	r1, #60	@ 0x3c
 8007c96:	b2d3      	uxtb	r3, r2
 8007c98:	700b      	strb	r3, [r1, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	0c02      	lsrs	r2, r0, #16
 8007caa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007cae:	0c0b      	lsrs	r3, r1, #16
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	313d      	adds	r1, #61	@ 0x3d
 8007cb4:	b2d3      	uxtb	r3, r2
 8007cb6:	700b      	strb	r3, [r1, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	0a02      	lsrs	r2, r0, #8
 8007cc8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007ccc:	0a0b      	lsrs	r3, r1, #8
 8007cce:	6839      	ldr	r1, [r7, #0]
 8007cd0:	313e      	adds	r1, #62	@ 0x3e
 8007cd2:	b2d3      	uxtb	r3, r2
 8007cd4:	700b      	strb	r3, [r1, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	313f      	adds	r1, #63	@ 0x3f
 8007ce0:	b2d3      	uxtb	r3, r2
 8007ce2:	700b      	strb	r3, [r1, #0]
    }

    return( 0 );
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3720      	adds	r7, #32
 8007cea:	46bd      	mov	sp, r7
 8007cec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08007cf0 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b0bc      	sub	sp, #240	@ 0xf0
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	607a      	str	r2, [r7, #4]
 8007cfc:	603b      	str	r3, [r7, #0]

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 8007cfe:	f107 0310 	add.w	r3, r7, #16
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fd f948 	bl	8004f98 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 8007d08:	f107 0310 	add.w	r3, r7, #16
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fd f962 	bl	8004fd8 <mbedtls_sha512_starts_ret>
 8007d14:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 8007d18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d118      	bne.n	8007d52 <mbedtls_sha512_ret+0x62>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 8007d20:	f107 0310 	add.w	r3, r7, #16
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	68f9      	ldr	r1, [r7, #12]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fad7 	bl	80072dc <mbedtls_sha512_update_ret>
 8007d2e:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 8007d32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10d      	bne.n	8007d56 <mbedtls_sha512_ret+0x66>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 8007d3a:	f107 0310 	add.w	r3, r7, #16
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7ff fb56 	bl	80073f2 <mbedtls_sha512_finish_ret>
 8007d46:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 8007d4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d4e:	2b00      	cmp	r3, #0
        goto exit;

exit:
 8007d50:	e002      	b.n	8007d58 <mbedtls_sha512_ret+0x68>
        goto exit;
 8007d52:	bf00      	nop
 8007d54:	e000      	b.n	8007d58 <mbedtls_sha512_ret+0x68>
        goto exit;
 8007d56:	bf00      	nop
    mbedtls_sha512_free( &ctx );
 8007d58:	f107 0310 	add.w	r3, r7, #16
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fd f928 	bl	8004fb2 <mbedtls_sha512_free>

    return( ret );
 8007d62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	37f0      	adds	r7, #240	@ 0xf0
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <sbrk_aligned>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4e0f      	ldr	r6, [pc, #60]	@ (8007db0 <sbrk_aligned+0x40>)
 8007d74:	460c      	mov	r4, r1
 8007d76:	6831      	ldr	r1, [r6, #0]
 8007d78:	4605      	mov	r5, r0
 8007d7a:	b911      	cbnz	r1, 8007d82 <sbrk_aligned+0x12>
 8007d7c:	f000 fada 	bl	8008334 <_sbrk_r>
 8007d80:	6030      	str	r0, [r6, #0]
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 fad5 	bl	8008334 <_sbrk_r>
 8007d8a:	1c43      	adds	r3, r0, #1
 8007d8c:	d103      	bne.n	8007d96 <sbrk_aligned+0x26>
 8007d8e:	f04f 34ff 	mov.w	r4, #4294967295
 8007d92:	4620      	mov	r0, r4
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	1cc4      	adds	r4, r0, #3
 8007d98:	f024 0403 	bic.w	r4, r4, #3
 8007d9c:	42a0      	cmp	r0, r4
 8007d9e:	d0f8      	beq.n	8007d92 <sbrk_aligned+0x22>
 8007da0:	1a21      	subs	r1, r4, r0
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fac6 	bl	8008334 <_sbrk_r>
 8007da8:	3001      	adds	r0, #1
 8007daa:	d1f2      	bne.n	8007d92 <sbrk_aligned+0x22>
 8007dac:	e7ef      	b.n	8007d8e <sbrk_aligned+0x1e>
 8007dae:	bf00      	nop
 8007db0:	20000130 	.word	0x20000130

08007db4 <_malloc_r>:
 8007db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007db8:	1ccd      	adds	r5, r1, #3
 8007dba:	f025 0503 	bic.w	r5, r5, #3
 8007dbe:	3508      	adds	r5, #8
 8007dc0:	2d0c      	cmp	r5, #12
 8007dc2:	bf38      	it	cc
 8007dc4:	250c      	movcc	r5, #12
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	4606      	mov	r6, r0
 8007dca:	db01      	blt.n	8007dd0 <_malloc_r+0x1c>
 8007dcc:	42a9      	cmp	r1, r5
 8007dce:	d904      	bls.n	8007dda <_malloc_r+0x26>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	6033      	str	r3, [r6, #0]
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007eb0 <_malloc_r+0xfc>
 8007dde:	f000 f869 	bl	8007eb4 <__malloc_lock>
 8007de2:	f8d8 3000 	ldr.w	r3, [r8]
 8007de6:	461c      	mov	r4, r3
 8007de8:	bb44      	cbnz	r4, 8007e3c <_malloc_r+0x88>
 8007dea:	4629      	mov	r1, r5
 8007dec:	4630      	mov	r0, r6
 8007dee:	f7ff ffbf 	bl	8007d70 <sbrk_aligned>
 8007df2:	1c43      	adds	r3, r0, #1
 8007df4:	4604      	mov	r4, r0
 8007df6:	d158      	bne.n	8007eaa <_malloc_r+0xf6>
 8007df8:	f8d8 4000 	ldr.w	r4, [r8]
 8007dfc:	4627      	mov	r7, r4
 8007dfe:	2f00      	cmp	r7, #0
 8007e00:	d143      	bne.n	8007e8a <_malloc_r+0xd6>
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	d04b      	beq.n	8007e9e <_malloc_r+0xea>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	4639      	mov	r1, r7
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	eb04 0903 	add.w	r9, r4, r3
 8007e10:	f000 fa90 	bl	8008334 <_sbrk_r>
 8007e14:	4581      	cmp	r9, r0
 8007e16:	d142      	bne.n	8007e9e <_malloc_r+0xea>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	1a6d      	subs	r5, r5, r1
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7ff ffa6 	bl	8007d70 <sbrk_aligned>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d03a      	beq.n	8007e9e <_malloc_r+0xea>
 8007e28:	6823      	ldr	r3, [r4, #0]
 8007e2a:	442b      	add	r3, r5
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	bb62      	cbnz	r2, 8007e90 <_malloc_r+0xdc>
 8007e36:	f8c8 7000 	str.w	r7, [r8]
 8007e3a:	e00f      	b.n	8007e5c <_malloc_r+0xa8>
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	1b52      	subs	r2, r2, r5
 8007e40:	d420      	bmi.n	8007e84 <_malloc_r+0xd0>
 8007e42:	2a0b      	cmp	r2, #11
 8007e44:	d917      	bls.n	8007e76 <_malloc_r+0xc2>
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	6025      	str	r5, [r4, #0]
 8007e4c:	bf18      	it	ne
 8007e4e:	6059      	strne	r1, [r3, #4]
 8007e50:	6863      	ldr	r3, [r4, #4]
 8007e52:	bf08      	it	eq
 8007e54:	f8c8 1000 	streq.w	r1, [r8]
 8007e58:	5162      	str	r2, [r4, r5]
 8007e5a:	604b      	str	r3, [r1, #4]
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 f82f 	bl	8007ec0 <__malloc_unlock>
 8007e62:	f104 000b 	add.w	r0, r4, #11
 8007e66:	1d23      	adds	r3, r4, #4
 8007e68:	f020 0007 	bic.w	r0, r0, #7
 8007e6c:	1ac2      	subs	r2, r0, r3
 8007e6e:	bf1c      	itt	ne
 8007e70:	1a1b      	subne	r3, r3, r0
 8007e72:	50a3      	strne	r3, [r4, r2]
 8007e74:	e7af      	b.n	8007dd6 <_malloc_r+0x22>
 8007e76:	6862      	ldr	r2, [r4, #4]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	bf0c      	ite	eq
 8007e7c:	f8c8 2000 	streq.w	r2, [r8]
 8007e80:	605a      	strne	r2, [r3, #4]
 8007e82:	e7eb      	b.n	8007e5c <_malloc_r+0xa8>
 8007e84:	4623      	mov	r3, r4
 8007e86:	6864      	ldr	r4, [r4, #4]
 8007e88:	e7ae      	b.n	8007de8 <_malloc_r+0x34>
 8007e8a:	463c      	mov	r4, r7
 8007e8c:	687f      	ldr	r7, [r7, #4]
 8007e8e:	e7b6      	b.n	8007dfe <_malloc_r+0x4a>
 8007e90:	461a      	mov	r2, r3
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d1fb      	bne.n	8007e90 <_malloc_r+0xdc>
 8007e98:	2300      	movs	r3, #0
 8007e9a:	6053      	str	r3, [r2, #4]
 8007e9c:	e7de      	b.n	8007e5c <_malloc_r+0xa8>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	6033      	str	r3, [r6, #0]
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f000 f80c 	bl	8007ec0 <__malloc_unlock>
 8007ea8:	e794      	b.n	8007dd4 <_malloc_r+0x20>
 8007eaa:	6005      	str	r5, [r0, #0]
 8007eac:	e7d6      	b.n	8007e5c <_malloc_r+0xa8>
 8007eae:	bf00      	nop
 8007eb0:	20000134 	.word	0x20000134

08007eb4 <__malloc_lock>:
 8007eb4:	4801      	ldr	r0, [pc, #4]	@ (8007ebc <__malloc_lock+0x8>)
 8007eb6:	f000 ba8a 	b.w	80083ce <__retarget_lock_acquire_recursive>
 8007eba:	bf00      	nop
 8007ebc:	20000278 	.word	0x20000278

08007ec0 <__malloc_unlock>:
 8007ec0:	4801      	ldr	r0, [pc, #4]	@ (8007ec8 <__malloc_unlock+0x8>)
 8007ec2:	f000 ba85 	b.w	80083d0 <__retarget_lock_release_recursive>
 8007ec6:	bf00      	nop
 8007ec8:	20000278 	.word	0x20000278

08007ecc <std>:
 8007ecc:	2300      	movs	r3, #0
 8007ece:	b510      	push	{r4, lr}
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8007ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007eda:	6083      	str	r3, [r0, #8]
 8007edc:	8181      	strh	r1, [r0, #12]
 8007ede:	6643      	str	r3, [r0, #100]	@ 0x64
 8007ee0:	81c2      	strh	r2, [r0, #14]
 8007ee2:	6183      	str	r3, [r0, #24]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	2208      	movs	r2, #8
 8007ee8:	305c      	adds	r0, #92	@ 0x5c
 8007eea:	f000 f9e7 	bl	80082bc <memset>
 8007eee:	4b0d      	ldr	r3, [pc, #52]	@ (8007f24 <std+0x58>)
 8007ef0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f28 <std+0x5c>)
 8007ef4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8007f2c <std+0x60>)
 8007ef8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007efa:	4b0d      	ldr	r3, [pc, #52]	@ (8007f30 <std+0x64>)
 8007efc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007efe:	4b0d      	ldr	r3, [pc, #52]	@ (8007f34 <std+0x68>)
 8007f00:	6224      	str	r4, [r4, #32]
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d006      	beq.n	8007f14 <std+0x48>
 8007f06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f0a:	4294      	cmp	r4, r2
 8007f0c:	d002      	beq.n	8007f14 <std+0x48>
 8007f0e:	33d0      	adds	r3, #208	@ 0xd0
 8007f10:	429c      	cmp	r4, r3
 8007f12:	d105      	bne.n	8007f20 <std+0x54>
 8007f14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f1c:	f000 ba56 	b.w	80083cc <__retarget_lock_init_recursive>
 8007f20:	bd10      	pop	{r4, pc}
 8007f22:	bf00      	nop
 8007f24:	0800810d 	.word	0x0800810d
 8007f28:	0800812f 	.word	0x0800812f
 8007f2c:	08008167 	.word	0x08008167
 8007f30:	0800818b 	.word	0x0800818b
 8007f34:	20000138 	.word	0x20000138

08007f38 <stdio_exit_handler>:
 8007f38:	4a02      	ldr	r2, [pc, #8]	@ (8007f44 <stdio_exit_handler+0xc>)
 8007f3a:	4903      	ldr	r1, [pc, #12]	@ (8007f48 <stdio_exit_handler+0x10>)
 8007f3c:	4803      	ldr	r0, [pc, #12]	@ (8007f4c <stdio_exit_handler+0x14>)
 8007f3e:	f000 b869 	b.w	8008014 <_fwalk_sglue>
 8007f42:	bf00      	nop
 8007f44:	20000014 	.word	0x20000014
 8007f48:	0800858d 	.word	0x0800858d
 8007f4c:	20000024 	.word	0x20000024

08007f50 <cleanup_stdio>:
 8007f50:	6841      	ldr	r1, [r0, #4]
 8007f52:	4b0c      	ldr	r3, [pc, #48]	@ (8007f84 <cleanup_stdio+0x34>)
 8007f54:	4299      	cmp	r1, r3
 8007f56:	b510      	push	{r4, lr}
 8007f58:	4604      	mov	r4, r0
 8007f5a:	d001      	beq.n	8007f60 <cleanup_stdio+0x10>
 8007f5c:	f000 fb16 	bl	800858c <_fflush_r>
 8007f60:	68a1      	ldr	r1, [r4, #8]
 8007f62:	4b09      	ldr	r3, [pc, #36]	@ (8007f88 <cleanup_stdio+0x38>)
 8007f64:	4299      	cmp	r1, r3
 8007f66:	d002      	beq.n	8007f6e <cleanup_stdio+0x1e>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fb0f 	bl	800858c <_fflush_r>
 8007f6e:	68e1      	ldr	r1, [r4, #12]
 8007f70:	4b06      	ldr	r3, [pc, #24]	@ (8007f8c <cleanup_stdio+0x3c>)
 8007f72:	4299      	cmp	r1, r3
 8007f74:	d004      	beq.n	8007f80 <cleanup_stdio+0x30>
 8007f76:	4620      	mov	r0, r4
 8007f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f7c:	f000 bb06 	b.w	800858c <_fflush_r>
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	bf00      	nop
 8007f84:	20000138 	.word	0x20000138
 8007f88:	200001a0 	.word	0x200001a0
 8007f8c:	20000208 	.word	0x20000208

08007f90 <global_stdio_init.part.0>:
 8007f90:	b510      	push	{r4, lr}
 8007f92:	4b0b      	ldr	r3, [pc, #44]	@ (8007fc0 <global_stdio_init.part.0+0x30>)
 8007f94:	4c0b      	ldr	r4, [pc, #44]	@ (8007fc4 <global_stdio_init.part.0+0x34>)
 8007f96:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc8 <global_stdio_init.part.0+0x38>)
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	2104      	movs	r1, #4
 8007fa0:	f7ff ff94 	bl	8007ecc <std>
 8007fa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fa8:	2201      	movs	r2, #1
 8007faa:	2109      	movs	r1, #9
 8007fac:	f7ff ff8e 	bl	8007ecc <std>
 8007fb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fba:	2112      	movs	r1, #18
 8007fbc:	f7ff bf86 	b.w	8007ecc <std>
 8007fc0:	20000270 	.word	0x20000270
 8007fc4:	20000138 	.word	0x20000138
 8007fc8:	08007f39 	.word	0x08007f39

08007fcc <__sfp_lock_acquire>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	@ (8007fd4 <__sfp_lock_acquire+0x8>)
 8007fce:	f000 b9fe 	b.w	80083ce <__retarget_lock_acquire_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	20000279 	.word	0x20000279

08007fd8 <__sfp_lock_release>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	@ (8007fe0 <__sfp_lock_release+0x8>)
 8007fda:	f000 b9f9 	b.w	80083d0 <__retarget_lock_release_recursive>
 8007fde:	bf00      	nop
 8007fe0:	20000279 	.word	0x20000279

08007fe4 <__sinit>:
 8007fe4:	b510      	push	{r4, lr}
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	f7ff fff0 	bl	8007fcc <__sfp_lock_acquire>
 8007fec:	6a23      	ldr	r3, [r4, #32]
 8007fee:	b11b      	cbz	r3, 8007ff8 <__sinit+0x14>
 8007ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff4:	f7ff bff0 	b.w	8007fd8 <__sfp_lock_release>
 8007ff8:	4b04      	ldr	r3, [pc, #16]	@ (800800c <__sinit+0x28>)
 8007ffa:	6223      	str	r3, [r4, #32]
 8007ffc:	4b04      	ldr	r3, [pc, #16]	@ (8008010 <__sinit+0x2c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1f5      	bne.n	8007ff0 <__sinit+0xc>
 8008004:	f7ff ffc4 	bl	8007f90 <global_stdio_init.part.0>
 8008008:	e7f2      	b.n	8007ff0 <__sinit+0xc>
 800800a:	bf00      	nop
 800800c:	08007f51 	.word	0x08007f51
 8008010:	20000270 	.word	0x20000270

08008014 <_fwalk_sglue>:
 8008014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008018:	4607      	mov	r7, r0
 800801a:	4688      	mov	r8, r1
 800801c:	4614      	mov	r4, r2
 800801e:	2600      	movs	r6, #0
 8008020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008024:	f1b9 0901 	subs.w	r9, r9, #1
 8008028:	d505      	bpl.n	8008036 <_fwalk_sglue+0x22>
 800802a:	6824      	ldr	r4, [r4, #0]
 800802c:	2c00      	cmp	r4, #0
 800802e:	d1f7      	bne.n	8008020 <_fwalk_sglue+0xc>
 8008030:	4630      	mov	r0, r6
 8008032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d907      	bls.n	800804c <_fwalk_sglue+0x38>
 800803c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008040:	3301      	adds	r3, #1
 8008042:	d003      	beq.n	800804c <_fwalk_sglue+0x38>
 8008044:	4629      	mov	r1, r5
 8008046:	4638      	mov	r0, r7
 8008048:	47c0      	blx	r8
 800804a:	4306      	orrs	r6, r0
 800804c:	3568      	adds	r5, #104	@ 0x68
 800804e:	e7e9      	b.n	8008024 <_fwalk_sglue+0x10>

08008050 <_puts_r>:
 8008050:	6a03      	ldr	r3, [r0, #32]
 8008052:	b570      	push	{r4, r5, r6, lr}
 8008054:	6884      	ldr	r4, [r0, #8]
 8008056:	4605      	mov	r5, r0
 8008058:	460e      	mov	r6, r1
 800805a:	b90b      	cbnz	r3, 8008060 <_puts_r+0x10>
 800805c:	f7ff ffc2 	bl	8007fe4 <__sinit>
 8008060:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008062:	07db      	lsls	r3, r3, #31
 8008064:	d405      	bmi.n	8008072 <_puts_r+0x22>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	0598      	lsls	r0, r3, #22
 800806a:	d402      	bmi.n	8008072 <_puts_r+0x22>
 800806c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800806e:	f000 f9ae 	bl	80083ce <__retarget_lock_acquire_recursive>
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	0719      	lsls	r1, r3, #28
 8008076:	d502      	bpl.n	800807e <_puts_r+0x2e>
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d135      	bne.n	80080ea <_puts_r+0x9a>
 800807e:	4621      	mov	r1, r4
 8008080:	4628      	mov	r0, r5
 8008082:	f000 f8c5 	bl	8008210 <__swsetup_r>
 8008086:	b380      	cbz	r0, 80080ea <_puts_r+0x9a>
 8008088:	f04f 35ff 	mov.w	r5, #4294967295
 800808c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800808e:	07da      	lsls	r2, r3, #31
 8008090:	d405      	bmi.n	800809e <_puts_r+0x4e>
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	059b      	lsls	r3, r3, #22
 8008096:	d402      	bmi.n	800809e <_puts_r+0x4e>
 8008098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800809a:	f000 f999 	bl	80083d0 <__retarget_lock_release_recursive>
 800809e:	4628      	mov	r0, r5
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	da04      	bge.n	80080b0 <_puts_r+0x60>
 80080a6:	69a2      	ldr	r2, [r4, #24]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	dc17      	bgt.n	80080dc <_puts_r+0x8c>
 80080ac:	290a      	cmp	r1, #10
 80080ae:	d015      	beq.n	80080dc <_puts_r+0x8c>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	6022      	str	r2, [r4, #0]
 80080b6:	7019      	strb	r1, [r3, #0]
 80080b8:	68a3      	ldr	r3, [r4, #8]
 80080ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080be:	3b01      	subs	r3, #1
 80080c0:	60a3      	str	r3, [r4, #8]
 80080c2:	2900      	cmp	r1, #0
 80080c4:	d1ed      	bne.n	80080a2 <_puts_r+0x52>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	da11      	bge.n	80080ee <_puts_r+0x9e>
 80080ca:	4622      	mov	r2, r4
 80080cc:	210a      	movs	r1, #10
 80080ce:	4628      	mov	r0, r5
 80080d0:	f000 f85f 	bl	8008192 <__swbuf_r>
 80080d4:	3001      	adds	r0, #1
 80080d6:	d0d7      	beq.n	8008088 <_puts_r+0x38>
 80080d8:	250a      	movs	r5, #10
 80080da:	e7d7      	b.n	800808c <_puts_r+0x3c>
 80080dc:	4622      	mov	r2, r4
 80080de:	4628      	mov	r0, r5
 80080e0:	f000 f857 	bl	8008192 <__swbuf_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	d1e7      	bne.n	80080b8 <_puts_r+0x68>
 80080e8:	e7ce      	b.n	8008088 <_puts_r+0x38>
 80080ea:	3e01      	subs	r6, #1
 80080ec:	e7e4      	b.n	80080b8 <_puts_r+0x68>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	6022      	str	r2, [r4, #0]
 80080f4:	220a      	movs	r2, #10
 80080f6:	701a      	strb	r2, [r3, #0]
 80080f8:	e7ee      	b.n	80080d8 <_puts_r+0x88>
	...

080080fc <puts>:
 80080fc:	4b02      	ldr	r3, [pc, #8]	@ (8008108 <puts+0xc>)
 80080fe:	4601      	mov	r1, r0
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	f7ff bfa5 	b.w	8008050 <_puts_r>
 8008106:	bf00      	nop
 8008108:	20000020 	.word	0x20000020

0800810c <__sread>:
 800810c:	b510      	push	{r4, lr}
 800810e:	460c      	mov	r4, r1
 8008110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008114:	f000 f8fc 	bl	8008310 <_read_r>
 8008118:	2800      	cmp	r0, #0
 800811a:	bfab      	itete	ge
 800811c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800811e:	89a3      	ldrhlt	r3, [r4, #12]
 8008120:	181b      	addge	r3, r3, r0
 8008122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008126:	bfac      	ite	ge
 8008128:	6563      	strge	r3, [r4, #84]	@ 0x54
 800812a:	81a3      	strhlt	r3, [r4, #12]
 800812c:	bd10      	pop	{r4, pc}

0800812e <__swrite>:
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	461f      	mov	r7, r3
 8008134:	898b      	ldrh	r3, [r1, #12]
 8008136:	05db      	lsls	r3, r3, #23
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
 800813c:	4616      	mov	r6, r2
 800813e:	d505      	bpl.n	800814c <__swrite+0x1e>
 8008140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008144:	2302      	movs	r3, #2
 8008146:	2200      	movs	r2, #0
 8008148:	f000 f8d0 	bl	80082ec <_lseek_r>
 800814c:	89a3      	ldrh	r3, [r4, #12]
 800814e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008156:	81a3      	strh	r3, [r4, #12]
 8008158:	4632      	mov	r2, r6
 800815a:	463b      	mov	r3, r7
 800815c:	4628      	mov	r0, r5
 800815e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008162:	f000 b8f7 	b.w	8008354 <_write_r>

08008166 <__sseek>:
 8008166:	b510      	push	{r4, lr}
 8008168:	460c      	mov	r4, r1
 800816a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800816e:	f000 f8bd 	bl	80082ec <_lseek_r>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	bf15      	itete	ne
 8008178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800817a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800817e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008182:	81a3      	strheq	r3, [r4, #12]
 8008184:	bf18      	it	ne
 8008186:	81a3      	strhne	r3, [r4, #12]
 8008188:	bd10      	pop	{r4, pc}

0800818a <__sclose>:
 800818a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818e:	f000 b89d 	b.w	80082cc <_close_r>

08008192 <__swbuf_r>:
 8008192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008194:	460e      	mov	r6, r1
 8008196:	4614      	mov	r4, r2
 8008198:	4605      	mov	r5, r0
 800819a:	b118      	cbz	r0, 80081a4 <__swbuf_r+0x12>
 800819c:	6a03      	ldr	r3, [r0, #32]
 800819e:	b90b      	cbnz	r3, 80081a4 <__swbuf_r+0x12>
 80081a0:	f7ff ff20 	bl	8007fe4 <__sinit>
 80081a4:	69a3      	ldr	r3, [r4, #24]
 80081a6:	60a3      	str	r3, [r4, #8]
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	071a      	lsls	r2, r3, #28
 80081ac:	d501      	bpl.n	80081b2 <__swbuf_r+0x20>
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	b943      	cbnz	r3, 80081c4 <__swbuf_r+0x32>
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 f82b 	bl	8008210 <__swsetup_r>
 80081ba:	b118      	cbz	r0, 80081c4 <__swbuf_r+0x32>
 80081bc:	f04f 37ff 	mov.w	r7, #4294967295
 80081c0:	4638      	mov	r0, r7
 80081c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	6922      	ldr	r2, [r4, #16]
 80081c8:	1a98      	subs	r0, r3, r2
 80081ca:	6963      	ldr	r3, [r4, #20]
 80081cc:	b2f6      	uxtb	r6, r6
 80081ce:	4283      	cmp	r3, r0
 80081d0:	4637      	mov	r7, r6
 80081d2:	dc05      	bgt.n	80081e0 <__swbuf_r+0x4e>
 80081d4:	4621      	mov	r1, r4
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f9d8 	bl	800858c <_fflush_r>
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1ed      	bne.n	80081bc <__swbuf_r+0x2a>
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	60a3      	str	r3, [r4, #8]
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	6022      	str	r2, [r4, #0]
 80081ec:	701e      	strb	r6, [r3, #0]
 80081ee:	6962      	ldr	r2, [r4, #20]
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d004      	beq.n	8008200 <__swbuf_r+0x6e>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	07db      	lsls	r3, r3, #31
 80081fa:	d5e1      	bpl.n	80081c0 <__swbuf_r+0x2e>
 80081fc:	2e0a      	cmp	r6, #10
 80081fe:	d1df      	bne.n	80081c0 <__swbuf_r+0x2e>
 8008200:	4621      	mov	r1, r4
 8008202:	4628      	mov	r0, r5
 8008204:	f000 f9c2 	bl	800858c <_fflush_r>
 8008208:	2800      	cmp	r0, #0
 800820a:	d0d9      	beq.n	80081c0 <__swbuf_r+0x2e>
 800820c:	e7d6      	b.n	80081bc <__swbuf_r+0x2a>
	...

08008210 <__swsetup_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	4b29      	ldr	r3, [pc, #164]	@ (80082b8 <__swsetup_r+0xa8>)
 8008214:	4605      	mov	r5, r0
 8008216:	6818      	ldr	r0, [r3, #0]
 8008218:	460c      	mov	r4, r1
 800821a:	b118      	cbz	r0, 8008224 <__swsetup_r+0x14>
 800821c:	6a03      	ldr	r3, [r0, #32]
 800821e:	b90b      	cbnz	r3, 8008224 <__swsetup_r+0x14>
 8008220:	f7ff fee0 	bl	8007fe4 <__sinit>
 8008224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008228:	0719      	lsls	r1, r3, #28
 800822a:	d422      	bmi.n	8008272 <__swsetup_r+0x62>
 800822c:	06da      	lsls	r2, r3, #27
 800822e:	d407      	bmi.n	8008240 <__swsetup_r+0x30>
 8008230:	2209      	movs	r2, #9
 8008232:	602a      	str	r2, [r5, #0]
 8008234:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	f04f 30ff 	mov.w	r0, #4294967295
 800823e:	e033      	b.n	80082a8 <__swsetup_r+0x98>
 8008240:	0758      	lsls	r0, r3, #29
 8008242:	d512      	bpl.n	800826a <__swsetup_r+0x5a>
 8008244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008246:	b141      	cbz	r1, 800825a <__swsetup_r+0x4a>
 8008248:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800824c:	4299      	cmp	r1, r3
 800824e:	d002      	beq.n	8008256 <__swsetup_r+0x46>
 8008250:	4628      	mov	r0, r5
 8008252:	f000 f8cd 	bl	80083f0 <_free_r>
 8008256:	2300      	movs	r3, #0
 8008258:	6363      	str	r3, [r4, #52]	@ 0x34
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008260:	81a3      	strh	r3, [r4, #12]
 8008262:	2300      	movs	r3, #0
 8008264:	6063      	str	r3, [r4, #4]
 8008266:	6923      	ldr	r3, [r4, #16]
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	f043 0308 	orr.w	r3, r3, #8
 8008270:	81a3      	strh	r3, [r4, #12]
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	b94b      	cbnz	r3, 800828a <__swsetup_r+0x7a>
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800827c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008280:	d003      	beq.n	800828a <__swsetup_r+0x7a>
 8008282:	4621      	mov	r1, r4
 8008284:	4628      	mov	r0, r5
 8008286:	f000 f9cf 	bl	8008628 <__smakebuf_r>
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	f013 0201 	ands.w	r2, r3, #1
 8008292:	d00a      	beq.n	80082aa <__swsetup_r+0x9a>
 8008294:	2200      	movs	r2, #0
 8008296:	60a2      	str	r2, [r4, #8]
 8008298:	6962      	ldr	r2, [r4, #20]
 800829a:	4252      	negs	r2, r2
 800829c:	61a2      	str	r2, [r4, #24]
 800829e:	6922      	ldr	r2, [r4, #16]
 80082a0:	b942      	cbnz	r2, 80082b4 <__swsetup_r+0xa4>
 80082a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082a6:	d1c5      	bne.n	8008234 <__swsetup_r+0x24>
 80082a8:	bd38      	pop	{r3, r4, r5, pc}
 80082aa:	0799      	lsls	r1, r3, #30
 80082ac:	bf58      	it	pl
 80082ae:	6962      	ldrpl	r2, [r4, #20]
 80082b0:	60a2      	str	r2, [r4, #8]
 80082b2:	e7f4      	b.n	800829e <__swsetup_r+0x8e>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e7f7      	b.n	80082a8 <__swsetup_r+0x98>
 80082b8:	20000020 	.word	0x20000020

080082bc <memset>:
 80082bc:	4402      	add	r2, r0
 80082be:	4603      	mov	r3, r0
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d100      	bne.n	80082c6 <memset+0xa>
 80082c4:	4770      	bx	lr
 80082c6:	f803 1b01 	strb.w	r1, [r3], #1
 80082ca:	e7f9      	b.n	80082c0 <memset+0x4>

080082cc <_close_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d06      	ldr	r5, [pc, #24]	@ (80082e8 <_close_r+0x1c>)
 80082d0:	2300      	movs	r3, #0
 80082d2:	4604      	mov	r4, r0
 80082d4:	4608      	mov	r0, r1
 80082d6:	602b      	str	r3, [r5, #0]
 80082d8:	f7f8 fcc1 	bl	8000c5e <_close>
 80082dc:	1c43      	adds	r3, r0, #1
 80082de:	d102      	bne.n	80082e6 <_close_r+0x1a>
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	b103      	cbz	r3, 80082e6 <_close_r+0x1a>
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	bd38      	pop	{r3, r4, r5, pc}
 80082e8:	20000274 	.word	0x20000274

080082ec <_lseek_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	4d07      	ldr	r5, [pc, #28]	@ (800830c <_lseek_r+0x20>)
 80082f0:	4604      	mov	r4, r0
 80082f2:	4608      	mov	r0, r1
 80082f4:	4611      	mov	r1, r2
 80082f6:	2200      	movs	r2, #0
 80082f8:	602a      	str	r2, [r5, #0]
 80082fa:	461a      	mov	r2, r3
 80082fc:	f7f8 fcd6 	bl	8000cac <_lseek>
 8008300:	1c43      	adds	r3, r0, #1
 8008302:	d102      	bne.n	800830a <_lseek_r+0x1e>
 8008304:	682b      	ldr	r3, [r5, #0]
 8008306:	b103      	cbz	r3, 800830a <_lseek_r+0x1e>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	bd38      	pop	{r3, r4, r5, pc}
 800830c:	20000274 	.word	0x20000274

08008310 <_read_r>:
 8008310:	b538      	push	{r3, r4, r5, lr}
 8008312:	4d07      	ldr	r5, [pc, #28]	@ (8008330 <_read_r+0x20>)
 8008314:	4604      	mov	r4, r0
 8008316:	4608      	mov	r0, r1
 8008318:	4611      	mov	r1, r2
 800831a:	2200      	movs	r2, #0
 800831c:	602a      	str	r2, [r5, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	f7f8 fc64 	bl	8000bec <_read>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_read_r+0x1e>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_read_r+0x1e>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000274 	.word	0x20000274

08008334 <_sbrk_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d06      	ldr	r5, [pc, #24]	@ (8008350 <_sbrk_r+0x1c>)
 8008338:	2300      	movs	r3, #0
 800833a:	4604      	mov	r4, r0
 800833c:	4608      	mov	r0, r1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	f7f8 fcc2 	bl	8000cc8 <_sbrk>
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	d102      	bne.n	800834e <_sbrk_r+0x1a>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	b103      	cbz	r3, 800834e <_sbrk_r+0x1a>
 800834c:	6023      	str	r3, [r4, #0]
 800834e:	bd38      	pop	{r3, r4, r5, pc}
 8008350:	20000274 	.word	0x20000274

08008354 <_write_r>:
 8008354:	b538      	push	{r3, r4, r5, lr}
 8008356:	4d07      	ldr	r5, [pc, #28]	@ (8008374 <_write_r+0x20>)
 8008358:	4604      	mov	r4, r0
 800835a:	4608      	mov	r0, r1
 800835c:	4611      	mov	r1, r2
 800835e:	2200      	movs	r2, #0
 8008360:	602a      	str	r2, [r5, #0]
 8008362:	461a      	mov	r2, r3
 8008364:	f7f8 fc5f 	bl	8000c26 <_write>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_write_r+0x1e>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_write_r+0x1e>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20000274 	.word	0x20000274

08008378 <__errno>:
 8008378:	4b01      	ldr	r3, [pc, #4]	@ (8008380 <__errno+0x8>)
 800837a:	6818      	ldr	r0, [r3, #0]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	20000020 	.word	0x20000020

08008384 <__libc_init_array>:
 8008384:	b570      	push	{r4, r5, r6, lr}
 8008386:	4d0d      	ldr	r5, [pc, #52]	@ (80083bc <__libc_init_array+0x38>)
 8008388:	4c0d      	ldr	r4, [pc, #52]	@ (80083c0 <__libc_init_array+0x3c>)
 800838a:	1b64      	subs	r4, r4, r5
 800838c:	10a4      	asrs	r4, r4, #2
 800838e:	2600      	movs	r6, #0
 8008390:	42a6      	cmp	r6, r4
 8008392:	d109      	bne.n	80083a8 <__libc_init_array+0x24>
 8008394:	4d0b      	ldr	r5, [pc, #44]	@ (80083c4 <__libc_init_array+0x40>)
 8008396:	4c0c      	ldr	r4, [pc, #48]	@ (80083c8 <__libc_init_array+0x44>)
 8008398:	f000 f9a4 	bl	80086e4 <_init>
 800839c:	1b64      	subs	r4, r4, r5
 800839e:	10a4      	asrs	r4, r4, #2
 80083a0:	2600      	movs	r6, #0
 80083a2:	42a6      	cmp	r6, r4
 80083a4:	d105      	bne.n	80083b2 <__libc_init_array+0x2e>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ac:	4798      	blx	r3
 80083ae:	3601      	adds	r6, #1
 80083b0:	e7ee      	b.n	8008390 <__libc_init_array+0xc>
 80083b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b6:	4798      	blx	r3
 80083b8:	3601      	adds	r6, #1
 80083ba:	e7f2      	b.n	80083a2 <__libc_init_array+0x1e>
 80083bc:	0800acb0 	.word	0x0800acb0
 80083c0:	0800acb0 	.word	0x0800acb0
 80083c4:	0800acb0 	.word	0x0800acb0
 80083c8:	0800acb4 	.word	0x0800acb4

080083cc <__retarget_lock_init_recursive>:
 80083cc:	4770      	bx	lr

080083ce <__retarget_lock_acquire_recursive>:
 80083ce:	4770      	bx	lr

080083d0 <__retarget_lock_release_recursive>:
 80083d0:	4770      	bx	lr

080083d2 <memcpy>:
 80083d2:	440a      	add	r2, r1
 80083d4:	4291      	cmp	r1, r2
 80083d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083da:	d100      	bne.n	80083de <memcpy+0xc>
 80083dc:	4770      	bx	lr
 80083de:	b510      	push	{r4, lr}
 80083e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e8:	4291      	cmp	r1, r2
 80083ea:	d1f9      	bne.n	80083e0 <memcpy+0xe>
 80083ec:	bd10      	pop	{r4, pc}
	...

080083f0 <_free_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4605      	mov	r5, r0
 80083f4:	2900      	cmp	r1, #0
 80083f6:	d041      	beq.n	800847c <_free_r+0x8c>
 80083f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083fc:	1f0c      	subs	r4, r1, #4
 80083fe:	2b00      	cmp	r3, #0
 8008400:	bfb8      	it	lt
 8008402:	18e4      	addlt	r4, r4, r3
 8008404:	f7ff fd56 	bl	8007eb4 <__malloc_lock>
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <_free_r+0x90>)
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	b933      	cbnz	r3, 800841c <_free_r+0x2c>
 800840e:	6063      	str	r3, [r4, #4]
 8008410:	6014      	str	r4, [r2, #0]
 8008412:	4628      	mov	r0, r5
 8008414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008418:	f7ff bd52 	b.w	8007ec0 <__malloc_unlock>
 800841c:	42a3      	cmp	r3, r4
 800841e:	d908      	bls.n	8008432 <_free_r+0x42>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	1821      	adds	r1, r4, r0
 8008424:	428b      	cmp	r3, r1
 8008426:	bf01      	itttt	eq
 8008428:	6819      	ldreq	r1, [r3, #0]
 800842a:	685b      	ldreq	r3, [r3, #4]
 800842c:	1809      	addeq	r1, r1, r0
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	e7ed      	b.n	800840e <_free_r+0x1e>
 8008432:	461a      	mov	r2, r3
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b10b      	cbz	r3, 800843c <_free_r+0x4c>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d9fa      	bls.n	8008432 <_free_r+0x42>
 800843c:	6811      	ldr	r1, [r2, #0]
 800843e:	1850      	adds	r0, r2, r1
 8008440:	42a0      	cmp	r0, r4
 8008442:	d10b      	bne.n	800845c <_free_r+0x6c>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	4401      	add	r1, r0
 8008448:	1850      	adds	r0, r2, r1
 800844a:	4283      	cmp	r3, r0
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	d1e0      	bne.n	8008412 <_free_r+0x22>
 8008450:	6818      	ldr	r0, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	4408      	add	r0, r1
 8008458:	6010      	str	r0, [r2, #0]
 800845a:	e7da      	b.n	8008412 <_free_r+0x22>
 800845c:	d902      	bls.n	8008464 <_free_r+0x74>
 800845e:	230c      	movs	r3, #12
 8008460:	602b      	str	r3, [r5, #0]
 8008462:	e7d6      	b.n	8008412 <_free_r+0x22>
 8008464:	6820      	ldr	r0, [r4, #0]
 8008466:	1821      	adds	r1, r4, r0
 8008468:	428b      	cmp	r3, r1
 800846a:	bf04      	itt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	bf04      	itt	eq
 8008474:	1809      	addeq	r1, r1, r0
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	6054      	str	r4, [r2, #4]
 800847a:	e7ca      	b.n	8008412 <_free_r+0x22>
 800847c:	bd38      	pop	{r3, r4, r5, pc}
 800847e:	bf00      	nop
 8008480:	20000134 	.word	0x20000134

08008484 <__sflush_r>:
 8008484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848c:	0716      	lsls	r6, r2, #28
 800848e:	4605      	mov	r5, r0
 8008490:	460c      	mov	r4, r1
 8008492:	d454      	bmi.n	800853e <__sflush_r+0xba>
 8008494:	684b      	ldr	r3, [r1, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	dc02      	bgt.n	80084a0 <__sflush_r+0x1c>
 800849a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	dd48      	ble.n	8008532 <__sflush_r+0xae>
 80084a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084a2:	2e00      	cmp	r6, #0
 80084a4:	d045      	beq.n	8008532 <__sflush_r+0xae>
 80084a6:	2300      	movs	r3, #0
 80084a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084ac:	682f      	ldr	r7, [r5, #0]
 80084ae:	6a21      	ldr	r1, [r4, #32]
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	d030      	beq.n	8008516 <__sflush_r+0x92>
 80084b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	0759      	lsls	r1, r3, #29
 80084ba:	d505      	bpl.n	80084c8 <__sflush_r+0x44>
 80084bc:	6863      	ldr	r3, [r4, #4]
 80084be:	1ad2      	subs	r2, r2, r3
 80084c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084c2:	b10b      	cbz	r3, 80084c8 <__sflush_r+0x44>
 80084c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084c6:	1ad2      	subs	r2, r2, r3
 80084c8:	2300      	movs	r3, #0
 80084ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084cc:	6a21      	ldr	r1, [r4, #32]
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b0      	blx	r6
 80084d2:	1c43      	adds	r3, r0, #1
 80084d4:	89a3      	ldrh	r3, [r4, #12]
 80084d6:	d106      	bne.n	80084e6 <__sflush_r+0x62>
 80084d8:	6829      	ldr	r1, [r5, #0]
 80084da:	291d      	cmp	r1, #29
 80084dc:	d82b      	bhi.n	8008536 <__sflush_r+0xb2>
 80084de:	4a2a      	ldr	r2, [pc, #168]	@ (8008588 <__sflush_r+0x104>)
 80084e0:	410a      	asrs	r2, r1
 80084e2:	07d6      	lsls	r6, r2, #31
 80084e4:	d427      	bmi.n	8008536 <__sflush_r+0xb2>
 80084e6:	2200      	movs	r2, #0
 80084e8:	6062      	str	r2, [r4, #4]
 80084ea:	04d9      	lsls	r1, r3, #19
 80084ec:	6922      	ldr	r2, [r4, #16]
 80084ee:	6022      	str	r2, [r4, #0]
 80084f0:	d504      	bpl.n	80084fc <__sflush_r+0x78>
 80084f2:	1c42      	adds	r2, r0, #1
 80084f4:	d101      	bne.n	80084fa <__sflush_r+0x76>
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	b903      	cbnz	r3, 80084fc <__sflush_r+0x78>
 80084fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80084fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084fe:	602f      	str	r7, [r5, #0]
 8008500:	b1b9      	cbz	r1, 8008532 <__sflush_r+0xae>
 8008502:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008506:	4299      	cmp	r1, r3
 8008508:	d002      	beq.n	8008510 <__sflush_r+0x8c>
 800850a:	4628      	mov	r0, r5
 800850c:	f7ff ff70 	bl	80083f0 <_free_r>
 8008510:	2300      	movs	r3, #0
 8008512:	6363      	str	r3, [r4, #52]	@ 0x34
 8008514:	e00d      	b.n	8008532 <__sflush_r+0xae>
 8008516:	2301      	movs	r3, #1
 8008518:	4628      	mov	r0, r5
 800851a:	47b0      	blx	r6
 800851c:	4602      	mov	r2, r0
 800851e:	1c50      	adds	r0, r2, #1
 8008520:	d1c9      	bne.n	80084b6 <__sflush_r+0x32>
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0c6      	beq.n	80084b6 <__sflush_r+0x32>
 8008528:	2b1d      	cmp	r3, #29
 800852a:	d001      	beq.n	8008530 <__sflush_r+0xac>
 800852c:	2b16      	cmp	r3, #22
 800852e:	d11e      	bne.n	800856e <__sflush_r+0xea>
 8008530:	602f      	str	r7, [r5, #0]
 8008532:	2000      	movs	r0, #0
 8008534:	e022      	b.n	800857c <__sflush_r+0xf8>
 8008536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800853a:	b21b      	sxth	r3, r3
 800853c:	e01b      	b.n	8008576 <__sflush_r+0xf2>
 800853e:	690f      	ldr	r7, [r1, #16]
 8008540:	2f00      	cmp	r7, #0
 8008542:	d0f6      	beq.n	8008532 <__sflush_r+0xae>
 8008544:	0793      	lsls	r3, r2, #30
 8008546:	680e      	ldr	r6, [r1, #0]
 8008548:	bf08      	it	eq
 800854a:	694b      	ldreq	r3, [r1, #20]
 800854c:	600f      	str	r7, [r1, #0]
 800854e:	bf18      	it	ne
 8008550:	2300      	movne	r3, #0
 8008552:	eba6 0807 	sub.w	r8, r6, r7
 8008556:	608b      	str	r3, [r1, #8]
 8008558:	f1b8 0f00 	cmp.w	r8, #0
 800855c:	dde9      	ble.n	8008532 <__sflush_r+0xae>
 800855e:	6a21      	ldr	r1, [r4, #32]
 8008560:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008562:	4643      	mov	r3, r8
 8008564:	463a      	mov	r2, r7
 8008566:	4628      	mov	r0, r5
 8008568:	47b0      	blx	r6
 800856a:	2800      	cmp	r0, #0
 800856c:	dc08      	bgt.n	8008580 <__sflush_r+0xfc>
 800856e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008576:	81a3      	strh	r3, [r4, #12]
 8008578:	f04f 30ff 	mov.w	r0, #4294967295
 800857c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008580:	4407      	add	r7, r0
 8008582:	eba8 0800 	sub.w	r8, r8, r0
 8008586:	e7e7      	b.n	8008558 <__sflush_r+0xd4>
 8008588:	dfbffffe 	.word	0xdfbffffe

0800858c <_fflush_r>:
 800858c:	b538      	push	{r3, r4, r5, lr}
 800858e:	690b      	ldr	r3, [r1, #16]
 8008590:	4605      	mov	r5, r0
 8008592:	460c      	mov	r4, r1
 8008594:	b913      	cbnz	r3, 800859c <_fflush_r+0x10>
 8008596:	2500      	movs	r5, #0
 8008598:	4628      	mov	r0, r5
 800859a:	bd38      	pop	{r3, r4, r5, pc}
 800859c:	b118      	cbz	r0, 80085a6 <_fflush_r+0x1a>
 800859e:	6a03      	ldr	r3, [r0, #32]
 80085a0:	b90b      	cbnz	r3, 80085a6 <_fflush_r+0x1a>
 80085a2:	f7ff fd1f 	bl	8007fe4 <__sinit>
 80085a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d0f3      	beq.n	8008596 <_fflush_r+0xa>
 80085ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085b0:	07d0      	lsls	r0, r2, #31
 80085b2:	d404      	bmi.n	80085be <_fflush_r+0x32>
 80085b4:	0599      	lsls	r1, r3, #22
 80085b6:	d402      	bmi.n	80085be <_fflush_r+0x32>
 80085b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085ba:	f7ff ff08 	bl	80083ce <__retarget_lock_acquire_recursive>
 80085be:	4628      	mov	r0, r5
 80085c0:	4621      	mov	r1, r4
 80085c2:	f7ff ff5f 	bl	8008484 <__sflush_r>
 80085c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085c8:	07da      	lsls	r2, r3, #31
 80085ca:	4605      	mov	r5, r0
 80085cc:	d4e4      	bmi.n	8008598 <_fflush_r+0xc>
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	059b      	lsls	r3, r3, #22
 80085d2:	d4e1      	bmi.n	8008598 <_fflush_r+0xc>
 80085d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085d6:	f7ff fefb 	bl	80083d0 <__retarget_lock_release_recursive>
 80085da:	e7dd      	b.n	8008598 <_fflush_r+0xc>

080085dc <__swhatbuf_r>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	460c      	mov	r4, r1
 80085e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085e4:	2900      	cmp	r1, #0
 80085e6:	b096      	sub	sp, #88	@ 0x58
 80085e8:	4615      	mov	r5, r2
 80085ea:	461e      	mov	r6, r3
 80085ec:	da0d      	bge.n	800860a <__swhatbuf_r+0x2e>
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	bf14      	ite	ne
 80085fa:	2340      	movne	r3, #64	@ 0x40
 80085fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008600:	2000      	movs	r0, #0
 8008602:	6031      	str	r1, [r6, #0]
 8008604:	602b      	str	r3, [r5, #0]
 8008606:	b016      	add	sp, #88	@ 0x58
 8008608:	bd70      	pop	{r4, r5, r6, pc}
 800860a:	466a      	mov	r2, sp
 800860c:	f000 f848 	bl	80086a0 <_fstat_r>
 8008610:	2800      	cmp	r0, #0
 8008612:	dbec      	blt.n	80085ee <__swhatbuf_r+0x12>
 8008614:	9901      	ldr	r1, [sp, #4]
 8008616:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800861a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800861e:	4259      	negs	r1, r3
 8008620:	4159      	adcs	r1, r3
 8008622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008626:	e7eb      	b.n	8008600 <__swhatbuf_r+0x24>

08008628 <__smakebuf_r>:
 8008628:	898b      	ldrh	r3, [r1, #12]
 800862a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800862c:	079d      	lsls	r5, r3, #30
 800862e:	4606      	mov	r6, r0
 8008630:	460c      	mov	r4, r1
 8008632:	d507      	bpl.n	8008644 <__smakebuf_r+0x1c>
 8008634:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	6123      	str	r3, [r4, #16]
 800863c:	2301      	movs	r3, #1
 800863e:	6163      	str	r3, [r4, #20]
 8008640:	b003      	add	sp, #12
 8008642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008644:	ab01      	add	r3, sp, #4
 8008646:	466a      	mov	r2, sp
 8008648:	f7ff ffc8 	bl	80085dc <__swhatbuf_r>
 800864c:	9f00      	ldr	r7, [sp, #0]
 800864e:	4605      	mov	r5, r0
 8008650:	4639      	mov	r1, r7
 8008652:	4630      	mov	r0, r6
 8008654:	f7ff fbae 	bl	8007db4 <_malloc_r>
 8008658:	b948      	cbnz	r0, 800866e <__smakebuf_r+0x46>
 800865a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800865e:	059a      	lsls	r2, r3, #22
 8008660:	d4ee      	bmi.n	8008640 <__smakebuf_r+0x18>
 8008662:	f023 0303 	bic.w	r3, r3, #3
 8008666:	f043 0302 	orr.w	r3, r3, #2
 800866a:	81a3      	strh	r3, [r4, #12]
 800866c:	e7e2      	b.n	8008634 <__smakebuf_r+0xc>
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	6020      	str	r0, [r4, #0]
 8008672:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008676:	81a3      	strh	r3, [r4, #12]
 8008678:	9b01      	ldr	r3, [sp, #4]
 800867a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800867e:	b15b      	cbz	r3, 8008698 <__smakebuf_r+0x70>
 8008680:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008684:	4630      	mov	r0, r6
 8008686:	f000 f81d 	bl	80086c4 <_isatty_r>
 800868a:	b128      	cbz	r0, 8008698 <__smakebuf_r+0x70>
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	f023 0303 	bic.w	r3, r3, #3
 8008692:	f043 0301 	orr.w	r3, r3, #1
 8008696:	81a3      	strh	r3, [r4, #12]
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	431d      	orrs	r5, r3
 800869c:	81a5      	strh	r5, [r4, #12]
 800869e:	e7cf      	b.n	8008640 <__smakebuf_r+0x18>

080086a0 <_fstat_r>:
 80086a0:	b538      	push	{r3, r4, r5, lr}
 80086a2:	4d07      	ldr	r5, [pc, #28]	@ (80086c0 <_fstat_r+0x20>)
 80086a4:	2300      	movs	r3, #0
 80086a6:	4604      	mov	r4, r0
 80086a8:	4608      	mov	r0, r1
 80086aa:	4611      	mov	r1, r2
 80086ac:	602b      	str	r3, [r5, #0]
 80086ae:	f7f8 fae2 	bl	8000c76 <_fstat>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d102      	bne.n	80086bc <_fstat_r+0x1c>
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	b103      	cbz	r3, 80086bc <_fstat_r+0x1c>
 80086ba:	6023      	str	r3, [r4, #0]
 80086bc:	bd38      	pop	{r3, r4, r5, pc}
 80086be:	bf00      	nop
 80086c0:	20000274 	.word	0x20000274

080086c4 <_isatty_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d06      	ldr	r5, [pc, #24]	@ (80086e0 <_isatty_r+0x1c>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	f7f8 fae1 	bl	8000c96 <_isatty>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_isatty_r+0x1a>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_isatty_r+0x1a>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	20000274 	.word	0x20000274

080086e4 <_init>:
 80086e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e6:	bf00      	nop
 80086e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ea:	bc08      	pop	{r3}
 80086ec:	469e      	mov	lr, r3
 80086ee:	4770      	bx	lr

080086f0 <_fini>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr
