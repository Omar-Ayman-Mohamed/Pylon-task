
Pylon_task_submission_clean_ver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002350  08005018  08005018  00006018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007368  08007368  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007368  08007368  00008368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007370  08007370  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007370  08007370  00008370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007374  08007374  00008374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007378  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000006c  080073e4  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080073e4  00009278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c049  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eab  00000000  00000000  000150e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00016f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ab  00000000  00000000  00017ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176b4  00000000  00000000  0001836b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa43  00000000  00000000  0002fa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d1ad  00000000  00000000  0003f462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc60f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a8  00000000  00000000  000cc654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000cfbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005000 	.word	0x08005000

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005000 	.word	0x08005000

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 8000586:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	  unsigned char plaintext[] = "This is a secret message!-omar says hi";
 8000588:	4b6e      	ldr	r3, [pc, #440]	@ (8000744 <main+0x1c4>)
 800058a:	f507 7437 	add.w	r4, r7, #732	@ 0x2dc
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0003 	ldmia.w	r5, {r0, r1}
 800059c:	6020      	str	r0, [r4, #0]
 800059e:	3404      	adds	r4, #4
 80005a0:	8021      	strh	r1, [r4, #0]
 80005a2:	3402      	adds	r4, #2
 80005a4:	0c0b      	lsrs	r3, r1, #16
 80005a6:	7023      	strb	r3, [r4, #0]
	    unsigned char key[32] = "0123456789abcdef0123456789abcdef"; // 256-bit key
 80005a8:	4b67      	ldr	r3, [pc, #412]	@ (8000748 <main+0x1c8>)
 80005aa:	f507 742f 	add.w	r4, r7, #700	@ 0x2bc
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    unsigned char iv[AES_BLOCK_SIZE] = "0123456789abcdef";        // 128-bit IV
 80005bc:	4b63      	ldr	r3, [pc, #396]	@ (800074c <main+0x1cc>)
 80005be:	f507 742b 	add.w	r4, r7, #684	@ 0x2ac
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    unsigned char iv_copy[AES_BLOCK_SIZE];                        // To reuse for decryption

	    // Buffers for ciphertext and decrypted text
	    unsigned char ciphertext[128];
	    unsigned char decrypted[128];
	    size_t plaintext_len = strlen((char *)plaintext);
 80005c8:	f507 7337 	add.w	r3, r7, #732	@ 0x2dc
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff fe07 	bl	80001e0 <strlen>
 80005d2:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
	    size_t padded_len = ((plaintext_len + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE; // Pad to block size
 80005d6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80005da:	330f      	adds	r3, #15
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

	    // Padding the plaintext to match block size
	    unsigned char padded_plaintext[128];
	    memcpy(padded_plaintext, plaintext, plaintext_len);
 80005e4:	f507 7137 	add.w	r1, r7, #732	@ 0x2dc
 80005e8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80005ec:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 f8ac 	bl	800474e <memcpy>
	    memset(padded_plaintext + plaintext_len, padded_len - plaintext_len, padded_len - plaintext_len); // PKCS7 padding
 80005f6:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80005fa:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 80005fe:	18d0      	adds	r0, r2, r3
 8000600:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8000604:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	4619      	mov	r1, r3
 800060c:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8000610:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	461a      	mov	r2, r3
 8000618:	f004 f80e 	bl	8004638 <memset>
	    mbedtls_aes_context aes;
	    mbedtls_aes_init(&aes);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fbbb 	bl	8002d9a <mbedtls_aes_init>

	    // Encryption
	    memcpy(iv_copy, iv, AES_BLOCK_SIZE); // Copy the IV as it will be modified during encryption
 8000624:	f507 7427 	add.w	r4, r7, #668	@ 0x29c
 8000628:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 800062c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    if (mbedtls_aes_setkey_enc(&aes, key, 256) != 0) {
 8000632:	f507 712f 	add.w	r1, r7, #700	@ 0x2bc
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fbcb 	bl	8002dd8 <mbedtls_aes_setkey_enc>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d004      	beq.n	8000652 <main+0xd2>
	        printf("Failed to set AES encryption key\n");
 8000648:	4841      	ldr	r0, [pc, #260]	@ (8000750 <main+0x1d0>)
 800064a:	f003 ff15 	bl	8004478 <puts>
	        return 1;
 800064e:	2301      	movs	r3, #1
 8000650:	e073      	b.n	800073a <main+0x1ba>
	    }

	    if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_ENCRYPT, padded_len, iv_copy, padded_plaintext, ciphertext) != 0) {
 8000652:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8000656:	1d38      	adds	r0, r7, #4
 8000658:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	4613      	mov	r3, r2
 8000666:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 800066a:	2101      	movs	r1, #1
 800066c:	f003 fc99 	bl	8003fa2 <mbedtls_aes_crypt_cbc>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d004      	beq.n	8000680 <main+0x100>
	        printf("Encryption failed\n");
 8000676:	4837      	ldr	r0, [pc, #220]	@ (8000754 <main+0x1d4>)
 8000678:	f003 fefe 	bl	8004478 <puts>
	        return 1;
 800067c:	2301      	movs	r3, #1
 800067e:	e05c      	b.n	800073a <main+0x1ba>
	    }



	    // Decryption
	    memcpy(iv_copy, iv, AES_BLOCK_SIZE); // Reset IV for decryption
 8000680:	f507 7427 	add.w	r4, r7, #668	@ 0x29c
 8000684:	f507 732b 	add.w	r3, r7, #684	@ 0x2ac
 8000688:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800068a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    if (mbedtls_aes_setkey_dec(&aes, key, 256) != 0) {
 800068e:	f507 712f 	add.w	r1, r7, #700	@ 0x2bc
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fd73 	bl	8003184 <mbedtls_aes_setkey_dec>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d004      	beq.n	80006ae <main+0x12e>
	        printf("Failed to set AES decryption key\n");
 80006a4:	482c      	ldr	r0, [pc, #176]	@ (8000758 <main+0x1d8>)
 80006a6:	f003 fee7 	bl	8004478 <puts>
	        return 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e045      	b.n	800073a <main+0x1ba>
	    }

	    if (mbedtls_aes_crypt_cbc(&aes, MBEDTLS_AES_DECRYPT, padded_len, iv_copy, ciphertext, decrypted) != 0) {
 80006ae:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80006b2:	1d38      	adds	r0, r7, #4
 80006b4:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	f507 7307 	add.w	r3, r7, #540	@ 0x21c
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	4613      	mov	r3, r2
 80006c2:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 80006c6:	2100      	movs	r1, #0
 80006c8:	f003 fc6b 	bl	8003fa2 <mbedtls_aes_crypt_cbc>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d004      	beq.n	80006dc <main+0x15c>
	        printf("Decryption failed\n");
 80006d2:	4822      	ldr	r0, [pc, #136]	@ (800075c <main+0x1dc>)
 80006d4:	f003 fed0 	bl	8004478 <puts>
	        return 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	e02e      	b.n	800073a <main+0x1ba>
	    }

	    // Remove padding
	    size_t unpadded_len = padded_len - decrypted[padded_len - 1];
 80006dc:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80006e0:	3b01      	subs	r3, #1
 80006e2:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 80006e6:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	461a      	mov	r2, r3
 80006ee:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 80006f2:	1a9b      	subs	r3, r3, r2
 80006f4:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
	    decrypted[unpadded_len] = '\0'; // Null-terminate the decrypted string
 80006f8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80006fc:	f5a3 72ba 	sub.w	r2, r3, #372	@ 0x174
 8000700:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8000704:	4413      	add	r3, r2
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]

	    printf("Decrypted text: %s\n", decrypted);
 800070a:	f507 73ce 	add.w	r3, r7, #412	@ 0x19c
 800070e:	4619      	mov	r1, r3
 8000710:	4813      	ldr	r0, [pc, #76]	@ (8000760 <main+0x1e0>)
 8000712:	f003 fe49 	bl	80043a8 <iprintf>

	    // Clean up
	    mbedtls_aes_free(&aes);
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4618      	mov	r0, r3
 800071a:	f002 fb4c 	bl	8002db6 <mbedtls_aes_free>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fae1 	bl	8000ce4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f81f 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f8d5 	bl	80008d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800072a:	f000 f87b 	bl	8000824 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800072e:	f000 f8a7 	bl	8000880 <MX_USART1_UART_Init>
  MX_MBEDTLS_Init();
 8000732:	f002 fb2b 	bl	8002d8c <MX_MBEDTLS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000736:	bf00      	nop
 8000738:	e7fd      	b.n	8000736 <main+0x1b6>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800073a:	4618      	mov	r0, r3
 800073c:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 8000740:	46bd      	mov	sp, r7
 8000742:	bdb0      	pop	{r4, r5, r7, pc}
 8000744:	0800509c 	.word	0x0800509c
 8000748:	080050c4 	.word	0x080050c4
 800074c:	080050e4 	.word	0x080050e4
 8000750:	08005018 	.word	0x08005018
 8000754:	0800503c 	.word	0x0800503c
 8000758:	08005050 	.word	0x08005050
 800075c:	08005074 	.word	0x08005074
 8000760:	08005088 	.word	0x08005088

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	@ 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	@ 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f003 ff60 	bl	8004638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b23      	ldr	r3, [pc, #140]	@ (800081c <SystemClock_Config+0xb8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	4a22      	ldr	r2, [pc, #136]	@ (800081c <SystemClock_Config+0xb8>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	@ 0x40
 8000798:	4b20      	ldr	r3, [pc, #128]	@ (800081c <SystemClock_Config+0xb8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000820 <SystemClock_Config+0xbc>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <SystemClock_Config+0xbc>)
 80007b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <SystemClock_Config+0xbc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0320 	add.w	r3, r7, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 ff61 	bl	80016a0 <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007e4:	f000 f89e 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f9c4 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800080e:	f000 f889 	bl	8000924 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	@ 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2C1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <MX_I2C1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_I2C1_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000862:	f000 fdd9 	bl	8001418 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f85a 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000088 	.word	0x20000088
 8000878:	40005400 	.word	0x40005400
 800087c:	000186a0 	.word	0x000186a0

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	@ (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f001 fb4a 	bl	8001f50 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f82f 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000dc 	.word	0x200000dc
 80008d0:	40011000 	.word	0x40011000

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b10      	ldr	r3, [pc, #64]	@ (8000920 <MX_GPIO_Init+0x4c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <MX_GPIO_Init+0x4c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_GPIO_Init+0x4c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_GPIO_Init+0x4c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a08      	ldr	r2, [pc, #32]	@ (8000920 <MX_GPIO_Init+0x4c>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_GPIO_Init+0x4c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	@ (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000944:	6453      	str	r3, [r2, #68]	@ 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	@ (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	@ 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	@ (8000a04 <HAL_I2C_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12b      	bne.n	80009fa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a17      	ldr	r2, [pc, #92]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009be:	23c0      	movs	r3, #192	@ 0xc0
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ce:	2304      	movs	r3, #4
 80009d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	@ (8000a0c <HAL_I2C_MspInit+0x8c>)
 80009da:	f000 fb99 	bl	8001110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <HAL_I2C_MspInit+0x88>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	@ 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000aa4 <HAL_UART_MspInit+0x94>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d134      	bne.n	8000a9c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a3c:	f043 0310 	orr.w	r3, r3, #16
 8000a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a42:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <HAL_UART_MspInit+0x98>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a6a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4809      	ldr	r0, [pc, #36]	@ (8000aac <HAL_UART_MspInit+0x9c>)
 8000a88:	f000 fb42 	bl	8001110 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2025      	movs	r0, #37	@ 0x25
 8000a92:	f000 fa74 	bl	8000f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a96:	2025      	movs	r0, #37	@ 0x25
 8000a98:	f000 fa8d 	bl	8000fb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f93f 	bl	8000d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <USART1_IRQHandler+0x10>)
 8000b16:	f001 fa6b 	bl	8001ff0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200000dc 	.word	0x200000dc

08000b24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e00a      	b.n	8000b4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b36:	f3af 8000 	nop.w
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf0      	blt.n	8000b36 <_read+0x12>
  }

  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b086      	sub	sp, #24
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	60f8      	str	r0, [r7, #12]
 8000b66:	60b9      	str	r1, [r7, #8]
 8000b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
 8000b6e:	e009      	b.n	8000b84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	60ba      	str	r2, [r7, #8]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf1      	blt.n	8000b70 <_write+0x12>
  }
  return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_close>:

int _close(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3714      	adds	r7, #20
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
	...

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	@ (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f003 fd60 	bl	80046f4 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	@ (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	@ (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20010000 	.word	0x20010000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	20000124 	.word	0x20000124
 8000c68:	20000278 	.word	0x20000278

08000c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	@ (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c94:	f7ff ffea 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480c      	ldr	r0, [pc, #48]	@ (8000ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c9a:	490d      	ldr	r1, [pc, #52]	@ (8000cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f003 fd1f 	bl	8004700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc2:	f7ff fc5d 	bl	8000580 <main>
  bx  lr    
 8000cc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cd4:	08007378 	.word	0x08007378
  ldr r2, =_sbss
 8000cd8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cdc:	20000278 	.word	0x20000278

08000ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce0:	e7fe      	b.n	8000ce0 <ADC_IRQHandler>
	...

08000ce4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	@ (8000d24 <HAL_Init+0x40>)
 8000cee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8000d24 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <HAL_Init+0x40>)
 8000cfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	@ (8000d24 <HAL_Init+0x40>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f92b 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f7ff fe0a 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	@ (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f943 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f90b 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	@ (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000008 	.word	0x20000008
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000128 	.word	0x20000128

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000128 	.word	0x20000128

08000dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dde:	68ba      	ldr	r2, [r7, #8]
 8000de0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	@ (8000e0c <__NVIC_SetPriorityGrouping+0x44>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <__NVIC_GetPriorityGrouping+0x18>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	0a1b      	lsrs	r3, r3, #8
 8000e1a:	f003 0307 	and.w	r3, r3, #7
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db0b      	blt.n	8000e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 021f 	and.w	r2, r3, #31
 8000e44:	4907      	ldr	r1, [pc, #28]	@ (8000e64 <__NVIC_EnableIRQ+0x38>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	095b      	lsrs	r3, r3, #5
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff29 	bl	8000dc8 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff3e 	bl	8000e10 <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ff8e 	bl	8000ebc <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff31 	bl	8000e2c <__NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffa2 	bl	8000f24 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff feda 	bl	8000db0 <HAL_GetTick>
 8000ffc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d008      	beq.n	800101c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2280      	movs	r2, #128	@ 0x80
 800100e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e052      	b.n	80010c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0216 	bic.w	r2, r2, #22
 800102a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	695a      	ldr	r2, [r3, #20]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800103a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001040:	2b00      	cmp	r3, #0
 8001042:	d103      	bne.n	800104c <HAL_DMA_Abort+0x62>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001048:	2b00      	cmp	r3, #0
 800104a:	d007      	beq.n	800105c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0208 	bic.w	r2, r2, #8
 800105a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106c:	e013      	b.n	8001096 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800106e:	f7ff fe9f 	bl	8000db0 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b05      	cmp	r3, #5
 800107a:	d90c      	bls.n	8001096 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2220      	movs	r2, #32
 8001080:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e015      	b.n	80010c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e4      	bne.n	800106e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010a8:	223f      	movs	r2, #63	@ 0x3f
 80010aa:	409a      	lsls	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2201      	movs	r2, #1
 80010b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d004      	beq.n	80010e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2280      	movs	r2, #128	@ 0x80
 80010e2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e00c      	b.n	8001102 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2205      	movs	r2, #5
 80010ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	@ 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
 800112a:	e159      	b.n	80013e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800112c:	2201      	movs	r2, #1
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	429a      	cmp	r2, r3
 8001146:	f040 8148 	bne.w	80013da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d005      	beq.n	8001162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	2b02      	cmp	r3, #2
 8001160:	d130      	bne.n	80011c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	68da      	ldr	r2, [r3, #12]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	091b      	lsrs	r3, r3, #4
 80011ae:	f003 0201 	and.w	r2, r3, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d017      	beq.n	8001200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	2203      	movs	r2, #3
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d123      	bne.n	8001254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	08da      	lsrs	r2, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3208      	adds	r2, #8
 800124e:	69b9      	ldr	r1, [r7, #24]
 8001250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0203 	and.w	r2, r3, #3
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001290:	2b00      	cmp	r3, #0
 8001292:	f000 80a2 	beq.w	80013da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b57      	ldr	r3, [pc, #348]	@ (80013f8 <HAL_GPIO_Init+0x2e8>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	4a56      	ldr	r2, [pc, #344]	@ (80013f8 <HAL_GPIO_Init+0x2e8>)
 80012a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a6:	4b54      	ldr	r3, [pc, #336]	@ (80013f8 <HAL_GPIO_Init+0x2e8>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012b2:	4a52      	ldr	r2, [pc, #328]	@ (80013fc <HAL_GPIO_Init+0x2ec>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	220f      	movs	r2, #15
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a49      	ldr	r2, [pc, #292]	@ (8001400 <HAL_GPIO_Init+0x2f0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d019      	beq.n	8001312 <HAL_GPIO_Init+0x202>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a48      	ldr	r2, [pc, #288]	@ (8001404 <HAL_GPIO_Init+0x2f4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d013      	beq.n	800130e <HAL_GPIO_Init+0x1fe>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a47      	ldr	r2, [pc, #284]	@ (8001408 <HAL_GPIO_Init+0x2f8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d00d      	beq.n	800130a <HAL_GPIO_Init+0x1fa>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a46      	ldr	r2, [pc, #280]	@ (800140c <HAL_GPIO_Init+0x2fc>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d007      	beq.n	8001306 <HAL_GPIO_Init+0x1f6>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a45      	ldr	r2, [pc, #276]	@ (8001410 <HAL_GPIO_Init+0x300>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d101      	bne.n	8001302 <HAL_GPIO_Init+0x1f2>
 80012fe:	2304      	movs	r3, #4
 8001300:	e008      	b.n	8001314 <HAL_GPIO_Init+0x204>
 8001302:	2307      	movs	r3, #7
 8001304:	e006      	b.n	8001314 <HAL_GPIO_Init+0x204>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x204>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x204>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x204>
 8001312:	2300      	movs	r3, #0
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001324:	4935      	ldr	r1, [pc, #212]	@ (80013fc <HAL_GPIO_Init+0x2ec>)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001332:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <HAL_GPIO_Init+0x304>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001356:	4a2f      	ldr	r2, [pc, #188]	@ (8001414 <HAL_GPIO_Init+0x304>)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <HAL_GPIO_Init+0x304>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001380:	4a24      	ldr	r2, [pc, #144]	@ (8001414 <HAL_GPIO_Init+0x304>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001386:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <HAL_GPIO_Init+0x304>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001414 <HAL_GPIO_Init+0x304>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <HAL_GPIO_Init+0x304>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001414 <HAL_GPIO_Init+0x304>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	f67f aea2 	bls.w	800112c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40013800 	.word	0x40013800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40013c00 	.word	0x40013c00

08001418 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e12b      	b.n	8001682 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fa9e 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2224      	movs	r2, #36	@ 0x24
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800146a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800147a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800147c:	f000 fd40 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8001480:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4a81      	ldr	r2, [pc, #516]	@ (800168c <HAL_I2C_Init+0x274>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d807      	bhi.n	800149c <HAL_I2C_Init+0x84>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4a80      	ldr	r2, [pc, #512]	@ (8001690 <HAL_I2C_Init+0x278>)
 8001490:	4293      	cmp	r3, r2
 8001492:	bf94      	ite	ls
 8001494:	2301      	movls	r3, #1
 8001496:	2300      	movhi	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	e006      	b.n	80014aa <HAL_I2C_Init+0x92>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4a7d      	ldr	r2, [pc, #500]	@ (8001694 <HAL_I2C_Init+0x27c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	bf94      	ite	ls
 80014a4:	2301      	movls	r3, #1
 80014a6:	2300      	movhi	r3, #0
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e0e7      	b.n	8001682 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4a78      	ldr	r2, [pc, #480]	@ (8001698 <HAL_I2C_Init+0x280>)
 80014b6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ba:	0c9b      	lsrs	r3, r3, #18
 80014bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a6a      	ldr	r2, [pc, #424]	@ (800168c <HAL_I2C_Init+0x274>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d802      	bhi.n	80014ec <HAL_I2C_Init+0xd4>
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	3301      	adds	r3, #1
 80014ea:	e009      	b.n	8001500 <HAL_I2C_Init+0xe8>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4a69      	ldr	r2, [pc, #420]	@ (800169c <HAL_I2C_Init+0x284>)
 80014f8:	fba2 2303 	umull	r2, r3, r2, r3
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	3301      	adds	r3, #1
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6812      	ldr	r2, [r2, #0]
 8001504:	430b      	orrs	r3, r1
 8001506:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001512:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	495c      	ldr	r1, [pc, #368]	@ (800168c <HAL_I2C_Init+0x274>)
 800151c:	428b      	cmp	r3, r1
 800151e:	d819      	bhi.n	8001554 <HAL_I2C_Init+0x13c>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1e59      	subs	r1, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fbb1 f3f3 	udiv	r3, r1, r3
 800152e:	1c59      	adds	r1, r3, #1
 8001530:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001534:	400b      	ands	r3, r1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00a      	beq.n	8001550 <HAL_I2C_Init+0x138>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1e59      	subs	r1, r3, #1
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fbb1 f3f3 	udiv	r3, r1, r3
 8001548:	3301      	adds	r3, #1
 800154a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154e:	e051      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 8001550:	2304      	movs	r3, #4
 8001552:	e04f      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d111      	bne.n	8001580 <HAL_I2C_Init+0x168>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	440b      	add	r3, r1
 800156a:	fbb0 f3f3 	udiv	r3, r0, r3
 800156e:	3301      	adds	r3, #1
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	e012      	b.n	80015a6 <HAL_I2C_Init+0x18e>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e58      	subs	r0, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6859      	ldr	r1, [r3, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	0099      	lsls	r1, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	fbb0 f3f3 	udiv	r3, r0, r3
 8001596:	3301      	adds	r3, #1
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_I2C_Init+0x196>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e022      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10e      	bne.n	80015d4 <HAL_I2C_Init+0x1bc>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1e58      	subs	r0, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6859      	ldr	r1, [r3, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	440b      	add	r3, r1
 80015c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c8:	3301      	adds	r3, #1
 80015ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015d2:	e00f      	b.n	80015f4 <HAL_I2C_Init+0x1dc>
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	1e58      	subs	r0, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6859      	ldr	r1, [r3, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	0099      	lsls	r1, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ea:	3301      	adds	r3, #1
 80015ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	6809      	ldr	r1, [r1, #0]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001622:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	6911      	ldr	r1, [r2, #16]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68d2      	ldr	r2, [r2, #12]
 800162e:	4311      	orrs	r1, r2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	430b      	orrs	r3, r1
 8001636:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2220      	movs	r2, #32
 800166e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	000186a0 	.word	0x000186a0
 8001690:	001e847f 	.word	0x001e847f
 8001694:	003d08ff 	.word	0x003d08ff
 8001698:	431bde83 	.word	0x431bde83
 800169c:	10624dd3 	.word	0x10624dd3

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e267      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d075      	beq.n	80017aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016be:	4b88      	ldr	r3, [pc, #544]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d00c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ca:	4b85      	ldr	r3, [pc, #532]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d112      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	4b82      	ldr	r3, [pc, #520]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016e2:	d10b      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4b7e      	ldr	r3, [pc, #504]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d05b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x108>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d157      	bne.n	80017a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e242      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x74>
 8001706:	4b76      	ldr	r3, [pc, #472]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a75      	ldr	r2, [pc, #468]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e01d      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b70      	ldr	r3, [pc, #448]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6f      	ldr	r2, [pc, #444]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b6d      	ldr	r3, [pc, #436]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a6c      	ldr	r2, [pc, #432]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001738:	4b69      	ldr	r3, [pc, #420]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a68      	ldr	r2, [pc, #416]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800173e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b66      	ldr	r3, [pc, #408]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a65      	ldr	r2, [pc, #404]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800174e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fb2a 	bl	8000db0 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fb26 	bl	8000db0 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	@ 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e207      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b5b      	ldr	r3, [pc, #364]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0xc0>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fb16 	bl	8000db0 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fb12 	bl	8000db0 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	@ 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1f3      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	4b51      	ldr	r3, [pc, #324]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0xe8>
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017b6:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d11c      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ce:	4b44      	ldr	r3, [pc, #272]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e1c7      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4937      	ldr	r1, [pc, #220]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	e03a      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <HAL_RCC_OscConfig+0x244>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff facb 	bl	8000db0 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fac7 	bl	8000db0 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e1a8      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4925      	ldr	r1, [pc, #148]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b24      	ldr	r3, [pc, #144]	@ (80018e4 <HAL_RCC_OscConfig+0x244>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff faaa 	bl	8000db0 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff faa6 	bl	8000db0 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e187      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4b1b      	ldr	r3, [pc, #108]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d036      	beq.n	80018f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <HAL_RCC_OscConfig+0x248>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fa8a 	bl	8000db0 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fa86 	bl	8000db0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e167      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_OscConfig+0x240>)
 80018b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x200>
 80018be:	e01b      	b.n	80018f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c0:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <HAL_RCC_OscConfig+0x248>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa73 	bl	8000db0 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	e00e      	b.n	80018ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa6f 	bl	8000db0 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d907      	bls.n	80018ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e150      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470000 	.word	0x42470000
 80018e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ec:	4b88      	ldr	r3, [pc, #544]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1ea      	bne.n	80018ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8097 	beq.w	8001a34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b81      	ldr	r3, [pc, #516]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10f      	bne.n	8001936 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	6413      	str	r3, [r2, #64]	@ 0x40
 8001926:	4b7a      	ldr	r3, [pc, #488]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001932:	2301      	movs	r3, #1
 8001934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001936:	4b77      	ldr	r3, [pc, #476]	@ (8001b14 <HAL_RCC_OscConfig+0x474>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d118      	bne.n	8001974 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001942:	4b74      	ldr	r3, [pc, #464]	@ (8001b14 <HAL_RCC_OscConfig+0x474>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a73      	ldr	r2, [pc, #460]	@ (8001b14 <HAL_RCC_OscConfig+0x474>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194e:	f7ff fa2f 	bl	8000db0 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001956:	f7ff fa2b 	bl	8000db0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e10c      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	4b6a      	ldr	r3, [pc, #424]	@ (8001b14 <HAL_RCC_OscConfig+0x474>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d106      	bne.n	800198a <HAL_RCC_OscConfig+0x2ea>
 800197c:	4b64      	ldr	r3, [pc, #400]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001980:	4a63      	ldr	r2, [pc, #396]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6713      	str	r3, [r2, #112]	@ 0x70
 8001988:	e01c      	b.n	80019c4 <HAL_RCC_OscConfig+0x324>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b05      	cmp	r3, #5
 8001990:	d10c      	bne.n	80019ac <HAL_RCC_OscConfig+0x30c>
 8001992:	4b5f      	ldr	r3, [pc, #380]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001996:	4a5e      	ldr	r2, [pc, #376]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6713      	str	r3, [r2, #112]	@ 0x70
 800199e:	4b5c      	ldr	r3, [pc, #368]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a2:	4a5b      	ldr	r2, [pc, #364]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019aa:	e00b      	b.n	80019c4 <HAL_RCC_OscConfig+0x324>
 80019ac:	4b58      	ldr	r3, [pc, #352]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b0:	4a57      	ldr	r2, [pc, #348]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80019b8:	4b55      	ldr	r3, [pc, #340]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019bc:	4a54      	ldr	r2, [pc, #336]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019be:	f023 0304 	bic.w	r3, r3, #4
 80019c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d015      	beq.n	80019f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f9f0 	bl	8000db0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff f9ec 	bl	8000db0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0cb      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ea:	4b49      	ldr	r3, [pc, #292]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0ee      	beq.n	80019d4 <HAL_RCC_OscConfig+0x334>
 80019f6:	e014      	b.n	8001a22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff f9da 	bl	8000db0 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a00:	f7ff f9d6 	bl	8000db0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0b5      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a16:	4b3e      	ldr	r3, [pc, #248]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ee      	bne.n	8001a00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a28:	4b39      	ldr	r3, [pc, #228]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	4a38      	ldr	r2, [pc, #224]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80a1 	beq.w	8001b80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a3e:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d05c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d141      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b31      	ldr	r3, [pc, #196]	@ (8001b18 <HAL_RCC_OscConfig+0x478>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff f9aa 	bl	8000db0 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f9a6 	bl	8000db0 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e087      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	019b      	lsls	r3, r3, #6
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	085b      	lsrs	r3, r3, #1
 8001a96:	3b01      	subs	r3, #1
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	491b      	ldr	r1, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCC_OscConfig+0x478>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7ff f97f 	bl	8000db0 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f97b 	bl	8000db0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e05c      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x416>
 8001ad4:	e054      	b.n	8001b80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <HAL_RCC_OscConfig+0x478>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7ff f968 	bl	8000db0 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f964 	bl	8000db0 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e045      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x470>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x444>
 8001b02:	e03d      	b.n	8001b80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e038      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40007000 	.word	0x40007000
 8001b18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_RCC_OscConfig+0x4ec>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d028      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d121      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d11a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d111      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b62:	085b      	lsrs	r3, r3, #1
 8001b64:	3b01      	subs	r3, #1
 8001b66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0cc      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b68      	ldr	r3, [pc, #416]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d90c      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b65      	ldr	r3, [pc, #404]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a58      	ldr	r2, [pc, #352]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	4a52      	ldr	r2, [pc, #328]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d044      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d119      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e06f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e067      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b37      	ldr	r3, [pc, #220]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4934      	ldr	r1, [pc, #208]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff f896 	bl	8000db0 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff f892 	bl	8000db0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e04f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d20c      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	@ (8001d48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	@ (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	@ (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fff6 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023c00 	.word	0x40023c00
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	080050f4 	.word	0x080050f4
 8001d54:	20000000 	.word	0x20000000
 8001d58:	20000004 	.word	0x20000004

08001d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d60:	b090      	sub	sp, #64	@ 0x40
 8001d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d74:	4b59      	ldr	r3, [pc, #356]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d00d      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x40>
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	f200 80a1 	bhi.w	8001ec8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0x34>
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d8e:	e09b      	b.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b53      	ldr	r3, [pc, #332]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d94:	e09b      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d96:	4b53      	ldr	r3, [pc, #332]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d9a:	e098      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da6:	4b4d      	ldr	r3, [pc, #308]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d028      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db2:	4b4a      	ldr	r3, [pc, #296]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	099b      	lsrs	r3, r3, #6
 8001db8:	2200      	movs	r2, #0
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dc8:	fb03 f201 	mul.w	r2, r3, r1
 8001dcc:	2300      	movs	r3, #0
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4a43      	ldr	r2, [pc, #268]	@ (8001ee4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001dd6:	fba0 1202 	umull	r1, r2, r0, r2
 8001dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ddc:	460a      	mov	r2, r1
 8001dde:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001de0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001de2:	4413      	add	r3, r2
 8001de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de8:	2200      	movs	r2, #0
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	61fa      	str	r2, [r7, #28]
 8001dee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001df2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001df6:	f7fe fa4b 	bl	8000290 <__aeabi_uldivmod>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e02:	e053      	b.n	8001eac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e04:	4b35      	ldr	r3, [pc, #212]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	099b      	lsrs	r3, r3, #6
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	617a      	str	r2, [r7, #20]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e16:	f04f 0b00 	mov.w	fp, #0
 8001e1a:	4652      	mov	r2, sl
 8001e1c:	465b      	mov	r3, fp
 8001e1e:	f04f 0000 	mov.w	r0, #0
 8001e22:	f04f 0100 	mov.w	r1, #0
 8001e26:	0159      	lsls	r1, r3, #5
 8001e28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e2c:	0150      	lsls	r0, r2, #5
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	ebb2 080a 	subs.w	r8, r2, sl
 8001e36:	eb63 090b 	sbc.w	r9, r3, fp
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e4e:	ebb2 0408 	subs.w	r4, r2, r8
 8001e52:	eb63 0509 	sbc.w	r5, r3, r9
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	00eb      	lsls	r3, r5, #3
 8001e60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e64:	00e2      	lsls	r2, r4, #3
 8001e66:	4614      	mov	r4, r2
 8001e68:	461d      	mov	r5, r3
 8001e6a:	eb14 030a 	adds.w	r3, r4, sl
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	eb45 030b 	adc.w	r3, r5, fp
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e82:	4629      	mov	r1, r5
 8001e84:	028b      	lsls	r3, r1, #10
 8001e86:	4621      	mov	r1, r4
 8001e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	028a      	lsls	r2, r1, #10
 8001e90:	4610      	mov	r0, r2
 8001e92:	4619      	mov	r1, r3
 8001e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e96:	2200      	movs	r2, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea0:	f7fe f9f6 	bl	8000290 <__aeabi_uldivmod>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x180>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	0c1b      	lsrs	r3, r3, #16
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ebc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ec6:	e002      	b.n	8001ece <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001eca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3740      	adds	r7, #64	@ 0x40
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	017d7840 	.word	0x017d7840

08001ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <HAL_RCC_GetHCLKFreq+0x14>)
 8001eee:	681b      	ldr	r3, [r3, #0]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f04:	f7ff fff0 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0a9b      	lsrs	r3, r3, #10
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	4903      	ldr	r1, [pc, #12]	@ (8001f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f16:	5ccb      	ldrb	r3, [r1, r3]
 8001f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	08005104 	.word	0x08005104

08001f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f2c:	f7ff ffdc 	bl	8001ee8 <HAL_RCC_GetHCLKFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	0b5b      	lsrs	r3, r3, #13
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	4903      	ldr	r1, [pc, #12]	@ (8001f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	08005104 	.word	0x08005104

08001f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e042      	b.n	8001fe8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fd4a 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	@ 0x24
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fc85 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800202e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d10f      	bne.n	8002056 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_UART_IRQHandler+0x66>
 8002042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fb69 	bl	8002726 <UART_Receive_IT>
      return;
 8002054:	e25b      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002056:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80de 	beq.w	800221c <HAL_UART_IRQHandler+0x22c>
 8002060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800206c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002070:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80d1 	beq.w	800221c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800207a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_UART_IRQHandler+0xae>
 8002086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800208a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	f043 0201 	orr.w	r2, r3, #1
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800209e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_UART_IRQHandler+0xd2>
 80020aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f043 0202 	orr.w	r2, r3, #2
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_UART_IRQHandler+0xf6>
 80020ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	f043 0204 	orr.w	r2, r3, #4
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d011      	beq.n	8002116 <HAL_UART_IRQHandler+0x126>
 80020f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d105      	bne.n	800210a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d005      	beq.n	8002116 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f043 0208 	orr.w	r2, r3, #8
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 81f2 	beq.w	8002504 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002124:	f003 0320 	and.w	r3, r3, #32
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <HAL_UART_IRQHandler+0x14e>
 800212c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002130:	f003 0320 	and.w	r3, r3, #32
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 faf4 	bl	8002726 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002148:	2b40      	cmp	r3, #64	@ 0x40
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d103      	bne.n	800216a <HAL_UART_IRQHandler+0x17a>
 8002162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002166:	2b00      	cmp	r3, #0
 8002168:	d04f      	beq.n	800220a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f9fc 	bl	8002568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800217a:	2b40      	cmp	r3, #64	@ 0x40
 800217c:	d141      	bne.n	8002202 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3314      	adds	r3, #20
 8002184:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800218c:	e853 3f00 	ldrex	r3, [r3]
 8002190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800219c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80021aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80021ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80021b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80021ba:	e841 2300 	strex	r3, r2, [r1]
 80021be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80021c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1d9      	bne.n	800217e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d013      	beq.n	80021fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	4a7e      	ldr	r2, [pc, #504]	@ (80023d0 <HAL_UART_IRQHandler+0x3e0>)
 80021d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe ff73 	bl	80010ca <HAL_DMA_Abort_IT>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d016      	beq.n	8002218 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021f4:	4610      	mov	r0, r2
 80021f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f8:	e00e      	b.n	8002218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f99e 	bl	800253c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002200:	e00a      	b.n	8002218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f99a 	bl	800253c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002208:	e006      	b.n	8002218 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f996 	bl	800253c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002216:	e175      	b.n	8002504 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	bf00      	nop
    return;
 800221a:	e173      	b.n	8002504 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002220:	2b01      	cmp	r3, #1
 8002222:	f040 814f 	bne.w	80024c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8148 	beq.w	80024c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8141 	beq.w	80024c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002262:	2b40      	cmp	r3, #64	@ 0x40
 8002264:	f040 80b6 	bne.w	80023d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002274:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8145 	beq.w	8002508 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002282:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002286:	429a      	cmp	r2, r3
 8002288:	f080 813e 	bcs.w	8002508 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002292:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800229e:	f000 8088 	beq.w	80023b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	330c      	adds	r3, #12
 80022a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022b0:	e853 3f00 	ldrex	r3, [r3]
 80022b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80022b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	330c      	adds	r3, #12
 80022ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80022ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022de:	e841 2300 	strex	r3, r2, [r1]
 80022e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1d9      	bne.n	80022a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3314      	adds	r3, #20
 80022f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022f8:	e853 3f00 	ldrex	r3, [r3]
 80022fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3314      	adds	r3, #20
 800230e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002312:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002316:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002318:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800231a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e1      	bne.n	80022ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3314      	adds	r3, #20
 8002330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002334:	e853 3f00 	ldrex	r3, [r3]
 8002338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800233a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800233c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002340:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3314      	adds	r3, #20
 800234a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800234e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002350:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002352:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002354:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002356:	e841 2300 	strex	r3, r2, [r1]
 800235a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800235c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1e3      	bne.n	800232a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	330c      	adds	r3, #12
 8002376:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002382:	f023 0310 	bic.w	r3, r3, #16
 8002386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330c      	adds	r3, #12
 8002390:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002394:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002396:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002398:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800239a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800239c:	e841 2300 	strex	r3, r2, [r1]
 80023a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80023a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1e3      	bne.n	8002370 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fe1c 	bl	8000fea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2202      	movs	r2, #2
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4619      	mov	r1, r3
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f8c1 	bl	8002550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023ce:	e09b      	b.n	8002508 <HAL_UART_IRQHandler+0x518>
 80023d0:	0800262f 	.word	0x0800262f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 808e 	beq.w	800250c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8089 	beq.w	800250c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	330c      	adds	r3, #12
 8002400:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002404:	e853 3f00 	ldrex	r3, [r3]
 8002408:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800240a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002410:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	330c      	adds	r3, #12
 800241a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800241e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002420:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002422:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002426:	e841 2300 	strex	r3, r2, [r1]
 800242a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800242c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e3      	bne.n	80023fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3314      	adds	r3, #20
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	e853 3f00 	ldrex	r3, [r3]
 8002440:	623b      	str	r3, [r7, #32]
   return(result);
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3314      	adds	r3, #20
 8002452:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002456:	633a      	str	r2, [r7, #48]	@ 0x30
 8002458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800245c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e3      	bne.n	8002432 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	330c      	adds	r3, #12
 800247e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	e853 3f00 	ldrex	r3, [r3]
 8002486:	60fb      	str	r3, [r7, #12]
   return(result);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 0310 	bic.w	r3, r3, #16
 800248e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	330c      	adds	r3, #12
 8002498:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800249c:	61fa      	str	r2, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	69b9      	ldr	r1, [r7, #24]
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	617b      	str	r3, [r7, #20]
   return(result);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e3      	bne.n	8002478 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80024b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024ba:	4619      	mov	r1, r3
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f847 	bl	8002550 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024c2:	e023      	b.n	800250c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d009      	beq.n	80024e4 <HAL_UART_IRQHandler+0x4f4>
 80024d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8ba 	bl	8002656 <UART_Transmit_IT>
    return;
 80024e2:	e014      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <HAL_UART_IRQHandler+0x51e>
 80024f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f8fa 	bl	80026f6 <UART_EndTransmit_IT>
    return;
 8002502:	e004      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
    return;
 8002504:	bf00      	nop
 8002506:	e002      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
      return;
 8002508:	bf00      	nop
 800250a:	e000      	b.n	800250e <HAL_UART_IRQHandler+0x51e>
      return;
 800250c:	bf00      	nop
  }
}
 800250e:	37e8      	adds	r7, #232	@ 0xe8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002568:	b480      	push	{r7}
 800256a:	b095      	sub	sp, #84	@ 0x54
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257a:	e853 3f00 	ldrex	r3, [r3]
 800257e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002582:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	330c      	adds	r3, #12
 800258e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002590:	643a      	str	r2, [r7, #64]	@ 0x40
 8002592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002596:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002598:	e841 2300 	strex	r3, r2, [r1]
 800259c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800259e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e5      	bne.n	8002570 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3314      	adds	r3, #20
 80025aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	e853 3f00 	ldrex	r3, [r3]
 80025b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3314      	adds	r3, #20
 80025c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025cc:	e841 2300 	strex	r3, r2, [r1]
 80025d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e5      	bne.n	80025a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d119      	bne.n	8002614 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	e853 3f00 	ldrex	r3, [r3]
 80025ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f023 0310 	bic.w	r3, r3, #16
 80025f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	330c      	adds	r3, #12
 80025fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002600:	61ba      	str	r2, [r7, #24]
 8002602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002604:	6979      	ldr	r1, [r7, #20]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	e841 2300 	strex	r3, r2, [r1]
 800260c:	613b      	str	r3, [r7, #16]
   return(result);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1e5      	bne.n	80025e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002622:	bf00      	nop
 8002624:	3754      	adds	r7, #84	@ 0x54
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff ff77 	bl	800253c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b21      	cmp	r3, #33	@ 0x21
 8002668:	d13e      	bne.n	80026e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002672:	d114      	bne.n	800269e <UART_Transmit_IT+0x48>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d110      	bne.n	800269e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002690:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	1c9a      	adds	r2, r3, #2
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	621a      	str	r2, [r3, #32]
 800269c:	e008      	b.n	80026b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6211      	str	r1, [r2, #32]
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4619      	mov	r1, r3
 80026be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10f      	bne.n	80026e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e000      	b.n	80026ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026e8:	2302      	movs	r3, #2
  }
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800270c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff fefc 	bl	8002514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b08c      	sub	sp, #48	@ 0x30
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b22      	cmp	r3, #34	@ 0x22
 8002738:	f040 80ae 	bne.w	8002898 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002744:	d117      	bne.n	8002776 <UART_Receive_IT+0x50>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d113      	bne.n	8002776 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002756:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002764:	b29a      	uxth	r2, r3
 8002766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002768:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	1c9a      	adds	r2, r3, #2
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	@ 0x28
 8002774:	e026      	b.n	80027c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002788:	d007      	beq.n	800279a <UART_Receive_IT+0x74>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <UART_Receive_IT+0x82>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a4:	701a      	strb	r2, [r3, #0]
 80027a6:	e008      	b.n	80027ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	4619      	mov	r1, r3
 80027d2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d15d      	bne.n	8002894 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0220 	bic.w	r2, r2, #32
 80027e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	2b01      	cmp	r3, #1
 800281c:	d135      	bne.n	800288a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	330c      	adds	r3, #12
 800282a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	e853 3f00 	ldrex	r3, [r3]
 8002832:	613b      	str	r3, [r7, #16]
   return(result);
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f023 0310 	bic.w	r3, r3, #16
 800283a:	627b      	str	r3, [r7, #36]	@ 0x24
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	330c      	adds	r3, #12
 8002842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002844:	623a      	str	r2, [r7, #32]
 8002846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002848:	69f9      	ldr	r1, [r7, #28]
 800284a:	6a3a      	ldr	r2, [r7, #32]
 800284c:	e841 2300 	strex	r3, r2, [r1]
 8002850:	61bb      	str	r3, [r7, #24]
   return(result);
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e5      	bne.n	8002824 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b10      	cmp	r3, #16
 8002864:	d10a      	bne.n	800287c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002880:	4619      	mov	r1, r3
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff fe64 	bl	8002550 <HAL_UARTEx_RxEventCallback>
 8002888:	e002      	b.n	8002890 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fe4c 	bl	8002528 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	e002      	b.n	800289a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3730      	adds	r7, #48	@ 0x30
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b0c0      	sub	sp, #256	@ 0x100
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c0:	68d9      	ldr	r1, [r3, #12]
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	ea40 0301 	orr.w	r3, r0, r1
 80028cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	431a      	orrs	r2, r3
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028fc:	f021 010c 	bic.w	r1, r1, #12
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800290a:	430b      	orrs	r3, r1
 800290c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291e:	6999      	ldr	r1, [r3, #24]
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	ea40 0301 	orr.w	r3, r0, r1
 800292a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b8f      	ldr	r3, [pc, #572]	@ (8002b70 <UART_SetConfig+0x2cc>)
 8002934:	429a      	cmp	r2, r3
 8002936:	d005      	beq.n	8002944 <UART_SetConfig+0xa0>
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b74 <UART_SetConfig+0x2d0>)
 8002940:	429a      	cmp	r2, r3
 8002942:	d104      	bne.n	800294e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002944:	f7ff faf0 	bl	8001f28 <HAL_RCC_GetPCLK2Freq>
 8002948:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800294c:	e003      	b.n	8002956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800294e:	f7ff fad7 	bl	8001f00 <HAL_RCC_GetPCLK1Freq>
 8002952:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002960:	f040 810c 	bne.w	8002b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800296e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002976:	4622      	mov	r2, r4
 8002978:	462b      	mov	r3, r5
 800297a:	1891      	adds	r1, r2, r2
 800297c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800297e:	415b      	adcs	r3, r3
 8002980:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002986:	4621      	mov	r1, r4
 8002988:	eb12 0801 	adds.w	r8, r2, r1
 800298c:	4629      	mov	r1, r5
 800298e:	eb43 0901 	adc.w	r9, r3, r1
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800299e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a6:	4690      	mov	r8, r2
 80029a8:	4699      	mov	r9, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	eb18 0303 	adds.w	r3, r8, r3
 80029b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029b4:	462b      	mov	r3, r5
 80029b6:	eb49 0303 	adc.w	r3, r9, r3
 80029ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029ca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029d2:	460b      	mov	r3, r1
 80029d4:	18db      	adds	r3, r3, r3
 80029d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80029d8:	4613      	mov	r3, r2
 80029da:	eb42 0303 	adc.w	r3, r2, r3
 80029de:	657b      	str	r3, [r7, #84]	@ 0x54
 80029e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029e8:	f7fd fc52 	bl	8000290 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4b61      	ldr	r3, [pc, #388]	@ (8002b78 <UART_SetConfig+0x2d4>)
 80029f2:	fba3 2302 	umull	r2, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	011c      	lsls	r4, r3, #4
 80029fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029fe:	2200      	movs	r2, #0
 8002a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a14:	415b      	adcs	r3, r3
 8002a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a22:	4649      	mov	r1, r9
 8002a24:	eb43 0b01 	adc.w	fp, r3, r1
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a3c:	4692      	mov	sl, r2
 8002a3e:	469b      	mov	fp, r3
 8002a40:	4643      	mov	r3, r8
 8002a42:	eb1a 0303 	adds.w	r3, sl, r3
 8002a46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	18db      	adds	r3, r3, r3
 8002a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a6e:	4613      	mov	r3, r2
 8002a70:	eb42 0303 	adc.w	r3, r2, r3
 8002a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a7e:	f7fd fc07 	bl	8000290 <__aeabi_uldivmod>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	4b3b      	ldr	r3, [pc, #236]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2264      	movs	r2, #100	@ 0x64
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	1acb      	subs	r3, r1, r3
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a9e:	4b36      	ldr	r3, [pc, #216]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002aac:	441c      	add	r4, r3
 8002aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	464b      	mov	r3, r9
 8002ac4:	1891      	adds	r1, r2, r2
 8002ac6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ac8:	415b      	adcs	r3, r3
 8002aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	1851      	adds	r1, r2, r1
 8002ad4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	414b      	adcs	r3, r1
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ae8:	4659      	mov	r1, fp
 8002aea:	00cb      	lsls	r3, r1, #3
 8002aec:	4651      	mov	r1, sl
 8002aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af2:	4651      	mov	r1, sl
 8002af4:	00ca      	lsls	r2, r1, #3
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	4603      	mov	r3, r0
 8002afc:	4642      	mov	r2, r8
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b04:	464b      	mov	r3, r9
 8002b06:	460a      	mov	r2, r1
 8002b08:	eb42 0303 	adc.w	r3, r2, r3
 8002b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b24:	460b      	mov	r3, r1
 8002b26:	18db      	adds	r3, r3, r3
 8002b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	eb42 0303 	adc.w	r3, r2, r3
 8002b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b3a:	f7fd fba9 	bl	8000290 <__aeabi_uldivmod>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4b0d      	ldr	r3, [pc, #52]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002b44:	fba3 1302 	umull	r1, r3, r3, r2
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	2164      	movs	r1, #100	@ 0x64
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	3332      	adds	r3, #50	@ 0x32
 8002b56:	4a08      	ldr	r2, [pc, #32]	@ (8002b78 <UART_SetConfig+0x2d4>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	f003 0207 	and.w	r2, r3, #7
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4422      	add	r2, r4
 8002b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b6c:	e106      	b.n	8002d7c <UART_SetConfig+0x4d8>
 8002b6e:	bf00      	nop
 8002b70:	40011000 	.word	0x40011000
 8002b74:	40011400 	.word	0x40011400
 8002b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b80:	2200      	movs	r2, #0
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b8e:	4642      	mov	r2, r8
 8002b90:	464b      	mov	r3, r9
 8002b92:	1891      	adds	r1, r2, r2
 8002b94:	6239      	str	r1, [r7, #32]
 8002b96:	415b      	adcs	r3, r3
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b9e:	4641      	mov	r1, r8
 8002ba0:	1854      	adds	r4, r2, r1
 8002ba2:	4649      	mov	r1, r9
 8002ba4:	eb43 0501 	adc.w	r5, r3, r1
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	00eb      	lsls	r3, r5, #3
 8002bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb6:	00e2      	lsls	r2, r4, #3
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	18e3      	adds	r3, r4, r3
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bc4:	464b      	mov	r3, r9
 8002bc6:	eb45 0303 	adc.w	r3, r5, r3
 8002bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bea:	4629      	mov	r1, r5
 8002bec:	008b      	lsls	r3, r1, #2
 8002bee:	4621      	mov	r1, r4
 8002bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	008a      	lsls	r2, r1, #2
 8002bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bfc:	f7fd fb48 	bl	8000290 <__aeabi_uldivmod>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4b60      	ldr	r3, [pc, #384]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002c06:	fba3 2302 	umull	r2, r3, r3, r2
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	011c      	lsls	r4, r3, #4
 8002c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c12:	2200      	movs	r2, #0
 8002c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c20:	4642      	mov	r2, r8
 8002c22:	464b      	mov	r3, r9
 8002c24:	1891      	adds	r1, r2, r2
 8002c26:	61b9      	str	r1, [r7, #24]
 8002c28:	415b      	adcs	r3, r3
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c30:	4641      	mov	r1, r8
 8002c32:	1851      	adds	r1, r2, r1
 8002c34:	6139      	str	r1, [r7, #16]
 8002c36:	4649      	mov	r1, r9
 8002c38:	414b      	adcs	r3, r1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c48:	4659      	mov	r1, fp
 8002c4a:	00cb      	lsls	r3, r1, #3
 8002c4c:	4651      	mov	r1, sl
 8002c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c52:	4651      	mov	r1, sl
 8002c54:	00ca      	lsls	r2, r1, #3
 8002c56:	4610      	mov	r0, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c64:	464b      	mov	r3, r9
 8002c66:	460a      	mov	r2, r1
 8002c68:	eb42 0303 	adc.w	r3, r2, r3
 8002c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c88:	4649      	mov	r1, r9
 8002c8a:	008b      	lsls	r3, r1, #2
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c92:	4641      	mov	r1, r8
 8002c94:	008a      	lsls	r2, r1, #2
 8002c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c9a:	f7fd faf9 	bl	8000290 <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4b38      	ldr	r3, [pc, #224]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8002caa:	095b      	lsrs	r3, r3, #5
 8002cac:	2264      	movs	r2, #100	@ 0x64
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	1acb      	subs	r3, r1, r3
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	3332      	adds	r3, #50	@ 0x32
 8002cb8:	4a33      	ldr	r2, [pc, #204]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002cba:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cc4:	441c      	add	r4, r3
 8002cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cca:	2200      	movs	r2, #0
 8002ccc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cce:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	1891      	adds	r1, r2, r2
 8002cda:	60b9      	str	r1, [r7, #8]
 8002cdc:	415b      	adcs	r3, r3
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	1851      	adds	r1, r2, r1
 8002ce8:	6039      	str	r1, [r7, #0]
 8002cea:	4649      	mov	r1, r9
 8002cec:	414b      	adcs	r3, r1
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	f04f 0300 	mov.w	r3, #0
 8002cf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cfc:	4659      	mov	r1, fp
 8002cfe:	00cb      	lsls	r3, r1, #3
 8002d00:	4651      	mov	r1, sl
 8002d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d06:	4651      	mov	r1, sl
 8002d08:	00ca      	lsls	r2, r1, #3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4642      	mov	r2, r8
 8002d12:	189b      	adds	r3, r3, r2
 8002d14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d16:	464b      	mov	r3, r9
 8002d18:	460a      	mov	r2, r1
 8002d1a:	eb42 0303 	adc.w	r3, r2, r3
 8002d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d38:	4649      	mov	r1, r9
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d42:	4641      	mov	r1, r8
 8002d44:	008a      	lsls	r2, r1, #2
 8002d46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d4a:	f7fd faa1 	bl	8000290 <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4b0d      	ldr	r3, [pc, #52]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002d54:	fba3 1302 	umull	r1, r3, r3, r2
 8002d58:	095b      	lsrs	r3, r3, #5
 8002d5a:	2164      	movs	r1, #100	@ 0x64
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	3332      	adds	r3, #50	@ 0x32
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <UART_SetConfig+0x4e4>)
 8002d68:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6c:	095b      	lsrs	r3, r3, #5
 8002d6e:	f003 020f 	and.w	r2, r3, #15
 8002d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4422      	add	r2, r4
 8002d7a:	609a      	str	r2, [r3, #8]
}
 8002d7c:	bf00      	nop
 8002d7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d82:	46bd      	mov	sp, r7
 8002d84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d88:	51eb851f 	.word	0x51eb851f

08002d8c <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8002da2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002da6:	2100      	movs	r1, #0
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f001 fc45 	bl	8004638 <memset>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8002dc4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f001 f96b 	bl	80040a4 <mbedtls_platform_zeroize>
 8002dce:	e000      	b.n	8002dd2 <mbedtls_aes_free+0x1c>
        return;
 8002dd0:	bf00      	nop
}
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dea:	d012      	beq.n	8002e12 <mbedtls_aes_setkey_enc+0x3a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002df2:	d812      	bhi.n	8002e1a <mbedtls_aes_setkey_enc+0x42>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b80      	cmp	r3, #128	@ 0x80
 8002df8:	d003      	beq.n	8002e02 <mbedtls_aes_setkey_enc+0x2a>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2bc0      	cmp	r3, #192	@ 0xc0
 8002dfe:	d004      	beq.n	8002e0a <mbedtls_aes_setkey_enc+0x32>
 8002e00:	e00b      	b.n	8002e1a <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	220a      	movs	r2, #10
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e00a      	b.n	8002e20 <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	220c      	movs	r2, #12
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e006      	b.n	8002e20 <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	220e      	movs	r2, #14
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	e002      	b.n	8002e20 <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8002e1a:	f06f 031f 	mvn.w	r3, #31
 8002e1e:	e1a7      	b.n	8003170 <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3308      	adds	r3, #8
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e027      	b.n	8002e82 <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4413      	add	r3, r2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	3301      	adds	r3, #1
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	4413      	add	r3, r2
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	ea41 0203 	orr.w	r2, r1, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	440b      	add	r3, r1
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	ea42 0103 	orr.w	r1, r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3303      	adds	r3, #3
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	061a      	lsls	r2, r3, #24
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	6938      	ldr	r0, [r7, #16]
 8002e76:	4403      	add	r3, r0
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d3d2      	bcc.n	8002e32 <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b0e      	cmp	r3, #14
 8002e92:	f000 80ca 	beq.w	800302a <mbedtls_aes_setkey_enc+0x252>
 8002e96:	2b0e      	cmp	r3, #14
 8002e98:	f300 8169 	bgt.w	800316e <mbedtls_aes_setkey_enc+0x396>
 8002e9c:	2b0a      	cmp	r3, #10
 8002e9e:	d002      	beq.n	8002ea6 <mbedtls_aes_setkey_enc+0xce>
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	d057      	beq.n	8002f54 <mbedtls_aes_setkey_enc+0x17c>
 8002ea4:	e163      	b.n	800316e <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e04f      	b.n	8002f4c <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	495f      	ldr	r1, [pc, #380]	@ (8003030 <mbedtls_aes_setkey_enc+0x258>)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002eb8:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	320c      	adds	r2, #12
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	0a12      	lsrs	r2, r2, #8
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	495b      	ldr	r1, [pc, #364]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002ec6:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8002ec8:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	4957      	ldr	r1, [pc, #348]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002eda:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	330c      	adds	r3, #12
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0e1b      	lsrs	r3, r3, #24
 8002ee4:	4953      	ldr	r1, [pc, #332]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8002eea:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	330c      	adds	r3, #12
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4a4f      	ldr	r2, [pc, #316]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002f00:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8002f02:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3304      	adds	r3, #4
 8002f08:	6819      	ldr	r1, [r3, #0]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	3310      	adds	r3, #16
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	3314      	adds	r3, #20
 8002f14:	404a      	eors	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	3314      	adds	r3, #20
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	3318      	adds	r3, #24
 8002f28:	404a      	eors	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	3318      	adds	r3, #24
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	331c      	adds	r3, #28
 8002f3c:	404a      	eors	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	3310      	adds	r3, #16
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	d9ac      	bls.n	8002eac <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 8002f52:	e10c      	b.n	800316e <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	e063      	b.n	8003022 <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4934      	ldr	r1, [pc, #208]	@ (8003030 <mbedtls_aes_setkey_enc+0x258>)
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f66:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	3214      	adds	r2, #20
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	0a12      	lsrs	r2, r2, #8
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	4930      	ldr	r1, [pc, #192]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002f74:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8002f76:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	3314      	adds	r3, #20
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	492c      	ldr	r1, [pc, #176]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002f84:	5ccb      	ldrb	r3, [r1, r3]
 8002f86:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8002f88:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	0e1b      	lsrs	r3, r3, #24
 8002f92:	4928      	ldr	r1, [pc, #160]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002f94:	5ccb      	ldrb	r3, [r1, r3]
 8002f96:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8002f98:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	3314      	adds	r3, #20
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	4a23      	ldr	r2, [pc, #140]	@ (8003034 <mbedtls_aes_setkey_enc+0x25c>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8002fae:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8002fb0:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	3318      	adds	r3, #24
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	331c      	adds	r3, #28
 8002fc2:	404a      	eors	r2, r1
 8002fc4:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	3308      	adds	r3, #8
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	331c      	adds	r3, #28
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	3320      	adds	r3, #32
 8002fd6:	404a      	eors	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	3324      	adds	r3, #36	@ 0x24
 8002fea:	404a      	eors	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3310      	adds	r3, #16
 8002ff2:	6819      	ldr	r1, [r3, #0]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	3324      	adds	r3, #36	@ 0x24
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	3328      	adds	r3, #40	@ 0x28
 8002ffe:	404a      	eors	r2, r1
 8003000:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	3314      	adds	r3, #20
 8003006:	6819      	ldr	r1, [r3, #0]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3328      	adds	r3, #40	@ 0x28
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	332c      	adds	r3, #44	@ 0x2c
 8003012:	404a      	eors	r2, r1
 8003014:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	3301      	adds	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	3318      	adds	r3, #24
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b07      	cmp	r3, #7
 8003026:	d998      	bls.n	8002f5a <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 8003028:	e0a1      	b.n	800316e <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e099      	b.n	8003164 <mbedtls_aes_setkey_enc+0x38c>
 8003030:	0800730c 	.word	0x0800730c
 8003034:	0800510c 	.word	0x0800510c
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	494f      	ldr	r1, [pc, #316]	@ (800317c <mbedtls_aes_setkey_enc+0x3a4>)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003044:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	321c      	adds	r2, #28
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	0a12      	lsrs	r2, r2, #8
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	494b      	ldr	r1, [pc, #300]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 8003052:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8003054:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	331c      	adds	r3, #28
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4947      	ldr	r1, [pc, #284]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 8003062:	5ccb      	ldrb	r3, [r1, r3]
 8003064:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003066:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	331c      	adds	r3, #28
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0e1b      	lsrs	r3, r3, #24
 8003070:	4943      	ldr	r1, [pc, #268]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003076:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	331c      	adds	r3, #28
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	4a3f      	ldr	r2, [pc, #252]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 800308c:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800308e:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3304      	adds	r3, #4
 8003094:	6819      	ldr	r1, [r3, #0]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3320      	adds	r3, #32
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	3324      	adds	r3, #36	@ 0x24
 80030a0:	404a      	eors	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	3308      	adds	r3, #8
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	3324      	adds	r3, #36	@ 0x24
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	3328      	adds	r3, #40	@ 0x28
 80030b4:	404a      	eors	r2, r1
 80030b6:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	330c      	adds	r3, #12
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3328      	adds	r3, #40	@ 0x28
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	332c      	adds	r3, #44	@ 0x2c
 80030c8:	404a      	eors	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	3310      	adds	r3, #16
 80030d0:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	322c      	adds	r2, #44	@ 0x2c
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	4929      	ldr	r1, [pc, #164]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 80030dc:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 80030de:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	332c      	adds	r3, #44	@ 0x2c
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	4925      	ldr	r1, [pc, #148]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 80030ec:	5ccb      	ldrb	r3, [r1, r3]
 80030ee:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80030f0:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	332c      	adds	r3, #44	@ 0x2c
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0c1b      	lsrs	r3, r3, #16
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4920      	ldr	r1, [pc, #128]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8003102:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	332c      	adds	r3, #44	@ 0x2c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0e1b      	lsrs	r3, r3, #24
 800310e:	4a1c      	ldr	r2, [pc, #112]	@ (8003180 <mbedtls_aes_setkey_enc+0x3a8>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003118:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 800311a:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	3314      	adds	r3, #20
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3330      	adds	r3, #48	@ 0x30
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	3334      	adds	r3, #52	@ 0x34
 800312c:	404a      	eors	r2, r1
 800312e:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3318      	adds	r3, #24
 8003134:	6819      	ldr	r1, [r3, #0]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	3334      	adds	r3, #52	@ 0x34
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	3338      	adds	r3, #56	@ 0x38
 8003140:	404a      	eors	r2, r1
 8003142:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	331c      	adds	r3, #28
 8003148:	6819      	ldr	r1, [r3, #0]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3338      	adds	r3, #56	@ 0x38
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	333c      	adds	r3, #60	@ 0x3c
 8003154:	404a      	eors	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	3320      	adds	r3, #32
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b06      	cmp	r3, #6
 8003168:	f67f af66 	bls.w	8003038 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 800316c:	bf00      	nop
    }

    return( 0 );
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	0800730c 	.word	0x0800730c
 8003180:	0800510c 	.word	0x0800510c

08003184 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b0d0      	sub	sp, #320	@ 0x140
 8003188:	af00      	add	r7, sp, #0
 800318a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800318e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003192:	6018      	str	r0, [r3, #0]
 8003194:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003198:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800319c:	6019      	str	r1, [r3, #0]
 800319e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80031a6:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fdf4 	bl	8002d9a <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 80031b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3308      	adds	r3, #8
 80031be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80031c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80031d0:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80031d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031d6:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80031da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80031de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80031e2:	f107 0014 	add.w	r0, r7, #20
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	f7ff fdf5 	bl	8002dd8 <mbedtls_aes_setkey_enc>
 80031ee:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80031f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f040 80dd 	bne.w	80033b6 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 80031fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003200:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800320a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 8003212:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003216:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003220:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	4413      	add	r3, r2
 800322a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 800322e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003232:	1d13      	adds	r3, r2, #4
 8003234:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003238:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800323c:	1d19      	adds	r1, r3, #4
 800323e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003246:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800324a:	1d13      	adds	r3, r2, #4
 800324c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003250:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003254:	1d19      	adds	r1, r3, #4
 8003256:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800325e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003262:	1d13      	adds	r3, r2, #4
 8003264:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003268:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800326c:	1d19      	adds	r1, r3, #4
 800326e:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003276:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800327a:	1d13      	adds	r3, r2, #4
 800327c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003280:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003284:	1d19      	adds	r1, r3, #4
 8003286:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800328e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003292:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	3b01      	subs	r3, #1
 800329c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80032a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032a4:	3b20      	subs	r3, #32
 80032a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80032aa:	e04f      	b.n	800334c <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80032b2:	e03d      	b.n	8003330 <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80032b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	4a44      	ldr	r2, [pc, #272]	@ (80033d0 <mbedtls_aes_setkey_dec+0x24c>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b44      	ldr	r3, [pc, #272]	@ (80033d4 <mbedtls_aes_setkey_dec+0x250>)
 80032c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80032c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	493f      	ldr	r1, [pc, #252]	@ (80033d0 <mbedtls_aes_setkey_dec+0x24c>)
 80032d4:	5ccb      	ldrb	r3, [r1, r3]
 80032d6:	4619      	mov	r1, r3
 80032d8:	4b3f      	ldr	r3, [pc, #252]	@ (80033d8 <mbedtls_aes_setkey_dec+0x254>)
 80032da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80032de:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80032e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	0c1b      	lsrs	r3, r3, #16
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	4939      	ldr	r1, [pc, #228]	@ (80033d0 <mbedtls_aes_setkey_dec+0x24c>)
 80032ec:	5ccb      	ldrb	r3, [r1, r3]
 80032ee:	4619      	mov	r1, r3
 80032f0:	4b3a      	ldr	r3, [pc, #232]	@ (80033dc <mbedtls_aes_setkey_dec+0x258>)
 80032f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80032f6:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80032fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0e1b      	lsrs	r3, r3, #24
 8003302:	4a33      	ldr	r2, [pc, #204]	@ (80033d0 <mbedtls_aes_setkey_dec+0x24c>)
 8003304:	5cd3      	ldrb	r3, [r2, r3]
 8003306:	461a      	mov	r2, r3
 8003308:	4b35      	ldr	r3, [pc, #212]	@ (80033e0 <mbedtls_aes_setkey_dec+0x25c>)
 800330a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800330e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003312:	1d18      	adds	r0, r3, #4
 8003314:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003318:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800331a:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 800331c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003320:	3301      	adds	r3, #1
 8003322:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003326:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800332a:	3304      	adds	r3, #4
 800332c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003330:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003334:	2b03      	cmp	r3, #3
 8003336:	ddbd      	ble.n	80032b4 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8003338:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800333c:	3b01      	subs	r3, #1
 800333e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003342:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003346:	3b20      	subs	r3, #32
 8003348:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800334c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003350:	2b00      	cmp	r3, #0
 8003352:	dcab      	bgt.n	80032ac <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8003354:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003358:	1d13      	adds	r3, r2, #4
 800335a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800335e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003362:	1d19      	adds	r1, r3, #4
 8003364:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003368:	6812      	ldr	r2, [r2, #0]
 800336a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800336c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003370:	1d13      	adds	r3, r2, #4
 8003372:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003376:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800337a:	1d19      	adds	r1, r3, #4
 800337c:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003384:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003388:	1d13      	adds	r3, r2, #4
 800338a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800338e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003392:	1d19      	adds	r1, r3, #4
 8003394:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800339c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80033a0:	1d13      	adds	r3, r2, #4
 80033a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80033a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80033aa:	1d19      	adds	r1, r3, #4
 80033ac:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e000      	b.n	80033b8 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 80033b6:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fcfa 	bl	8002db6 <mbedtls_aes_free>

    return( ret );
 80033c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	0800510c 	.word	0x0800510c
 80033d4:	0800630c 	.word	0x0800630c
 80033d8:	0800670c 	.word	0x0800670c
 80033dc:	08006b0c 	.word	0x08006b0c
 80033e0:	08006f0c 	.word	0x08006f0c

080033e4 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80033e4:	b480      	push	{r7}
 80033e6:	b08f      	sub	sp, #60	@ 0x3c
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3301      	adds	r3, #1
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	431a      	orrs	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	3302      	adds	r3, #2
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	431a      	orrs	r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3303      	adds	r3, #3
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	061b      	lsls	r3, r3, #24
 8003418:	4313      	orrs	r3, r2
 800341a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	633a      	str	r2, [r7, #48]	@ 0x30
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003426:	4053      	eors	r3, r2
 8003428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3304      	adds	r3, #4
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	3305      	adds	r3, #5
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	431a      	orrs	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	3306      	adds	r3, #6
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	431a      	orrs	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3307      	adds	r3, #7
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	4313      	orrs	r3, r2
 8003450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	1d1a      	adds	r2, r3, #4
 8003456:	633a      	str	r2, [r7, #48]	@ 0x30
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800345c:	4053      	eors	r3, r2
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3308      	adds	r3, #8
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	3309      	adds	r3, #9
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	431a      	orrs	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	330a      	adds	r3, #10
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	431a      	orrs	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	330b      	adds	r3, #11
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	061b      	lsls	r3, r3, #24
 8003484:	4313      	orrs	r3, r2
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
 8003488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800348a:	1d1a      	adds	r2, r3, #4
 800348c:	633a      	str	r2, [r7, #48]	@ 0x30
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003492:	4053      	eors	r3, r2
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	330c      	adds	r3, #12
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	330d      	adds	r3, #13
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	431a      	orrs	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	330e      	adds	r3, #14
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	431a      	orrs	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	330f      	adds	r3, #15
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	4313      	orrs	r3, r2
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	1d1a      	adds	r2, r3, #4
 80034c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	4053      	eors	r3, r2
 80034ca:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	105b      	asrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d6:	e0fa      	b.n	80036ce <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	1d1a      	adds	r2, r3, #4
 80034dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	49ab      	ldr	r1, [pc, #684]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 80034e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034ea:	405a      	eors	r2, r3
 80034ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ee:	0a1b      	lsrs	r3, r3, #8
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	49a9      	ldr	r1, [pc, #676]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 80034f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034f8:	405a      	eors	r2, r3
 80034fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	49a6      	ldr	r1, [pc, #664]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003502:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003506:	405a      	eors	r2, r3
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	0e1b      	lsrs	r3, r3, #24
 800350c:	49a4      	ldr	r1, [pc, #656]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 800350e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003512:	4053      	eors	r3, r2
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003518:	1d1a      	adds	r2, r3, #4
 800351a:	633a      	str	r2, [r7, #48]	@ 0x30
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003520:	b2db      	uxtb	r3, r3
 8003522:	499c      	ldr	r1, [pc, #624]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003524:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003528:	405a      	eors	r2, r3
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	b2db      	uxtb	r3, r3
 8003530:	4999      	ldr	r1, [pc, #612]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003532:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003536:	405a      	eors	r2, r3
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4997      	ldr	r1, [pc, #604]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003540:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003544:	405a      	eors	r2, r3
 8003546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003548:	0e1b      	lsrs	r3, r3, #24
 800354a:	4995      	ldr	r1, [pc, #596]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 800354c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003550:	4053      	eors	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003556:	1d1a      	adds	r2, r3, #4
 8003558:	633a      	str	r2, [r7, #48]	@ 0x30
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800355e:	b2db      	uxtb	r3, r3
 8003560:	498c      	ldr	r1, [pc, #560]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003562:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003566:	405a      	eors	r2, r3
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	b2db      	uxtb	r3, r3
 800356e:	498a      	ldr	r1, [pc, #552]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003570:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003574:	405a      	eors	r2, r3
 8003576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	b2db      	uxtb	r3, r3
 800357c:	4987      	ldr	r1, [pc, #540]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 800357e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003582:	405a      	eors	r2, r3
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	0e1b      	lsrs	r3, r3, #24
 8003588:	4985      	ldr	r1, [pc, #532]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 800358a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800358e:	4053      	eors	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	633a      	str	r2, [r7, #48]	@ 0x30
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	497d      	ldr	r1, [pc, #500]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 80035a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035a4:	405a      	eors	r2, r3
 80035a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a8:	0a1b      	lsrs	r3, r3, #8
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	497a      	ldr	r1, [pc, #488]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 80035ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035b2:	405a      	eors	r2, r3
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	0c1b      	lsrs	r3, r3, #16
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4978      	ldr	r1, [pc, #480]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 80035bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035c0:	405a      	eors	r2, r3
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	0e1b      	lsrs	r3, r3, #24
 80035c6:	4976      	ldr	r1, [pc, #472]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 80035c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035cc:	4053      	eors	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80035d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d2:	1d1a      	adds	r2, r3, #4
 80035d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	496d      	ldr	r1, [pc, #436]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 80035de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035e2:	405a      	eors	r2, r3
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	496b      	ldr	r1, [pc, #428]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 80035ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035f0:	405a      	eors	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	4968      	ldr	r1, [pc, #416]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 80035fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035fe:	405a      	eors	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	0e1b      	lsrs	r3, r3, #24
 8003604:	4966      	ldr	r1, [pc, #408]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003606:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800360a:	4053      	eors	r3, r2
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	1d1a      	adds	r2, r3, #4
 8003612:	633a      	str	r2, [r7, #48]	@ 0x30
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	495e      	ldr	r1, [pc, #376]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 800361c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003620:	405a      	eors	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	b2db      	uxtb	r3, r3
 8003628:	495b      	ldr	r1, [pc, #364]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 800362a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800362e:	405a      	eors	r2, r3
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4959      	ldr	r1, [pc, #356]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003638:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800363c:	405a      	eors	r2, r3
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	0e1b      	lsrs	r3, r3, #24
 8003642:	4957      	ldr	r1, [pc, #348]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003644:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003648:	4053      	eors	r3, r2
 800364a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800364c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364e:	1d1a      	adds	r2, r3, #4
 8003650:	633a      	str	r2, [r7, #48]	@ 0x30
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	494e      	ldr	r1, [pc, #312]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 800365a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800365e:	405a      	eors	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	b2db      	uxtb	r3, r3
 8003666:	494c      	ldr	r1, [pc, #304]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003668:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800366c:	405a      	eors	r2, r3
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4949      	ldr	r1, [pc, #292]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003676:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800367a:	405a      	eors	r2, r3
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	0e1b      	lsrs	r3, r3, #24
 8003680:	4947      	ldr	r1, [pc, #284]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003682:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003686:	4053      	eors	r3, r2
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	1d1a      	adds	r2, r3, #4
 800368e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	493f      	ldr	r1, [pc, #252]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800369c:	405a      	eors	r2, r3
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	493c      	ldr	r1, [pc, #240]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 80036a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036aa:	405a      	eors	r2, r3
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	0c1b      	lsrs	r3, r3, #16
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	493a      	ldr	r1, [pc, #232]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 80036b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036b8:	405a      	eors	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	0e1b      	lsrs	r3, r3, #24
 80036be:	4938      	ldr	r1, [pc, #224]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 80036c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036c4:	4053      	eors	r3, r2
 80036c6:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80036c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ca:	3b01      	subs	r3, #1
 80036cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f73f af01 	bgt.w	80034d8 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	633a      	str	r2, [r7, #48]	@ 0x30
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	492c      	ldr	r1, [pc, #176]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 80036e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036e8:	405a      	eors	r2, r3
 80036ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ec:	0a1b      	lsrs	r3, r3, #8
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	4929      	ldr	r1, [pc, #164]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 80036f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036f6:	405a      	eors	r2, r3
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	4927      	ldr	r1, [pc, #156]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 8003700:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003704:	405a      	eors	r2, r3
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	0e1b      	lsrs	r3, r3, #24
 800370a:	4925      	ldr	r1, [pc, #148]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 800370c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003710:	4053      	eors	r3, r2
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	1d1a      	adds	r2, r3, #4
 8003718:	633a      	str	r2, [r7, #48]	@ 0x30
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371e:	b2db      	uxtb	r3, r3
 8003720:	491c      	ldr	r1, [pc, #112]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003726:	405a      	eors	r2, r3
 8003728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b2db      	uxtb	r3, r3
 800372e:	491a      	ldr	r1, [pc, #104]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003734:	405a      	eors	r2, r3
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	b2db      	uxtb	r3, r3
 800373c:	4917      	ldr	r1, [pc, #92]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 800373e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003742:	405a      	eors	r2, r3
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	0e1b      	lsrs	r3, r3, #24
 8003748:	4915      	ldr	r1, [pc, #84]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 800374a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800374e:	4053      	eors	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
 8003752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003754:	1d1a      	adds	r2, r3, #4
 8003756:	633a      	str	r2, [r7, #48]	@ 0x30
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375c:	b2db      	uxtb	r3, r3
 800375e:	490d      	ldr	r1, [pc, #52]	@ (8003794 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003760:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003764:	405a      	eors	r2, r3
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	b2db      	uxtb	r3, r3
 800376c:	490a      	ldr	r1, [pc, #40]	@ (8003798 <mbedtls_internal_aes_encrypt+0x3b4>)
 800376e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003772:	405a      	eors	r2, r3
 8003774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003776:	0c1b      	lsrs	r3, r3, #16
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4908      	ldr	r1, [pc, #32]	@ (800379c <mbedtls_internal_aes_encrypt+0x3b8>)
 800377c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003780:	405a      	eors	r2, r3
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	4906      	ldr	r1, [pc, #24]	@ (80037a0 <mbedtls_internal_aes_encrypt+0x3bc>)
 8003788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800378c:	4053      	eors	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003792:	e007      	b.n	80037a4 <mbedtls_internal_aes_encrypt+0x3c0>
 8003794:	0800520c 	.word	0x0800520c
 8003798:	0800560c 	.word	0x0800560c
 800379c:	08005a0c 	.word	0x08005a0c
 80037a0:	08005e0c 	.word	0x08005e0c
 80037a4:	1d1a      	adds	r2, r3, #4
 80037a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	4979      	ldr	r1, [pc, #484]	@ (8003994 <mbedtls_internal_aes_encrypt+0x5b0>)
 80037b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037b4:	405a      	eors	r2, r3
 80037b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4976      	ldr	r1, [pc, #472]	@ (8003998 <mbedtls_internal_aes_encrypt+0x5b4>)
 80037be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037c2:	405a      	eors	r2, r3
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	0c1b      	lsrs	r3, r3, #16
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	4974      	ldr	r1, [pc, #464]	@ (800399c <mbedtls_internal_aes_encrypt+0x5b8>)
 80037cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037d0:	405a      	eors	r2, r3
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	0e1b      	lsrs	r3, r3, #24
 80037d6:	4972      	ldr	r1, [pc, #456]	@ (80039a0 <mbedtls_internal_aes_encrypt+0x5bc>)
 80037d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037dc:	4053      	eors	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80037e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e2:	1d1a      	adds	r2, r3, #4
 80037e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80037e6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80037e8:	69fa      	ldr	r2, [r7, #28]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	496d      	ldr	r1, [pc, #436]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 80037ee:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80037f0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	496a      	ldr	r1, [pc, #424]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80037fe:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	b2db      	uxtb	r3, r3
 8003806:	4967      	ldr	r1, [pc, #412]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003808:	5ccb      	ldrb	r3, [r1, r3]
 800380a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800380c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	0e1b      	lsrs	r3, r3, #24
 8003812:	4964      	ldr	r1, [pc, #400]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003814:	5ccb      	ldrb	r3, [r1, r3]
 8003816:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003818:	4053      	eors	r3, r2
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	1d1a      	adds	r2, r3, #4
 8003820:	633a      	str	r2, [r7, #48]	@ 0x30
 8003822:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	495e      	ldr	r1, [pc, #376]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 800382a:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 800382c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	0a1b      	lsrs	r3, r3, #8
 8003832:	b2db      	uxtb	r3, r3
 8003834:	495b      	ldr	r1, [pc, #364]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800383a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	b2db      	uxtb	r3, r3
 8003842:	4958      	ldr	r1, [pc, #352]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003848:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	4955      	ldr	r1, [pc, #340]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003854:	4053      	eors	r3, r2
 8003856:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	633a      	str	r2, [r7, #48]	@ 0x30
 800385e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	b2d2      	uxtb	r2, r2
 8003864:	494f      	ldr	r1, [pc, #316]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003866:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003868:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	b2db      	uxtb	r3, r3
 8003870:	494c      	ldr	r1, [pc, #304]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003872:	5ccb      	ldrb	r3, [r1, r3]
 8003874:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003876:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	0c1b      	lsrs	r3, r3, #16
 800387c:	b2db      	uxtb	r3, r3
 800387e:	4949      	ldr	r1, [pc, #292]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003884:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	0e1b      	lsrs	r3, r3, #24
 800388a:	4946      	ldr	r1, [pc, #280]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 800388c:	5ccb      	ldrb	r3, [r1, r3]
 800388e:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003890:	4053      	eors	r3, r2
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	1d1a      	adds	r2, r3, #4
 8003898:	633a      	str	r2, [r7, #48]	@ 0x30
 800389a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	4940      	ldr	r1, [pc, #256]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038a2:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 80038a4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	493d      	ldr	r1, [pc, #244]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038ae:	5ccb      	ldrb	r3, [r1, r3]
 80038b0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 80038b2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	0c1b      	lsrs	r3, r3, #16
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	493a      	ldr	r1, [pc, #232]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80038c0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	0e1b      	lsrs	r3, r3, #24
 80038c6:	4937      	ldr	r1, [pc, #220]	@ (80039a4 <mbedtls_internal_aes_encrypt+0x5c0>)
 80038c8:	5ccb      	ldrb	r3, [r1, r3]
 80038ca:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80038cc:	4053      	eors	r3, r2
 80038ce:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	0a1a      	lsrs	r2, r3, #8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3301      	adds	r3, #1
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	0c1a      	lsrs	r2, r3, #16
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3302      	adds	r3, #2
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	0e1a      	lsrs	r2, r3, #24
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3303      	adds	r3, #3
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	0a1a      	lsrs	r2, r3, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3305      	adds	r3, #5
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	0c1a      	lsrs	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3306      	adds	r3, #6
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003920:	0e1a      	lsrs	r2, r3, #24
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3307      	adds	r3, #7
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3308      	adds	r3, #8
 800392e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	701a      	strb	r2, [r3, #0]
 8003934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003936:	0a1a      	lsrs	r2, r3, #8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3309      	adds	r3, #9
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	0c1a      	lsrs	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	330a      	adds	r3, #10
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	0e1a      	lsrs	r2, r3, #24
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	330b      	adds	r3, #11
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	330c      	adds	r3, #12
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	0a1a      	lsrs	r2, r3, #8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	330d      	adds	r3, #13
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	0c1a      	lsrs	r2, r3, #16
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	330e      	adds	r3, #14
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	0e1a      	lsrs	r2, r3, #24
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	330f      	adds	r3, #15
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	373c      	adds	r7, #60	@ 0x3c
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	0800520c 	.word	0x0800520c
 8003998:	0800560c 	.word	0x0800560c
 800399c:	08005a0c 	.word	0x08005a0c
 80039a0:	08005e0c 	.word	0x08005e0c
 80039a4:	0800510c 	.word	0x0800510c

080039a8 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80039a8:	b480      	push	{r7}
 80039aa:	b08f      	sub	sp, #60	@ 0x3c
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	3301      	adds	r3, #1
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	431a      	orrs	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3302      	adds	r3, #2
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	041b      	lsls	r3, r3, #16
 80039d2:	431a      	orrs	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3303      	adds	r3, #3
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	061b      	lsls	r3, r3, #24
 80039dc:	4313      	orrs	r3, r2
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	1d1a      	adds	r2, r3, #4
 80039e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ea:	4053      	eors	r3, r2
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	3304      	adds	r3, #4
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3305      	adds	r3, #5
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	431a      	orrs	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3306      	adds	r3, #6
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	041b      	lsls	r3, r3, #16
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	3307      	adds	r3, #7
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	061b      	lsls	r3, r3, #24
 8003a12:	4313      	orrs	r3, r2
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	1d1a      	adds	r2, r3, #4
 8003a1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a20:	4053      	eors	r3, r2
 8003a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3308      	adds	r3, #8
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3309      	adds	r3, #9
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	330a      	adds	r3, #10
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	041b      	lsls	r3, r3, #16
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	330b      	adds	r3, #11
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	061b      	lsls	r3, r3, #24
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	1d1a      	adds	r2, r3, #4
 8003a50:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a56:	4053      	eors	r3, r2
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	330d      	adds	r3, #13
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	330e      	adds	r3, #14
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	330f      	adds	r3, #15
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	623b      	str	r3, [r7, #32]
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	1d1a      	adds	r2, r3, #4
 8003a86:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	4053      	eors	r3, r2
 8003a8e:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	105b      	asrs	r3, r3, #1
 8003a96:	3b01      	subs	r3, #1
 8003a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9a:	e0fa      	b.n	8003c92 <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	1d1a      	adds	r2, r3, #4
 8003aa0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	49ab      	ldr	r1, [pc, #684]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003aaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aae:	405a      	eors	r2, r3
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	0a1b      	lsrs	r3, r3, #8
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	49a9      	ldr	r1, [pc, #676]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ab8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003abc:	405a      	eors	r2, r3
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	49a6      	ldr	r1, [pc, #664]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003ac6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aca:	405a      	eors	r2, r3
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	0e1b      	lsrs	r3, r3, #24
 8003ad0:	49a4      	ldr	r1, [pc, #656]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003ad2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ad6:	4053      	eors	r3, r2
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003adc:	1d1a      	adds	r2, r3, #4
 8003ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	499c      	ldr	r1, [pc, #624]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aec:	405a      	eors	r2, r3
 8003aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af0:	0a1b      	lsrs	r3, r3, #8
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	4999      	ldr	r1, [pc, #612]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003af6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003afa:	405a      	eors	r2, r3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	4997      	ldr	r1, [pc, #604]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003b04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b08:	405a      	eors	r2, r3
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	0e1b      	lsrs	r3, r3, #24
 8003b0e:	4995      	ldr	r1, [pc, #596]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003b10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b14:	4053      	eors	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	498c      	ldr	r1, [pc, #560]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003b26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b2a:	405a      	eors	r2, r3
 8003b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	498a      	ldr	r1, [pc, #552]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003b34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b38:	405a      	eors	r2, r3
 8003b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4987      	ldr	r1, [pc, #540]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b46:	405a      	eors	r2, r3
 8003b48:	6a3b      	ldr	r3, [r7, #32]
 8003b4a:	0e1b      	lsrs	r3, r3, #24
 8003b4c:	4985      	ldr	r1, [pc, #532]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003b4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b52:	4053      	eors	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	497d      	ldr	r1, [pc, #500]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003b64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b68:	405a      	eors	r2, r3
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	0a1b      	lsrs	r3, r3, #8
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	497a      	ldr	r1, [pc, #488]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003b72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b76:	405a      	eors	r2, r3
 8003b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7a:	0c1b      	lsrs	r3, r3, #16
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	4978      	ldr	r1, [pc, #480]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003b80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b84:	405a      	eors	r2, r3
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	0e1b      	lsrs	r3, r3, #24
 8003b8a:	4976      	ldr	r1, [pc, #472]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b90:	4053      	eors	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	1d1a      	adds	r2, r3, #4
 8003b98:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	496d      	ldr	r1, [pc, #436]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ba2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ba6:	405a      	eors	r2, r3
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	0a1b      	lsrs	r3, r3, #8
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	496b      	ldr	r1, [pc, #428]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003bb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bb4:	405a      	eors	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	4968      	ldr	r1, [pc, #416]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003bbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bc2:	405a      	eors	r2, r3
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	0e1b      	lsrs	r3, r3, #24
 8003bc8:	4966      	ldr	r1, [pc, #408]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003bca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bce:	4053      	eors	r3, r2
 8003bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	495e      	ldr	r1, [pc, #376]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003be0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003be4:	405a      	eors	r2, r3
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	495b      	ldr	r1, [pc, #364]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003bee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bf2:	405a      	eors	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	0c1b      	lsrs	r3, r3, #16
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4959      	ldr	r1, [pc, #356]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003bfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c00:	405a      	eors	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	0e1b      	lsrs	r3, r3, #24
 8003c06:	4957      	ldr	r1, [pc, #348]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003c08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c0c:	4053      	eors	r3, r2
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	1d1a      	adds	r2, r3, #4
 8003c14:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	494e      	ldr	r1, [pc, #312]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003c1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c22:	405a      	eors	r2, r3
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	494c      	ldr	r1, [pc, #304]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003c2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c30:	405a      	eors	r2, r3
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	4949      	ldr	r1, [pc, #292]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003c3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c3e:	405a      	eors	r2, r3
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	0e1b      	lsrs	r3, r3, #24
 8003c44:	4947      	ldr	r1, [pc, #284]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003c46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c4a:	4053      	eors	r3, r2
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c50:	1d1a      	adds	r2, r3, #4
 8003c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	493f      	ldr	r1, [pc, #252]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003c5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c60:	405a      	eors	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	493c      	ldr	r1, [pc, #240]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003c6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c6e:	405a      	eors	r2, r3
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	493a      	ldr	r1, [pc, #232]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003c78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c7c:	405a      	eors	r2, r3
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	0e1b      	lsrs	r3, r3, #24
 8003c82:	4938      	ldr	r1, [pc, #224]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003c84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c88:	4053      	eors	r3, r2
 8003c8a:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f73f af01 	bgt.w	8003a9c <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	1d1a      	adds	r2, r3, #4
 8003c9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	492c      	ldr	r1, [pc, #176]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ca8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cac:	405a      	eors	r2, r3
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	0a1b      	lsrs	r3, r3, #8
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	4929      	ldr	r1, [pc, #164]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cba:	405a      	eors	r2, r3
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	4927      	ldr	r1, [pc, #156]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003cc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cc8:	405a      	eors	r2, r3
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	0e1b      	lsrs	r3, r3, #24
 8003cce:	4925      	ldr	r1, [pc, #148]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003cd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cd4:	4053      	eors	r3, r2
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	491c      	ldr	r1, [pc, #112]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cea:	405a      	eors	r2, r3
 8003cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	491a      	ldr	r1, [pc, #104]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003cf4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cf8:	405a      	eors	r2, r3
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	0c1b      	lsrs	r3, r3, #16
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	4917      	ldr	r1, [pc, #92]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d06:	405a      	eors	r2, r3
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	0e1b      	lsrs	r3, r3, #24
 8003d0c:	4915      	ldr	r1, [pc, #84]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d12:	4053      	eors	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	490d      	ldr	r1, [pc, #52]	@ (8003d58 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d28:	405a      	eors	r2, r3
 8003d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	490a      	ldr	r1, [pc, #40]	@ (8003d5c <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d36:	405a      	eors	r2, r3
 8003d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	4908      	ldr	r1, [pc, #32]	@ (8003d60 <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d44:	405a      	eors	r2, r3
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	0e1b      	lsrs	r3, r3, #24
 8003d4a:	4906      	ldr	r1, [pc, #24]	@ (8003d64 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d50:	4053      	eors	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d56:	e007      	b.n	8003d68 <mbedtls_internal_aes_decrypt+0x3c0>
 8003d58:	0800630c 	.word	0x0800630c
 8003d5c:	0800670c 	.word	0x0800670c
 8003d60:	08006b0c 	.word	0x08006b0c
 8003d64:	08006f0c 	.word	0x08006f0c
 8003d68:	1d1a      	adds	r2, r3, #4
 8003d6a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	4979      	ldr	r1, [pc, #484]	@ (8003f58 <mbedtls_internal_aes_decrypt+0x5b0>)
 8003d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d78:	405a      	eors	r2, r3
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4976      	ldr	r1, [pc, #472]	@ (8003f5c <mbedtls_internal_aes_decrypt+0x5b4>)
 8003d82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d86:	405a      	eors	r2, r3
 8003d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8a:	0c1b      	lsrs	r3, r3, #16
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4974      	ldr	r1, [pc, #464]	@ (8003f60 <mbedtls_internal_aes_decrypt+0x5b8>)
 8003d90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d94:	405a      	eors	r2, r3
 8003d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d98:	0e1b      	lsrs	r3, r3, #24
 8003d9a:	4972      	ldr	r1, [pc, #456]	@ (8003f64 <mbedtls_internal_aes_decrypt+0x5bc>)
 8003d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003da0:	4053      	eors	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8003da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003daa:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	496d      	ldr	r1, [pc, #436]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003db2:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8003db4:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	496a      	ldr	r1, [pc, #424]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003dc2:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	0c1b      	lsrs	r3, r3, #16
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	4967      	ldr	r1, [pc, #412]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003dcc:	5ccb      	ldrb	r3, [r1, r3]
 8003dce:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003dd0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	0e1b      	lsrs	r3, r3, #24
 8003dd6:	4964      	ldr	r1, [pc, #400]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003dd8:	5ccb      	ldrb	r3, [r1, r3]
 8003dda:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003ddc:	4053      	eors	r3, r2
 8003dde:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8003de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de2:	1d1a      	adds	r2, r3, #4
 8003de4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003de6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	495e      	ldr	r1, [pc, #376]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003dee:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003df0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	495b      	ldr	r1, [pc, #364]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003dfe:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4958      	ldr	r1, [pc, #352]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e08:	5ccb      	ldrb	r3, [r1, r3]
 8003e0a:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e0c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	0e1b      	lsrs	r3, r3, #24
 8003e12:	4955      	ldr	r1, [pc, #340]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003e18:	4053      	eors	r3, r2
 8003e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	1d1a      	adds	r2, r3, #4
 8003e20:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e22:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	494f      	ldr	r1, [pc, #316]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e2a:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003e2c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	494c      	ldr	r1, [pc, #304]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e36:	5ccb      	ldrb	r3, [r1, r3]
 8003e38:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8003e3a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	0c1b      	lsrs	r3, r3, #16
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	4949      	ldr	r1, [pc, #292]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e48:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	0e1b      	lsrs	r3, r3, #24
 8003e4e:	4946      	ldr	r1, [pc, #280]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e50:	5ccb      	ldrb	r3, [r1, r3]
 8003e52:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003e54:	4053      	eors	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	1d1a      	adds	r2, r3, #4
 8003e5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e5e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	4940      	ldr	r1, [pc, #256]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e66:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003e68:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	0a1b      	lsrs	r3, r3, #8
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	493d      	ldr	r1, [pc, #244]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8003e76:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	0c1b      	lsrs	r3, r3, #16
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	493a      	ldr	r1, [pc, #232]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e80:	5ccb      	ldrb	r3, [r1, r3]
 8003e82:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003e84:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	0e1b      	lsrs	r3, r3, #24
 8003e8a:	4937      	ldr	r1, [pc, #220]	@ (8003f68 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003e8c:	5ccb      	ldrb	r3, [r1, r3]
 8003e8e:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003e90:	4053      	eors	r3, r2
 8003e92:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8003e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	0a1a      	lsrs	r2, r3, #8
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]
 8003ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eaa:	0c1a      	lsrs	r2, r3, #16
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3302      	adds	r3, #2
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb6:	0e1a      	lsrs	r2, r3, #24
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3303      	adds	r3, #3
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ecc:	0a1a      	lsrs	r2, r3, #8
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3305      	adds	r3, #5
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed8:	0c1a      	lsrs	r2, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3306      	adds	r3, #6
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	0e1a      	lsrs	r2, r3, #24
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3307      	adds	r3, #7
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	701a      	strb	r2, [r3, #0]
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	0a1a      	lsrs	r2, r3, #8
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3309      	adds	r3, #9
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]
 8003f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f06:	0c1a      	lsrs	r2, r3, #16
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	330a      	adds	r3, #10
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	0e1a      	lsrs	r2, r3, #24
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	330b      	adds	r3, #11
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	330c      	adds	r3, #12
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	6a3b      	ldr	r3, [r7, #32]
 8003f28:	0a1a      	lsrs	r2, r3, #8
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	330d      	adds	r3, #13
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	0c1a      	lsrs	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	330e      	adds	r3, #14
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	0e1a      	lsrs	r2, r3, #24
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	330f      	adds	r3, #15
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	373c      	adds	r7, #60	@ 0x3c
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	0800630c 	.word	0x0800630c
 8003f5c:	0800670c 	.word	0x0800670c
 8003f60:	08006b0c 	.word	0x08006b0c
 8003f64:	08006f0c 	.word	0x08006f0c
 8003f68:	0800620c 	.word	0x0800620c

08003f6c <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f7ff fa2d 	bl	80033e4 <mbedtls_internal_aes_encrypt>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	e005      	b.n	8003f9a <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f7ff fd08 	bl	80039a8 <mbedtls_internal_aes_decrypt>
 8003f98:	4603      	mov	r3, r0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 8003fa2:	b5b0      	push	{r4, r5, r7, lr}
 8003fa4:	b08a      	sub	sp, #40	@ 0x28
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 8003fba:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8003fbe:	e06d      	b.n	800409c <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d166      	bne.n	8004094 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 8003fc6:	e036      	b.n	8004036 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fca:	f107 0414 	add.w	r4, r7, #20
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 8003fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f7ff ffc4 	bl	8003f6c <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe8:	e010      	b.n	800400c <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fee:	4413      	add	r3, r2
 8003ff0:	7819      	ldrb	r1, [r3, #0]
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003ffe:	4403      	add	r3, r0
 8004000:	404a      	eors	r2, r1
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	3301      	adds	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	2b0f      	cmp	r3, #15
 8004010:	ddeb      	ble.n	8003fea <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	461d      	mov	r5, r3
 8004016:	f107 0414 	add.w	r4, r7, #20
 800401a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800401c:	6028      	str	r0, [r5, #0]
 800401e:	6069      	str	r1, [r5, #4]
 8004020:	60aa      	str	r2, [r5, #8]
 8004022:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8004024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004026:	3310      	adds	r3, #16
 8004028:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 800402a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800402c:	3310      	adds	r3, #16
 800402e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3b10      	subs	r3, #16
 8004034:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1c5      	bne.n	8003fc8 <mbedtls_aes_crypt_cbc+0x26>
 800403c:	e02d      	b.n	800409a <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800403e:	2300      	movs	r3, #0
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
 8004042:	e010      	b.n	8004066 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004048:	4413      	add	r3, r2
 800404a:	7819      	ldrb	r1, [r3, #0]
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	4413      	add	r3, r2
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004058:	4403      	add	r3, r0
 800405a:	404a      	eors	r2, r1
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	3301      	adds	r3, #1
 8004064:	627b      	str	r3, [r7, #36]	@ 0x24
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	2b0f      	cmp	r3, #15
 800406a:	ddeb      	ble.n	8004044 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 800406c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff ff7a 	bl	8003f6c <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8004078:	2210      	movs	r2, #16
 800407a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800407c:	6838      	ldr	r0, [r7, #0]
 800407e:	f000 fb66 	bl	800474e <memcpy>

            input  += 16;
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	3310      	adds	r3, #16
 8004086:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408a:	3310      	adds	r3, #16
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3b10      	subs	r3, #16
 8004092:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1d1      	bne.n	800403e <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3728      	adds	r7, #40	@ 0x28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bdb0      	pop	{r4, r5, r7, pc}

080040a4 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 80040ae:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <mbedtls_platform_zeroize+0x20>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	2100      	movs	r1, #0
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <sbrk_aligned>:
 80040c8:	b570      	push	{r4, r5, r6, lr}
 80040ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004108 <sbrk_aligned+0x40>)
 80040cc:	460c      	mov	r4, r1
 80040ce:	6831      	ldr	r1, [r6, #0]
 80040d0:	4605      	mov	r5, r0
 80040d2:	b911      	cbnz	r1, 80040da <sbrk_aligned+0x12>
 80040d4:	f000 faec 	bl	80046b0 <_sbrk_r>
 80040d8:	6030      	str	r0, [r6, #0]
 80040da:	4621      	mov	r1, r4
 80040dc:	4628      	mov	r0, r5
 80040de:	f000 fae7 	bl	80046b0 <_sbrk_r>
 80040e2:	1c43      	adds	r3, r0, #1
 80040e4:	d103      	bne.n	80040ee <sbrk_aligned+0x26>
 80040e6:	f04f 34ff 	mov.w	r4, #4294967295
 80040ea:	4620      	mov	r0, r4
 80040ec:	bd70      	pop	{r4, r5, r6, pc}
 80040ee:	1cc4      	adds	r4, r0, #3
 80040f0:	f024 0403 	bic.w	r4, r4, #3
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d0f8      	beq.n	80040ea <sbrk_aligned+0x22>
 80040f8:	1a21      	subs	r1, r4, r0
 80040fa:	4628      	mov	r0, r5
 80040fc:	f000 fad8 	bl	80046b0 <_sbrk_r>
 8004100:	3001      	adds	r0, #1
 8004102:	d1f2      	bne.n	80040ea <sbrk_aligned+0x22>
 8004104:	e7ef      	b.n	80040e6 <sbrk_aligned+0x1e>
 8004106:	bf00      	nop
 8004108:	2000012c 	.word	0x2000012c

0800410c <_malloc_r>:
 800410c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004110:	1ccd      	adds	r5, r1, #3
 8004112:	f025 0503 	bic.w	r5, r5, #3
 8004116:	3508      	adds	r5, #8
 8004118:	2d0c      	cmp	r5, #12
 800411a:	bf38      	it	cc
 800411c:	250c      	movcc	r5, #12
 800411e:	2d00      	cmp	r5, #0
 8004120:	4606      	mov	r6, r0
 8004122:	db01      	blt.n	8004128 <_malloc_r+0x1c>
 8004124:	42a9      	cmp	r1, r5
 8004126:	d904      	bls.n	8004132 <_malloc_r+0x26>
 8004128:	230c      	movs	r3, #12
 800412a:	6033      	str	r3, [r6, #0]
 800412c:	2000      	movs	r0, #0
 800412e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004132:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004208 <_malloc_r+0xfc>
 8004136:	f000 f869 	bl	800420c <__malloc_lock>
 800413a:	f8d8 3000 	ldr.w	r3, [r8]
 800413e:	461c      	mov	r4, r3
 8004140:	bb44      	cbnz	r4, 8004194 <_malloc_r+0x88>
 8004142:	4629      	mov	r1, r5
 8004144:	4630      	mov	r0, r6
 8004146:	f7ff ffbf 	bl	80040c8 <sbrk_aligned>
 800414a:	1c43      	adds	r3, r0, #1
 800414c:	4604      	mov	r4, r0
 800414e:	d158      	bne.n	8004202 <_malloc_r+0xf6>
 8004150:	f8d8 4000 	ldr.w	r4, [r8]
 8004154:	4627      	mov	r7, r4
 8004156:	2f00      	cmp	r7, #0
 8004158:	d143      	bne.n	80041e2 <_malloc_r+0xd6>
 800415a:	2c00      	cmp	r4, #0
 800415c:	d04b      	beq.n	80041f6 <_malloc_r+0xea>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	4639      	mov	r1, r7
 8004162:	4630      	mov	r0, r6
 8004164:	eb04 0903 	add.w	r9, r4, r3
 8004168:	f000 faa2 	bl	80046b0 <_sbrk_r>
 800416c:	4581      	cmp	r9, r0
 800416e:	d142      	bne.n	80041f6 <_malloc_r+0xea>
 8004170:	6821      	ldr	r1, [r4, #0]
 8004172:	1a6d      	subs	r5, r5, r1
 8004174:	4629      	mov	r1, r5
 8004176:	4630      	mov	r0, r6
 8004178:	f7ff ffa6 	bl	80040c8 <sbrk_aligned>
 800417c:	3001      	adds	r0, #1
 800417e:	d03a      	beq.n	80041f6 <_malloc_r+0xea>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	442b      	add	r3, r5
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	f8d8 3000 	ldr.w	r3, [r8]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	bb62      	cbnz	r2, 80041e8 <_malloc_r+0xdc>
 800418e:	f8c8 7000 	str.w	r7, [r8]
 8004192:	e00f      	b.n	80041b4 <_malloc_r+0xa8>
 8004194:	6822      	ldr	r2, [r4, #0]
 8004196:	1b52      	subs	r2, r2, r5
 8004198:	d420      	bmi.n	80041dc <_malloc_r+0xd0>
 800419a:	2a0b      	cmp	r2, #11
 800419c:	d917      	bls.n	80041ce <_malloc_r+0xc2>
 800419e:	1961      	adds	r1, r4, r5
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	6025      	str	r5, [r4, #0]
 80041a4:	bf18      	it	ne
 80041a6:	6059      	strne	r1, [r3, #4]
 80041a8:	6863      	ldr	r3, [r4, #4]
 80041aa:	bf08      	it	eq
 80041ac:	f8c8 1000 	streq.w	r1, [r8]
 80041b0:	5162      	str	r2, [r4, r5]
 80041b2:	604b      	str	r3, [r1, #4]
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 f82f 	bl	8004218 <__malloc_unlock>
 80041ba:	f104 000b 	add.w	r0, r4, #11
 80041be:	1d23      	adds	r3, r4, #4
 80041c0:	f020 0007 	bic.w	r0, r0, #7
 80041c4:	1ac2      	subs	r2, r0, r3
 80041c6:	bf1c      	itt	ne
 80041c8:	1a1b      	subne	r3, r3, r0
 80041ca:	50a3      	strne	r3, [r4, r2]
 80041cc:	e7af      	b.n	800412e <_malloc_r+0x22>
 80041ce:	6862      	ldr	r2, [r4, #4]
 80041d0:	42a3      	cmp	r3, r4
 80041d2:	bf0c      	ite	eq
 80041d4:	f8c8 2000 	streq.w	r2, [r8]
 80041d8:	605a      	strne	r2, [r3, #4]
 80041da:	e7eb      	b.n	80041b4 <_malloc_r+0xa8>
 80041dc:	4623      	mov	r3, r4
 80041de:	6864      	ldr	r4, [r4, #4]
 80041e0:	e7ae      	b.n	8004140 <_malloc_r+0x34>
 80041e2:	463c      	mov	r4, r7
 80041e4:	687f      	ldr	r7, [r7, #4]
 80041e6:	e7b6      	b.n	8004156 <_malloc_r+0x4a>
 80041e8:	461a      	mov	r2, r3
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	d1fb      	bne.n	80041e8 <_malloc_r+0xdc>
 80041f0:	2300      	movs	r3, #0
 80041f2:	6053      	str	r3, [r2, #4]
 80041f4:	e7de      	b.n	80041b4 <_malloc_r+0xa8>
 80041f6:	230c      	movs	r3, #12
 80041f8:	6033      	str	r3, [r6, #0]
 80041fa:	4630      	mov	r0, r6
 80041fc:	f000 f80c 	bl	8004218 <__malloc_unlock>
 8004200:	e794      	b.n	800412c <_malloc_r+0x20>
 8004202:	6005      	str	r5, [r0, #0]
 8004204:	e7d6      	b.n	80041b4 <_malloc_r+0xa8>
 8004206:	bf00      	nop
 8004208:	20000130 	.word	0x20000130

0800420c <__malloc_lock>:
 800420c:	4801      	ldr	r0, [pc, #4]	@ (8004214 <__malloc_lock+0x8>)
 800420e:	f000 ba9c 	b.w	800474a <__retarget_lock_acquire_recursive>
 8004212:	bf00      	nop
 8004214:	20000274 	.word	0x20000274

08004218 <__malloc_unlock>:
 8004218:	4801      	ldr	r0, [pc, #4]	@ (8004220 <__malloc_unlock+0x8>)
 800421a:	f000 ba97 	b.w	800474c <__retarget_lock_release_recursive>
 800421e:	bf00      	nop
 8004220:	20000274 	.word	0x20000274

08004224 <std>:
 8004224:	2300      	movs	r3, #0
 8004226:	b510      	push	{r4, lr}
 8004228:	4604      	mov	r4, r0
 800422a:	e9c0 3300 	strd	r3, r3, [r0]
 800422e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004232:	6083      	str	r3, [r0, #8]
 8004234:	8181      	strh	r1, [r0, #12]
 8004236:	6643      	str	r3, [r0, #100]	@ 0x64
 8004238:	81c2      	strh	r2, [r0, #14]
 800423a:	6183      	str	r3, [r0, #24]
 800423c:	4619      	mov	r1, r3
 800423e:	2208      	movs	r2, #8
 8004240:	305c      	adds	r0, #92	@ 0x5c
 8004242:	f000 f9f9 	bl	8004638 <memset>
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <std+0x58>)
 8004248:	6263      	str	r3, [r4, #36]	@ 0x24
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <std+0x5c>)
 800424c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800424e:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <std+0x60>)
 8004250:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004252:	4b0d      	ldr	r3, [pc, #52]	@ (8004288 <std+0x64>)
 8004254:	6323      	str	r3, [r4, #48]	@ 0x30
 8004256:	4b0d      	ldr	r3, [pc, #52]	@ (800428c <std+0x68>)
 8004258:	6224      	str	r4, [r4, #32]
 800425a:	429c      	cmp	r4, r3
 800425c:	d006      	beq.n	800426c <std+0x48>
 800425e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004262:	4294      	cmp	r4, r2
 8004264:	d002      	beq.n	800426c <std+0x48>
 8004266:	33d0      	adds	r3, #208	@ 0xd0
 8004268:	429c      	cmp	r4, r3
 800426a:	d105      	bne.n	8004278 <std+0x54>
 800426c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004274:	f000 ba68 	b.w	8004748 <__retarget_lock_init_recursive>
 8004278:	bd10      	pop	{r4, pc}
 800427a:	bf00      	nop
 800427c:	08004489 	.word	0x08004489
 8004280:	080044ab 	.word	0x080044ab
 8004284:	080044e3 	.word	0x080044e3
 8004288:	08004507 	.word	0x08004507
 800428c:	20000134 	.word	0x20000134

08004290 <stdio_exit_handler>:
 8004290:	4a02      	ldr	r2, [pc, #8]	@ (800429c <stdio_exit_handler+0xc>)
 8004292:	4903      	ldr	r1, [pc, #12]	@ (80042a0 <stdio_exit_handler+0x10>)
 8004294:	4803      	ldr	r0, [pc, #12]	@ (80042a4 <stdio_exit_handler+0x14>)
 8004296:	f000 b869 	b.w	800436c <_fwalk_sglue>
 800429a:	bf00      	nop
 800429c:	20000010 	.word	0x20000010
 80042a0:	08004ea9 	.word	0x08004ea9
 80042a4:	20000020 	.word	0x20000020

080042a8 <cleanup_stdio>:
 80042a8:	6841      	ldr	r1, [r0, #4]
 80042aa:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <cleanup_stdio+0x34>)
 80042ac:	4299      	cmp	r1, r3
 80042ae:	b510      	push	{r4, lr}
 80042b0:	4604      	mov	r4, r0
 80042b2:	d001      	beq.n	80042b8 <cleanup_stdio+0x10>
 80042b4:	f000 fdf8 	bl	8004ea8 <_fflush_r>
 80042b8:	68a1      	ldr	r1, [r4, #8]
 80042ba:	4b09      	ldr	r3, [pc, #36]	@ (80042e0 <cleanup_stdio+0x38>)
 80042bc:	4299      	cmp	r1, r3
 80042be:	d002      	beq.n	80042c6 <cleanup_stdio+0x1e>
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fdf1 	bl	8004ea8 <_fflush_r>
 80042c6:	68e1      	ldr	r1, [r4, #12]
 80042c8:	4b06      	ldr	r3, [pc, #24]	@ (80042e4 <cleanup_stdio+0x3c>)
 80042ca:	4299      	cmp	r1, r3
 80042cc:	d004      	beq.n	80042d8 <cleanup_stdio+0x30>
 80042ce:	4620      	mov	r0, r4
 80042d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042d4:	f000 bde8 	b.w	8004ea8 <_fflush_r>
 80042d8:	bd10      	pop	{r4, pc}
 80042da:	bf00      	nop
 80042dc:	20000134 	.word	0x20000134
 80042e0:	2000019c 	.word	0x2000019c
 80042e4:	20000204 	.word	0x20000204

080042e8 <global_stdio_init.part.0>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004318 <global_stdio_init.part.0+0x30>)
 80042ec:	4c0b      	ldr	r4, [pc, #44]	@ (800431c <global_stdio_init.part.0+0x34>)
 80042ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004320 <global_stdio_init.part.0+0x38>)
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	4620      	mov	r0, r4
 80042f4:	2200      	movs	r2, #0
 80042f6:	2104      	movs	r1, #4
 80042f8:	f7ff ff94 	bl	8004224 <std>
 80042fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004300:	2201      	movs	r2, #1
 8004302:	2109      	movs	r1, #9
 8004304:	f7ff ff8e 	bl	8004224 <std>
 8004308:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800430c:	2202      	movs	r2, #2
 800430e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004312:	2112      	movs	r1, #18
 8004314:	f7ff bf86 	b.w	8004224 <std>
 8004318:	2000026c 	.word	0x2000026c
 800431c:	20000134 	.word	0x20000134
 8004320:	08004291 	.word	0x08004291

08004324 <__sfp_lock_acquire>:
 8004324:	4801      	ldr	r0, [pc, #4]	@ (800432c <__sfp_lock_acquire+0x8>)
 8004326:	f000 ba10 	b.w	800474a <__retarget_lock_acquire_recursive>
 800432a:	bf00      	nop
 800432c:	20000275 	.word	0x20000275

08004330 <__sfp_lock_release>:
 8004330:	4801      	ldr	r0, [pc, #4]	@ (8004338 <__sfp_lock_release+0x8>)
 8004332:	f000 ba0b 	b.w	800474c <__retarget_lock_release_recursive>
 8004336:	bf00      	nop
 8004338:	20000275 	.word	0x20000275

0800433c <__sinit>:
 800433c:	b510      	push	{r4, lr}
 800433e:	4604      	mov	r4, r0
 8004340:	f7ff fff0 	bl	8004324 <__sfp_lock_acquire>
 8004344:	6a23      	ldr	r3, [r4, #32]
 8004346:	b11b      	cbz	r3, 8004350 <__sinit+0x14>
 8004348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800434c:	f7ff bff0 	b.w	8004330 <__sfp_lock_release>
 8004350:	4b04      	ldr	r3, [pc, #16]	@ (8004364 <__sinit+0x28>)
 8004352:	6223      	str	r3, [r4, #32]
 8004354:	4b04      	ldr	r3, [pc, #16]	@ (8004368 <__sinit+0x2c>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f5      	bne.n	8004348 <__sinit+0xc>
 800435c:	f7ff ffc4 	bl	80042e8 <global_stdio_init.part.0>
 8004360:	e7f2      	b.n	8004348 <__sinit+0xc>
 8004362:	bf00      	nop
 8004364:	080042a9 	.word	0x080042a9
 8004368:	2000026c 	.word	0x2000026c

0800436c <_fwalk_sglue>:
 800436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004370:	4607      	mov	r7, r0
 8004372:	4688      	mov	r8, r1
 8004374:	4614      	mov	r4, r2
 8004376:	2600      	movs	r6, #0
 8004378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800437c:	f1b9 0901 	subs.w	r9, r9, #1
 8004380:	d505      	bpl.n	800438e <_fwalk_sglue+0x22>
 8004382:	6824      	ldr	r4, [r4, #0]
 8004384:	2c00      	cmp	r4, #0
 8004386:	d1f7      	bne.n	8004378 <_fwalk_sglue+0xc>
 8004388:	4630      	mov	r0, r6
 800438a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d907      	bls.n	80043a4 <_fwalk_sglue+0x38>
 8004394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004398:	3301      	adds	r3, #1
 800439a:	d003      	beq.n	80043a4 <_fwalk_sglue+0x38>
 800439c:	4629      	mov	r1, r5
 800439e:	4638      	mov	r0, r7
 80043a0:	47c0      	blx	r8
 80043a2:	4306      	orrs	r6, r0
 80043a4:	3568      	adds	r5, #104	@ 0x68
 80043a6:	e7e9      	b.n	800437c <_fwalk_sglue+0x10>

080043a8 <iprintf>:
 80043a8:	b40f      	push	{r0, r1, r2, r3}
 80043aa:	b507      	push	{r0, r1, r2, lr}
 80043ac:	4906      	ldr	r1, [pc, #24]	@ (80043c8 <iprintf+0x20>)
 80043ae:	ab04      	add	r3, sp, #16
 80043b0:	6808      	ldr	r0, [r1, #0]
 80043b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b6:	6881      	ldr	r1, [r0, #8]
 80043b8:	9301      	str	r3, [sp, #4]
 80043ba:	f000 fa4b 	bl	8004854 <_vfiprintf_r>
 80043be:	b003      	add	sp, #12
 80043c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043c4:	b004      	add	sp, #16
 80043c6:	4770      	bx	lr
 80043c8:	2000001c 	.word	0x2000001c

080043cc <_puts_r>:
 80043cc:	6a03      	ldr	r3, [r0, #32]
 80043ce:	b570      	push	{r4, r5, r6, lr}
 80043d0:	6884      	ldr	r4, [r0, #8]
 80043d2:	4605      	mov	r5, r0
 80043d4:	460e      	mov	r6, r1
 80043d6:	b90b      	cbnz	r3, 80043dc <_puts_r+0x10>
 80043d8:	f7ff ffb0 	bl	800433c <__sinit>
 80043dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043de:	07db      	lsls	r3, r3, #31
 80043e0:	d405      	bmi.n	80043ee <_puts_r+0x22>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	0598      	lsls	r0, r3, #22
 80043e6:	d402      	bmi.n	80043ee <_puts_r+0x22>
 80043e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ea:	f000 f9ae 	bl	800474a <__retarget_lock_acquire_recursive>
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	0719      	lsls	r1, r3, #28
 80043f2:	d502      	bpl.n	80043fa <_puts_r+0x2e>
 80043f4:	6923      	ldr	r3, [r4, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d135      	bne.n	8004466 <_puts_r+0x9a>
 80043fa:	4621      	mov	r1, r4
 80043fc:	4628      	mov	r0, r5
 80043fe:	f000 f8c5 	bl	800458c <__swsetup_r>
 8004402:	b380      	cbz	r0, 8004466 <_puts_r+0x9a>
 8004404:	f04f 35ff 	mov.w	r5, #4294967295
 8004408:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800440a:	07da      	lsls	r2, r3, #31
 800440c:	d405      	bmi.n	800441a <_puts_r+0x4e>
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	059b      	lsls	r3, r3, #22
 8004412:	d402      	bmi.n	800441a <_puts_r+0x4e>
 8004414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004416:	f000 f999 	bl	800474c <__retarget_lock_release_recursive>
 800441a:	4628      	mov	r0, r5
 800441c:	bd70      	pop	{r4, r5, r6, pc}
 800441e:	2b00      	cmp	r3, #0
 8004420:	da04      	bge.n	800442c <_puts_r+0x60>
 8004422:	69a2      	ldr	r2, [r4, #24]
 8004424:	429a      	cmp	r2, r3
 8004426:	dc17      	bgt.n	8004458 <_puts_r+0x8c>
 8004428:	290a      	cmp	r1, #10
 800442a:	d015      	beq.n	8004458 <_puts_r+0x8c>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	6022      	str	r2, [r4, #0]
 8004432:	7019      	strb	r1, [r3, #0]
 8004434:	68a3      	ldr	r3, [r4, #8]
 8004436:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800443a:	3b01      	subs	r3, #1
 800443c:	60a3      	str	r3, [r4, #8]
 800443e:	2900      	cmp	r1, #0
 8004440:	d1ed      	bne.n	800441e <_puts_r+0x52>
 8004442:	2b00      	cmp	r3, #0
 8004444:	da11      	bge.n	800446a <_puts_r+0x9e>
 8004446:	4622      	mov	r2, r4
 8004448:	210a      	movs	r1, #10
 800444a:	4628      	mov	r0, r5
 800444c:	f000 f85f 	bl	800450e <__swbuf_r>
 8004450:	3001      	adds	r0, #1
 8004452:	d0d7      	beq.n	8004404 <_puts_r+0x38>
 8004454:	250a      	movs	r5, #10
 8004456:	e7d7      	b.n	8004408 <_puts_r+0x3c>
 8004458:	4622      	mov	r2, r4
 800445a:	4628      	mov	r0, r5
 800445c:	f000 f857 	bl	800450e <__swbuf_r>
 8004460:	3001      	adds	r0, #1
 8004462:	d1e7      	bne.n	8004434 <_puts_r+0x68>
 8004464:	e7ce      	b.n	8004404 <_puts_r+0x38>
 8004466:	3e01      	subs	r6, #1
 8004468:	e7e4      	b.n	8004434 <_puts_r+0x68>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	6022      	str	r2, [r4, #0]
 8004470:	220a      	movs	r2, #10
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e7ee      	b.n	8004454 <_puts_r+0x88>
	...

08004478 <puts>:
 8004478:	4b02      	ldr	r3, [pc, #8]	@ (8004484 <puts+0xc>)
 800447a:	4601      	mov	r1, r0
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f7ff bfa5 	b.w	80043cc <_puts_r>
 8004482:	bf00      	nop
 8004484:	2000001c 	.word	0x2000001c

08004488 <__sread>:
 8004488:	b510      	push	{r4, lr}
 800448a:	460c      	mov	r4, r1
 800448c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004490:	f000 f8fc 	bl	800468c <_read_r>
 8004494:	2800      	cmp	r0, #0
 8004496:	bfab      	itete	ge
 8004498:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800449a:	89a3      	ldrhlt	r3, [r4, #12]
 800449c:	181b      	addge	r3, r3, r0
 800449e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044a2:	bfac      	ite	ge
 80044a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044a6:	81a3      	strhlt	r3, [r4, #12]
 80044a8:	bd10      	pop	{r4, pc}

080044aa <__swrite>:
 80044aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044ae:	461f      	mov	r7, r3
 80044b0:	898b      	ldrh	r3, [r1, #12]
 80044b2:	05db      	lsls	r3, r3, #23
 80044b4:	4605      	mov	r5, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	4616      	mov	r6, r2
 80044ba:	d505      	bpl.n	80044c8 <__swrite+0x1e>
 80044bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c0:	2302      	movs	r3, #2
 80044c2:	2200      	movs	r2, #0
 80044c4:	f000 f8d0 	bl	8004668 <_lseek_r>
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044d2:	81a3      	strh	r3, [r4, #12]
 80044d4:	4632      	mov	r2, r6
 80044d6:	463b      	mov	r3, r7
 80044d8:	4628      	mov	r0, r5
 80044da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044de:	f000 b8f7 	b.w	80046d0 <_write_r>

080044e2 <__sseek>:
 80044e2:	b510      	push	{r4, lr}
 80044e4:	460c      	mov	r4, r1
 80044e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ea:	f000 f8bd 	bl	8004668 <_lseek_r>
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	bf15      	itete	ne
 80044f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80044f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80044fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80044fe:	81a3      	strheq	r3, [r4, #12]
 8004500:	bf18      	it	ne
 8004502:	81a3      	strhne	r3, [r4, #12]
 8004504:	bd10      	pop	{r4, pc}

08004506 <__sclose>:
 8004506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450a:	f000 b89d 	b.w	8004648 <_close_r>

0800450e <__swbuf_r>:
 800450e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004510:	460e      	mov	r6, r1
 8004512:	4614      	mov	r4, r2
 8004514:	4605      	mov	r5, r0
 8004516:	b118      	cbz	r0, 8004520 <__swbuf_r+0x12>
 8004518:	6a03      	ldr	r3, [r0, #32]
 800451a:	b90b      	cbnz	r3, 8004520 <__swbuf_r+0x12>
 800451c:	f7ff ff0e 	bl	800433c <__sinit>
 8004520:	69a3      	ldr	r3, [r4, #24]
 8004522:	60a3      	str	r3, [r4, #8]
 8004524:	89a3      	ldrh	r3, [r4, #12]
 8004526:	071a      	lsls	r2, r3, #28
 8004528:	d501      	bpl.n	800452e <__swbuf_r+0x20>
 800452a:	6923      	ldr	r3, [r4, #16]
 800452c:	b943      	cbnz	r3, 8004540 <__swbuf_r+0x32>
 800452e:	4621      	mov	r1, r4
 8004530:	4628      	mov	r0, r5
 8004532:	f000 f82b 	bl	800458c <__swsetup_r>
 8004536:	b118      	cbz	r0, 8004540 <__swbuf_r+0x32>
 8004538:	f04f 37ff 	mov.w	r7, #4294967295
 800453c:	4638      	mov	r0, r7
 800453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	6922      	ldr	r2, [r4, #16]
 8004544:	1a98      	subs	r0, r3, r2
 8004546:	6963      	ldr	r3, [r4, #20]
 8004548:	b2f6      	uxtb	r6, r6
 800454a:	4283      	cmp	r3, r0
 800454c:	4637      	mov	r7, r6
 800454e:	dc05      	bgt.n	800455c <__swbuf_r+0x4e>
 8004550:	4621      	mov	r1, r4
 8004552:	4628      	mov	r0, r5
 8004554:	f000 fca8 	bl	8004ea8 <_fflush_r>
 8004558:	2800      	cmp	r0, #0
 800455a:	d1ed      	bne.n	8004538 <__swbuf_r+0x2a>
 800455c:	68a3      	ldr	r3, [r4, #8]
 800455e:	3b01      	subs	r3, #1
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	701e      	strb	r6, [r3, #0]
 800456a:	6962      	ldr	r2, [r4, #20]
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	429a      	cmp	r2, r3
 8004570:	d004      	beq.n	800457c <__swbuf_r+0x6e>
 8004572:	89a3      	ldrh	r3, [r4, #12]
 8004574:	07db      	lsls	r3, r3, #31
 8004576:	d5e1      	bpl.n	800453c <__swbuf_r+0x2e>
 8004578:	2e0a      	cmp	r6, #10
 800457a:	d1df      	bne.n	800453c <__swbuf_r+0x2e>
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 fc92 	bl	8004ea8 <_fflush_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	d0d9      	beq.n	800453c <__swbuf_r+0x2e>
 8004588:	e7d6      	b.n	8004538 <__swbuf_r+0x2a>
	...

0800458c <__swsetup_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4b29      	ldr	r3, [pc, #164]	@ (8004634 <__swsetup_r+0xa8>)
 8004590:	4605      	mov	r5, r0
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	460c      	mov	r4, r1
 8004596:	b118      	cbz	r0, 80045a0 <__swsetup_r+0x14>
 8004598:	6a03      	ldr	r3, [r0, #32]
 800459a:	b90b      	cbnz	r3, 80045a0 <__swsetup_r+0x14>
 800459c:	f7ff fece 	bl	800433c <__sinit>
 80045a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045a4:	0719      	lsls	r1, r3, #28
 80045a6:	d422      	bmi.n	80045ee <__swsetup_r+0x62>
 80045a8:	06da      	lsls	r2, r3, #27
 80045aa:	d407      	bmi.n	80045bc <__swsetup_r+0x30>
 80045ac:	2209      	movs	r2, #9
 80045ae:	602a      	str	r2, [r5, #0]
 80045b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045b4:	81a3      	strh	r3, [r4, #12]
 80045b6:	f04f 30ff 	mov.w	r0, #4294967295
 80045ba:	e033      	b.n	8004624 <__swsetup_r+0x98>
 80045bc:	0758      	lsls	r0, r3, #29
 80045be:	d512      	bpl.n	80045e6 <__swsetup_r+0x5a>
 80045c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045c2:	b141      	cbz	r1, 80045d6 <__swsetup_r+0x4a>
 80045c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80045c8:	4299      	cmp	r1, r3
 80045ca:	d002      	beq.n	80045d2 <__swsetup_r+0x46>
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 f8cd 	bl	800476c <_free_r>
 80045d2:	2300      	movs	r3, #0
 80045d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80045dc:	81a3      	strh	r3, [r4, #12]
 80045de:	2300      	movs	r3, #0
 80045e0:	6063      	str	r3, [r4, #4]
 80045e2:	6923      	ldr	r3, [r4, #16]
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	f043 0308 	orr.w	r3, r3, #8
 80045ec:	81a3      	strh	r3, [r4, #12]
 80045ee:	6923      	ldr	r3, [r4, #16]
 80045f0:	b94b      	cbnz	r3, 8004606 <__swsetup_r+0x7a>
 80045f2:	89a3      	ldrh	r3, [r4, #12]
 80045f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fc:	d003      	beq.n	8004606 <__swsetup_r+0x7a>
 80045fe:	4621      	mov	r1, r4
 8004600:	4628      	mov	r0, r5
 8004602:	f000 fc9f 	bl	8004f44 <__smakebuf_r>
 8004606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800460a:	f013 0201 	ands.w	r2, r3, #1
 800460e:	d00a      	beq.n	8004626 <__swsetup_r+0x9a>
 8004610:	2200      	movs	r2, #0
 8004612:	60a2      	str	r2, [r4, #8]
 8004614:	6962      	ldr	r2, [r4, #20]
 8004616:	4252      	negs	r2, r2
 8004618:	61a2      	str	r2, [r4, #24]
 800461a:	6922      	ldr	r2, [r4, #16]
 800461c:	b942      	cbnz	r2, 8004630 <__swsetup_r+0xa4>
 800461e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004622:	d1c5      	bne.n	80045b0 <__swsetup_r+0x24>
 8004624:	bd38      	pop	{r3, r4, r5, pc}
 8004626:	0799      	lsls	r1, r3, #30
 8004628:	bf58      	it	pl
 800462a:	6962      	ldrpl	r2, [r4, #20]
 800462c:	60a2      	str	r2, [r4, #8]
 800462e:	e7f4      	b.n	800461a <__swsetup_r+0x8e>
 8004630:	2000      	movs	r0, #0
 8004632:	e7f7      	b.n	8004624 <__swsetup_r+0x98>
 8004634:	2000001c 	.word	0x2000001c

08004638 <memset>:
 8004638:	4402      	add	r2, r0
 800463a:	4603      	mov	r3, r0
 800463c:	4293      	cmp	r3, r2
 800463e:	d100      	bne.n	8004642 <memset+0xa>
 8004640:	4770      	bx	lr
 8004642:	f803 1b01 	strb.w	r1, [r3], #1
 8004646:	e7f9      	b.n	800463c <memset+0x4>

08004648 <_close_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4d06      	ldr	r5, [pc, #24]	@ (8004664 <_close_r+0x1c>)
 800464c:	2300      	movs	r3, #0
 800464e:	4604      	mov	r4, r0
 8004650:	4608      	mov	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc fa9f 	bl	8000b96 <_close>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d102      	bne.n	8004662 <_close_r+0x1a>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	b103      	cbz	r3, 8004662 <_close_r+0x1a>
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	bd38      	pop	{r3, r4, r5, pc}
 8004664:	20000270 	.word	0x20000270

08004668 <_lseek_r>:
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4d07      	ldr	r5, [pc, #28]	@ (8004688 <_lseek_r+0x20>)
 800466c:	4604      	mov	r4, r0
 800466e:	4608      	mov	r0, r1
 8004670:	4611      	mov	r1, r2
 8004672:	2200      	movs	r2, #0
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f7fc fab4 	bl	8000be4 <_lseek>
 800467c:	1c43      	adds	r3, r0, #1
 800467e:	d102      	bne.n	8004686 <_lseek_r+0x1e>
 8004680:	682b      	ldr	r3, [r5, #0]
 8004682:	b103      	cbz	r3, 8004686 <_lseek_r+0x1e>
 8004684:	6023      	str	r3, [r4, #0]
 8004686:	bd38      	pop	{r3, r4, r5, pc}
 8004688:	20000270 	.word	0x20000270

0800468c <_read_r>:
 800468c:	b538      	push	{r3, r4, r5, lr}
 800468e:	4d07      	ldr	r5, [pc, #28]	@ (80046ac <_read_r+0x20>)
 8004690:	4604      	mov	r4, r0
 8004692:	4608      	mov	r0, r1
 8004694:	4611      	mov	r1, r2
 8004696:	2200      	movs	r2, #0
 8004698:	602a      	str	r2, [r5, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	f7fc fa42 	bl	8000b24 <_read>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_read_r+0x1e>
 80046a4:	682b      	ldr	r3, [r5, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_read_r+0x1e>
 80046a8:	6023      	str	r3, [r4, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000270 	.word	0x20000270

080046b0 <_sbrk_r>:
 80046b0:	b538      	push	{r3, r4, r5, lr}
 80046b2:	4d06      	ldr	r5, [pc, #24]	@ (80046cc <_sbrk_r+0x1c>)
 80046b4:	2300      	movs	r3, #0
 80046b6:	4604      	mov	r4, r0
 80046b8:	4608      	mov	r0, r1
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	f7fc faa0 	bl	8000c00 <_sbrk>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_sbrk_r+0x1a>
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_sbrk_r+0x1a>
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	20000270 	.word	0x20000270

080046d0 <_write_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4d07      	ldr	r5, [pc, #28]	@ (80046f0 <_write_r+0x20>)
 80046d4:	4604      	mov	r4, r0
 80046d6:	4608      	mov	r0, r1
 80046d8:	4611      	mov	r1, r2
 80046da:	2200      	movs	r2, #0
 80046dc:	602a      	str	r2, [r5, #0]
 80046de:	461a      	mov	r2, r3
 80046e0:	f7fc fa3d 	bl	8000b5e <_write>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d102      	bne.n	80046ee <_write_r+0x1e>
 80046e8:	682b      	ldr	r3, [r5, #0]
 80046ea:	b103      	cbz	r3, 80046ee <_write_r+0x1e>
 80046ec:	6023      	str	r3, [r4, #0]
 80046ee:	bd38      	pop	{r3, r4, r5, pc}
 80046f0:	20000270 	.word	0x20000270

080046f4 <__errno>:
 80046f4:	4b01      	ldr	r3, [pc, #4]	@ (80046fc <__errno+0x8>)
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	2000001c 	.word	0x2000001c

08004700 <__libc_init_array>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4d0d      	ldr	r5, [pc, #52]	@ (8004738 <__libc_init_array+0x38>)
 8004704:	4c0d      	ldr	r4, [pc, #52]	@ (800473c <__libc_init_array+0x3c>)
 8004706:	1b64      	subs	r4, r4, r5
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	2600      	movs	r6, #0
 800470c:	42a6      	cmp	r6, r4
 800470e:	d109      	bne.n	8004724 <__libc_init_array+0x24>
 8004710:	4d0b      	ldr	r5, [pc, #44]	@ (8004740 <__libc_init_array+0x40>)
 8004712:	4c0c      	ldr	r4, [pc, #48]	@ (8004744 <__libc_init_array+0x44>)
 8004714:	f000 fc74 	bl	8005000 <_init>
 8004718:	1b64      	subs	r4, r4, r5
 800471a:	10a4      	asrs	r4, r4, #2
 800471c:	2600      	movs	r6, #0
 800471e:	42a6      	cmp	r6, r4
 8004720:	d105      	bne.n	800472e <__libc_init_array+0x2e>
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	f855 3b04 	ldr.w	r3, [r5], #4
 8004728:	4798      	blx	r3
 800472a:	3601      	adds	r6, #1
 800472c:	e7ee      	b.n	800470c <__libc_init_array+0xc>
 800472e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004732:	4798      	blx	r3
 8004734:	3601      	adds	r6, #1
 8004736:	e7f2      	b.n	800471e <__libc_init_array+0x1e>
 8004738:	08007370 	.word	0x08007370
 800473c:	08007370 	.word	0x08007370
 8004740:	08007370 	.word	0x08007370
 8004744:	08007374 	.word	0x08007374

08004748 <__retarget_lock_init_recursive>:
 8004748:	4770      	bx	lr

0800474a <__retarget_lock_acquire_recursive>:
 800474a:	4770      	bx	lr

0800474c <__retarget_lock_release_recursive>:
 800474c:	4770      	bx	lr

0800474e <memcpy>:
 800474e:	440a      	add	r2, r1
 8004750:	4291      	cmp	r1, r2
 8004752:	f100 33ff 	add.w	r3, r0, #4294967295
 8004756:	d100      	bne.n	800475a <memcpy+0xc>
 8004758:	4770      	bx	lr
 800475a:	b510      	push	{r4, lr}
 800475c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004764:	4291      	cmp	r1, r2
 8004766:	d1f9      	bne.n	800475c <memcpy+0xe>
 8004768:	bd10      	pop	{r4, pc}
	...

0800476c <_free_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4605      	mov	r5, r0
 8004770:	2900      	cmp	r1, #0
 8004772:	d041      	beq.n	80047f8 <_free_r+0x8c>
 8004774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004778:	1f0c      	subs	r4, r1, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	bfb8      	it	lt
 800477e:	18e4      	addlt	r4, r4, r3
 8004780:	f7ff fd44 	bl	800420c <__malloc_lock>
 8004784:	4a1d      	ldr	r2, [pc, #116]	@ (80047fc <_free_r+0x90>)
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	b933      	cbnz	r3, 8004798 <_free_r+0x2c>
 800478a:	6063      	str	r3, [r4, #4]
 800478c:	6014      	str	r4, [r2, #0]
 800478e:	4628      	mov	r0, r5
 8004790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004794:	f7ff bd40 	b.w	8004218 <__malloc_unlock>
 8004798:	42a3      	cmp	r3, r4
 800479a:	d908      	bls.n	80047ae <_free_r+0x42>
 800479c:	6820      	ldr	r0, [r4, #0]
 800479e:	1821      	adds	r1, r4, r0
 80047a0:	428b      	cmp	r3, r1
 80047a2:	bf01      	itttt	eq
 80047a4:	6819      	ldreq	r1, [r3, #0]
 80047a6:	685b      	ldreq	r3, [r3, #4]
 80047a8:	1809      	addeq	r1, r1, r0
 80047aa:	6021      	streq	r1, [r4, #0]
 80047ac:	e7ed      	b.n	800478a <_free_r+0x1e>
 80047ae:	461a      	mov	r2, r3
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	b10b      	cbz	r3, 80047b8 <_free_r+0x4c>
 80047b4:	42a3      	cmp	r3, r4
 80047b6:	d9fa      	bls.n	80047ae <_free_r+0x42>
 80047b8:	6811      	ldr	r1, [r2, #0]
 80047ba:	1850      	adds	r0, r2, r1
 80047bc:	42a0      	cmp	r0, r4
 80047be:	d10b      	bne.n	80047d8 <_free_r+0x6c>
 80047c0:	6820      	ldr	r0, [r4, #0]
 80047c2:	4401      	add	r1, r0
 80047c4:	1850      	adds	r0, r2, r1
 80047c6:	4283      	cmp	r3, r0
 80047c8:	6011      	str	r1, [r2, #0]
 80047ca:	d1e0      	bne.n	800478e <_free_r+0x22>
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	6053      	str	r3, [r2, #4]
 80047d2:	4408      	add	r0, r1
 80047d4:	6010      	str	r0, [r2, #0]
 80047d6:	e7da      	b.n	800478e <_free_r+0x22>
 80047d8:	d902      	bls.n	80047e0 <_free_r+0x74>
 80047da:	230c      	movs	r3, #12
 80047dc:	602b      	str	r3, [r5, #0]
 80047de:	e7d6      	b.n	800478e <_free_r+0x22>
 80047e0:	6820      	ldr	r0, [r4, #0]
 80047e2:	1821      	adds	r1, r4, r0
 80047e4:	428b      	cmp	r3, r1
 80047e6:	bf04      	itt	eq
 80047e8:	6819      	ldreq	r1, [r3, #0]
 80047ea:	685b      	ldreq	r3, [r3, #4]
 80047ec:	6063      	str	r3, [r4, #4]
 80047ee:	bf04      	itt	eq
 80047f0:	1809      	addeq	r1, r1, r0
 80047f2:	6021      	streq	r1, [r4, #0]
 80047f4:	6054      	str	r4, [r2, #4]
 80047f6:	e7ca      	b.n	800478e <_free_r+0x22>
 80047f8:	bd38      	pop	{r3, r4, r5, pc}
 80047fa:	bf00      	nop
 80047fc:	20000130 	.word	0x20000130

08004800 <__sfputc_r>:
 8004800:	6893      	ldr	r3, [r2, #8]
 8004802:	3b01      	subs	r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	b410      	push	{r4}
 8004808:	6093      	str	r3, [r2, #8]
 800480a:	da08      	bge.n	800481e <__sfputc_r+0x1e>
 800480c:	6994      	ldr	r4, [r2, #24]
 800480e:	42a3      	cmp	r3, r4
 8004810:	db01      	blt.n	8004816 <__sfputc_r+0x16>
 8004812:	290a      	cmp	r1, #10
 8004814:	d103      	bne.n	800481e <__sfputc_r+0x1e>
 8004816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800481a:	f7ff be78 	b.w	800450e <__swbuf_r>
 800481e:	6813      	ldr	r3, [r2, #0]
 8004820:	1c58      	adds	r0, r3, #1
 8004822:	6010      	str	r0, [r2, #0]
 8004824:	7019      	strb	r1, [r3, #0]
 8004826:	4608      	mov	r0, r1
 8004828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800482c:	4770      	bx	lr

0800482e <__sfputs_r>:
 800482e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004830:	4606      	mov	r6, r0
 8004832:	460f      	mov	r7, r1
 8004834:	4614      	mov	r4, r2
 8004836:	18d5      	adds	r5, r2, r3
 8004838:	42ac      	cmp	r4, r5
 800483a:	d101      	bne.n	8004840 <__sfputs_r+0x12>
 800483c:	2000      	movs	r0, #0
 800483e:	e007      	b.n	8004850 <__sfputs_r+0x22>
 8004840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004844:	463a      	mov	r2, r7
 8004846:	4630      	mov	r0, r6
 8004848:	f7ff ffda 	bl	8004800 <__sfputc_r>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d1f3      	bne.n	8004838 <__sfputs_r+0xa>
 8004850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004854 <_vfiprintf_r>:
 8004854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	460d      	mov	r5, r1
 800485a:	b09d      	sub	sp, #116	@ 0x74
 800485c:	4614      	mov	r4, r2
 800485e:	4698      	mov	r8, r3
 8004860:	4606      	mov	r6, r0
 8004862:	b118      	cbz	r0, 800486c <_vfiprintf_r+0x18>
 8004864:	6a03      	ldr	r3, [r0, #32]
 8004866:	b90b      	cbnz	r3, 800486c <_vfiprintf_r+0x18>
 8004868:	f7ff fd68 	bl	800433c <__sinit>
 800486c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800486e:	07d9      	lsls	r1, r3, #31
 8004870:	d405      	bmi.n	800487e <_vfiprintf_r+0x2a>
 8004872:	89ab      	ldrh	r3, [r5, #12]
 8004874:	059a      	lsls	r2, r3, #22
 8004876:	d402      	bmi.n	800487e <_vfiprintf_r+0x2a>
 8004878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800487a:	f7ff ff66 	bl	800474a <__retarget_lock_acquire_recursive>
 800487e:	89ab      	ldrh	r3, [r5, #12]
 8004880:	071b      	lsls	r3, r3, #28
 8004882:	d501      	bpl.n	8004888 <_vfiprintf_r+0x34>
 8004884:	692b      	ldr	r3, [r5, #16]
 8004886:	b99b      	cbnz	r3, 80048b0 <_vfiprintf_r+0x5c>
 8004888:	4629      	mov	r1, r5
 800488a:	4630      	mov	r0, r6
 800488c:	f7ff fe7e 	bl	800458c <__swsetup_r>
 8004890:	b170      	cbz	r0, 80048b0 <_vfiprintf_r+0x5c>
 8004892:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004894:	07dc      	lsls	r4, r3, #31
 8004896:	d504      	bpl.n	80048a2 <_vfiprintf_r+0x4e>
 8004898:	f04f 30ff 	mov.w	r0, #4294967295
 800489c:	b01d      	add	sp, #116	@ 0x74
 800489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	0598      	lsls	r0, r3, #22
 80048a6:	d4f7      	bmi.n	8004898 <_vfiprintf_r+0x44>
 80048a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80048aa:	f7ff ff4f 	bl	800474c <__retarget_lock_release_recursive>
 80048ae:	e7f3      	b.n	8004898 <_vfiprintf_r+0x44>
 80048b0:	2300      	movs	r3, #0
 80048b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80048b4:	2320      	movs	r3, #32
 80048b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80048be:	2330      	movs	r3, #48	@ 0x30
 80048c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004a70 <_vfiprintf_r+0x21c>
 80048c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048c8:	f04f 0901 	mov.w	r9, #1
 80048cc:	4623      	mov	r3, r4
 80048ce:	469a      	mov	sl, r3
 80048d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048d4:	b10a      	cbz	r2, 80048da <_vfiprintf_r+0x86>
 80048d6:	2a25      	cmp	r2, #37	@ 0x25
 80048d8:	d1f9      	bne.n	80048ce <_vfiprintf_r+0x7a>
 80048da:	ebba 0b04 	subs.w	fp, sl, r4
 80048de:	d00b      	beq.n	80048f8 <_vfiprintf_r+0xa4>
 80048e0:	465b      	mov	r3, fp
 80048e2:	4622      	mov	r2, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	4630      	mov	r0, r6
 80048e8:	f7ff ffa1 	bl	800482e <__sfputs_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	f000 80a7 	beq.w	8004a40 <_vfiprintf_r+0x1ec>
 80048f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048f4:	445a      	add	r2, fp
 80048f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80048f8:	f89a 3000 	ldrb.w	r3, [sl]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 809f 	beq.w	8004a40 <_vfiprintf_r+0x1ec>
 8004902:	2300      	movs	r3, #0
 8004904:	f04f 32ff 	mov.w	r2, #4294967295
 8004908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800490c:	f10a 0a01 	add.w	sl, sl, #1
 8004910:	9304      	str	r3, [sp, #16]
 8004912:	9307      	str	r3, [sp, #28]
 8004914:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004918:	931a      	str	r3, [sp, #104]	@ 0x68
 800491a:	4654      	mov	r4, sl
 800491c:	2205      	movs	r2, #5
 800491e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004922:	4853      	ldr	r0, [pc, #332]	@ (8004a70 <_vfiprintf_r+0x21c>)
 8004924:	f7fb fc64 	bl	80001f0 <memchr>
 8004928:	9a04      	ldr	r2, [sp, #16]
 800492a:	b9d8      	cbnz	r0, 8004964 <_vfiprintf_r+0x110>
 800492c:	06d1      	lsls	r1, r2, #27
 800492e:	bf44      	itt	mi
 8004930:	2320      	movmi	r3, #32
 8004932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004936:	0713      	lsls	r3, r2, #28
 8004938:	bf44      	itt	mi
 800493a:	232b      	movmi	r3, #43	@ 0x2b
 800493c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004940:	f89a 3000 	ldrb.w	r3, [sl]
 8004944:	2b2a      	cmp	r3, #42	@ 0x2a
 8004946:	d015      	beq.n	8004974 <_vfiprintf_r+0x120>
 8004948:	9a07      	ldr	r2, [sp, #28]
 800494a:	4654      	mov	r4, sl
 800494c:	2000      	movs	r0, #0
 800494e:	f04f 0c0a 	mov.w	ip, #10
 8004952:	4621      	mov	r1, r4
 8004954:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004958:	3b30      	subs	r3, #48	@ 0x30
 800495a:	2b09      	cmp	r3, #9
 800495c:	d94b      	bls.n	80049f6 <_vfiprintf_r+0x1a2>
 800495e:	b1b0      	cbz	r0, 800498e <_vfiprintf_r+0x13a>
 8004960:	9207      	str	r2, [sp, #28]
 8004962:	e014      	b.n	800498e <_vfiprintf_r+0x13a>
 8004964:	eba0 0308 	sub.w	r3, r0, r8
 8004968:	fa09 f303 	lsl.w	r3, r9, r3
 800496c:	4313      	orrs	r3, r2
 800496e:	9304      	str	r3, [sp, #16]
 8004970:	46a2      	mov	sl, r4
 8004972:	e7d2      	b.n	800491a <_vfiprintf_r+0xc6>
 8004974:	9b03      	ldr	r3, [sp, #12]
 8004976:	1d19      	adds	r1, r3, #4
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	9103      	str	r1, [sp, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	bfbb      	ittet	lt
 8004980:	425b      	neglt	r3, r3
 8004982:	f042 0202 	orrlt.w	r2, r2, #2
 8004986:	9307      	strge	r3, [sp, #28]
 8004988:	9307      	strlt	r3, [sp, #28]
 800498a:	bfb8      	it	lt
 800498c:	9204      	strlt	r2, [sp, #16]
 800498e:	7823      	ldrb	r3, [r4, #0]
 8004990:	2b2e      	cmp	r3, #46	@ 0x2e
 8004992:	d10a      	bne.n	80049aa <_vfiprintf_r+0x156>
 8004994:	7863      	ldrb	r3, [r4, #1]
 8004996:	2b2a      	cmp	r3, #42	@ 0x2a
 8004998:	d132      	bne.n	8004a00 <_vfiprintf_r+0x1ac>
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	9203      	str	r2, [sp, #12]
 80049a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049a6:	3402      	adds	r4, #2
 80049a8:	9305      	str	r3, [sp, #20]
 80049aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a80 <_vfiprintf_r+0x22c>
 80049ae:	7821      	ldrb	r1, [r4, #0]
 80049b0:	2203      	movs	r2, #3
 80049b2:	4650      	mov	r0, sl
 80049b4:	f7fb fc1c 	bl	80001f0 <memchr>
 80049b8:	b138      	cbz	r0, 80049ca <_vfiprintf_r+0x176>
 80049ba:	9b04      	ldr	r3, [sp, #16]
 80049bc:	eba0 000a 	sub.w	r0, r0, sl
 80049c0:	2240      	movs	r2, #64	@ 0x40
 80049c2:	4082      	lsls	r2, r0
 80049c4:	4313      	orrs	r3, r2
 80049c6:	3401      	adds	r4, #1
 80049c8:	9304      	str	r3, [sp, #16]
 80049ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ce:	4829      	ldr	r0, [pc, #164]	@ (8004a74 <_vfiprintf_r+0x220>)
 80049d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049d4:	2206      	movs	r2, #6
 80049d6:	f7fb fc0b 	bl	80001f0 <memchr>
 80049da:	2800      	cmp	r0, #0
 80049dc:	d03f      	beq.n	8004a5e <_vfiprintf_r+0x20a>
 80049de:	4b26      	ldr	r3, [pc, #152]	@ (8004a78 <_vfiprintf_r+0x224>)
 80049e0:	bb1b      	cbnz	r3, 8004a2a <_vfiprintf_r+0x1d6>
 80049e2:	9b03      	ldr	r3, [sp, #12]
 80049e4:	3307      	adds	r3, #7
 80049e6:	f023 0307 	bic.w	r3, r3, #7
 80049ea:	3308      	adds	r3, #8
 80049ec:	9303      	str	r3, [sp, #12]
 80049ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f0:	443b      	add	r3, r7
 80049f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80049f4:	e76a      	b.n	80048cc <_vfiprintf_r+0x78>
 80049f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80049fa:	460c      	mov	r4, r1
 80049fc:	2001      	movs	r0, #1
 80049fe:	e7a8      	b.n	8004952 <_vfiprintf_r+0xfe>
 8004a00:	2300      	movs	r3, #0
 8004a02:	3401      	adds	r4, #1
 8004a04:	9305      	str	r3, [sp, #20]
 8004a06:	4619      	mov	r1, r3
 8004a08:	f04f 0c0a 	mov.w	ip, #10
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a12:	3a30      	subs	r2, #48	@ 0x30
 8004a14:	2a09      	cmp	r2, #9
 8004a16:	d903      	bls.n	8004a20 <_vfiprintf_r+0x1cc>
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0c6      	beq.n	80049aa <_vfiprintf_r+0x156>
 8004a1c:	9105      	str	r1, [sp, #20]
 8004a1e:	e7c4      	b.n	80049aa <_vfiprintf_r+0x156>
 8004a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a24:	4604      	mov	r4, r0
 8004a26:	2301      	movs	r3, #1
 8004a28:	e7f0      	b.n	8004a0c <_vfiprintf_r+0x1b8>
 8004a2a:	ab03      	add	r3, sp, #12
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	462a      	mov	r2, r5
 8004a30:	4b12      	ldr	r3, [pc, #72]	@ (8004a7c <_vfiprintf_r+0x228>)
 8004a32:	a904      	add	r1, sp, #16
 8004a34:	4630      	mov	r0, r6
 8004a36:	f3af 8000 	nop.w
 8004a3a:	4607      	mov	r7, r0
 8004a3c:	1c78      	adds	r0, r7, #1
 8004a3e:	d1d6      	bne.n	80049ee <_vfiprintf_r+0x19a>
 8004a40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	d405      	bmi.n	8004a52 <_vfiprintf_r+0x1fe>
 8004a46:	89ab      	ldrh	r3, [r5, #12]
 8004a48:	059a      	lsls	r2, r3, #22
 8004a4a:	d402      	bmi.n	8004a52 <_vfiprintf_r+0x1fe>
 8004a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a4e:	f7ff fe7d 	bl	800474c <__retarget_lock_release_recursive>
 8004a52:	89ab      	ldrh	r3, [r5, #12]
 8004a54:	065b      	lsls	r3, r3, #25
 8004a56:	f53f af1f 	bmi.w	8004898 <_vfiprintf_r+0x44>
 8004a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a5c:	e71e      	b.n	800489c <_vfiprintf_r+0x48>
 8004a5e:	ab03      	add	r3, sp, #12
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	462a      	mov	r2, r5
 8004a64:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <_vfiprintf_r+0x228>)
 8004a66:	a904      	add	r1, sp, #16
 8004a68:	4630      	mov	r0, r6
 8004a6a:	f000 f879 	bl	8004b60 <_printf_i>
 8004a6e:	e7e4      	b.n	8004a3a <_vfiprintf_r+0x1e6>
 8004a70:	08007334 	.word	0x08007334
 8004a74:	0800733e 	.word	0x0800733e
 8004a78:	00000000 	.word	0x00000000
 8004a7c:	0800482f 	.word	0x0800482f
 8004a80:	0800733a 	.word	0x0800733a

08004a84 <_printf_common>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	4616      	mov	r6, r2
 8004a8a:	4698      	mov	r8, r3
 8004a8c:	688a      	ldr	r2, [r1, #8]
 8004a8e:	690b      	ldr	r3, [r1, #16]
 8004a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bfb8      	it	lt
 8004a98:	4613      	movlt	r3, r2
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b10a      	cbz	r2, 8004aaa <_printf_common+0x26>
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	6033      	str	r3, [r6, #0]
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	0699      	lsls	r1, r3, #26
 8004aae:	bf42      	ittt	mi
 8004ab0:	6833      	ldrmi	r3, [r6, #0]
 8004ab2:	3302      	addmi	r3, #2
 8004ab4:	6033      	strmi	r3, [r6, #0]
 8004ab6:	6825      	ldr	r5, [r4, #0]
 8004ab8:	f015 0506 	ands.w	r5, r5, #6
 8004abc:	d106      	bne.n	8004acc <_printf_common+0x48>
 8004abe:	f104 0a19 	add.w	sl, r4, #25
 8004ac2:	68e3      	ldr	r3, [r4, #12]
 8004ac4:	6832      	ldr	r2, [r6, #0]
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	42ab      	cmp	r3, r5
 8004aca:	dc26      	bgt.n	8004b1a <_printf_common+0x96>
 8004acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	3b00      	subs	r3, #0
 8004ad4:	bf18      	it	ne
 8004ad6:	2301      	movne	r3, #1
 8004ad8:	0692      	lsls	r2, r2, #26
 8004ada:	d42b      	bmi.n	8004b34 <_printf_common+0xb0>
 8004adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ae0:	4641      	mov	r1, r8
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	47c8      	blx	r9
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d01e      	beq.n	8004b28 <_printf_common+0xa4>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	6922      	ldr	r2, [r4, #16]
 8004aee:	f003 0306 	and.w	r3, r3, #6
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	bf02      	ittt	eq
 8004af6:	68e5      	ldreq	r5, [r4, #12]
 8004af8:	6833      	ldreq	r3, [r6, #0]
 8004afa:	1aed      	subeq	r5, r5, r3
 8004afc:	68a3      	ldr	r3, [r4, #8]
 8004afe:	bf0c      	ite	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	2500      	movne	r5, #0
 8004b06:	4293      	cmp	r3, r2
 8004b08:	bfc4      	itt	gt
 8004b0a:	1a9b      	subgt	r3, r3, r2
 8004b0c:	18ed      	addgt	r5, r5, r3
 8004b0e:	2600      	movs	r6, #0
 8004b10:	341a      	adds	r4, #26
 8004b12:	42b5      	cmp	r5, r6
 8004b14:	d11a      	bne.n	8004b4c <_printf_common+0xc8>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e008      	b.n	8004b2c <_printf_common+0xa8>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	4641      	mov	r1, r8
 8004b20:	4638      	mov	r0, r7
 8004b22:	47c8      	blx	r9
 8004b24:	3001      	adds	r0, #1
 8004b26:	d103      	bne.n	8004b30 <_printf_common+0xac>
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b30:	3501      	adds	r5, #1
 8004b32:	e7c6      	b.n	8004ac2 <_printf_common+0x3e>
 8004b34:	18e1      	adds	r1, r4, r3
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	2030      	movs	r0, #48	@ 0x30
 8004b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b3e:	4422      	add	r2, r4
 8004b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b48:	3302      	adds	r3, #2
 8004b4a:	e7c7      	b.n	8004adc <_printf_common+0x58>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4622      	mov	r2, r4
 8004b50:	4641      	mov	r1, r8
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c8      	blx	r9
 8004b56:	3001      	adds	r0, #1
 8004b58:	d0e6      	beq.n	8004b28 <_printf_common+0xa4>
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7d9      	b.n	8004b12 <_printf_common+0x8e>
	...

08004b60 <_printf_i>:
 8004b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	7e0f      	ldrb	r7, [r1, #24]
 8004b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b68:	2f78      	cmp	r7, #120	@ 0x78
 8004b6a:	4691      	mov	r9, r2
 8004b6c:	4680      	mov	r8, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	469a      	mov	sl, r3
 8004b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b76:	d807      	bhi.n	8004b88 <_printf_i+0x28>
 8004b78:	2f62      	cmp	r7, #98	@ 0x62
 8004b7a:	d80a      	bhi.n	8004b92 <_printf_i+0x32>
 8004b7c:	2f00      	cmp	r7, #0
 8004b7e:	f000 80d2 	beq.w	8004d26 <_printf_i+0x1c6>
 8004b82:	2f58      	cmp	r7, #88	@ 0x58
 8004b84:	f000 80b9 	beq.w	8004cfa <_printf_i+0x19a>
 8004b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b90:	e03a      	b.n	8004c08 <_printf_i+0xa8>
 8004b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b96:	2b15      	cmp	r3, #21
 8004b98:	d8f6      	bhi.n	8004b88 <_printf_i+0x28>
 8004b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004ba0 <_printf_i+0x40>)
 8004b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004b89 	.word	0x08004b89
 8004bac:	08004b89 	.word	0x08004b89
 8004bb0:	08004b89 	.word	0x08004b89
 8004bb4:	08004b89 	.word	0x08004b89
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004b89 	.word	0x08004b89
 8004bc0:	08004b89 	.word	0x08004b89
 8004bc4:	08004b89 	.word	0x08004b89
 8004bc8:	08004b89 	.word	0x08004b89
 8004bcc:	08004d0d 	.word	0x08004d0d
 8004bd0:	08004c37 	.word	0x08004c37
 8004bd4:	08004cc7 	.word	0x08004cc7
 8004bd8:	08004b89 	.word	0x08004b89
 8004bdc:	08004b89 	.word	0x08004b89
 8004be0:	08004d2f 	.word	0x08004d2f
 8004be4:	08004b89 	.word	0x08004b89
 8004be8:	08004c37 	.word	0x08004c37
 8004bec:	08004b89 	.word	0x08004b89
 8004bf0:	08004b89 	.word	0x08004b89
 8004bf4:	08004ccf 	.word	0x08004ccf
 8004bf8:	6833      	ldr	r3, [r6, #0]
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6032      	str	r2, [r6, #0]
 8004c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e09d      	b.n	8004d48 <_printf_i+0x1e8>
 8004c0c:	6833      	ldr	r3, [r6, #0]
 8004c0e:	6820      	ldr	r0, [r4, #0]
 8004c10:	1d19      	adds	r1, r3, #4
 8004c12:	6031      	str	r1, [r6, #0]
 8004c14:	0606      	lsls	r6, r0, #24
 8004c16:	d501      	bpl.n	8004c1c <_printf_i+0xbc>
 8004c18:	681d      	ldr	r5, [r3, #0]
 8004c1a:	e003      	b.n	8004c24 <_printf_i+0xc4>
 8004c1c:	0645      	lsls	r5, r0, #25
 8004c1e:	d5fb      	bpl.n	8004c18 <_printf_i+0xb8>
 8004c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c24:	2d00      	cmp	r5, #0
 8004c26:	da03      	bge.n	8004c30 <_printf_i+0xd0>
 8004c28:	232d      	movs	r3, #45	@ 0x2d
 8004c2a:	426d      	negs	r5, r5
 8004c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c30:	4859      	ldr	r0, [pc, #356]	@ (8004d98 <_printf_i+0x238>)
 8004c32:	230a      	movs	r3, #10
 8004c34:	e011      	b.n	8004c5a <_printf_i+0xfa>
 8004c36:	6821      	ldr	r1, [r4, #0]
 8004c38:	6833      	ldr	r3, [r6, #0]
 8004c3a:	0608      	lsls	r0, r1, #24
 8004c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c40:	d402      	bmi.n	8004c48 <_printf_i+0xe8>
 8004c42:	0649      	lsls	r1, r1, #25
 8004c44:	bf48      	it	mi
 8004c46:	b2ad      	uxthmi	r5, r5
 8004c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c4a:	4853      	ldr	r0, [pc, #332]	@ (8004d98 <_printf_i+0x238>)
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	bf14      	ite	ne
 8004c50:	230a      	movne	r3, #10
 8004c52:	2308      	moveq	r3, #8
 8004c54:	2100      	movs	r1, #0
 8004c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c5a:	6866      	ldr	r6, [r4, #4]
 8004c5c:	60a6      	str	r6, [r4, #8]
 8004c5e:	2e00      	cmp	r6, #0
 8004c60:	bfa2      	ittt	ge
 8004c62:	6821      	ldrge	r1, [r4, #0]
 8004c64:	f021 0104 	bicge.w	r1, r1, #4
 8004c68:	6021      	strge	r1, [r4, #0]
 8004c6a:	b90d      	cbnz	r5, 8004c70 <_printf_i+0x110>
 8004c6c:	2e00      	cmp	r6, #0
 8004c6e:	d04b      	beq.n	8004d08 <_printf_i+0x1a8>
 8004c70:	4616      	mov	r6, r2
 8004c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c76:	fb03 5711 	mls	r7, r3, r1, r5
 8004c7a:	5dc7      	ldrb	r7, [r0, r7]
 8004c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c80:	462f      	mov	r7, r5
 8004c82:	42bb      	cmp	r3, r7
 8004c84:	460d      	mov	r5, r1
 8004c86:	d9f4      	bls.n	8004c72 <_printf_i+0x112>
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d10b      	bne.n	8004ca4 <_printf_i+0x144>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	07df      	lsls	r7, r3, #31
 8004c90:	d508      	bpl.n	8004ca4 <_printf_i+0x144>
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	6861      	ldr	r1, [r4, #4]
 8004c96:	4299      	cmp	r1, r3
 8004c98:	bfde      	ittt	le
 8004c9a:	2330      	movle	r3, #48	@ 0x30
 8004c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ca4:	1b92      	subs	r2, r2, r6
 8004ca6:	6122      	str	r2, [r4, #16]
 8004ca8:	f8cd a000 	str.w	sl, [sp]
 8004cac:	464b      	mov	r3, r9
 8004cae:	aa03      	add	r2, sp, #12
 8004cb0:	4621      	mov	r1, r4
 8004cb2:	4640      	mov	r0, r8
 8004cb4:	f7ff fee6 	bl	8004a84 <_printf_common>
 8004cb8:	3001      	adds	r0, #1
 8004cba:	d14a      	bne.n	8004d52 <_printf_i+0x1f2>
 8004cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc0:	b004      	add	sp, #16
 8004cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	f043 0320 	orr.w	r3, r3, #32
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	4833      	ldr	r0, [pc, #204]	@ (8004d9c <_printf_i+0x23c>)
 8004cd0:	2778      	movs	r7, #120	@ 0x78
 8004cd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	6831      	ldr	r1, [r6, #0]
 8004cda:	061f      	lsls	r7, r3, #24
 8004cdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ce0:	d402      	bmi.n	8004ce8 <_printf_i+0x188>
 8004ce2:	065f      	lsls	r7, r3, #25
 8004ce4:	bf48      	it	mi
 8004ce6:	b2ad      	uxthmi	r5, r5
 8004ce8:	6031      	str	r1, [r6, #0]
 8004cea:	07d9      	lsls	r1, r3, #31
 8004cec:	bf44      	itt	mi
 8004cee:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf2:	6023      	strmi	r3, [r4, #0]
 8004cf4:	b11d      	cbz	r5, 8004cfe <_printf_i+0x19e>
 8004cf6:	2310      	movs	r3, #16
 8004cf8:	e7ac      	b.n	8004c54 <_printf_i+0xf4>
 8004cfa:	4827      	ldr	r0, [pc, #156]	@ (8004d98 <_printf_i+0x238>)
 8004cfc:	e7e9      	b.n	8004cd2 <_printf_i+0x172>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	f023 0320 	bic.w	r3, r3, #32
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	e7f6      	b.n	8004cf6 <_printf_i+0x196>
 8004d08:	4616      	mov	r6, r2
 8004d0a:	e7bd      	b.n	8004c88 <_printf_i+0x128>
 8004d0c:	6833      	ldr	r3, [r6, #0]
 8004d0e:	6825      	ldr	r5, [r4, #0]
 8004d10:	6961      	ldr	r1, [r4, #20]
 8004d12:	1d18      	adds	r0, r3, #4
 8004d14:	6030      	str	r0, [r6, #0]
 8004d16:	062e      	lsls	r6, r5, #24
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	d501      	bpl.n	8004d20 <_printf_i+0x1c0>
 8004d1c:	6019      	str	r1, [r3, #0]
 8004d1e:	e002      	b.n	8004d26 <_printf_i+0x1c6>
 8004d20:	0668      	lsls	r0, r5, #25
 8004d22:	d5fb      	bpl.n	8004d1c <_printf_i+0x1bc>
 8004d24:	8019      	strh	r1, [r3, #0]
 8004d26:	2300      	movs	r3, #0
 8004d28:	6123      	str	r3, [r4, #16]
 8004d2a:	4616      	mov	r6, r2
 8004d2c:	e7bc      	b.n	8004ca8 <_printf_i+0x148>
 8004d2e:	6833      	ldr	r3, [r6, #0]
 8004d30:	1d1a      	adds	r2, r3, #4
 8004d32:	6032      	str	r2, [r6, #0]
 8004d34:	681e      	ldr	r6, [r3, #0]
 8004d36:	6862      	ldr	r2, [r4, #4]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f7fb fa58 	bl	80001f0 <memchr>
 8004d40:	b108      	cbz	r0, 8004d46 <_printf_i+0x1e6>
 8004d42:	1b80      	subs	r0, r0, r6
 8004d44:	6060      	str	r0, [r4, #4]
 8004d46:	6863      	ldr	r3, [r4, #4]
 8004d48:	6123      	str	r3, [r4, #16]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d50:	e7aa      	b.n	8004ca8 <_printf_i+0x148>
 8004d52:	6923      	ldr	r3, [r4, #16]
 8004d54:	4632      	mov	r2, r6
 8004d56:	4649      	mov	r1, r9
 8004d58:	4640      	mov	r0, r8
 8004d5a:	47d0      	blx	sl
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d0ad      	beq.n	8004cbc <_printf_i+0x15c>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	079b      	lsls	r3, r3, #30
 8004d64:	d413      	bmi.n	8004d8e <_printf_i+0x22e>
 8004d66:	68e0      	ldr	r0, [r4, #12]
 8004d68:	9b03      	ldr	r3, [sp, #12]
 8004d6a:	4298      	cmp	r0, r3
 8004d6c:	bfb8      	it	lt
 8004d6e:	4618      	movlt	r0, r3
 8004d70:	e7a6      	b.n	8004cc0 <_printf_i+0x160>
 8004d72:	2301      	movs	r3, #1
 8004d74:	4632      	mov	r2, r6
 8004d76:	4649      	mov	r1, r9
 8004d78:	4640      	mov	r0, r8
 8004d7a:	47d0      	blx	sl
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d09d      	beq.n	8004cbc <_printf_i+0x15c>
 8004d80:	3501      	adds	r5, #1
 8004d82:	68e3      	ldr	r3, [r4, #12]
 8004d84:	9903      	ldr	r1, [sp, #12]
 8004d86:	1a5b      	subs	r3, r3, r1
 8004d88:	42ab      	cmp	r3, r5
 8004d8a:	dcf2      	bgt.n	8004d72 <_printf_i+0x212>
 8004d8c:	e7eb      	b.n	8004d66 <_printf_i+0x206>
 8004d8e:	2500      	movs	r5, #0
 8004d90:	f104 0619 	add.w	r6, r4, #25
 8004d94:	e7f5      	b.n	8004d82 <_printf_i+0x222>
 8004d96:	bf00      	nop
 8004d98:	08007345 	.word	0x08007345
 8004d9c:	08007356 	.word	0x08007356

08004da0 <__sflush_r>:
 8004da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da8:	0716      	lsls	r6, r2, #28
 8004daa:	4605      	mov	r5, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	d454      	bmi.n	8004e5a <__sflush_r+0xba>
 8004db0:	684b      	ldr	r3, [r1, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dc02      	bgt.n	8004dbc <__sflush_r+0x1c>
 8004db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	dd48      	ble.n	8004e4e <__sflush_r+0xae>
 8004dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	d045      	beq.n	8004e4e <__sflush_r+0xae>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dc8:	682f      	ldr	r7, [r5, #0]
 8004dca:	6a21      	ldr	r1, [r4, #32]
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	d030      	beq.n	8004e32 <__sflush_r+0x92>
 8004dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	0759      	lsls	r1, r3, #29
 8004dd6:	d505      	bpl.n	8004de4 <__sflush_r+0x44>
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dde:	b10b      	cbz	r3, 8004de4 <__sflush_r+0x44>
 8004de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004de8:	6a21      	ldr	r1, [r4, #32]
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b0      	blx	r6
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	d106      	bne.n	8004e02 <__sflush_r+0x62>
 8004df4:	6829      	ldr	r1, [r5, #0]
 8004df6:	291d      	cmp	r1, #29
 8004df8:	d82b      	bhi.n	8004e52 <__sflush_r+0xb2>
 8004dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea4 <__sflush_r+0x104>)
 8004dfc:	410a      	asrs	r2, r1
 8004dfe:	07d6      	lsls	r6, r2, #31
 8004e00:	d427      	bmi.n	8004e52 <__sflush_r+0xb2>
 8004e02:	2200      	movs	r2, #0
 8004e04:	6062      	str	r2, [r4, #4]
 8004e06:	04d9      	lsls	r1, r3, #19
 8004e08:	6922      	ldr	r2, [r4, #16]
 8004e0a:	6022      	str	r2, [r4, #0]
 8004e0c:	d504      	bpl.n	8004e18 <__sflush_r+0x78>
 8004e0e:	1c42      	adds	r2, r0, #1
 8004e10:	d101      	bne.n	8004e16 <__sflush_r+0x76>
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	b903      	cbnz	r3, 8004e18 <__sflush_r+0x78>
 8004e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e1a:	602f      	str	r7, [r5, #0]
 8004e1c:	b1b9      	cbz	r1, 8004e4e <__sflush_r+0xae>
 8004e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e22:	4299      	cmp	r1, r3
 8004e24:	d002      	beq.n	8004e2c <__sflush_r+0x8c>
 8004e26:	4628      	mov	r0, r5
 8004e28:	f7ff fca0 	bl	800476c <_free_r>
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e30:	e00d      	b.n	8004e4e <__sflush_r+0xae>
 8004e32:	2301      	movs	r3, #1
 8004e34:	4628      	mov	r0, r5
 8004e36:	47b0      	blx	r6
 8004e38:	4602      	mov	r2, r0
 8004e3a:	1c50      	adds	r0, r2, #1
 8004e3c:	d1c9      	bne.n	8004dd2 <__sflush_r+0x32>
 8004e3e:	682b      	ldr	r3, [r5, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0c6      	beq.n	8004dd2 <__sflush_r+0x32>
 8004e44:	2b1d      	cmp	r3, #29
 8004e46:	d001      	beq.n	8004e4c <__sflush_r+0xac>
 8004e48:	2b16      	cmp	r3, #22
 8004e4a:	d11e      	bne.n	8004e8a <__sflush_r+0xea>
 8004e4c:	602f      	str	r7, [r5, #0]
 8004e4e:	2000      	movs	r0, #0
 8004e50:	e022      	b.n	8004e98 <__sflush_r+0xf8>
 8004e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e56:	b21b      	sxth	r3, r3
 8004e58:	e01b      	b.n	8004e92 <__sflush_r+0xf2>
 8004e5a:	690f      	ldr	r7, [r1, #16]
 8004e5c:	2f00      	cmp	r7, #0
 8004e5e:	d0f6      	beq.n	8004e4e <__sflush_r+0xae>
 8004e60:	0793      	lsls	r3, r2, #30
 8004e62:	680e      	ldr	r6, [r1, #0]
 8004e64:	bf08      	it	eq
 8004e66:	694b      	ldreq	r3, [r1, #20]
 8004e68:	600f      	str	r7, [r1, #0]
 8004e6a:	bf18      	it	ne
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	eba6 0807 	sub.w	r8, r6, r7
 8004e72:	608b      	str	r3, [r1, #8]
 8004e74:	f1b8 0f00 	cmp.w	r8, #0
 8004e78:	dde9      	ble.n	8004e4e <__sflush_r+0xae>
 8004e7a:	6a21      	ldr	r1, [r4, #32]
 8004e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e7e:	4643      	mov	r3, r8
 8004e80:	463a      	mov	r2, r7
 8004e82:	4628      	mov	r0, r5
 8004e84:	47b0      	blx	r6
 8004e86:	2800      	cmp	r0, #0
 8004e88:	dc08      	bgt.n	8004e9c <__sflush_r+0xfc>
 8004e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e92:	81a3      	strh	r3, [r4, #12]
 8004e94:	f04f 30ff 	mov.w	r0, #4294967295
 8004e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e9c:	4407      	add	r7, r0
 8004e9e:	eba8 0800 	sub.w	r8, r8, r0
 8004ea2:	e7e7      	b.n	8004e74 <__sflush_r+0xd4>
 8004ea4:	dfbffffe 	.word	0xdfbffffe

08004ea8 <_fflush_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	4605      	mov	r5, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	b913      	cbnz	r3, 8004eb8 <_fflush_r+0x10>
 8004eb2:	2500      	movs	r5, #0
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	bd38      	pop	{r3, r4, r5, pc}
 8004eb8:	b118      	cbz	r0, 8004ec2 <_fflush_r+0x1a>
 8004eba:	6a03      	ldr	r3, [r0, #32]
 8004ebc:	b90b      	cbnz	r3, 8004ec2 <_fflush_r+0x1a>
 8004ebe:	f7ff fa3d 	bl	800433c <__sinit>
 8004ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f3      	beq.n	8004eb2 <_fflush_r+0xa>
 8004eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ecc:	07d0      	lsls	r0, r2, #31
 8004ece:	d404      	bmi.n	8004eda <_fflush_r+0x32>
 8004ed0:	0599      	lsls	r1, r3, #22
 8004ed2:	d402      	bmi.n	8004eda <_fflush_r+0x32>
 8004ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ed6:	f7ff fc38 	bl	800474a <__retarget_lock_acquire_recursive>
 8004eda:	4628      	mov	r0, r5
 8004edc:	4621      	mov	r1, r4
 8004ede:	f7ff ff5f 	bl	8004da0 <__sflush_r>
 8004ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ee4:	07da      	lsls	r2, r3, #31
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	d4e4      	bmi.n	8004eb4 <_fflush_r+0xc>
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	059b      	lsls	r3, r3, #22
 8004eee:	d4e1      	bmi.n	8004eb4 <_fflush_r+0xc>
 8004ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ef2:	f7ff fc2b 	bl	800474c <__retarget_lock_release_recursive>
 8004ef6:	e7dd      	b.n	8004eb4 <_fflush_r+0xc>

08004ef8 <__swhatbuf_r>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	460c      	mov	r4, r1
 8004efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f00:	2900      	cmp	r1, #0
 8004f02:	b096      	sub	sp, #88	@ 0x58
 8004f04:	4615      	mov	r5, r2
 8004f06:	461e      	mov	r6, r3
 8004f08:	da0d      	bge.n	8004f26 <__swhatbuf_r+0x2e>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f10:	f04f 0100 	mov.w	r1, #0
 8004f14:	bf14      	ite	ne
 8004f16:	2340      	movne	r3, #64	@ 0x40
 8004f18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	6031      	str	r1, [r6, #0]
 8004f20:	602b      	str	r3, [r5, #0]
 8004f22:	b016      	add	sp, #88	@ 0x58
 8004f24:	bd70      	pop	{r4, r5, r6, pc}
 8004f26:	466a      	mov	r2, sp
 8004f28:	f000 f848 	bl	8004fbc <_fstat_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	dbec      	blt.n	8004f0a <__swhatbuf_r+0x12>
 8004f30:	9901      	ldr	r1, [sp, #4]
 8004f32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f3a:	4259      	negs	r1, r3
 8004f3c:	4159      	adcs	r1, r3
 8004f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f42:	e7eb      	b.n	8004f1c <__swhatbuf_r+0x24>

08004f44 <__smakebuf_r>:
 8004f44:	898b      	ldrh	r3, [r1, #12]
 8004f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f48:	079d      	lsls	r5, r3, #30
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	d507      	bpl.n	8004f60 <__smakebuf_r+0x1c>
 8004f50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	6163      	str	r3, [r4, #20]
 8004f5c:	b003      	add	sp, #12
 8004f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f60:	ab01      	add	r3, sp, #4
 8004f62:	466a      	mov	r2, sp
 8004f64:	f7ff ffc8 	bl	8004ef8 <__swhatbuf_r>
 8004f68:	9f00      	ldr	r7, [sp, #0]
 8004f6a:	4605      	mov	r5, r0
 8004f6c:	4639      	mov	r1, r7
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7ff f8cc 	bl	800410c <_malloc_r>
 8004f74:	b948      	cbnz	r0, 8004f8a <__smakebuf_r+0x46>
 8004f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f7a:	059a      	lsls	r2, r3, #22
 8004f7c:	d4ee      	bmi.n	8004f5c <__smakebuf_r+0x18>
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	f043 0302 	orr.w	r3, r3, #2
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	e7e2      	b.n	8004f50 <__smakebuf_r+0xc>
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	6020      	str	r0, [r4, #0]
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f92:	81a3      	strh	r3, [r4, #12]
 8004f94:	9b01      	ldr	r3, [sp, #4]
 8004f96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f9a:	b15b      	cbz	r3, 8004fb4 <__smakebuf_r+0x70>
 8004f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 f81d 	bl	8004fe0 <_isatty_r>
 8004fa6:	b128      	cbz	r0, 8004fb4 <__smakebuf_r+0x70>
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	f043 0301 	orr.w	r3, r3, #1
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	431d      	orrs	r5, r3
 8004fb8:	81a5      	strh	r5, [r4, #12]
 8004fba:	e7cf      	b.n	8004f5c <__smakebuf_r+0x18>

08004fbc <_fstat_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d07      	ldr	r5, [pc, #28]	@ (8004fdc <_fstat_r+0x20>)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	602b      	str	r3, [r5, #0]
 8004fca:	f7fb fdf0 	bl	8000bae <_fstat>
 8004fce:	1c43      	adds	r3, r0, #1
 8004fd0:	d102      	bne.n	8004fd8 <_fstat_r+0x1c>
 8004fd2:	682b      	ldr	r3, [r5, #0]
 8004fd4:	b103      	cbz	r3, 8004fd8 <_fstat_r+0x1c>
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	bd38      	pop	{r3, r4, r5, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000270 	.word	0x20000270

08004fe0 <_isatty_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d06      	ldr	r5, [pc, #24]	@ (8004ffc <_isatty_r+0x1c>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	f7fb fdef 	bl	8000bce <_isatty>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_isatty_r+0x1a>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_isatty_r+0x1a>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000270 	.word	0x20000270

08005000 <_init>:
 8005000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005002:	bf00      	nop
 8005004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005006:	bc08      	pop	{r3}
 8005008:	469e      	mov	lr, r3
 800500a:	4770      	bx	lr

0800500c <_fini>:
 800500c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500e:	bf00      	nop
 8005010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005012:	bc08      	pop	{r3}
 8005014:	469e      	mov	lr, r3
 8005016:	4770      	bx	lr
