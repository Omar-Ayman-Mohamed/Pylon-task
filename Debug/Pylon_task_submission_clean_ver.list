
Pylon_task_submission_clean_ver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8b4  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030f8  0800ca50  0800ca50  0000da50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb48  0800fb48  00011068  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb48  0800fb48  00010b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb50  0800fb50  00011068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb50  0800fb50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb54  0800fb54  00010b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800fb58  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  0800fbc0  00011068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800fbc0  00011270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d36  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003775  00000000  00000000  00023dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00027548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3e  00000000  00000000  00028538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185bc  00000000  00000000  00029176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017558  00000000  00000000  00041732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff39  00000000  00000000  00058c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8bc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044bc  00000000  00000000  000e8c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000ed0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ca34 	.word	0x0800ca34

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	0800ca34 	.word	0x0800ca34

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96a 	b.w	80004d4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	460c      	mov	r4, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14e      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000224:	4694      	mov	ip, r2
 8000226:	458c      	cmp	ip, r1
 8000228:	4686      	mov	lr, r0
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	d962      	bls.n	80002f6 <__udivmoddi4+0xde>
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0320 	rsb	r3, r2, #32
 8000236:	4091      	lsls	r1, r2
 8000238:	fa20 f303 	lsr.w	r3, r0, r3
 800023c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000240:	4319      	orrs	r1, r3
 8000242:	fa00 fe02 	lsl.w	lr, r0, r2
 8000246:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024a:	fa1f f68c 	uxth.w	r6, ip
 800024e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000252:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000256:	fb07 1114 	mls	r1, r7, r4, r1
 800025a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025e:	fb04 f106 	mul.w	r1, r4, r6
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f104 30ff 	add.w	r0, r4, #4294967295
 800026e:	f080 8112 	bcs.w	8000496 <__udivmoddi4+0x27e>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 810f 	bls.w	8000496 <__udivmoddi4+0x27e>
 8000278:	3c02      	subs	r4, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a59      	subs	r1, r3, r1
 800027e:	fa1f f38e 	uxth.w	r3, lr
 8000282:	fbb1 f0f7 	udiv	r0, r1, r7
 8000286:	fb07 1110 	mls	r1, r7, r0, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb00 f606 	mul.w	r6, r0, r6
 8000292:	429e      	cmp	r6, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x94>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f100 31ff 	add.w	r1, r0, #4294967295
 800029e:	f080 80fc 	bcs.w	800049a <__udivmoddi4+0x282>
 80002a2:	429e      	cmp	r6, r3
 80002a4:	f240 80f9 	bls.w	800049a <__udivmoddi4+0x282>
 80002a8:	4463      	add	r3, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	1b9b      	subs	r3, r3, r6
 80002ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa6>
 80002b6:	40d3      	lsrs	r3, r2
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xba>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb4>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa6>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x150>
 80002da:	42a3      	cmp	r3, r4
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xcc>
 80002de:	4290      	cmp	r0, r2
 80002e0:	f0c0 80f0 	bcc.w	80004c4 <__udivmoddi4+0x2ac>
 80002e4:	1a86      	subs	r6, r0, r2
 80002e6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	2d00      	cmp	r5, #0
 80002ee:	d0e6      	beq.n	80002be <__udivmoddi4+0xa6>
 80002f0:	e9c5 6300 	strd	r6, r3, [r5]
 80002f4:	e7e3      	b.n	80002be <__udivmoddi4+0xa6>
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	f040 8090 	bne.w	800041c <__udivmoddi4+0x204>
 80002fc:	eba1 040c 	sub.w	r4, r1, ip
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	fa1f f78c 	uxth.w	r7, ip
 8000308:	2101      	movs	r1, #1
 800030a:	fbb4 f6f8 	udiv	r6, r4, r8
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb08 4416 	mls	r4, r8, r6, r4
 8000316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031a:	fb07 f006 	mul.w	r0, r7, r6
 800031e:	4298      	cmp	r0, r3
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x11c>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f106 34ff 	add.w	r4, r6, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x11a>
 800032c:	4298      	cmp	r0, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 8000332:	4626      	mov	r6, r4
 8000334:	1a1c      	subs	r4, r3, r0
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb4 f0f8 	udiv	r0, r4, r8
 800033e:	fb08 4410 	mls	r4, r8, r0, r4
 8000342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000346:	fb00 f707 	mul.w	r7, r0, r7
 800034a:	429f      	cmp	r7, r3
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x148>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 34ff 	add.w	r4, r0, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x146>
 8000358:	429f      	cmp	r7, r3
 800035a:	f200 80b0 	bhi.w	80004be <__udivmoddi4+0x2a6>
 800035e:	4620      	mov	r0, r4
 8000360:	1bdb      	subs	r3, r3, r7
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x9c>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa20 fc06 	lsr.w	ip, r0, r6
 8000378:	fa04 f301 	lsl.w	r3, r4, r1
 800037c:	ea43 030c 	orr.w	r3, r3, ip
 8000380:	40f4      	lsrs	r4, r6
 8000382:	fa00 f801 	lsl.w	r8, r0, r1
 8000386:	0c38      	lsrs	r0, r7, #16
 8000388:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800038c:	fbb4 fef0 	udiv	lr, r4, r0
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	fb00 441e 	mls	r4, r0, lr, r4
 8000398:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800039c:	fb0e f90c 	mul.w	r9, lr, ip
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d90a      	bls.n	80003be <__udivmoddi4+0x1a6>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ae:	f080 8084 	bcs.w	80004ba <__udivmoddi4+0x2a2>
 80003b2:	45a1      	cmp	r9, r4
 80003b4:	f240 8081 	bls.w	80004ba <__udivmoddi4+0x2a2>
 80003b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003bc:	443c      	add	r4, r7
 80003be:	eba4 0409 	sub.w	r4, r4, r9
 80003c2:	fa1f f983 	uxth.w	r9, r3
 80003c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ca:	fb00 4413 	mls	r4, r0, r3, r4
 80003ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d907      	bls.n	80003ea <__udivmoddi4+0x1d2>
 80003da:	193c      	adds	r4, r7, r4
 80003dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e0:	d267      	bcs.n	80004b2 <__udivmoddi4+0x29a>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0x29a>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ee:	fba0 9302 	umull	r9, r3, r0, r2
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	429c      	cmp	r4, r3
 80003f8:	46ce      	mov	lr, r9
 80003fa:	469c      	mov	ip, r3
 80003fc:	d351      	bcc.n	80004a2 <__udivmoddi4+0x28a>
 80003fe:	d04e      	beq.n	800049e <__udivmoddi4+0x286>
 8000400:	b155      	cbz	r5, 8000418 <__udivmoddi4+0x200>
 8000402:	ebb8 030e 	subs.w	r3, r8, lr
 8000406:	eb64 040c 	sbc.w	r4, r4, ip
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	40cb      	lsrs	r3, r1
 8000410:	431e      	orrs	r6, r3
 8000412:	40cc      	lsrs	r4, r1
 8000414:	e9c5 6400 	strd	r6, r4, [r5]
 8000418:	2100      	movs	r1, #0
 800041a:	e750      	b.n	80002be <__udivmoddi4+0xa6>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f103 	lsr.w	r1, r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa24 f303 	lsr.w	r3, r4, r3
 800042c:	4094      	lsls	r4, r2
 800042e:	430c      	orrs	r4, r1
 8000430:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000434:	fa00 fe02 	lsl.w	lr, r0, r2
 8000438:	fa1f f78c 	uxth.w	r7, ip
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3110 	mls	r1, r8, r0, r3
 8000444:	0c23      	lsrs	r3, r4, #16
 8000446:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044a:	fb00 f107 	mul.w	r1, r0, r7
 800044e:	4299      	cmp	r1, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x24c>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 36ff 	add.w	r6, r0, #4294967295
 800045a:	d22c      	bcs.n	80004b6 <__udivmoddi4+0x29e>
 800045c:	4299      	cmp	r1, r3
 800045e:	d92a      	bls.n	80004b6 <__udivmoddi4+0x29e>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1a5b      	subs	r3, r3, r1
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb3 f1f8 	udiv	r1, r3, r8
 800046c:	fb08 3311 	mls	r3, r8, r1, r3
 8000470:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000474:	fb01 f307 	mul.w	r3, r1, r7
 8000478:	42a3      	cmp	r3, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x276>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f101 36ff 	add.w	r6, r1, #4294967295
 8000484:	d213      	bcs.n	80004ae <__udivmoddi4+0x296>
 8000486:	42a3      	cmp	r3, r4
 8000488:	d911      	bls.n	80004ae <__udivmoddi4+0x296>
 800048a:	3902      	subs	r1, #2
 800048c:	4464      	add	r4, ip
 800048e:	1ae4      	subs	r4, r4, r3
 8000490:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000494:	e739      	b.n	800030a <__udivmoddi4+0xf2>
 8000496:	4604      	mov	r4, r0
 8000498:	e6f0      	b.n	800027c <__udivmoddi4+0x64>
 800049a:	4608      	mov	r0, r1
 800049c:	e706      	b.n	80002ac <__udivmoddi4+0x94>
 800049e:	45c8      	cmp	r8, r9
 80004a0:	d2ae      	bcs.n	8000400 <__udivmoddi4+0x1e8>
 80004a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004aa:	3801      	subs	r0, #1
 80004ac:	e7a8      	b.n	8000400 <__udivmoddi4+0x1e8>
 80004ae:	4631      	mov	r1, r6
 80004b0:	e7ed      	b.n	800048e <__udivmoddi4+0x276>
 80004b2:	4603      	mov	r3, r0
 80004b4:	e799      	b.n	80003ea <__udivmoddi4+0x1d2>
 80004b6:	4630      	mov	r0, r6
 80004b8:	e7d4      	b.n	8000464 <__udivmoddi4+0x24c>
 80004ba:	46d6      	mov	lr, sl
 80004bc:	e77f      	b.n	80003be <__udivmoddi4+0x1a6>
 80004be:	4463      	add	r3, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e74d      	b.n	8000360 <__udivmoddi4+0x148>
 80004c4:	4606      	mov	r6, r0
 80004c6:	4623      	mov	r3, r4
 80004c8:	4608      	mov	r0, r1
 80004ca:	e70f      	b.n	80002ec <__udivmoddi4+0xd4>
 80004cc:	3e02      	subs	r6, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	e730      	b.n	8000334 <__udivmoddi4+0x11c>
 80004d2:	bf00      	nop

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <aes_gcm_encrypt>:
mbedtls_aes_free(&aes);
}

int aes_gcm_encrypt(unsigned char *key,size_t KEY_SIZE,unsigned char *iv,size_t IV_SIZE,unsigned char * input, size_t input_len,
		 unsigned char * output,unsigned char *aad,size_t aad_len, unsigned char * tag)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b0f1      	sub	sp, #452	@ 0x1c4
 80004dc:	af08      	add	r7, sp, #32
 80004de:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 80004e2:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 80004e6:	6020      	str	r0, [r4, #0]
 80004e8:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80004ec:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 80004f0:	6001      	str	r1, [r0, #0]
 80004f2:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80004f6:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80004fa:	600a      	str	r2, [r1, #0]
 80004fc:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8000500:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8000504:	6013      	str	r3, [r2, #0]
    mbedtls_gcm_context gcm;
    mbedtls_gcm_init(&gcm);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4618      	mov	r0, r3
 800050c:	f007 fdb3 	bl	8008076 <mbedtls_gcm_init>
    mbedtls_gcm_setkey(&gcm, MBEDTLS_CIPHER_ID_AES, key, KEY_SIZE * 8);
 8000510:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000514:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8000520:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 8000524:	f107 0010 	add.w	r0, r7, #16
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	2102      	movs	r1, #2
 800052c:	f007 ff2b 	bl	8008386 <mbedtls_gcm_setkey>
    int ret = mbedtls_gcm_crypt_and_tag(&gcm, MBEDTLS_GCM_ENCRYPT, input_len, iv, IV_SIZE,
 8000530:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000534:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000538:	f107 0010 	add.w	r0, r7, #16
 800053c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8000540:	9206      	str	r2, [sp, #24]
 8000542:	2210      	movs	r2, #16
 8000544:	9205      	str	r2, [sp, #20]
 8000546:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800054a:	9204      	str	r2, [sp, #16]
 800054c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8000550:	9203      	str	r2, [sp, #12]
 8000552:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8000556:	9202      	str	r2, [sp, #8]
 8000558:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800055c:	9201      	str	r2, [sp, #4]
 800055e:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8000562:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8000566:	6812      	ldr	r2, [r2, #0]
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000570:	2101      	movs	r1, #1
 8000572:	f008 fc79 	bl	8008e68 <mbedtls_gcm_crypt_and_tag>
 8000576:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
                              aad, aad_len, input, output, TAG_SIZE, tag);
    mbedtls_gcm_free(&gcm);
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	4618      	mov	r0, r3
 8000580:	f008 fcf1 	bl	8008f66 <mbedtls_gcm_free>
    return ret;
 8000584:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 8000588:	4618      	mov	r0, r3
 800058a:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800058e:	46bd      	mov	sp, r7
 8000590:	bd90      	pop	{r4, r7, pc}

08000592 <aes_gcm_decrypt>:
int aes_gcm_decrypt(unsigned char *key,size_t KEY_SIZE,unsigned char *iv,size_t IV_SIZE,unsigned char *input, size_t input_len,
		unsigned char *output,unsigned char *aad,size_t aad_len ,unsigned char *tag)
{
 8000592:	b590      	push	{r4, r7, lr}
 8000594:	b0ef      	sub	sp, #444	@ 0x1bc
 8000596:	af06      	add	r7, sp, #24
 8000598:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 800059c:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 80005a0:	6020      	str	r0, [r4, #0]
 80005a2:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80005a6:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 80005aa:	6001      	str	r1, [r0, #0]
 80005ac:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80005b0:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80005b4:	600a      	str	r2, [r1, #0]
 80005b6:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80005ba:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80005be:	6013      	str	r3, [r2, #0]
    mbedtls_gcm_context gcm;
    mbedtls_gcm_init(&gcm);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4618      	mov	r0, r3
 80005c6:	f007 fd56 	bl	8008076 <mbedtls_gcm_init>
    mbedtls_gcm_setkey(&gcm, MBEDTLS_CIPHER_ID_AES, key, KEY_SIZE * 8);
 80005ca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005ce:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	00db      	lsls	r3, r3, #3
 80005d6:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80005da:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80005de:	f107 0010 	add.w	r0, r7, #16
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	2102      	movs	r1, #2
 80005e6:	f007 fece 	bl	8008386 <mbedtls_gcm_setkey>
    int ret = mbedtls_gcm_auth_decrypt(&gcm, input_len, iv,IV_SIZE, aad, aad_len,
 80005ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80005ee:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80005f2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80005f6:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80005fa:	f107 0010 	add.w	r0, r7, #16
 80005fe:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8000602:	9105      	str	r1, [sp, #20]
 8000604:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8000608:	9104      	str	r1, [sp, #16]
 800060a:	2110      	movs	r1, #16
 800060c:	9103      	str	r1, [sp, #12]
 800060e:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8000612:	9102      	str	r1, [sp, #8]
 8000614:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8000618:	9101      	str	r1, [sp, #4]
 800061a:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 800061e:	9100      	str	r1, [sp, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8000628:	f008 fc51 	bl	8008ece <mbedtls_gcm_auth_decrypt>
 800062c:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
                                    tag, TAG_SIZE, input, output);
    mbedtls_gcm_free(&gcm);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4618      	mov	r0, r3
 8000636:	f008 fc96 	bl	8008f66 <mbedtls_gcm_free>
    return ret;
 800063a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 800063e:	4618      	mov	r0, r3
 8000640:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}

08000648 <generate_random>:


void generate_random(unsigned char *buffer, size_t length,unsigned char*personalized_text,size_t personalized_text_len) {
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	f5ad 7d1b 	sub.w	sp, sp, #620	@ 0x26c
 800064e:	af02      	add	r7, sp, #8
 8000650:	f507 7418 	add.w	r4, r7, #608	@ 0x260
 8000654:	f5a4 7415 	sub.w	r4, r4, #596	@ 0x254
 8000658:	6020      	str	r0, [r4, #0]
 800065a:	f507 7018 	add.w	r0, r7, #608	@ 0x260
 800065e:	f5a0 7016 	sub.w	r0, r0, #600	@ 0x258
 8000662:	6001      	str	r1, [r0, #0]
 8000664:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8000668:	f5a1 7117 	sub.w	r1, r1, #604	@ 0x25c
 800066c:	600a      	str	r2, [r1, #0]
 800066e:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8000672:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 8000676:	6013      	str	r3, [r2, #0]
    mbedtls_entropy_context entropy;
    mbedtls_ctr_drbg_context ctr_drbg;

    mbedtls_entropy_init(&entropy);
 8000678:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800067c:	4618      	mov	r0, r3
 800067e:	f007 fb18 	bl	8007cb2 <mbedtls_entropy_init>
    mbedtls_ctr_drbg_init(&ctr_drbg);
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	4618      	mov	r0, r3
 8000688:	f006 fed6 	bl	8007438 <mbedtls_ctr_drbg_init>
    mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, personalized_text, personalized_text_len);
 800068c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8000690:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8000694:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8000698:	f107 0010 	add.w	r0, r7, #16
 800069c:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80006a0:	f5a2 7218 	sub.w	r2, r2, #608	@ 0x260
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	9200      	str	r2, [sp, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	460a      	mov	r2, r1
 80006ac:	490f      	ldr	r1, [pc, #60]	@ (80006ec <generate_random+0xa4>)
 80006ae:	f006 ff12 	bl	80074d6 <mbedtls_ctr_drbg_seed>
    mbedtls_ctr_drbg_random(&ctr_drbg, buffer, length);
 80006b2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80006b6:	f5a3 7216 	sub.w	r2, r3, #600	@ 0x258
 80006ba:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80006be:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80006c2:	f107 0010 	add.w	r0, r7, #16
 80006c6:	6812      	ldr	r2, [r2, #0]
 80006c8:	6819      	ldr	r1, [r3, #0]
 80006ca:	f007 fadc 	bl	8007c86 <mbedtls_ctr_drbg_random>

    mbedtls_ctr_drbg_free(&ctr_drbg);
 80006ce:	f107 0310 	add.w	r3, r7, #16
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 ff15 	bl	8007502 <mbedtls_ctr_drbg_free>
    mbedtls_entropy_free(&entropy);
 80006d8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80006dc:	4618      	mov	r0, r3
 80006de:	f007 fb03 	bl	8007ce8 <mbedtls_entropy_free>
}
 80006e2:	bf00      	nop
 80006e4:	f507 7719 	add.w	r7, r7, #612	@ 0x264
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}
 80006ec:	08007eff 	.word	0x08007eff

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80006f6:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	  unsigned char plaintext[] = "This is a secret message";
 80006f8:	4b3c      	ldr	r3, [pc, #240]	@ (80007ec <main+0xfc>)
 80006fa:	f507 740c 	add.w	r4, r7, #560	@ 0x230
 80006fe:	461d      	mov	r5, r3
 8000700:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000702:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000704:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000708:	c403      	stmia	r4!, {r0, r1}
 800070a:	7022      	strb	r2, [r4, #0]
	    unsigned char ciphertext[128];
	    unsigned char decrypted[128];
	    unsigned char padded_plaintext[128];/*padded buffer for use with AES-CBC encryption*/
	    unsigned char Recieved_encrypted_data[128];
	    unsigned char Tag[TAG_SIZE];/*tag for AES-GCM encryption*/
	    size_t plaintext_len = strlen((char *)plaintext);
 800070c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd61 	bl	80001d8 <strlen>
 8000716:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c

	    /*for testing purposes*/
	    unsigned char rand_key[16] = "0123456789123456";
 800071a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800071e:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8000722:	4a33      	ldr	r2, [pc, #204]	@ (80007f0 <main+0x100>)
 8000724:	461c      	mov	r4, r3
 8000726:	4613      	mov	r3, r2
 8000728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800072a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    unsigned char rand_iv[16] = "aasd1245anmios78";
 800072e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000732:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 8000736:	4a2f      	ldr	r2, [pc, #188]	@ (80007f4 <main+0x104>)
 8000738:	461c      	mov	r4, r3
 800073a:	4613      	mov	r3, r2
 800073c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800073e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    generate_random(rand_key,16,pers,pers_len);
 8000742:	4b2d      	ldr	r3, [pc, #180]	@ (80007f8 <main+0x108>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f107 0010 	add.w	r0, r7, #16
 800074a:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <main+0x10c>)
 800074c:	2110      	movs	r1, #16
 800074e:	f7ff ff7b 	bl	8000648 <generate_random>
	    generate_random(rand_iv,16,pers,pers_len);
 8000752:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <main+0x108>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4638      	mov	r0, r7
 8000758:	4a28      	ldr	r2, [pc, #160]	@ (80007fc <main+0x10c>)
 800075a:	2110      	movs	r1, #16
 800075c:	f7ff ff74 	bl	8000648 <generate_random>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f000 faaa 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f856 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 f90c 	bl	8000984 <MX_GPIO_Init>
  MX_I2C1_Init();
 800076c:	f000 f8b2 	bl	80008d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000770:	f000 f8de 	bl	8000930 <MX_USART1_UART_Init>
  MX_MBEDTLS_Init();
 8000774:	f002 fbd8 	bl	8002f28 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */
  aes_gcm_encrypt(GCM_key,AES_GCM_KEY_SIZE,GCM_iv,AES_GCM_IV_SIZE,plaintext,plaintext_len,ciphertext,aad,aad_len,Tag);
 8000778:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <main+0x110>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f107 0220 	add.w	r2, r7, #32
 8000780:	9205      	str	r2, [sp, #20]
 8000782:	9304      	str	r3, [sp, #16]
 8000784:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <main+0x114>)
 8000786:	9303      	str	r3, [sp, #12]
 8000788:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	230c      	movs	r3, #12
 800079c:	4a1a      	ldr	r2, [pc, #104]	@ (8000808 <main+0x118>)
 800079e:	2120      	movs	r1, #32
 80007a0:	481a      	ldr	r0, [pc, #104]	@ (800080c <main+0x11c>)
 80007a2:	f7ff fe99 	bl	80004d8 <aes_gcm_encrypt>
  HAL_UART_Transmit(&huart1,ciphertext,plaintext_len,HAL_MAX_DELAY);
 80007a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	f507 71d8 	add.w	r1, r7, #432	@ 0x1b0
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <main+0x120>)
 80007b6:	f001 fc05 	bl	8001fc4 <HAL_UART_Transmit>
  aes_gcm_decrypt(GCM_key,AES_GCM_KEY_SIZE,GCM_iv,AES_GCM_IV_SIZE,ciphertext,plaintext_len,decrypted,aad,aad_len,Tag);
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <main+0x110>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f107 0220 	add.w	r2, r7, #32
 80007c2:	9205      	str	r2, [sp, #20]
 80007c4:	9304      	str	r3, [sp, #16]
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <main+0x114>)
 80007c8:	9303      	str	r3, [sp, #12]
 80007ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80007d4:	9301      	str	r3, [sp, #4]
 80007d6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	230c      	movs	r3, #12
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <main+0x118>)
 80007e0:	2120      	movs	r1, #32
 80007e2:	480a      	ldr	r0, [pc, #40]	@ (800080c <main+0x11c>)
 80007e4:	f7ff fed5 	bl	8000592 <aes_gcm_decrypt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e8:	bf00      	nop
 80007ea:	e7fd      	b.n	80007e8 <main+0xf8>
 80007ec:	0800ca50 	.word	0x0800ca50
 80007f0:	0800ca6c 	.word	0x0800ca6c
 80007f4:	0800ca7c 	.word	0x0800ca7c
 80007f8:	20000004 	.word	0x20000004
 80007fc:	0800cc40 	.word	0x0800cc40
 8000800:	20000000 	.word	0x20000000
 8000804:	0800cc08 	.word	0x0800cc08
 8000808:	0800cc34 	.word	0x0800cc34
 800080c:	0800cc14 	.word	0x0800cc14
 8000810:	200000d8 	.word	0x200000d8

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	@ 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f00c f86a 	bl	800c8fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b23      	ldr	r3, [pc, #140]	@ (80008cc <SystemClock_Config+0xb8>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000840:	4a22      	ldr	r2, [pc, #136]	@ (80008cc <SystemClock_Config+0xb8>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	@ 0x40
 8000848:	4b20      	ldr	r3, [pc, #128]	@ (80008cc <SystemClock_Config+0xb8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <SystemClock_Config+0xbc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000860:	4a1b      	ldr	r2, [pc, #108]	@ (80008d0 <SystemClock_Config+0xbc>)
 8000862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <SystemClock_Config+0xbc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000880:	2300      	movs	r3, #0
 8000882:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fef3 	bl	8001674 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000894:	f000 f89e 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f001 f956 	bl	8001b64 <HAL_RCC_ClockConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008be:	f000 f889 	bl	80009d4 <Error_Handler>
  }
}
 80008c2:	bf00      	nop
 80008c4:	3750      	adds	r7, #80	@ 0x50
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_I2C1_Init+0x50>)
 80008da:	4a13      	ldr	r2, [pc, #76]	@ (8000928 <MX_I2C1_Init+0x54>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_I2C1_Init+0x50>)
 80008e0:	4a12      	ldr	r2, [pc, #72]	@ (800092c <MX_I2C1_Init+0x58>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_I2C1_Init+0x50>)
 80008f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_I2C1_Init+0x50>)
 8000912:	f000 fd6b 	bl	80013ec <HAL_I2C_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 f85a 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000084 	.word	0x20000084
 8000928:	40005400 	.word	0x40005400
 800092c:	000186a0 	.word	0x000186a0

08000930 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <MX_USART1_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_USART1_UART_Init+0x4c>)
 8000968:	f001 fadc 	bl	8001f24 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f82f 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000d8 	.word	0x200000d8
 8000980:	40011000 	.word	0x40011000

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_GPIO_Init+0x4c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <MX_GPIO_Init+0x4c>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <MX_GPIO_Init+0x4c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_GPIO_Init+0x4c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <MX_GPIO_Init+0x4c>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_GPIO_Init+0x4c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <Error_Handler+0x8>

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a19      	ldr	r2, [pc, #100]	@ (8000ab4 <HAL_I2C_MspInit+0x84>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d12b      	bne.n	8000aaa <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	4a17      	ldr	r2, [pc, #92]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a6e:	23c0      	movs	r3, #192	@ 0xc0
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a72:	2312      	movs	r3, #18
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a7e:	2304      	movs	r3, #4
 8000a80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <HAL_I2C_MspInit+0x8c>)
 8000a8a:	f000 fb2b 	bl	80010e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	@ 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <HAL_UART_MspInit+0x94>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d134      	bne.n	8000b4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <HAL_UART_MspInit+0x98>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a1b      	ldr	r2, [pc, #108]	@ (8000b58 <HAL_UART_MspInit+0x98>)
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <HAL_UART_MspInit+0x98>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_UART_MspInit+0x98>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <HAL_UART_MspInit+0x98>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <HAL_UART_MspInit+0x98>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <HAL_UART_MspInit+0x9c>)
 8000b38:	f000 fad4 	bl	80010e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2025      	movs	r0, #37	@ 0x25
 8000b42:	f000 fa06 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b46:	2025      	movs	r0, #37	@ 0x25
 8000b48:	f000 fa1f 	bl	8000f8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b4c:	bf00      	nop
 8000b4e:	3728      	adds	r7, #40	@ 0x28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	40011000 	.word	0x40011000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <MemManage_Handler+0x4>

08000b78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb6:	f000 f8d1 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <USART1_IRQHandler+0x10>)
 8000bc6:	f001 fa89 	bl	80020dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	200000d8 	.word	0x200000d8

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f00b fe92 	bl	800c92c <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20010000 	.word	0x20010000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	20000120 	.word	0x20000120
 8000c3c:	20000270 	.word	0x20000270

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c68:	f7ff ffea 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c92:	f00b fe51 	bl	800c938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fd2b 	bl	80006f0 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c9c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ca8:	0800fb58 	.word	0x0800fb58
  ldr r2, =_sbss
 8000cac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb0:	20000270 	.word	0x20000270

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f92b 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe78 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f943 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f90b 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000010 	.word	0x20000010
 8000d58:	2000000c 	.word	0x2000000c

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	20000124 	.word	0x20000124

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000124 	.word	0x20000124

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	@ (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff29 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff3e 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff31 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffa2 	bl	8000ef8 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b084      	sub	sp, #16
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fcc:	f7ff feda 	bl	8000d84 <HAL_GetTick>
 8000fd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d008      	beq.n	8000ff0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2280      	movs	r2, #128	@ 0x80
 8000fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e052      	b.n	8001096 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f022 0216 	bic.w	r2, r2, #22
 8000ffe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	695a      	ldr	r2, [r3, #20]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800100e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	2b00      	cmp	r3, #0
 8001016:	d103      	bne.n	8001020 <HAL_DMA_Abort+0x62>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f022 0208 	bic.w	r2, r2, #8
 800102e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001040:	e013      	b.n	800106a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001042:	f7ff fe9f 	bl	8000d84 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b05      	cmp	r3, #5
 800104e:	d90c      	bls.n	800106a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2220      	movs	r2, #32
 8001054:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2203      	movs	r2, #3
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e015      	b.n	8001096 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e4      	bne.n	8001042 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800107c:	223f      	movs	r2, #63	@ 0x3f
 800107e:	409a      	lsls	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d004      	beq.n	80010bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2280      	movs	r2, #128	@ 0x80
 80010b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e00c      	b.n	80010d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2205      	movs	r2, #5
 80010c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	@ 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	e159      	b.n	80013b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	f040 8148 	bne.w	80013ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	2b01      	cmp	r3, #1
 8001128:	d005      	beq.n	8001136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001132:	2b02      	cmp	r3, #2
 8001134:	d130      	bne.n	8001198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	68da      	ldr	r2, [r3, #12]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800116c:	2201      	movs	r2, #1
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	091b      	lsrs	r3, r3, #4
 8001182:	f003 0201 	and.w	r2, r3, #1
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d017      	beq.n	80011d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d123      	bne.n	8001228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	69b9      	ldr	r1, [r7, #24]
 8001224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	2203      	movs	r2, #3
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0203 	and.w	r2, r3, #3
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a2 	beq.w	80013ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b57      	ldr	r3, [pc, #348]	@ (80013cc <HAL_GPIO_Init+0x2e8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a56      	ldr	r2, [pc, #344]	@ (80013cc <HAL_GPIO_Init+0x2e8>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b54      	ldr	r3, [pc, #336]	@ (80013cc <HAL_GPIO_Init+0x2e8>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001286:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <HAL_GPIO_Init+0x2ec>)
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3302      	adds	r3, #2
 800128e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	220f      	movs	r2, #15
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a49      	ldr	r2, [pc, #292]	@ (80013d4 <HAL_GPIO_Init+0x2f0>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x202>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a48      	ldr	r2, [pc, #288]	@ (80013d8 <HAL_GPIO_Init+0x2f4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x1fe>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a47      	ldr	r2, [pc, #284]	@ (80013dc <HAL_GPIO_Init+0x2f8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1fa>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a46      	ldr	r2, [pc, #280]	@ (80013e0 <HAL_GPIO_Init+0x2fc>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1f6>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a45      	ldr	r2, [pc, #276]	@ (80013e4 <HAL_GPIO_Init+0x300>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1f2>
 80012d2:	2304      	movs	r3, #4
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x204>
 80012e6:	2300      	movs	r3, #0
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	f002 0203 	and.w	r2, r2, #3
 80012ee:	0092      	lsls	r2, r2, #2
 80012f0:	4093      	lsls	r3, r2
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012f8:	4935      	ldr	r1, [pc, #212]	@ (80013d0 <HAL_GPIO_Init+0x2ec>)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800132a:	4a2f      	ldr	r2, [pc, #188]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001354:	4a24      	ldr	r2, [pc, #144]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800135a:	4b23      	ldr	r3, [pc, #140]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800137e:	4a1a      	ldr	r2, [pc, #104]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001384:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013a8:	4a0f      	ldr	r2, [pc, #60]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b0f      	cmp	r3, #15
 80013b8:	f67f aea2 	bls.w	8001100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e12b      	b.n	8001656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d106      	bne.n	8001418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fb0c 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2224      	movs	r2, #36	@ 0x24
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 0201 	bic.w	r2, r2, #1
 800142e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800143e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800144e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001450:	f000 fd40 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8001454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	4a81      	ldr	r2, [pc, #516]	@ (8001660 <HAL_I2C_Init+0x274>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d807      	bhi.n	8001470 <HAL_I2C_Init+0x84>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4a80      	ldr	r2, [pc, #512]	@ (8001664 <HAL_I2C_Init+0x278>)
 8001464:	4293      	cmp	r3, r2
 8001466:	bf94      	ite	ls
 8001468:	2301      	movls	r3, #1
 800146a:	2300      	movhi	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	e006      	b.n	800147e <HAL_I2C_Init+0x92>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4a7d      	ldr	r2, [pc, #500]	@ (8001668 <HAL_I2C_Init+0x27c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	bf94      	ite	ls
 8001478:	2301      	movls	r3, #1
 800147a:	2300      	movhi	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0e7      	b.n	8001656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4a78      	ldr	r2, [pc, #480]	@ (800166c <HAL_I2C_Init+0x280>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0c9b      	lsrs	r3, r3, #18
 8001490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001660 <HAL_I2C_Init+0x274>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d802      	bhi.n	80014c0 <HAL_I2C_Init+0xd4>
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3301      	adds	r3, #1
 80014be:	e009      	b.n	80014d4 <HAL_I2C_Init+0xe8>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	4a69      	ldr	r2, [pc, #420]	@ (8001670 <HAL_I2C_Init+0x284>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	099b      	lsrs	r3, r3, #6
 80014d2:	3301      	adds	r3, #1
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	430b      	orrs	r3, r1
 80014da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	495c      	ldr	r1, [pc, #368]	@ (8001660 <HAL_I2C_Init+0x274>)
 80014f0:	428b      	cmp	r3, r1
 80014f2:	d819      	bhi.n	8001528 <HAL_I2C_Init+0x13c>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1e59      	subs	r1, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001502:	1c59      	adds	r1, r3, #1
 8001504:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001508:	400b      	ands	r3, r1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00a      	beq.n	8001524 <HAL_I2C_Init+0x138>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1e59      	subs	r1, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fbb1 f3f3 	udiv	r3, r1, r3
 800151c:	3301      	adds	r3, #1
 800151e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001522:	e051      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 8001524:	2304      	movs	r3, #4
 8001526:	e04f      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d111      	bne.n	8001554 <HAL_I2C_Init+0x168>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	440b      	add	r3, r1
 800153e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001542:	3301      	adds	r3, #1
 8001544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001548:	2b00      	cmp	r3, #0
 800154a:	bf0c      	ite	eq
 800154c:	2301      	moveq	r3, #1
 800154e:	2300      	movne	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	e012      	b.n	800157a <HAL_I2C_Init+0x18e>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1e58      	subs	r0, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	0099      	lsls	r1, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	fbb0 f3f3 	udiv	r3, r0, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Init+0x196>
 800157e:	2301      	movs	r3, #1
 8001580:	e022      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10e      	bne.n	80015a8 <HAL_I2C_Init+0x1bc>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	1e58      	subs	r0, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6859      	ldr	r1, [r3, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	440b      	add	r3, r1
 8001598:	fbb0 f3f3 	udiv	r3, r0, r3
 800159c:	3301      	adds	r3, #1
 800159e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015a6:	e00f      	b.n	80015c8 <HAL_I2C_Init+0x1dc>
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	1e58      	subs	r0, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6859      	ldr	r1, [r3, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	0099      	lsls	r1, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80015be:	3301      	adds	r3, #1
 80015c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	6809      	ldr	r1, [r1, #0]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69da      	ldr	r2, [r3, #28]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6911      	ldr	r1, [r2, #16]
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68d2      	ldr	r2, [r2, #12]
 8001602:	4311      	orrs	r1, r2
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	430b      	orrs	r3, r1
 800160a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695a      	ldr	r2, [r3, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2220      	movs	r2, #32
 8001642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	000186a0 	.word	0x000186a0
 8001664:	001e847f 	.word	0x001e847f
 8001668:	003d08ff 	.word	0x003d08ff
 800166c:	431bde83 	.word	0x431bde83
 8001670:	10624dd3 	.word	0x10624dd3

08001674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e267      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d075      	beq.n	800177e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001692:	4b88      	ldr	r3, [pc, #544]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b04      	cmp	r3, #4
 800169c:	d00c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169e:	4b85      	ldr	r3, [pc, #532]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80016a6:	2b08      	cmp	r3, #8
 80016a8:	d112      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016aa:	4b82      	ldr	r3, [pc, #520]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016b6:	d10b      	bne.n	80016d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	4b7e      	ldr	r3, [pc, #504]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05b      	beq.n	800177c <HAL_RCC_OscConfig+0x108>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d157      	bne.n	800177c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e242      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x74>
 80016da:	4b76      	ldr	r3, [pc, #472]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a75      	ldr	r2, [pc, #468]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e01d      	b.n	8001724 <HAL_RCC_OscConfig+0xb0>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0x98>
 80016f2:	4b70      	ldr	r3, [pc, #448]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6f      	ldr	r2, [pc, #444]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b6d      	ldr	r3, [pc, #436]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6c      	ldr	r2, [pc, #432]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xb0>
 800170c:	4b69      	ldr	r3, [pc, #420]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a68      	ldr	r2, [pc, #416]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b66      	ldr	r3, [pc, #408]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a65      	ldr	r2, [pc, #404]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb2a 	bl	8000d84 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fb26 	bl	8000d84 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	@ 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e207      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b5b      	ldr	r3, [pc, #364]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xc0>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fb16 	bl	8000d84 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff fb12 	bl	8000d84 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	@ 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1f3      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176e:	4b51      	ldr	r3, [pc, #324]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0xe8>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d063      	beq.n	8001852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800178a:	4b4a      	ldr	r3, [pc, #296]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001796:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d11c      	bne.n	80017dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d116      	bne.n	80017dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ae:	4b41      	ldr	r3, [pc, #260]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <HAL_RCC_OscConfig+0x152>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e1c7      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c6:	4b3b      	ldr	r3, [pc, #236]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4937      	ldr	r1, [pc, #220]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	e03a      	b.n	8001852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e4:	4b34      	ldr	r3, [pc, #208]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ea:	f7ff facb 	bl	8000d84 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fac7 	bl	8000d84 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e1a8      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001804:	4b2b      	ldr	r3, [pc, #172]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	4925      	ldr	r1, [pc, #148]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e015      	b.n	8001852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_RCC_OscConfig+0x244>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff faaa 	bl	8000d84 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001834:	f7ff faa6 	bl	8000d84 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e187      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001846:	4b1b      	ldr	r3, [pc, #108]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d036      	beq.n	80018cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d016      	beq.n	8001894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <HAL_RCC_OscConfig+0x248>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fa8a 	bl	8000d84 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001874:	f7ff fa86 	bl	8000d84 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e167      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001886:	4b0b      	ldr	r3, [pc, #44]	@ (80018b4 <HAL_RCC_OscConfig+0x240>)
 8001888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0x200>
 8001892:	e01b      	b.n	80018cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <HAL_RCC_OscConfig+0x248>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff fa73 	bl	8000d84 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	e00e      	b.n	80018c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff fa6f 	bl	8000d84 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d907      	bls.n	80018c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e150      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
 80018b4:	40023800 	.word	0x40023800
 80018b8:	42470000 	.word	0x42470000
 80018bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b88      	ldr	r3, [pc, #544]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ea      	bne.n	80018a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8097 	beq.w	8001a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b81      	ldr	r3, [pc, #516]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10f      	bne.n	800190a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fa:	4b7a      	ldr	r3, [pc, #488]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b77      	ldr	r3, [pc, #476]	@ (8001ae8 <HAL_RCC_OscConfig+0x474>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	4b74      	ldr	r3, [pc, #464]	@ (8001ae8 <HAL_RCC_OscConfig+0x474>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a73      	ldr	r2, [pc, #460]	@ (8001ae8 <HAL_RCC_OscConfig+0x474>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7ff fa2f 	bl	8000d84 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192a:	f7ff fa2b 	bl	8000d84 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e10c      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae8 <HAL_RCC_OscConfig+0x474>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x2ea>
 8001950:	4b64      	ldr	r3, [pc, #400]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001954:	4a63      	ldr	r2, [pc, #396]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6713      	str	r3, [r2, #112]	@ 0x70
 800195c:	e01c      	b.n	8001998 <HAL_RCC_OscConfig+0x324>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b05      	cmp	r3, #5
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x30c>
 8001966:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	6713      	str	r3, [r2, #112]	@ 0x70
 8001972:	4b5c      	ldr	r3, [pc, #368]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001976:	4a5b      	ldr	r2, [pc, #364]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6713      	str	r3, [r2, #112]	@ 0x70
 800197e:	e00b      	b.n	8001998 <HAL_RCC_OscConfig+0x324>
 8001980:	4b58      	ldr	r3, [pc, #352]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001984:	4a57      	ldr	r2, [pc, #348]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	6713      	str	r3, [r2, #112]	@ 0x70
 800198c:	4b55      	ldr	r3, [pc, #340]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001990:	4a54      	ldr	r2, [pc, #336]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001992:	f023 0304 	bic.w	r3, r3, #4
 8001996:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d015      	beq.n	80019cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff f9f0 	bl	8000d84 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a6:	e00a      	b.n	80019be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a8:	f7ff f9ec 	bl	8000d84 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e0cb      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019be:	4b49      	ldr	r3, [pc, #292]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0ee      	beq.n	80019a8 <HAL_RCC_OscConfig+0x334>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019cc:	f7ff f9da 	bl	8000d84 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d2:	e00a      	b.n	80019ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f7ff f9d6 	bl	8000d84 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e0b5      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1ee      	bne.n	80019d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d105      	bne.n	8001a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fc:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a00:	4a38      	ldr	r2, [pc, #224]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a1 	beq.w	8001b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a12:	4b34      	ldr	r3, [pc, #208]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d05c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d141      	bne.n	8001aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_RCC_OscConfig+0x478>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f9aa 	bl	8000d84 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff f9a6 	bl	8000d84 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e087      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a46:	4b27      	ldr	r3, [pc, #156]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69da      	ldr	r2, [r3, #28]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	085b      	lsrs	r3, r3, #1
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a74:	061b      	lsls	r3, r3, #24
 8001a76:	491b      	ldr	r1, [pc, #108]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_RCC_OscConfig+0x478>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7ff f97f 	bl	8000d84 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f97b 	bl	8000d84 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e05c      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x416>
 8001aa8:	e054      	b.n	8001b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_RCC_OscConfig+0x478>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f968 	bl	8000d84 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7ff f964 	bl	8000d84 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e045      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_RCC_OscConfig+0x470>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x444>
 8001ad6:	e03d      	b.n	8001b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e038      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <HAL_RCC_OscConfig+0x4ec>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d028      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d121      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d11a      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b20:	4013      	ands	r3, r2
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d111      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0cc      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b68      	ldr	r3, [pc, #416]	@ (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d90c      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b65      	ldr	r3, [pc, #404]	@ (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	@ (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d044      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d119      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b3f      	ldr	r3, [pc, #252]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3b      	ldr	r3, [pc, #236]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e067      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b37      	ldr	r3, [pc, #220]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4934      	ldr	r1, [pc, #208]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff f896 	bl	8000d84 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff f892 	bl	8000d84 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2b      	ldr	r3, [pc, #172]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b25      	ldr	r3, [pc, #148]	@ (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d20c      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f821 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	490a      	ldr	r1, [pc, #40]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fff6 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	40023800 	.word	0x40023800
 8001d24:	0800cc4c 	.word	0x0800cc4c
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	2000000c 	.word	0x2000000c

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d34:	b090      	sub	sp, #64	@ 0x40
 8001d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d48:	4b59      	ldr	r3, [pc, #356]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d00d      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0x40>
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	f200 80a1 	bhi.w	8001e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x34>
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d62:	e09b      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d64:	4b53      	ldr	r3, [pc, #332]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d68:	e09b      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d6a:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d6e:	e098      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d70:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d028      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b4a      	ldr	r3, [pc, #296]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	623b      	str	r3, [r7, #32]
 8001d90:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001d9c:	fb03 f201 	mul.w	r2, r3, r1
 8001da0:	2300      	movs	r3, #0
 8001da2:	fb00 f303 	mul.w	r3, r0, r3
 8001da6:	4413      	add	r3, r2
 8001da8:	4a43      	ldr	r2, [pc, #268]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001daa:	fba0 1202 	umull	r1, r2, r0, r2
 8001dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db0:	460a      	mov	r2, r1
 8001db2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001db6:	4413      	add	r3, r2
 8001db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	61fa      	str	r2, [r7, #28]
 8001dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001dca:	f7fe fa0d 	bl	80001e8 <__aeabi_uldivmod>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001dd6:	e053      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd8:	4b35      	ldr	r3, [pc, #212]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	099b      	lsrs	r3, r3, #6
 8001dde:	2200      	movs	r2, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	617a      	str	r2, [r7, #20]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001dea:	f04f 0b00 	mov.w	fp, #0
 8001dee:	4652      	mov	r2, sl
 8001df0:	465b      	mov	r3, fp
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	0159      	lsls	r1, r3, #5
 8001dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e00:	0150      	lsls	r0, r2, #5
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	ebb2 080a 	subs.w	r8, r2, sl
 8001e0a:	eb63 090b 	sbc.w	r9, r3, fp
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001e1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001e1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001e22:	ebb2 0408 	subs.w	r4, r2, r8
 8001e26:	eb63 0509 	sbc.w	r5, r3, r9
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	00eb      	lsls	r3, r5, #3
 8001e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e38:	00e2      	lsls	r2, r4, #3
 8001e3a:	4614      	mov	r4, r2
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	eb14 030a 	adds.w	r3, r4, sl
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	eb45 030b 	adc.w	r3, r5, fp
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e56:	4629      	mov	r1, r5
 8001e58:	028b      	lsls	r3, r1, #10
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e60:	4621      	mov	r1, r4
 8001e62:	028a      	lsls	r2, r1, #10
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	60fa      	str	r2, [r7, #12]
 8001e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e74:	f7fe f9b8 	bl	80001e8 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001e90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3740      	adds	r7, #64	@ 0x40
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	017d7840 	.word	0x017d7840

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	0800cc5c 	.word	0x0800cc5c

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	0800cc5c 	.word	0x0800cc5c

08001f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e042      	b.n	8001fbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fdb8 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	@ 0x24
 8001f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fd69 	bl	8002a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	@ 0x28
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d175      	bne.n	80020d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_UART_Transmit+0x2c>
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e06e      	b.n	80020d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2221      	movs	r2, #33	@ 0x21
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002002:	f7fe febf 	bl	8000d84 <HAL_GetTick>
 8002006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800201c:	d108      	bne.n	8002030 <HAL_UART_Transmit+0x6c>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d104      	bne.n	8002030 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	e003      	b.n	8002038 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002038:	e02e      	b.n	8002098 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2200      	movs	r2, #0
 8002042:	2180      	movs	r1, #128	@ 0x80
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f000 fb05 	bl	8002654 <UART_WaitOnFlagUntilTimeout>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e03a      	b.n	80020d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10b      	bne.n	800207a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	3302      	adds	r3, #2
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	e007      	b.n	800208a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	781a      	ldrb	r2, [r3, #0]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	3301      	adds	r3, #1
 8002088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1cb      	bne.n	800203a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2140      	movs	r1, #64	@ 0x40
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 fad1 	bl	8002654 <UART_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e006      	b.n	80020d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80020d0:	2302      	movs	r3, #2
  }
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b0ba      	sub	sp, #232	@ 0xe8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002108:	2300      	movs	r3, #0
 800210a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800210e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800211a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10f      	bne.n	8002142 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d009      	beq.n	8002142 <HAL_UART_IRQHandler+0x66>
 800212e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 fbc2 	bl	80028c4 <UART_Receive_IT>
      return;
 8002140:	e25b      	b.n	80025fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80de 	beq.w	8002308 <HAL_UART_IRQHandler+0x22c>
 800214c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800215c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80d1 	beq.w	8002308 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_UART_IRQHandler+0xae>
 8002172:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800218a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_UART_IRQHandler+0xd2>
 8002196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a6:	f043 0202 	orr.w	r2, r3, #2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_UART_IRQHandler+0xf6>
 80021ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ca:	f043 0204 	orr.w	r2, r3, #4
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80021d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <HAL_UART_IRQHandler+0x126>
 80021de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d105      	bne.n	80021f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80021ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	f043 0208 	orr.w	r2, r3, #8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 81f2 	beq.w	80025f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800220c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_UART_IRQHandler+0x14e>
 8002218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800221c:	f003 0320 	and.w	r3, r3, #32
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 fb4d 	bl	80028c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002234:	2b40      	cmp	r3, #64	@ 0x40
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d103      	bne.n	8002256 <HAL_UART_IRQHandler+0x17a>
 800224e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04f      	beq.n	80022f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa55 	bl	8002706 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002266:	2b40      	cmp	r3, #64	@ 0x40
 8002268:	d141      	bne.n	80022ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	3314      	adds	r3, #20
 8002270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002278:	e853 3f00 	ldrex	r3, [r3]
 800227c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3314      	adds	r3, #20
 8002292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002296:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800229a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800229e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80022a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80022a6:	e841 2300 	strex	r3, r2, [r1]
 80022aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80022ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1d9      	bne.n	800226a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d013      	beq.n	80022e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c2:	4a7e      	ldr	r2, [pc, #504]	@ (80024bc <HAL_UART_IRQHandler+0x3e0>)
 80022c4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fee7 	bl	800109e <HAL_DMA_Abort_IT>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022e0:	4610      	mov	r0, r2
 80022e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e4:	e00e      	b.n	8002304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f99e 	bl	8002628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ec:	e00a      	b.n	8002304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f99a 	bl	8002628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f4:	e006      	b.n	8002304 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f996 	bl	8002628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002302:	e175      	b.n	80025f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002304:	bf00      	nop
    return;
 8002306:	e173      	b.n	80025f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 814f 	bne.w	80025b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8148 	beq.w	80025b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002324:	f003 0310 	and.w	r3, r3, #16
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8141 	beq.w	80025b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234e:	2b40      	cmp	r3, #64	@ 0x40
 8002350:	f040 80b6 	bne.w	80024c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002360:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8145 	beq.w	80025f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800236e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002372:	429a      	cmp	r2, r3
 8002374:	f080 813e 	bcs.w	80025f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800237e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800238a:	f000 8088 	beq.w	800249e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	330c      	adds	r3, #12
 8002394:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002398:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800239c:	e853 3f00 	ldrex	r3, [r3]
 80023a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80023a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	330c      	adds	r3, #12
 80023b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80023ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80023be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80023c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023ca:	e841 2300 	strex	r3, r2, [r1]
 80023ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80023d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1d9      	bne.n	800238e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	3314      	adds	r3, #20
 80023e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023e4:	e853 3f00 	ldrex	r3, [r3]
 80023e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80023ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023ec:	f023 0301 	bic.w	r3, r3, #1
 80023f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3314      	adds	r3, #20
 80023fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002402:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002404:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002406:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800240a:	e841 2300 	strex	r3, r2, [r1]
 800240e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e1      	bne.n	80023da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3314      	adds	r3, #20
 800241c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800241e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002420:	e853 3f00 	ldrex	r3, [r3]
 8002424:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002426:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002428:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800242c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	3314      	adds	r3, #20
 8002436:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800243a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800243c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800243e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002440:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002442:	e841 2300 	strex	r3, r2, [r1]
 8002446:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1e3      	bne.n	8002416 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	330c      	adds	r3, #12
 8002462:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002466:	e853 3f00 	ldrex	r3, [r3]
 800246a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800246c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800246e:	f023 0310 	bic.w	r3, r3, #16
 8002472:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330c      	adds	r3, #12
 800247c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002480:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002482:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002484:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002486:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002488:	e841 2300 	strex	r3, r2, [r1]
 800248c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800248e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e3      	bne.n	800245c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	4618      	mov	r0, r3
 800249a:	f7fe fd90 	bl	8000fbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2202      	movs	r2, #2
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4619      	mov	r1, r3
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 f8c1 	bl	800263c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024ba:	e09b      	b.n	80025f4 <HAL_UART_IRQHandler+0x518>
 80024bc:	080027cd 	.word	0x080027cd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 808e 	beq.w	80025f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80024dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8089 	beq.w	80025f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	330c      	adds	r3, #12
 80024ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f0:	e853 3f00 	ldrex	r3, [r3]
 80024f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80024f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	330c      	adds	r3, #12
 8002506:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800250a:	647a      	str	r2, [r7, #68]	@ 0x44
 800250c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002512:	e841 2300 	strex	r3, r2, [r1]
 8002516:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1e3      	bne.n	80024e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3314      	adds	r3, #20
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	e853 3f00 	ldrex	r3, [r3]
 800252c:	623b      	str	r3, [r7, #32]
   return(result);
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	3314      	adds	r3, #20
 800253e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002542:	633a      	str	r2, [r7, #48]	@ 0x30
 8002544:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002546:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800254a:	e841 2300 	strex	r3, r2, [r1]
 800254e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e3      	bne.n	800251e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	e853 3f00 	ldrex	r3, [r3]
 8002572:	60fb      	str	r3, [r7, #12]
   return(result);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0310 	bic.w	r3, r3, #16
 800257a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	330c      	adds	r3, #12
 8002584:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002588:	61fa      	str	r2, [r7, #28]
 800258a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	69b9      	ldr	r1, [r7, #24]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	e841 2300 	strex	r3, r2, [r1]
 8002594:	617b      	str	r3, [r7, #20]
   return(result);
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e3      	bne.n	8002564 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80025a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f847 	bl	800263c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025ae:	e023      	b.n	80025f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d009      	beq.n	80025d0 <HAL_UART_IRQHandler+0x4f4>
 80025bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f913 	bl	80027f4 <UART_Transmit_IT>
    return;
 80025ce:	e014      	b.n	80025fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00e      	beq.n	80025fa <HAL_UART_IRQHandler+0x51e>
 80025dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f953 	bl	8002894 <UART_EndTransmit_IT>
    return;
 80025ee:	e004      	b.n	80025fa <HAL_UART_IRQHandler+0x51e>
    return;
 80025f0:	bf00      	nop
 80025f2:	e002      	b.n	80025fa <HAL_UART_IRQHandler+0x51e>
      return;
 80025f4:	bf00      	nop
 80025f6:	e000      	b.n	80025fa <HAL_UART_IRQHandler+0x51e>
      return;
 80025f8:	bf00      	nop
  }
}
 80025fa:	37e8      	adds	r7, #232	@ 0xe8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	4613      	mov	r3, r2
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002664:	e03b      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d037      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7fe fb89 	bl	8000d84 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <UART_WaitOnFlagUntilTimeout+0x30>
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e03a      	b.n	80026fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d023      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0x8a>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b80      	cmp	r3, #128	@ 0x80
 800269a:	d020      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0x8a>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b40      	cmp	r3, #64	@ 0x40
 80026a0:	d01d      	beq.n	80026de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d116      	bne.n	80026de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f81d 	bl	8002706 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2208      	movs	r2, #8
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4013      	ands	r3, r2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	bf0c      	ite	eq
 80026ee:	2301      	moveq	r3, #1
 80026f0:	2300      	movne	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	461a      	mov	r2, r3
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d0b4      	beq.n	8002666 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002706:	b480      	push	{r7}
 8002708:	b095      	sub	sp, #84	@ 0x54
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	330c      	adds	r3, #12
 800272c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800272e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002736:	e841 2300 	strex	r3, r2, [r1]
 800273a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800273c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1e5      	bne.n	800270e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3314      	adds	r3, #20
 8002748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	e853 3f00 	ldrex	r3, [r3]
 8002750:	61fb      	str	r3, [r7, #28]
   return(result);
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3314      	adds	r3, #20
 8002760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800276a:	e841 2300 	strex	r3, r2, [r1]
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1e5      	bne.n	8002742 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	2b01      	cmp	r3, #1
 800277c:	d119      	bne.n	80027b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	330c      	adds	r3, #12
 8002784:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	e853 3f00 	ldrex	r3, [r3]
 800278c:	60bb      	str	r3, [r7, #8]
   return(result);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f023 0310 	bic.w	r3, r3, #16
 8002794:	647b      	str	r3, [r7, #68]	@ 0x44
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800279e:	61ba      	str	r2, [r7, #24]
 80027a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a2:	6979      	ldr	r1, [r7, #20]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	e841 2300 	strex	r3, r2, [r1]
 80027aa:	613b      	str	r3, [r7, #16]
   return(result);
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e5      	bne.n	800277e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027c0:	bf00      	nop
 80027c2:	3754      	adds	r7, #84	@ 0x54
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f7ff ff1e 	bl	8002628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b21      	cmp	r3, #33	@ 0x21
 8002806:	d13e      	bne.n	8002886 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002810:	d114      	bne.n	800283c <UART_Transmit_IT+0x48>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d110      	bne.n	800283c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800282e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	1c9a      	adds	r2, r3, #2
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	621a      	str	r2, [r3, #32]
 800283a:	e008      	b.n	800284e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	1c59      	adds	r1, r3, #1
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6211      	str	r1, [r2, #32]
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29b      	uxth	r3, r3
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4619      	mov	r1, r3
 800285c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10f      	bne.n	8002882 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002870:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68da      	ldr	r2, [r3, #12]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002880:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	e000      	b.n	8002888 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002886:	2302      	movs	r3, #2
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fea3 	bl	8002600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	@ 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b22      	cmp	r3, #34	@ 0x22
 80028d6:	f040 80ae 	bne.w	8002a36 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e2:	d117      	bne.n	8002914 <UART_Receive_IT+0x50>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d113      	bne.n	8002914 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002902:	b29a      	uxth	r2, r3
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290c:	1c9a      	adds	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	629a      	str	r2, [r3, #40]	@ 0x28
 8002912:	e026      	b.n	8002962 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800291a:	2300      	movs	r3, #0
 800291c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002926:	d007      	beq.n	8002938 <UART_Receive_IT+0x74>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <UART_Receive_IT+0x82>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e008      	b.n	8002958 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002952:	b2da      	uxtb	r2, r3
 8002954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002956:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29b      	uxth	r3, r3
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4619      	mov	r1, r3
 8002970:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002972:	2b00      	cmp	r3, #0
 8002974:	d15d      	bne.n	8002a32 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0220 	bic.w	r2, r2, #32
 8002984:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68da      	ldr	r2, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002994:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d135      	bne.n	8002a28 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	e853 3f00 	ldrex	r3, [r3]
 80029d0:	613b      	str	r3, [r7, #16]
   return(result);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	f023 0310 	bic.w	r3, r3, #16
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	330c      	adds	r3, #12
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	623a      	str	r2, [r7, #32]
 80029e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	69f9      	ldr	r1, [r7, #28]
 80029e8:	6a3a      	ldr	r2, [r7, #32]
 80029ea:	e841 2300 	strex	r3, r2, [r1]
 80029ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e5      	bne.n	80029c2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d10a      	bne.n	8002a1a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fe0b 	bl	800263c <HAL_UARTEx_RxEventCallback>
 8002a26:	e002      	b.n	8002a2e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff fdf3 	bl	8002614 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e002      	b.n	8002a38 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3730      	adds	r7, #48	@ 0x30
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b0c0      	sub	sp, #256	@ 0x100
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	68d9      	ldr	r1, [r3, #12]
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	ea40 0301 	orr.w	r3, r0, r1
 8002a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a98:	f021 010c 	bic.w	r1, r1, #12
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aba:	6999      	ldr	r1, [r3, #24]
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	ea40 0301 	orr.w	r3, r0, r1
 8002ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b8f      	ldr	r3, [pc, #572]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d005      	beq.n	8002ae0 <UART_SetConfig+0xa0>
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b8d      	ldr	r3, [pc, #564]	@ (8002d10 <UART_SetConfig+0x2d0>)
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d104      	bne.n	8002aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ae0:	f7ff fa0c 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8002ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ae8:	e003      	b.n	8002af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aea:	f7ff f9f3 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002aee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002afc:	f040 810c 	bne.w	8002d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	1891      	adds	r1, r2, r2
 8002b18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b1a:	415b      	adcs	r3, r3
 8002b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b22:	4621      	mov	r1, r4
 8002b24:	eb12 0801 	adds.w	r8, r2, r1
 8002b28:	4629      	mov	r1, r5
 8002b2a:	eb43 0901 	adc.w	r9, r3, r1
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b42:	4690      	mov	r8, r2
 8002b44:	4699      	mov	r9, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	eb18 0303 	adds.w	r3, r8, r3
 8002b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b50:	462b      	mov	r3, r5
 8002b52:	eb49 0303 	adc.w	r3, r9, r3
 8002b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b6e:	460b      	mov	r3, r1
 8002b70:	18db      	adds	r3, r3, r3
 8002b72:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b74:	4613      	mov	r3, r2
 8002b76:	eb42 0303 	adc.w	r3, r2, r3
 8002b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b84:	f7fd fb30 	bl	80001e8 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	011c      	lsls	r4, r3, #4
 8002b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	1891      	adds	r1, r2, r2
 8002bae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bb0:	415b      	adcs	r3, r3
 8002bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bb8:	4641      	mov	r1, r8
 8002bba:	eb12 0a01 	adds.w	sl, r2, r1
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd8:	4692      	mov	sl, r2
 8002bda:	469b      	mov	fp, r3
 8002bdc:	4643      	mov	r3, r8
 8002bde:	eb1a 0303 	adds.w	r3, sl, r3
 8002be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002be6:	464b      	mov	r3, r9
 8002be8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c04:	460b      	mov	r3, r1
 8002c06:	18db      	adds	r3, r3, r3
 8002c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	eb42 0303 	adc.w	r3, r2, r3
 8002c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c1a:	f7fd fae5 	bl	80001e8 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002c26:	fba3 2301 	umull	r2, r3, r3, r1
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2264      	movs	r2, #100	@ 0x64
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	1acb      	subs	r3, r1, r3
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c3a:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c48:	441c      	add	r4, r3
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c64:	415b      	adcs	r3, r3
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	1851      	adds	r1, r2, r1
 8002c70:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c72:	4649      	mov	r1, r9
 8002c74:	414b      	adcs	r3, r1
 8002c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c84:	4659      	mov	r1, fp
 8002c86:	00cb      	lsls	r3, r1, #3
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	4651      	mov	r1, sl
 8002c90:	00ca      	lsls	r2, r1, #3
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	18db      	adds	r3, r3, r3
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	eb42 0303 	adc.w	r3, r2, r3
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cd6:	f7fd fa87 	bl	80001e8 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	2164      	movs	r1, #100	@ 0x64
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3332      	adds	r3, #50	@ 0x32
 8002cf2:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	f003 0207 	and.w	r2, r3, #7
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4422      	add	r2, r4
 8002d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d08:	e106      	b.n	8002f18 <UART_SetConfig+0x4d8>
 8002d0a:	bf00      	nop
 8002d0c:	40011000 	.word	0x40011000
 8002d10:	40011400 	.word	0x40011400
 8002d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d2a:	4642      	mov	r2, r8
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	1891      	adds	r1, r2, r2
 8002d30:	6239      	str	r1, [r7, #32]
 8002d32:	415b      	adcs	r3, r3
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	1854      	adds	r4, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb43 0501 	adc.w	r5, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	00eb      	lsls	r3, r5, #3
 8002d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d52:	00e2      	lsls	r2, r4, #3
 8002d54:	4614      	mov	r4, r2
 8002d56:	461d      	mov	r5, r3
 8002d58:	4643      	mov	r3, r8
 8002d5a:	18e3      	adds	r3, r4, r3
 8002d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d60:	464b      	mov	r3, r9
 8002d62:	eb45 0303 	adc.w	r3, r5, r3
 8002d66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d86:	4629      	mov	r1, r5
 8002d88:	008b      	lsls	r3, r1, #2
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d90:	4621      	mov	r1, r4
 8002d92:	008a      	lsls	r2, r1, #2
 8002d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d98:	f7fd fa26 	bl	80001e8 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4b60      	ldr	r3, [pc, #384]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002da2:	fba3 2302 	umull	r2, r3, r3, r2
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	011c      	lsls	r4, r3, #4
 8002daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002db4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	61b9      	str	r1, [r7, #24]
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	4641      	mov	r1, r8
 8002dce:	1851      	adds	r1, r2, r1
 8002dd0:	6139      	str	r1, [r7, #16]
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	414b      	adcs	r3, r1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de4:	4659      	mov	r1, fp
 8002de6:	00cb      	lsls	r3, r1, #3
 8002de8:	4651      	mov	r1, sl
 8002dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dee:	4651      	mov	r1, sl
 8002df0:	00ca      	lsls	r2, r1, #3
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e00:	464b      	mov	r3, r9
 8002e02:	460a      	mov	r2, r1
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e24:	4649      	mov	r1, r9
 8002e26:	008b      	lsls	r3, r1, #2
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e2e:	4641      	mov	r1, r8
 8002e30:	008a      	lsls	r2, r1, #2
 8002e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e36:	f7fd f9d7 	bl	80001e8 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4b38      	ldr	r3, [pc, #224]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002e42:	fba3 2301 	umull	r2, r3, r3, r1
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2264      	movs	r2, #100	@ 0x64
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	1acb      	subs	r3, r1, r3
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	@ 0x32
 8002e54:	4a33      	ldr	r2, [pc, #204]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e60:	441c      	add	r4, r3
 8002e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e66:	2200      	movs	r2, #0
 8002e68:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e80:	4641      	mov	r1, r8
 8002e82:	1851      	adds	r1, r2, r1
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	4649      	mov	r1, r9
 8002e88:	414b      	adcs	r3, r1
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e98:	4659      	mov	r1, fp
 8002e9a:	00cb      	lsls	r3, r1, #3
 8002e9c:	4651      	mov	r1, sl
 8002e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	00ca      	lsls	r2, r1, #3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4642      	mov	r2, r8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	eb42 0303 	adc.w	r3, r2, r3
 8002eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ec6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ee6:	f7fd f97f 	bl	80001e8 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	2164      	movs	r1, #100	@ 0x64
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	3332      	adds	r3, #50	@ 0x32
 8002f02:	4a08      	ldr	r2, [pc, #32]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4422      	add	r2, r4
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f24:	51eb851f 	.word	0x51eb851f

08002f28 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8002f3e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002f42:	2100      	movs	r1, #0
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f009 fcd9 	bl	800c8fc <memset>
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8002f60:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f006 f813 	bl	8008f90 <mbedtls_platform_zeroize>
 8002f6a:	e000      	b.n	8002f6e <mbedtls_aes_free+0x1c>
        return;
 8002f6c:	bf00      	nop
}
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init( mbedtls_aes_xts_context *ctx )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    mbedtls_aes_init( &ctx->crypt );
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ffd9 	bl	8002f36 <mbedtls_aes_init>
    mbedtls_aes_init( &ctx->tweak );
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ffd3 	bl	8002f36 <mbedtls_aes_init>
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free( mbedtls_aes_xts_context *ctx )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <mbedtls_aes_xts_free+0x24>
        return;

    mbedtls_aes_free( &ctx->crypt );
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ffd2 	bl	8002f52 <mbedtls_aes_free>
    mbedtls_aes_free( &ctx->tweak );
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ffcc 	bl	8002f52 <mbedtls_aes_free>
 8002fba:	e000      	b.n	8002fbe <mbedtls_aes_xts_free+0x26>
        return;
 8002fbc:	bf00      	nop
}
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd6:	d012      	beq.n	8002ffe <mbedtls_aes_setkey_enc+0x3a>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fde:	d812      	bhi.n	8003006 <mbedtls_aes_setkey_enc+0x42>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b80      	cmp	r3, #128	@ 0x80
 8002fe4:	d003      	beq.n	8002fee <mbedtls_aes_setkey_enc+0x2a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2bc0      	cmp	r3, #192	@ 0xc0
 8002fea:	d004      	beq.n	8002ff6 <mbedtls_aes_setkey_enc+0x32>
 8002fec:	e00b      	b.n	8003006 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	220a      	movs	r2, #10
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e00a      	b.n	800300c <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	220c      	movs	r2, #12
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e006      	b.n	800300c <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	220e      	movs	r2, #14
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e002      	b.n	800300c <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8003006:	f06f 031f 	mvn.w	r3, #31
 800300a:	e1a7      	b.n	800335c <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3308      	adds	r3, #8
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	e027      	b.n	800306e <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	4413      	add	r3, r2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	3301      	adds	r3, #1
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	ea41 0203 	orr.w	r2, r1, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3302      	adds	r3, #2
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	440b      	add	r3, r1
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	ea42 0103 	orr.w	r1, r2, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	3303      	adds	r3, #3
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	4413      	add	r3, r2
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	061a      	lsls	r2, r3, #24
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	6938      	ldr	r0, [r7, #16]
 8003062:	4403      	add	r3, r0
 8003064:	430a      	orrs	r2, r1
 8003066:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	3301      	adds	r3, #1
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	095b      	lsrs	r3, r3, #5
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d3d2      	bcc.n	800301e <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b0e      	cmp	r3, #14
 800307e:	f000 80ca 	beq.w	8003216 <mbedtls_aes_setkey_enc+0x252>
 8003082:	2b0e      	cmp	r3, #14
 8003084:	f300 8169 	bgt.w	800335a <mbedtls_aes_setkey_enc+0x396>
 8003088:	2b0a      	cmp	r3, #10
 800308a:	d002      	beq.n	8003092 <mbedtls_aes_setkey_enc+0xce>
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d057      	beq.n	8003140 <mbedtls_aes_setkey_enc+0x17c>
 8003090:	e163      	b.n	800335a <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e04f      	b.n	8003138 <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	495f      	ldr	r1, [pc, #380]	@ (800321c <mbedtls_aes_setkey_enc+0x258>)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030a4:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	320c      	adds	r2, #12
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	0a12      	lsrs	r2, r2, #8
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	495b      	ldr	r1, [pc, #364]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 80030b2:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 80030b4:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	330c      	adds	r3, #12
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	4957      	ldr	r1, [pc, #348]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80030c6:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	330c      	adds	r3, #12
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	0e1b      	lsrs	r3, r3, #24
 80030d0:	4953      	ldr	r1, [pc, #332]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 80030d6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	330c      	adds	r3, #12
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4a4f      	ldr	r2, [pc, #316]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 80030e4:	5cd3      	ldrb	r3, [r2, r3]
 80030e6:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 80030ec:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 80030ee:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	3304      	adds	r3, #4
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	3310      	adds	r3, #16
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	3314      	adds	r3, #20
 8003100:	404a      	eors	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	3308      	adds	r3, #8
 8003108:	6819      	ldr	r1, [r3, #0]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	3314      	adds	r3, #20
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	3318      	adds	r3, #24
 8003114:	404a      	eors	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	330c      	adds	r3, #12
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	3318      	adds	r3, #24
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	331c      	adds	r3, #28
 8003128:	404a      	eors	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3301      	adds	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	3310      	adds	r3, #16
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b09      	cmp	r3, #9
 800313c:	d9ac      	bls.n	8003098 <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 800313e:	e10c      	b.n	800335a <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e063      	b.n	800320e <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4934      	ldr	r1, [pc, #208]	@ (800321c <mbedtls_aes_setkey_enc+0x258>)
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003152:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	3214      	adds	r2, #20
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	0a12      	lsrs	r2, r2, #8
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4930      	ldr	r1, [pc, #192]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 8003160:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8003162:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3314      	adds	r3, #20
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	b2db      	uxtb	r3, r3
 800316e:	492c      	ldr	r1, [pc, #176]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003174:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3314      	adds	r3, #20
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e1b      	lsrs	r3, r3, #24
 800317e:	4928      	ldr	r1, [pc, #160]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 8003180:	5ccb      	ldrb	r3, [r1, r3]
 8003182:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003184:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3314      	adds	r3, #20
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4a23      	ldr	r2, [pc, #140]	@ (8003220 <mbedtls_aes_setkey_enc+0x25c>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800319a:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800319c:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3304      	adds	r3, #4
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	3318      	adds	r3, #24
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	331c      	adds	r3, #28
 80031ae:	404a      	eors	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	3308      	adds	r3, #8
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	331c      	adds	r3, #28
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3320      	adds	r3, #32
 80031c2:	404a      	eors	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	330c      	adds	r3, #12
 80031ca:	6819      	ldr	r1, [r3, #0]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	3320      	adds	r3, #32
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	3324      	adds	r3, #36	@ 0x24
 80031d6:	404a      	eors	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3310      	adds	r3, #16
 80031de:	6819      	ldr	r1, [r3, #0]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3324      	adds	r3, #36	@ 0x24
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	3328      	adds	r3, #40	@ 0x28
 80031ea:	404a      	eors	r2, r1
 80031ec:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3314      	adds	r3, #20
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	3328      	adds	r3, #40	@ 0x28
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	332c      	adds	r3, #44	@ 0x2c
 80031fe:	404a      	eors	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	3318      	adds	r3, #24
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b07      	cmp	r3, #7
 8003212:	d998      	bls.n	8003146 <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 8003214:	e0a1      	b.n	800335a <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	e099      	b.n	8003350 <mbedtls_aes_setkey_enc+0x38c>
 800321c:	0800ee64 	.word	0x0800ee64
 8003220:	0800cc64 	.word	0x0800cc64
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	494f      	ldr	r1, [pc, #316]	@ (8003368 <mbedtls_aes_setkey_enc+0x3a4>)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003230:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	321c      	adds	r2, #28
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	0a12      	lsrs	r2, r2, #8
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	494b      	ldr	r1, [pc, #300]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 800323e:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8003240:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	331c      	adds	r3, #28
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	b2db      	uxtb	r3, r3
 800324c:	4947      	ldr	r1, [pc, #284]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003252:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	331c      	adds	r3, #28
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	0e1b      	lsrs	r3, r3, #24
 800325c:	4943      	ldr	r1, [pc, #268]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003262:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	331c      	adds	r3, #28
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	4a3f      	ldr	r2, [pc, #252]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 8003270:	5cd3      	ldrb	r3, [r2, r3]
 8003272:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003278:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800327a:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	3304      	adds	r3, #4
 8003280:	6819      	ldr	r1, [r3, #0]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	3320      	adds	r3, #32
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3324      	adds	r3, #36	@ 0x24
 800328c:	404a      	eors	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	3308      	adds	r3, #8
 8003294:	6819      	ldr	r1, [r3, #0]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3324      	adds	r3, #36	@ 0x24
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	3328      	adds	r3, #40	@ 0x28
 80032a0:	404a      	eors	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	330c      	adds	r3, #12
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	3328      	adds	r3, #40	@ 0x28
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	332c      	adds	r3, #44	@ 0x2c
 80032b4:	404a      	eors	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	3310      	adds	r3, #16
 80032bc:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	322c      	adds	r2, #44	@ 0x2c
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	4929      	ldr	r1, [pc, #164]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 80032c8:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 80032ca:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	332c      	adds	r3, #44	@ 0x2c
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4925      	ldr	r1, [pc, #148]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80032dc:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	332c      	adds	r3, #44	@ 0x2c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	4920      	ldr	r1, [pc, #128]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 80032ea:	5ccb      	ldrb	r3, [r1, r3]
 80032ec:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80032ee:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	332c      	adds	r3, #44	@ 0x2c
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <mbedtls_aes_setkey_enc+0x3a8>)
 80032fc:	5cd3      	ldrb	r3, [r2, r3]
 80032fe:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8003304:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8003306:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	3314      	adds	r3, #20
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3330      	adds	r3, #48	@ 0x30
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	3334      	adds	r3, #52	@ 0x34
 8003318:	404a      	eors	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	3318      	adds	r3, #24
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	3334      	adds	r3, #52	@ 0x34
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	3338      	adds	r3, #56	@ 0x38
 800332c:	404a      	eors	r2, r1
 800332e:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	331c      	adds	r3, #28
 8003334:	6819      	ldr	r1, [r3, #0]
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	3338      	adds	r3, #56	@ 0x38
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	333c      	adds	r3, #60	@ 0x3c
 8003340:	404a      	eors	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3301      	adds	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	3320      	adds	r3, #32
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2b06      	cmp	r3, #6
 8003354:	f67f af66 	bls.w	8003224 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 8003358:	bf00      	nop
    }

    return( 0 );
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	371c      	adds	r7, #28
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	0800ee64 	.word	0x0800ee64
 800336c:	0800cc64 	.word	0x0800cc64

08003370 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b0d0      	sub	sp, #320	@ 0x140
 8003374:	af00      	add	r7, sp, #0
 8003376:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800337a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800337e:	6018      	str	r0, [r3, #0]
 8003380:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003384:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003388:	6019      	str	r1, [r3, #0]
 800338a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800338e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003392:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fdcc 	bl	8002f36 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800339e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033a2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3308      	adds	r3, #8
 80033aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80033ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80033bc:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 80033be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033c2:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80033c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80033ce:	f107 0014 	add.w	r0, r7, #20
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	6819      	ldr	r1, [r3, #0]
 80033d6:	f7ff fdf5 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 80033da:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80033de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f040 80dd 	bne.w	80035a2 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 80033e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80033f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80033fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003402:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800340c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	4413      	add	r3, r2
 8003416:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 800341a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800341e:	1d13      	adds	r3, r2, #4
 8003420:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003424:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003428:	1d19      	adds	r1, r3, #4
 800342a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800342e:	6812      	ldr	r2, [r2, #0]
 8003430:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003432:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003436:	1d13      	adds	r3, r2, #4
 8003438:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800343c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003440:	1d19      	adds	r1, r3, #4
 8003442:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800344a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800344e:	1d13      	adds	r3, r2, #4
 8003450:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003454:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003458:	1d19      	adds	r1, r3, #4
 800345a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003462:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003466:	1d13      	adds	r3, r2, #4
 8003468:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800346c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003470:	1d19      	adds	r1, r3, #4
 8003472:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003476:	6812      	ldr	r2, [r2, #0]
 8003478:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800347a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800347e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3b01      	subs	r3, #1
 8003488:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800348c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003490:	3b20      	subs	r3, #32
 8003492:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003496:	e04f      	b.n	8003538 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800349e:	e03d      	b.n	800351c <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80034a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4a44      	ldr	r2, [pc, #272]	@ (80035bc <mbedtls_aes_setkey_dec+0x24c>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b44      	ldr	r3, [pc, #272]	@ (80035c0 <mbedtls_aes_setkey_dec+0x250>)
 80034b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80034b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	0a1b      	lsrs	r3, r3, #8
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	493f      	ldr	r1, [pc, #252]	@ (80035bc <mbedtls_aes_setkey_dec+0x24c>)
 80034c0:	5ccb      	ldrb	r3, [r1, r3]
 80034c2:	4619      	mov	r1, r3
 80034c4:	4b3f      	ldr	r3, [pc, #252]	@ (80035c4 <mbedtls_aes_setkey_dec+0x254>)
 80034c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80034ca:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80034cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	4939      	ldr	r1, [pc, #228]	@ (80035bc <mbedtls_aes_setkey_dec+0x24c>)
 80034d8:	5ccb      	ldrb	r3, [r1, r3]
 80034da:	4619      	mov	r1, r3
 80034dc:	4b3a      	ldr	r3, [pc, #232]	@ (80035c8 <mbedtls_aes_setkey_dec+0x258>)
 80034de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80034e2:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80034e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	0e1b      	lsrs	r3, r3, #24
 80034ee:	4a33      	ldr	r2, [pc, #204]	@ (80035bc <mbedtls_aes_setkey_dec+0x24c>)
 80034f0:	5cd3      	ldrb	r3, [r2, r3]
 80034f2:	461a      	mov	r2, r3
 80034f4:	4b35      	ldr	r3, [pc, #212]	@ (80035cc <mbedtls_aes_setkey_dec+0x25c>)
 80034f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80034fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80034fe:	1d18      	adds	r0, r3, #4
 8003500:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 8003504:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003506:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 8003508:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800350c:	3301      	adds	r3, #1
 800350e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003512:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003516:	3304      	adds	r3, #4
 8003518:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800351c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003520:	2b03      	cmp	r3, #3
 8003522:	ddbd      	ble.n	80034a0 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 8003524:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003528:	3b01      	subs	r3, #1
 800352a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800352e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003532:	3b20      	subs	r3, #32
 8003534:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003538:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800353c:	2b00      	cmp	r3, #0
 800353e:	dcab      	bgt.n	8003498 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8003540:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003544:	1d13      	adds	r3, r2, #4
 8003546:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800354a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800354e:	1d19      	adds	r1, r3, #4
 8003550:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003558:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800355c:	1d13      	adds	r3, r2, #4
 800355e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003562:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003566:	1d19      	adds	r1, r3, #4
 8003568:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003570:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003574:	1d13      	adds	r3, r2, #4
 8003576:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800357a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800357e:	1d19      	adds	r1, r3, #4
 8003580:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003588:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800358c:	1d13      	adds	r3, r2, #4
 800358e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003592:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003596:	1d19      	adds	r1, r3, #4
 8003598:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e000      	b.n	80035a4 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 80035a2:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fcd2 	bl	8002f52 <mbedtls_aes_free>

    return( ret );
 80035ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	0800cc64 	.word	0x0800cc64
 80035c0:	0800de64 	.word	0x0800de64
 80035c4:	0800e264 	.word	0x0800e264
 80035c8:	0800e664 	.word	0x0800e664
 80035cc:	0800ea64 	.word	0x0800ea64

080035d0 <mbedtls_aes_xts_decode_keys>:
                                        unsigned int keybits,
                                        const unsigned char **key1,
                                        unsigned int *key1bits,
                                        const unsigned char **key2,
                                        unsigned int *key2bits )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	085b      	lsrs	r3, r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	08db      	lsrs	r3, r3, #3
 80035e8:	613b      	str	r3, [r7, #16]

    switch( keybits )
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f0:	d006      	beq.n	8003600 <mbedtls_aes_xts_decode_keys+0x30>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f8:	d004      	beq.n	8003604 <mbedtls_aes_xts_decode_keys+0x34>
    {
        case 256: break;
        case 512: break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80035fa:	f06f 031f 	mvn.w	r3, #31
 80035fe:	e011      	b.n	8003624 <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 8003600:	bf00      	nop
 8003602:	e000      	b.n	8003606 <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 8003604:	bf00      	nop
    }

    *key1bits = half_keybits;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 800360c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	441a      	add	r2, r3
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	601a      	str	r2, [r3, #0]

    return 0;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	@ 0x30
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 800363c:	f107 0118 	add.w	r1, r7, #24
 8003640:	f107 0220 	add.w	r2, r7, #32
 8003644:	f107 0314 	add.w	r3, r7, #20
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	f107 031c 	add.w	r3, r7, #28
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	460b      	mov	r3, r1
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	68b8      	ldr	r0, [r7, #8]
 8003656:	f7ff ffbb 	bl	80035d0 <mbedtls_aes_xts_decode_keys>
 800365a:	6278      	str	r0, [r7, #36]	@ 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 800365c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <mbedtls_aes_xts_setkey_enc+0x36>
        return( ret );
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	e014      	b.n	8003690 <mbedtls_aes_xts_setkey_enc+0x60>

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800366c:	69f9      	ldr	r1, [r7, #28]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff fca7 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 8003676:	6278      	str	r0, [r7, #36]	@ 0x24
    if( ret != 0 )
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <mbedtls_aes_xts_setkey_enc+0x52>
        return( ret );
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	e006      	b.n	8003690 <mbedtls_aes_xts_setkey_enc+0x60>

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a39      	ldr	r1, [r7, #32]
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	4618      	mov	r0, r3
 800368a:	f7ff fc9b 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 800368e:	4603      	mov	r3, r0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3728      	adds	r7, #40	@ 0x28
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 80036a4:	f107 0118 	add.w	r1, r7, #24
 80036a8:	f107 0220 	add.w	r2, r7, #32
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	f107 031c 	add.w	r3, r7, #28
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	460b      	mov	r3, r1
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	68b8      	ldr	r0, [r7, #8]
 80036be:	f7ff ff87 	bl	80035d0 <mbedtls_aes_xts_decode_keys>
 80036c2:	6278      	str	r0, [r7, #36]	@ 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 80036c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <mbedtls_aes_xts_setkey_dec+0x36>
        return( ret );
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	e014      	b.n	80036f8 <mbedtls_aes_xts_setkey_dec+0x60>

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80036d4:	69f9      	ldr	r1, [r7, #28]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fc73 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 80036de:	6278      	str	r0, [r7, #36]	@ 0x24
    if( ret != 0 )
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <mbedtls_aes_xts_setkey_dec+0x52>
        return( ret );
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	e006      	b.n	80036f8 <mbedtls_aes_xts_setkey_dec+0x60>

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec( &ctx->crypt, key1, key1bits );
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fe3d 	bl	8003370 <mbedtls_aes_setkey_dec>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3728      	adds	r7, #40	@ 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003700:	b480      	push	{r7}
 8003702:	b08f      	sub	sp, #60	@ 0x3c
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	3301      	adds	r3, #1
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	431a      	orrs	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3302      	adds	r3, #2
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	041b      	lsls	r3, r3, #16
 800372a:	431a      	orrs	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	3303      	adds	r3, #3
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	4313      	orrs	r3, r2
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	633a      	str	r2, [r7, #48]	@ 0x30
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003742:	4053      	eors	r3, r2
 8003744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	3304      	adds	r3, #4
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3305      	adds	r3, #5
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	431a      	orrs	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	3306      	adds	r3, #6
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	041b      	lsls	r3, r3, #16
 8003760:	431a      	orrs	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3307      	adds	r3, #7
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	061b      	lsls	r3, r3, #24
 800376a:	4313      	orrs	r3, r2
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	1d1a      	adds	r2, r3, #4
 8003772:	633a      	str	r2, [r7, #48]	@ 0x30
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003778:	4053      	eors	r3, r2
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3308      	adds	r3, #8
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	3309      	adds	r3, #9
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	431a      	orrs	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	330a      	adds	r3, #10
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	431a      	orrs	r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	330b      	adds	r3, #11
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	061b      	lsls	r3, r3, #24
 80037a0:	4313      	orrs	r3, r2
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	1d1a      	adds	r2, r3, #4
 80037a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ae:	4053      	eors	r3, r2
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	330c      	adds	r3, #12
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	330d      	adds	r3, #13
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	330e      	adds	r3, #14
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	330f      	adds	r3, #15
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	061b      	lsls	r3, r3, #24
 80037d6:	4313      	orrs	r3, r2
 80037d8:	623b      	str	r3, [r7, #32]
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	1d1a      	adds	r2, r3, #4
 80037de:	633a      	str	r2, [r7, #48]	@ 0x30
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a3a      	ldr	r2, [r7, #32]
 80037e4:	4053      	eors	r3, r2
 80037e6:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	105b      	asrs	r3, r3, #1
 80037ee:	3b01      	subs	r3, #1
 80037f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f2:	e0fa      	b.n	80039ea <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80037f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f6:	1d1a      	adds	r2, r3, #4
 80037f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	49ab      	ldr	r1, [pc, #684]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003802:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003806:	405a      	eors	r2, r3
 8003808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	b2db      	uxtb	r3, r3
 800380e:	49a9      	ldr	r1, [pc, #676]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003810:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003814:	405a      	eors	r2, r3
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	0c1b      	lsrs	r3, r3, #16
 800381a:	b2db      	uxtb	r3, r3
 800381c:	49a6      	ldr	r1, [pc, #664]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 800381e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003822:	405a      	eors	r2, r3
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	0e1b      	lsrs	r3, r3, #24
 8003828:	49a4      	ldr	r1, [pc, #656]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 800382a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800382e:	4053      	eors	r3, r2
 8003830:	61fb      	str	r3, [r7, #28]
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	1d1a      	adds	r2, r3, #4
 8003836:	633a      	str	r2, [r7, #48]	@ 0x30
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800383c:	b2db      	uxtb	r3, r3
 800383e:	499c      	ldr	r1, [pc, #624]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003840:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003844:	405a      	eors	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4999      	ldr	r1, [pc, #612]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 800384e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003852:	405a      	eors	r2, r3
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	0c1b      	lsrs	r3, r3, #16
 8003858:	b2db      	uxtb	r3, r3
 800385a:	4997      	ldr	r1, [pc, #604]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 800385c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003860:	405a      	eors	r2, r3
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	0e1b      	lsrs	r3, r3, #24
 8003866:	4995      	ldr	r1, [pc, #596]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003868:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800386c:	4053      	eors	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	633a      	str	r2, [r7, #48]	@ 0x30
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	b2db      	uxtb	r3, r3
 800387c:	498c      	ldr	r1, [pc, #560]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 800387e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003882:	405a      	eors	r2, r3
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	b2db      	uxtb	r3, r3
 800388a:	498a      	ldr	r1, [pc, #552]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 800388c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003890:	405a      	eors	r2, r3
 8003892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4987      	ldr	r1, [pc, #540]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 800389a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800389e:	405a      	eors	r2, r3
 80038a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a2:	0e1b      	lsrs	r3, r3, #24
 80038a4:	4985      	ldr	r1, [pc, #532]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 80038a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038aa:	4053      	eors	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	1d1a      	adds	r2, r3, #4
 80038b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	497d      	ldr	r1, [pc, #500]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 80038bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038c0:	405a      	eors	r2, r3
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	497a      	ldr	r1, [pc, #488]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 80038ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038ce:	405a      	eors	r2, r3
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	4978      	ldr	r1, [pc, #480]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 80038d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038dc:	405a      	eors	r2, r3
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	0e1b      	lsrs	r3, r3, #24
 80038e2:	4976      	ldr	r1, [pc, #472]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 80038e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038e8:	4053      	eors	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	1d1a      	adds	r2, r3, #4
 80038f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	496d      	ldr	r1, [pc, #436]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 80038fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038fe:	405a      	eors	r2, r3
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	b2db      	uxtb	r3, r3
 8003906:	496b      	ldr	r1, [pc, #428]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003908:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800390c:	405a      	eors	r2, r3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	b2db      	uxtb	r3, r3
 8003914:	4968      	ldr	r1, [pc, #416]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003916:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800391a:	405a      	eors	r2, r3
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	0e1b      	lsrs	r3, r3, #24
 8003920:	4966      	ldr	r1, [pc, #408]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003922:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003926:	4053      	eors	r3, r2
 8003928:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	1d1a      	adds	r2, r3, #4
 800392e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	495e      	ldr	r1, [pc, #376]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003938:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800393c:	405a      	eors	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	b2db      	uxtb	r3, r3
 8003944:	495b      	ldr	r1, [pc, #364]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003946:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800394a:	405a      	eors	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	0c1b      	lsrs	r3, r3, #16
 8003950:	b2db      	uxtb	r3, r3
 8003952:	4959      	ldr	r1, [pc, #356]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003954:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003958:	405a      	eors	r2, r3
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	0e1b      	lsrs	r3, r3, #24
 800395e:	4957      	ldr	r1, [pc, #348]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003960:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003964:	4053      	eors	r3, r2
 8003966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800396a:	1d1a      	adds	r2, r3, #4
 800396c:	633a      	str	r2, [r7, #48]	@ 0x30
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	494e      	ldr	r1, [pc, #312]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003976:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800397a:	405a      	eors	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	b2db      	uxtb	r3, r3
 8003982:	494c      	ldr	r1, [pc, #304]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003988:	405a      	eors	r2, r3
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	b2db      	uxtb	r3, r3
 8003990:	4949      	ldr	r1, [pc, #292]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003992:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003996:	405a      	eors	r2, r3
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	0e1b      	lsrs	r3, r3, #24
 800399c:	4947      	ldr	r1, [pc, #284]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 800399e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a2:	4053      	eors	r3, r2
 80039a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	493f      	ldr	r1, [pc, #252]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 80039b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039b8:	405a      	eors	r2, r3
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	0a1b      	lsrs	r3, r3, #8
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	493c      	ldr	r1, [pc, #240]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 80039c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039c6:	405a      	eors	r2, r3
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	0c1b      	lsrs	r3, r3, #16
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	493a      	ldr	r1, [pc, #232]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 80039d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039d4:	405a      	eors	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	0e1b      	lsrs	r3, r3, #24
 80039da:	4938      	ldr	r1, [pc, #224]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 80039dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039e0:	4053      	eors	r3, r2
 80039e2:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80039e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e6:	3b01      	subs	r3, #1
 80039e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80039ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f73f af01 	bgt.w	80037f4 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039f4:	1d1a      	adds	r2, r3, #4
 80039f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	492c      	ldr	r1, [pc, #176]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003a00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a04:	405a      	eors	r2, r3
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	4929      	ldr	r1, [pc, #164]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003a0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a12:	405a      	eors	r2, r3
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4927      	ldr	r1, [pc, #156]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a20:	405a      	eors	r2, r3
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	0e1b      	lsrs	r3, r3, #24
 8003a26:	4925      	ldr	r1, [pc, #148]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a2c:	4053      	eors	r3, r2
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	491c      	ldr	r1, [pc, #112]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003a3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a42:	405a      	eors	r2, r3
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	0a1b      	lsrs	r3, r3, #8
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	491a      	ldr	r1, [pc, #104]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003a4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a50:	405a      	eors	r2, r3
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4917      	ldr	r1, [pc, #92]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a5e:	405a      	eors	r2, r3
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	0e1b      	lsrs	r3, r3, #24
 8003a64:	4915      	ldr	r1, [pc, #84]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003a66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a6a:	4053      	eors	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	1d1a      	adds	r2, r3, #4
 8003a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	490d      	ldr	r1, [pc, #52]	@ (8003ab0 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003a7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a80:	405a      	eors	r2, r3
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	490a      	ldr	r1, [pc, #40]	@ (8003ab4 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003a8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a8e:	405a      	eors	r2, r3
 8003a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4908      	ldr	r1, [pc, #32]	@ (8003ab8 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003a98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a9c:	405a      	eors	r2, r3
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	0e1b      	lsrs	r3, r3, #24
 8003aa2:	4906      	ldr	r1, [pc, #24]	@ (8003abc <mbedtls_internal_aes_encrypt+0x3bc>)
 8003aa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aa8:	4053      	eors	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aae:	e007      	b.n	8003ac0 <mbedtls_internal_aes_encrypt+0x3c0>
 8003ab0:	0800cd64 	.word	0x0800cd64
 8003ab4:	0800d164 	.word	0x0800d164
 8003ab8:	0800d564 	.word	0x0800d564
 8003abc:	0800d964 	.word	0x0800d964
 8003ac0:	1d1a      	adds	r2, r3, #4
 8003ac2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	4979      	ldr	r1, [pc, #484]	@ (8003cb0 <mbedtls_internal_aes_encrypt+0x5b0>)
 8003acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ad0:	405a      	eors	r2, r3
 8003ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad4:	0a1b      	lsrs	r3, r3, #8
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	4976      	ldr	r1, [pc, #472]	@ (8003cb4 <mbedtls_internal_aes_encrypt+0x5b4>)
 8003ada:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ade:	405a      	eors	r2, r3
 8003ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4974      	ldr	r1, [pc, #464]	@ (8003cb8 <mbedtls_internal_aes_encrypt+0x5b8>)
 8003ae8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003aec:	405a      	eors	r2, r3
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	0e1b      	lsrs	r3, r3, #24
 8003af2:	4972      	ldr	r1, [pc, #456]	@ (8003cbc <mbedtls_internal_aes_encrypt+0x5bc>)
 8003af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003af8:	4053      	eors	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8003afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b02:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	496d      	ldr	r1, [pc, #436]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b0a:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8003b0c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	496a      	ldr	r1, [pc, #424]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b16:	5ccb      	ldrb	r3, [r1, r3]
 8003b18:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 8003b1a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	0c1b      	lsrs	r3, r3, #16
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4967      	ldr	r1, [pc, #412]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b24:	5ccb      	ldrb	r3, [r1, r3]
 8003b26:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b28:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	0e1b      	lsrs	r3, r3, #24
 8003b2e:	4964      	ldr	r1, [pc, #400]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b30:	5ccb      	ldrb	r3, [r1, r3]
 8003b32:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003b34:	4053      	eors	r3, r2
 8003b36:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8003b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3a:	1d1a      	adds	r2, r3, #4
 8003b3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b3e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	495e      	ldr	r1, [pc, #376]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b46:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003b48:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	495b      	ldr	r1, [pc, #364]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003b56:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	0c1b      	lsrs	r3, r3, #16
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	4958      	ldr	r1, [pc, #352]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b60:	5ccb      	ldrb	r3, [r1, r3]
 8003b62:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b64:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	0e1b      	lsrs	r3, r3, #24
 8003b6a:	4955      	ldr	r1, [pc, #340]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003b70:	4053      	eors	r3, r2
 8003b72:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	1d1a      	adds	r2, r3, #4
 8003b78:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b7a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	494f      	ldr	r1, [pc, #316]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b82:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003b84:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	494c      	ldr	r1, [pc, #304]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003b92:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	4949      	ldr	r1, [pc, #292]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003b9c:	5ccb      	ldrb	r3, [r1, r3]
 8003b9e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ba0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	0e1b      	lsrs	r3, r3, #24
 8003ba6:	4946      	ldr	r1, [pc, #280]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ba8:	5ccb      	ldrb	r3, [r1, r3]
 8003baa:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003bac:	4053      	eors	r3, r2
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb2:	1d1a      	adds	r2, r3, #4
 8003bb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bb6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	4940      	ldr	r1, [pc, #256]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003bbe:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003bc0:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	493d      	ldr	r1, [pc, #244]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003bce:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	493a      	ldr	r1, [pc, #232]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003bdc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	0e1b      	lsrs	r3, r3, #24
 8003be2:	4937      	ldr	r1, [pc, #220]	@ (8003cc0 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003be4:	5ccb      	ldrb	r3, [r1, r3]
 8003be6:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003be8:	4053      	eors	r3, r2
 8003bea:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8003bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf6:	0a1a      	lsrs	r2, r3, #8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	0c1a      	lsrs	r2, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3302      	adds	r3, #2
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0e:	0e1a      	lsrs	r2, r3, #24
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3303      	adds	r3, #3
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c24:	0a1a      	lsrs	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	3305      	adds	r3, #5
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	0c1a      	lsrs	r2, r3, #16
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	3306      	adds	r3, #6
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3c:	0e1a      	lsrs	r2, r3, #24
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3307      	adds	r3, #7
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
 8003c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c52:	0a1a      	lsrs	r2, r3, #8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3309      	adds	r3, #9
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	0c1a      	lsrs	r2, r3, #16
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	330a      	adds	r3, #10
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	0e1a      	lsrs	r2, r3, #24
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	330b      	adds	r3, #11
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	330c      	adds	r3, #12
 8003c78:	6a3a      	ldr	r2, [r7, #32]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	0a1a      	lsrs	r2, r3, #8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	330d      	adds	r3, #13
 8003c86:	b2d2      	uxtb	r2, r2
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	0c1a      	lsrs	r2, r3, #16
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	330e      	adds	r3, #14
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	0e1a      	lsrs	r2, r3, #24
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	330f      	adds	r3, #15
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	373c      	adds	r7, #60	@ 0x3c
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	0800cd64 	.word	0x0800cd64
 8003cb4:	0800d164 	.word	0x0800d164
 8003cb8:	0800d564 	.word	0x0800d564
 8003cbc:	0800d964 	.word	0x0800d964
 8003cc0:	0800cc64 	.word	0x0800cc64

08003cc4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b08f      	sub	sp, #60	@ 0x3c
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3302      	adds	r3, #2
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d06:	4053      	eors	r3, r2
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3305      	adds	r3, #5
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	3306      	adds	r3, #6
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3307      	adds	r3, #7
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	061b      	lsls	r3, r3, #24
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	1d1a      	adds	r2, r3, #4
 8003d36:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d3c:	4053      	eors	r3, r2
 8003d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	3308      	adds	r3, #8
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3309      	adds	r3, #9
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	431a      	orrs	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	330a      	adds	r3, #10
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	330b      	adds	r3, #11
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	061b      	lsls	r3, r3, #24
 8003d64:	4313      	orrs	r3, r2
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d72:	4053      	eors	r3, r2
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	330d      	adds	r3, #13
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	021b      	lsls	r3, r3, #8
 8003d86:	431a      	orrs	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	330e      	adds	r3, #14
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	041b      	lsls	r3, r3, #16
 8003d90:	431a      	orrs	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	330f      	adds	r3, #15
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	623b      	str	r3, [r7, #32]
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	1d1a      	adds	r2, r3, #4
 8003da2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a3a      	ldr	r2, [r7, #32]
 8003da8:	4053      	eors	r3, r2
 8003daa:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	105b      	asrs	r3, r3, #1
 8003db2:	3b01      	subs	r3, #1
 8003db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db6:	e0fa      	b.n	8003fae <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	49ab      	ldr	r1, [pc, #684]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003dc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dca:	405a      	eors	r2, r3
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	0a1b      	lsrs	r3, r3, #8
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	49a9      	ldr	r1, [pc, #676]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003dd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd8:	405a      	eors	r2, r3
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	49a6      	ldr	r1, [pc, #664]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003de2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003de6:	405a      	eors	r2, r3
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	0e1b      	lsrs	r3, r3, #24
 8003dec:	49a4      	ldr	r1, [pc, #656]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003dee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003df2:	4053      	eors	r3, r2
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	499c      	ldr	r1, [pc, #624]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e08:	405a      	eors	r2, r3
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4999      	ldr	r1, [pc, #612]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e16:	405a      	eors	r2, r3
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	0c1b      	lsrs	r3, r3, #16
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	4997      	ldr	r1, [pc, #604]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e24:	405a      	eors	r2, r3
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	0e1b      	lsrs	r3, r3, #24
 8003e2a:	4995      	ldr	r1, [pc, #596]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e30:	4053      	eors	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	1d1a      	adds	r2, r3, #4
 8003e38:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	498c      	ldr	r1, [pc, #560]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e46:	405a      	eors	r2, r3
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	498a      	ldr	r1, [pc, #552]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e54:	405a      	eors	r2, r3
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	4987      	ldr	r1, [pc, #540]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e62:	405a      	eors	r2, r3
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	0e1b      	lsrs	r3, r3, #24
 8003e68:	4985      	ldr	r1, [pc, #532]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e6e:	4053      	eors	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	497d      	ldr	r1, [pc, #500]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e84:	405a      	eors	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	497a      	ldr	r1, [pc, #488]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e92:	405a      	eors	r2, r3
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e96:	0c1b      	lsrs	r3, r3, #16
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	4978      	ldr	r1, [pc, #480]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ea0:	405a      	eors	r2, r3
 8003ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea4:	0e1b      	lsrs	r3, r3, #24
 8003ea6:	4976      	ldr	r1, [pc, #472]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003ea8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eac:	4053      	eors	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	1d1a      	adds	r2, r3, #4
 8003eb4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	496d      	ldr	r1, [pc, #436]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ebe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ec2:	405a      	eors	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	496b      	ldr	r1, [pc, #428]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed0:	405a      	eors	r2, r3
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	4968      	ldr	r1, [pc, #416]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003eda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ede:	405a      	eors	r2, r3
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	0e1b      	lsrs	r3, r3, #24
 8003ee4:	4966      	ldr	r1, [pc, #408]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003ee6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eea:	4053      	eors	r3, r2
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	1d1a      	adds	r2, r3, #4
 8003ef2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	495e      	ldr	r1, [pc, #376]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003efc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f00:	405a      	eors	r2, r3
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	0a1b      	lsrs	r3, r3, #8
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	495b      	ldr	r1, [pc, #364]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f0e:	405a      	eors	r2, r3
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	0c1b      	lsrs	r3, r3, #16
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	4959      	ldr	r1, [pc, #356]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f1c:	405a      	eors	r2, r3
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	0e1b      	lsrs	r3, r3, #24
 8003f22:	4957      	ldr	r1, [pc, #348]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f28:	4053      	eors	r3, r2
 8003f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	494e      	ldr	r1, [pc, #312]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f3e:	405a      	eors	r2, r3
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	494c      	ldr	r1, [pc, #304]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f4c:	405a      	eors	r2, r3
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	4949      	ldr	r1, [pc, #292]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f5a:	405a      	eors	r2, r3
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	0e1b      	lsrs	r3, r3, #24
 8003f60:	4947      	ldr	r1, [pc, #284]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f66:	4053      	eors	r3, r2
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6c:	1d1a      	adds	r2, r3, #4
 8003f6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	493f      	ldr	r1, [pc, #252]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f7c:	405a      	eors	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	493c      	ldr	r1, [pc, #240]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f8a:	405a      	eors	r2, r3
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	493a      	ldr	r1, [pc, #232]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f98:	405a      	eors	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	4938      	ldr	r1, [pc, #224]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003fa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fa4:	4053      	eors	r3, r2
 8003fa6:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003faa:	3b01      	subs	r3, #1
 8003fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f73f af01 	bgt.w	8003db8 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	1d1a      	adds	r2, r3, #4
 8003fba:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	492c      	ldr	r1, [pc, #176]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fc8:	405a      	eors	r2, r3
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	4929      	ldr	r1, [pc, #164]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003fd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fd6:	405a      	eors	r2, r3
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	0c1b      	lsrs	r3, r3, #16
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	4927      	ldr	r1, [pc, #156]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003fe0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fe4:	405a      	eors	r2, r3
 8003fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe8:	0e1b      	lsrs	r3, r3, #24
 8003fea:	4925      	ldr	r1, [pc, #148]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003fec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ff0:	4053      	eors	r3, r2
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	1d1a      	adds	r2, r3, #4
 8003ff8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	491c      	ldr	r1, [pc, #112]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004002:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004006:	405a      	eors	r2, r3
 8004008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	b2db      	uxtb	r3, r3
 800400e:	491a      	ldr	r1, [pc, #104]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 8004010:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004014:	405a      	eors	r2, r3
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4917      	ldr	r1, [pc, #92]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 800401e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004022:	405a      	eors	r2, r3
 8004024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004026:	0e1b      	lsrs	r3, r3, #24
 8004028:	4915      	ldr	r1, [pc, #84]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 800402a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800402e:	4053      	eors	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	1d1a      	adds	r2, r3, #4
 8004036:	633a      	str	r2, [r7, #48]	@ 0x30
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	b2db      	uxtb	r3, r3
 800403e:	490d      	ldr	r1, [pc, #52]	@ (8004074 <mbedtls_internal_aes_decrypt+0x3b0>)
 8004040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004044:	405a      	eors	r2, r3
 8004046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004048:	0a1b      	lsrs	r3, r3, #8
 800404a:	b2db      	uxtb	r3, r3
 800404c:	490a      	ldr	r1, [pc, #40]	@ (8004078 <mbedtls_internal_aes_decrypt+0x3b4>)
 800404e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004052:	405a      	eors	r2, r3
 8004054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	b2db      	uxtb	r3, r3
 800405a:	4908      	ldr	r1, [pc, #32]	@ (800407c <mbedtls_internal_aes_decrypt+0x3b8>)
 800405c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004060:	405a      	eors	r2, r3
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	4906      	ldr	r1, [pc, #24]	@ (8004080 <mbedtls_internal_aes_decrypt+0x3bc>)
 8004068:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800406c:	4053      	eors	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	e007      	b.n	8004084 <mbedtls_internal_aes_decrypt+0x3c0>
 8004074:	0800de64 	.word	0x0800de64
 8004078:	0800e264 	.word	0x0800e264
 800407c:	0800e664 	.word	0x0800e664
 8004080:	0800ea64 	.word	0x0800ea64
 8004084:	1d1a      	adds	r2, r3, #4
 8004086:	633a      	str	r2, [r7, #48]	@ 0x30
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	4979      	ldr	r1, [pc, #484]	@ (8004274 <mbedtls_internal_aes_decrypt+0x5b0>)
 8004090:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004094:	405a      	eors	r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	b2db      	uxtb	r3, r3
 800409c:	4976      	ldr	r1, [pc, #472]	@ (8004278 <mbedtls_internal_aes_decrypt+0x5b4>)
 800409e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040a2:	405a      	eors	r2, r3
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4974      	ldr	r1, [pc, #464]	@ (800427c <mbedtls_internal_aes_decrypt+0x5b8>)
 80040ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040b0:	405a      	eors	r2, r3
 80040b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b4:	0e1b      	lsrs	r3, r3, #24
 80040b6:	4972      	ldr	r1, [pc, #456]	@ (8004280 <mbedtls_internal_aes_decrypt+0x5bc>)
 80040b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040bc:	4053      	eors	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	1d1a      	adds	r2, r3, #4
 80040c4:	633a      	str	r2, [r7, #48]	@ 0x30
 80040c6:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	496d      	ldr	r1, [pc, #436]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040ce:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80040d0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	496a      	ldr	r1, [pc, #424]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040da:	5ccb      	ldrb	r3, [r1, r3]
 80040dc:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80040de:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	4967      	ldr	r1, [pc, #412]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040e8:	5ccb      	ldrb	r3, [r1, r3]
 80040ea:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80040ec:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	0e1b      	lsrs	r3, r3, #24
 80040f2:	4964      	ldr	r1, [pc, #400]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 80040f4:	5ccb      	ldrb	r3, [r1, r3]
 80040f6:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 80040f8:	4053      	eors	r3, r2
 80040fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	1d1a      	adds	r2, r3, #4
 8004100:	633a      	str	r2, [r7, #48]	@ 0x30
 8004102:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	495e      	ldr	r1, [pc, #376]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 800410a:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 800410c:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	b2db      	uxtb	r3, r3
 8004114:	495b      	ldr	r1, [pc, #364]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004116:	5ccb      	ldrb	r3, [r1, r3]
 8004118:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 800411a:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	0c1b      	lsrs	r3, r3, #16
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4958      	ldr	r1, [pc, #352]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004124:	5ccb      	ldrb	r3, [r1, r3]
 8004126:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8004128:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	0e1b      	lsrs	r3, r3, #24
 800412e:	4955      	ldr	r1, [pc, #340]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004130:	5ccb      	ldrb	r3, [r1, r3]
 8004132:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8004134:	4053      	eors	r3, r2
 8004136:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8004138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413a:	1d1a      	adds	r2, r3, #4
 800413c:	633a      	str	r2, [r7, #48]	@ 0x30
 800413e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	494f      	ldr	r1, [pc, #316]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004146:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8004148:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	b2db      	uxtb	r3, r3
 8004150:	494c      	ldr	r1, [pc, #304]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8004156:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4949      	ldr	r1, [pc, #292]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004160:	5ccb      	ldrb	r3, [r1, r3]
 8004162:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004164:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	0e1b      	lsrs	r3, r3, #24
 800416a:	4946      	ldr	r1, [pc, #280]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 800416c:	5ccb      	ldrb	r3, [r1, r3]
 800416e:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8004170:	4053      	eors	r3, r2
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	1d1a      	adds	r2, r3, #4
 8004178:	633a      	str	r2, [r7, #48]	@ 0x30
 800417a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	4940      	ldr	r1, [pc, #256]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004182:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8004184:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	b2db      	uxtb	r3, r3
 800418c:	493d      	ldr	r1, [pc, #244]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 800418e:	5ccb      	ldrb	r3, [r1, r3]
 8004190:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8004192:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	0c1b      	lsrs	r3, r3, #16
 8004198:	b2db      	uxtb	r3, r3
 800419a:	493a      	ldr	r1, [pc, #232]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 80041a0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	0e1b      	lsrs	r3, r3, #24
 80041a6:	4937      	ldr	r1, [pc, #220]	@ (8004284 <mbedtls_internal_aes_decrypt+0x5c0>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80041ac:	4053      	eors	r3, r2
 80041ae:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80041b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	0a1a      	lsrs	r2, r3, #8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3301      	adds	r3, #1
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c6:	0c1a      	lsrs	r2, r3, #16
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3302      	adds	r3, #2
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	0e1a      	lsrs	r2, r3, #24
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3303      	adds	r3, #3
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	3304      	adds	r3, #4
 80041e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	0a1a      	lsrs	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3305      	adds	r3, #5
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	0c1a      	lsrs	r2, r3, #16
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3306      	adds	r3, #6
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	0e1a      	lsrs	r2, r3, #24
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3307      	adds	r3, #7
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3308      	adds	r3, #8
 800420e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	0a1a      	lsrs	r2, r3, #8
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3309      	adds	r3, #9
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	0c1a      	lsrs	r2, r3, #16
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	330a      	adds	r3, #10
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	0e1a      	lsrs	r2, r3, #24
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	330b      	adds	r3, #11
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	330c      	adds	r3, #12
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	b2d2      	uxtb	r2, r2
 8004240:	701a      	strb	r2, [r3, #0]
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	0a1a      	lsrs	r2, r3, #8
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	330d      	adds	r3, #13
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	0c1a      	lsrs	r2, r3, #16
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	330e      	adds	r3, #14
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	0e1a      	lsrs	r2, r3, #24
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	330f      	adds	r3, #15
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	373c      	adds	r7, #60	@ 0x3c
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	0800de64 	.word	0x0800de64
 8004278:	0800e264 	.word	0x0800e264
 800427c:	0800e664 	.word	0x0800e664
 8004280:	0800ea64 	.word	0x0800ea64
 8004284:	0800dd64 	.word	0x0800dd64

08004288 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d106      	bne.n	80042aa <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff fa2d 	bl	8003700 <mbedtls_internal_aes_encrypt>
 80042a6:	4603      	mov	r3, r0
 80042a8:	e005      	b.n	80042b6 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f7ff fd08 	bl	8003cc4 <mbedtls_internal_aes_decrypt>
 80042b4:	4603      	mov	r3, r0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 80042be:	b5b0      	push	{r4, r5, r7, lr}
 80042c0:	b08a      	sub	sp, #40	@ 0x28
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80042d6:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 80042da:	e06d      	b.n	80043b8 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d166      	bne.n	80043b0 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 80042e2:	e036      	b.n	8004352 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 80042e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e6:	f107 0414 	add.w	r4, r7, #20
 80042ea:	6818      	ldr	r0, [r3, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f7ff ffc4 	bl	8004288 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
 8004304:	e010      	b.n	8004328 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800430a:	4413      	add	r3, r2
 800430c:	7819      	ldrb	r1, [r3, #0]
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	4413      	add	r3, r2
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800431a:	4403      	add	r3, r0
 800431c:	404a      	eors	r2, r1
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	3301      	adds	r3, #1
 8004326:	627b      	str	r3, [r7, #36]	@ 0x24
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	2b0f      	cmp	r3, #15
 800432c:	ddeb      	ble.n	8004306 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	461d      	mov	r5, r3
 8004332:	f107 0414 	add.w	r4, r7, #20
 8004336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004338:	6028      	str	r0, [r5, #0]
 800433a:	6069      	str	r1, [r5, #4]
 800433c:	60aa      	str	r2, [r5, #8]
 800433e:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8004340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004342:	3310      	adds	r3, #16
 8004344:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004348:	3310      	adds	r3, #16
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3b10      	subs	r3, #16
 8004350:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1c5      	bne.n	80042e4 <mbedtls_aes_crypt_cbc+0x26>
 8004358:	e02d      	b.n	80043b6 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
 800435e:	e010      	b.n	8004382 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004364:	4413      	add	r3, r2
 8004366:	7819      	ldrb	r1, [r3, #0]
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	4413      	add	r3, r2
 800436e:	781a      	ldrb	r2, [r3, #0]
 8004370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004372:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004374:	4403      	add	r3, r0
 8004376:	404a      	eors	r2, r1
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	3301      	adds	r3, #1
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	2b0f      	cmp	r3, #15
 8004386:	ddeb      	ble.n	8004360 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 8004388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f7ff ff7a 	bl	8004288 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8004394:	2210      	movs	r2, #16
 8004396:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004398:	6838      	ldr	r0, [r7, #0]
 800439a:	f008 faf3 	bl	800c984 <memcpy>

            input  += 16;
 800439e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a0:	3310      	adds	r3, #16
 80043a2:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 80043a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043a6:	3310      	adds	r3, #16
 80043a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3b10      	subs	r3, #16
 80043ae:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1d1      	bne.n	800435a <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3728      	adds	r7, #40	@ 0x28
 80043bc:	46bd      	mov	sp, r7
 80043be:	bdb0      	pop	{r4, r5, r7, pc}

080043c0 <mbedtls_gf128mul_x_ble>:
 * for machine endianess and hence works correctly on both big and little
 * endian machines.
 */
static void mbedtls_gf128mul_x_ble( unsigned char r[16],
                                    const unsigned char x[16] )
{
 80043c0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043c4:	b0ce      	sub	sp, #312	@ 0x138
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80043cc:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
    uint64_t a, b, ra, rb;

    GET_UINT64_LE( a, x, 0 );
 80043d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80043d4:	3307      	adds	r3, #7
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2200      	movs	r2, #0
 80043dc:	469a      	mov	sl, r3
 80043de:	4693      	mov	fp, r2
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	ea4f 610a 	mov.w	r1, sl, lsl #24
 80043ec:	2000      	movs	r0, #0
 80043ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80043f2:	3306      	adds	r3, #6
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80043fe:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	f8d7 6108 	ldr.w	r6, [r7, #264]	@ 0x108
 800440e:	0433      	lsls	r3, r6, #16
 8004410:	2200      	movs	r2, #0
 8004412:	ea40 0402 	orr.w	r4, r0, r2
 8004416:	ea41 0503 	orr.w	r5, r1, r3
 800441a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800441e:	3305      	adds	r3, #5
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2200      	movs	r2, #0
 8004426:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800442a:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800443a:	020b      	lsls	r3, r1, #8
 800443c:	2200      	movs	r2, #0
 800443e:	ea44 0802 	orr.w	r8, r4, r2
 8004442:	ea45 0903 	orr.w	r9, r5, r3
 8004446:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800444a:	3304      	adds	r3, #4
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2200      	movs	r2, #0
 8004452:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004456:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8004466:	000b      	movs	r3, r1
 8004468:	2200      	movs	r2, #0
 800446a:	ea48 0102 	orr.w	r1, r8, r2
 800446e:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8004472:	ea49 0303 	orr.w	r3, r9, r3
 8004476:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800447a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800447e:	3303      	adds	r3, #3
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2200      	movs	r2, #0
 8004486:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800448a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800448e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004492:	460b      	mov	r3, r1
 8004494:	0a1b      	lsrs	r3, r3, #8
 8004496:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800449a:	460b      	mov	r3, r1
 800449c:	061b      	lsls	r3, r3, #24
 800449e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044a2:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80044a6:	4623      	mov	r3, r4
 80044a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044ac:	4602      	mov	r2, r0
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044b4:	462b      	mov	r3, r5
 80044b6:	460a      	mov	r2, r1
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80044be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80044c2:	3302      	adds	r3, #2
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044ce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80044de:	4629      	mov	r1, r5
 80044e0:	040b      	lsls	r3, r1, #16
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80044e8:	4621      	mov	r1, r4
 80044ea:	040a      	lsls	r2, r1, #16
 80044ec:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80044f0:	4621      	mov	r1, r4
 80044f2:	4311      	orrs	r1, r2
 80044f4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80044f8:	4629      	mov	r1, r5
 80044fa:	4319      	orrs	r1, r3
 80044fc:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8004500:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004504:	3301      	adds	r3, #1
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004510:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8004520:	4629      	mov	r1, r5
 8004522:	020b      	lsls	r3, r1, #8
 8004524:	4621      	mov	r1, r4
 8004526:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800452a:	4621      	mov	r1, r4
 800452c:	020a      	lsls	r2, r1, #8
 800452e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004532:	4621      	mov	r1, r4
 8004534:	4311      	orrs	r1, r2
 8004536:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800453a:	4629      	mov	r1, r5
 800453c:	4319      	orrs	r1, r3
 800453e:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 8004542:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2200      	movs	r2, #0
 800454c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004550:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004554:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8004558:	4623      	mov	r3, r4
 800455a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800455e:	4602      	mov	r2, r0
 8004560:	4313      	orrs	r3, r2
 8004562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004564:	462b      	mov	r3, r5
 8004566:	460a      	mov	r2, r1
 8004568:	4313      	orrs	r3, r2
 800456a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004570:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    GET_UINT64_LE( b, x, 8 );
 8004574:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004578:	330f      	adds	r3, #15
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2200      	movs	r2, #0
 8004580:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004584:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004588:	f04f 0000 	mov.w	r0, #0
 800458c:	f04f 0100 	mov.w	r1, #0
 8004590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004594:	0619      	lsls	r1, r3, #24
 8004596:	2000      	movs	r0, #0
 8004598:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800459c:	330e      	adds	r3, #14
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045a8:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80045b8:	0423      	lsls	r3, r4, #16
 80045ba:	2200      	movs	r2, #0
 80045bc:	ea40 0402 	orr.w	r4, r0, r2
 80045c0:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80045c4:	430b      	orrs	r3, r1
 80045c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80045ce:	330d      	adds	r3, #13
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2200      	movs	r2, #0
 80045d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045ea:	020b      	lsls	r3, r1, #8
 80045ec:	2200      	movs	r2, #0
 80045ee:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80045f2:	4621      	mov	r1, r4
 80045f4:	4311      	orrs	r1, r2
 80045f6:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80045fa:	4629      	mov	r1, r5
 80045fc:	4319      	orrs	r1, r3
 80045fe:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 8004602:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004606:	330c      	adds	r3, #12
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004612:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8004622:	000b      	movs	r3, r1
 8004624:	2200      	movs	r2, #0
 8004626:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800462a:	4621      	mov	r1, r4
 800462c:	4311      	orrs	r1, r2
 800462e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004630:	4629      	mov	r1, r5
 8004632:	4319      	orrs	r1, r3
 8004634:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8004636:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800463a:	330b      	adds	r3, #11
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2200      	movs	r2, #0
 8004642:	673b      	str	r3, [r7, #112]	@ 0x70
 8004644:	677a      	str	r2, [r7, #116]	@ 0x74
 8004646:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800464a:	460b      	mov	r3, r1
 800464c:	0a1b      	lsrs	r3, r3, #8
 800464e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004650:	460b      	mov	r3, r1
 8004652:	061b      	lsls	r3, r3, #24
 8004654:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004656:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800465a:	4623      	mov	r3, r4
 800465c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004660:	4602      	mov	r2, r0
 8004662:	4313      	orrs	r3, r2
 8004664:	663b      	str	r3, [r7, #96]	@ 0x60
 8004666:	462b      	mov	r3, r5
 8004668:	460a      	mov	r2, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	667b      	str	r3, [r7, #100]	@ 0x64
 800466e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004672:	330a      	adds	r3, #10
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2200      	movs	r2, #0
 800467a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800467c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800468a:	4629      	mov	r1, r5
 800468c:	040b      	lsls	r3, r1, #16
 800468e:	4621      	mov	r1, r4
 8004690:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8004694:	4621      	mov	r1, r4
 8004696:	040a      	lsls	r2, r1, #16
 8004698:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800469c:	4621      	mov	r1, r4
 800469e:	4311      	orrs	r1, r2
 80046a0:	6539      	str	r1, [r7, #80]	@ 0x50
 80046a2:	4629      	mov	r1, r5
 80046a4:	4319      	orrs	r1, r3
 80046a6:	6579      	str	r1, [r7, #84]	@ 0x54
 80046a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046ac:	3309      	adds	r3, #9
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2200      	movs	r2, #0
 80046b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80046c4:	4629      	mov	r1, r5
 80046c6:	020b      	lsls	r3, r1, #8
 80046c8:	4621      	mov	r1, r4
 80046ca:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80046ce:	4621      	mov	r1, r4
 80046d0:	020a      	lsls	r2, r1, #8
 80046d2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80046d6:	4621      	mov	r1, r4
 80046d8:	4311      	orrs	r1, r2
 80046da:	6439      	str	r1, [r7, #64]	@ 0x40
 80046dc:	4629      	mov	r1, r5
 80046de:	4319      	orrs	r1, r3
 80046e0:	6479      	str	r1, [r7, #68]	@ 0x44
 80046e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046e6:	3308      	adds	r3, #8
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2200      	movs	r2, #0
 80046ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046f2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80046f6:	4623      	mov	r3, r4
 80046f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80046fc:	4602      	mov	r2, r0
 80046fe:	4313      	orrs	r3, r2
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	462b      	mov	r3, r5
 8004704:	460a      	mov	r2, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800470e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128

    ra = ( a << 1 )  ^ 0x0087 >> ( 8 - ( ( b >> 63 ) << 3 ) );
 8004712:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004716:	1891      	adds	r1, r2, r2
 8004718:	61b9      	str	r1, [r7, #24]
 800471a:	415b      	adcs	r3, r3
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004722:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	f04f 0300 	mov.w	r3, #0
 800472e:	0fea      	lsrs	r2, r5, #31
 8004730:	2300      	movs	r3, #0
 8004732:	4613      	mov	r3, r2
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	f1c3 0308 	rsb	r3, r3, #8
 800473a:	2287      	movs	r2, #135	@ 0x87
 800473c:	fa42 f303 	asr.w	r3, r2, r3
 8004740:	17da      	asrs	r2, r3, #31
 8004742:	633b      	str	r3, [r7, #48]	@ 0x30
 8004744:	637a      	str	r2, [r7, #52]	@ 0x34
 8004746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800474a:	4623      	mov	r3, r4
 800474c:	4043      	eors	r3, r0
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	462b      	mov	r3, r5
 8004752:	404b      	eors	r3, r1
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800475a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    rb = ( a >> 63 ) | ( b << 1 );
 800475e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	0fd8      	lsrs	r0, r3, #31
 800476c:	2100      	movs	r1, #0
 800476e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8004772:	1894      	adds	r4, r2, r2
 8004774:	60bc      	str	r4, [r7, #8]
 8004776:	415b      	adcs	r3, r3
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800477e:	ea40 0402 	orr.w	r4, r0, r2
 8004782:	603c      	str	r4, [r7, #0]
 8004784:	430b      	orrs	r3, r1
 8004786:	607b      	str	r3, [r7, #4]
 8004788:	e9d7 3400 	ldrd	r3, r4, [r7]
 800478c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

    PUT_UINT64_LE( ra, r, 0 );
 8004790:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	0e0a      	lsrs	r2, r1, #24
 800479e:	2300      	movs	r3, #0
 80047a0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80047a4:	3107      	adds	r1, #7
 80047a6:	b2d3      	uxtb	r3, r2
 80047a8:	700b      	strb	r3, [r1, #0]
 80047aa:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	0c0a      	lsrs	r2, r1, #16
 80047b8:	2300      	movs	r3, #0
 80047ba:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80047be:	3106      	adds	r1, #6
 80047c0:	b2d3      	uxtb	r3, r2
 80047c2:	700b      	strb	r3, [r1, #0]
 80047c4:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	0a0a      	lsrs	r2, r1, #8
 80047d2:	2300      	movs	r3, #0
 80047d4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80047d8:	3105      	adds	r1, #5
 80047da:	b2d3      	uxtb	r3, r2
 80047dc:	700b      	strb	r3, [r1, #0]
 80047de:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	000a      	movs	r2, r1
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80047f2:	3104      	adds	r1, #4
 80047f4:	b2d3      	uxtb	r3, r2
 80047f6:	700b      	strb	r3, [r1, #0]
 80047f8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	0e02      	lsrs	r2, r0, #24
 8004806:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800480a:	0e0b      	lsrs	r3, r1, #24
 800480c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8004810:	3103      	adds	r1, #3
 8004812:	b2d3      	uxtb	r3, r2
 8004814:	700b      	strb	r3, [r1, #0]
 8004816:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	0c02      	lsrs	r2, r0, #16
 8004824:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004828:	0c0b      	lsrs	r3, r1, #16
 800482a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800482e:	3102      	adds	r1, #2
 8004830:	b2d3      	uxtb	r3, r2
 8004832:	700b      	strb	r3, [r1, #0]
 8004834:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	0a02      	lsrs	r2, r0, #8
 8004842:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004846:	0a0b      	lsrs	r3, r1, #8
 8004848:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800484c:	3101      	adds	r1, #1
 800484e:	b2d3      	uxtb	r3, r2
 8004850:	700b      	strb	r3, [r1, #0]
 8004852:	f897 2120 	ldrb.w	r2, [r7, #288]	@ 0x120
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	701a      	strb	r2, [r3, #0]
    PUT_UINT64_LE( rb, r, 8 );
 800485c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	0e0a      	lsrs	r2, r1, #24
 800486a:	2300      	movs	r3, #0
 800486c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8004870:	310f      	adds	r1, #15
 8004872:	b2d3      	uxtb	r3, r2
 8004874:	700b      	strb	r3, [r1, #0]
 8004876:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	0c0a      	lsrs	r2, r1, #16
 8004884:	2300      	movs	r3, #0
 8004886:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800488a:	310e      	adds	r1, #14
 800488c:	b2d3      	uxtb	r3, r2
 800488e:	700b      	strb	r3, [r1, #0]
 8004890:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	0a0a      	lsrs	r2, r1, #8
 800489e:	2300      	movs	r3, #0
 80048a0:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80048a4:	310d      	adds	r1, #13
 80048a6:	b2d3      	uxtb	r3, r2
 80048a8:	700b      	strb	r3, [r1, #0]
 80048aa:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	000a      	movs	r2, r1
 80048b8:	2300      	movs	r3, #0
 80048ba:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80048be:	310c      	adds	r1, #12
 80048c0:	b2d3      	uxtb	r3, r2
 80048c2:	700b      	strb	r3, [r1, #0]
 80048c4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	0e02      	lsrs	r2, r0, #24
 80048d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80048d6:	0e0b      	lsrs	r3, r1, #24
 80048d8:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80048dc:	310b      	adds	r1, #11
 80048de:	b2d3      	uxtb	r3, r2
 80048e0:	700b      	strb	r3, [r1, #0]
 80048e2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	0c02      	lsrs	r2, r0, #16
 80048f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048f4:	0c0b      	lsrs	r3, r1, #16
 80048f6:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80048fa:	310a      	adds	r1, #10
 80048fc:	b2d3      	uxtb	r3, r2
 80048fe:	700b      	strb	r3, [r1, #0]
 8004900:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	f04f 0300 	mov.w	r3, #0
 800490c:	0a02      	lsrs	r2, r0, #8
 800490e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004912:	0a0b      	lsrs	r3, r1, #8
 8004914:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8004918:	3109      	adds	r1, #9
 800491a:	b2d3      	uxtb	r3, r2
 800491c:	700b      	strb	r3, [r1, #0]
 800491e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004922:	3308      	adds	r3, #8
 8004924:	f897 2118 	ldrb.w	r2, [r7, #280]	@ 0x118
 8004928:	701a      	strb	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004936:	4770      	bx	lr

08004938 <mbedtls_aes_crypt_xts>:
                           int mode,
                           size_t length,
                           const unsigned char data_unit[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	b099      	sub	sp, #100	@ 0x64
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
    int ret;
    size_t blocks = length / 16;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t leftover = length % 16;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f003 030f 	and.w	r3, r3, #15
 8004952:	653b      	str	r3, [r7, #80]	@ 0x50
    AES_VALIDATE_RET( data_unit != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    /* Data units must be at least 16 bytes long. */
    if( length < 16 )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d802      	bhi.n	8004960 <mbedtls_aes_crypt_xts+0x28>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 800495a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800495e:	e0f0      	b.n	8004b42 <mbedtls_aes_crypt_xts+0x20a>

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if( length > ( 1 << 20 ) * 16 )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004966:	d902      	bls.n	800496e <mbedtls_aes_crypt_xts+0x36>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8004968:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800496c:	e0e9      	b.n	8004b42 <mbedtls_aes_crypt_xts+0x20a>

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb( &ctx->tweak, MBEDTLS_AES_ENCRYPT,
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 708c 	add.w	r0, r3, #280	@ 0x118
 8004974:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	2101      	movs	r1, #1
 800497c:	f7ff fc84 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8004980:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                 data_unit, tweak );
    if( ret != 0 )
 8004982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d068      	beq.n	8004a5a <mbedtls_aes_crypt_xts+0x122>
        return( ret );
 8004988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800498a:	e0da      	b.n	8004b42 <mbedtls_aes_crypt_xts+0x20a>

    while( blocks-- )
    {
        size_t i;

        if( leftover && ( mode == MBEDTLS_AES_DECRYPT ) && blocks == 0 )
 800498c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <mbedtls_aes_crypt_xts+0x84>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d111      	bne.n	80049bc <mbedtls_aes_crypt_xts+0x84>
 8004998:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10e      	bne.n	80049bc <mbedtls_aes_crypt_xts+0x84>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the lefover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy( prev_tweak, tweak, sizeof( tweak ) );
 800499e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80049a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80049a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble( tweak, tweak );
 80049ac:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80049b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80049b4:	4611      	mov	r1, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff fd02 	bl	80043c0 <mbedtls_gf128mul_x_ble>
        }

        for( i = 0; i < 16; i++ )
 80049bc:	2300      	movs	r3, #0
 80049be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049c0:	e013      	b.n	80049ea <mbedtls_aes_crypt_xts+0xb2>
            tmp[i] = input[i] ^ tweak[i];
 80049c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80049c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049c6:	4413      	add	r3, r2
 80049c8:	781a      	ldrb	r2, [r3, #0]
 80049ca:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80049ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049d0:	440b      	add	r3, r1
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	4053      	eors	r3, r2
 80049d6:	b2d9      	uxtb	r1, r3
 80049d8:	f107 0214 	add.w	r2, r7, #20
 80049dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049de:	4413      	add	r3, r2
 80049e0:	460a      	mov	r2, r1
 80049e2:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 80049e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049e6:	3301      	adds	r3, #1
 80049e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049ec:	2b0f      	cmp	r3, #15
 80049ee:	d9e8      	bls.n	80049c2 <mbedtls_aes_crypt_xts+0x8a>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	f107 0214 	add.w	r2, r7, #20
 80049fa:	68b9      	ldr	r1, [r7, #8]
 80049fc:	f7ff fc44 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8004a00:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if( ret != 0 )
 8004a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <mbedtls_aes_crypt_xts+0xd4>
            return( ret );
 8004a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a0a:	e09a      	b.n	8004b42 <mbedtls_aes_crypt_xts+0x20a>

        for( i = 0; i < 16; i++ )
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a10:	e012      	b.n	8004a38 <mbedtls_aes_crypt_xts+0x100>
            output[i] = tmp[i] ^ tweak[i];
 8004a12:	f107 0214 	add.w	r2, r7, #20
 8004a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a18:	4413      	add	r3, r2
 8004a1a:	7819      	ldrb	r1, [r3, #0]
 8004a1c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004a20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a22:	4413      	add	r3, r2
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8004a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a2a:	4403      	add	r3, r0
 8004a2c:	404a      	eors	r2, r1
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004a32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a34:	3301      	adds	r3, #1
 8004a36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	d9e9      	bls.n	8004a12 <mbedtls_aes_crypt_xts+0xda>

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble( tweak, tweak );
 8004a3e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004a42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a46:	4611      	mov	r1, r2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fcb9 	bl	80043c0 <mbedtls_gf128mul_x_ble>

        output += 16;
 8004a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a50:	3310      	adds	r3, #16
 8004a52:	677b      	str	r3, [r7, #116]	@ 0x74
        input += 16;
 8004a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a56:	3310      	adds	r3, #16
 8004a58:	673b      	str	r3, [r7, #112]	@ 0x70
    while( blocks-- )
 8004a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a5c:	1e5a      	subs	r2, r3, #1
 8004a5e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d193      	bne.n	800498c <mbedtls_aes_crypt_xts+0x54>
    }

    if( leftover )
 8004a64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d06a      	beq.n	8004b40 <mbedtls_aes_crypt_xts+0x208>
    {
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <mbedtls_aes_crypt_xts+0x13e>
 8004a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a74:	e001      	b.n	8004a7a <mbedtls_aes_crypt_xts+0x142>
 8004a76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004a7a:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 8004a7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a7e:	3b10      	subs	r3, #16
 8004a80:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of cyphertext we won't steal. At the same time, copy the
         * remainder of the input for this final round (since the loop bounds
         * are the same). */
        for( i = 0; i < leftover; i++ )
 8004a82:	2300      	movs	r3, #0
 8004a84:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a86:	e01a      	b.n	8004abe <mbedtls_aes_crypt_xts+0x186>
        {
            output[i] = prev_output[i];
 8004a88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a8c:	441a      	add	r2, r3
 8004a8e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a92:	440b      	add	r3, r1
 8004a94:	7812      	ldrb	r2, [r2, #0]
 8004a96:	701a      	strb	r2, [r3, #0]
            tmp[i] = input[i] ^ t[i];
 8004a98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9c:	4413      	add	r3, r2
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004aa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aa4:	440b      	add	r3, r1
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4053      	eors	r3, r2
 8004aaa:	b2d9      	uxtb	r1, r3
 8004aac:	f107 0214 	add.w	r2, r7, #20
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab2:	4413      	add	r3, r2
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < leftover; i++ )
 8004ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aba:	3301      	adds	r3, #1
 8004abc:	657b      	str	r3, [r7, #84]	@ 0x54
 8004abe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d3e0      	bcc.n	8004a88 <mbedtls_aes_crypt_xts+0x150>
        }

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        for( ; i < 16; i++ )
 8004ac6:	e012      	b.n	8004aee <mbedtls_aes_crypt_xts+0x1b6>
            tmp[i] = prev_output[i] ^ t[i];
 8004ac8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004acc:	4413      	add	r3, r2
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad4:	440b      	add	r3, r1
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	4053      	eors	r3, r2
 8004ada:	b2d9      	uxtb	r1, r3
 8004adc:	f107 0214 	add.w	r2, r7, #20
 8004ae0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ae2:	4413      	add	r3, r2
 8004ae4:	460a      	mov	r2, r1
 8004ae6:	701a      	strb	r2, [r3, #0]
        for( ; i < 16; i++ )
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004aea:	3301      	adds	r3, #1
 8004aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af0:	2b0f      	cmp	r3, #15
 8004af2:	d9e9      	bls.n	8004ac8 <mbedtls_aes_crypt_xts+0x190>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f107 0314 	add.w	r3, r7, #20
 8004afa:	f107 0214 	add.w	r2, r7, #20
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	f7ff fbc2 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8004b04:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if( ret != 0 )
 8004b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <mbedtls_aes_crypt_xts+0x1d8>
            return ret;
 8004b0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b0e:	e018      	b.n	8004b42 <mbedtls_aes_crypt_xts+0x20a>

        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        for( i = 0; i < 16; i++ )
 8004b10:	2300      	movs	r3, #0
 8004b12:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b14:	e011      	b.n	8004b3a <mbedtls_aes_crypt_xts+0x202>
            prev_output[i] = tmp[i] ^ t[i];
 8004b16:	f107 0214 	add.w	r2, r7, #20
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1c:	4413      	add	r3, r2
 8004b1e:	7819      	ldrb	r1, [r3, #0]
 8004b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b24:	4413      	add	r3, r2
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b2c:	4403      	add	r3, r0
 8004b2e:	404a      	eors	r2, r1
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b36:	3301      	adds	r3, #1
 8004b38:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b3c:	2b0f      	cmp	r3, #15
 8004b3e:	d9ea      	bls.n	8004b16 <mbedtls_aes_crypt_xts+0x1de>
    }

    return( 0 );
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3764      	adds	r7, #100	@ 0x64
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}

08004b4a <mbedtls_aes_crypt_ofb>:
                           size_t length,
                           size_t *iv_off,
                           unsigned char iv[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b086      	sub	sp, #24
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
 8004b52:	60b9      	str	r1, [r7, #8]
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	613b      	str	r3, [r7, #16]

    if( n > 15 )
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b0f      	cmp	r3, #15
 8004b66:	d922      	bls.n	8004bae <mbedtls_aes_crypt_ofb+0x64>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8004b68:	f06f 0320 	mvn.w	r3, #32
 8004b6c:	e02a      	b.n	8004bc4 <mbedtls_aes_crypt_ofb+0x7a>

    while( length-- )
    {
        if( n == 0 )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <mbedtls_aes_crypt_ofb+0x3e>
        {
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	2101      	movs	r1, #1
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fb84 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8004b80:	6178      	str	r0, [r7, #20]
            if( ret != 0 )
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d11b      	bne.n	8004bc0 <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
        }
        *output++ =  *input++ ^ iv[n];
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	623a      	str	r2, [r7, #32]
 8004b8e:	7819      	ldrb	r1, [r3, #0]
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	781a      	ldrb	r2, [r3, #0]
 8004b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9a:	1c58      	adds	r0, r3, #1
 8004b9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b9e:	404a      	eors	r2, r1
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	613b      	str	r3, [r7, #16]
    while( length-- )
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	1e5a      	subs	r2, r3, #1
 8004bb2:	60ba      	str	r2, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1da      	bne.n	8004b6e <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e000      	b.n	8004bc2 <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 8004bc0:	bf00      	nop

exit:
    return( ret );
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <camellia_feistel>:
        }                                                   \
}

static void camellia_feistel( const uint32_t x[2], const uint32_t k[2],
                              uint32_t z[2])
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b087      	sub	sp, #28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4053      	eors	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3304      	adds	r3, #4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	3304      	adds	r3, #4
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4053      	eors	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	0e1b      	lsrs	r3, r3, #24
 8004bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8004cb0 <camellia_feistel+0xe4>)
 8004bfa:	5cd3      	ldrb	r3, [r2, r3]
 8004bfc:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	0c1b      	lsrs	r3, r3, #16
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	492b      	ldr	r1, [pc, #172]	@ (8004cb4 <camellia_feistel+0xe8>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8004c0a:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3((I0 >>  8) & 0xFF) <<  8) |
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	4929      	ldr	r1, [pc, #164]	@ (8004cb8 <camellia_feistel+0xec>)
 8004c14:	5ccb      	ldrb	r3, [r1, r3]
 8004c16:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 8004c18:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4((I0      ) & 0xFF)      );
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	4927      	ldr	r1, [pc, #156]	@ (8004cbc <camellia_feistel+0xf0>)
 8004c20:	5c8a      	ldrb	r2, [r1, r2]
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	4a22      	ldr	r2, [pc, #136]	@ (8004cb4 <camellia_feistel+0xe8>)
 8004c2c:	5cd3      	ldrb	r3, [r2, r3]
 8004c2e:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	4920      	ldr	r1, [pc, #128]	@ (8004cb8 <camellia_feistel+0xec>)
 8004c38:	5ccb      	ldrb	r3, [r1, r3]
 8004c3a:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8004c3c:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4((I1 >>  8) & 0xFF) <<  8) |
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	0a1b      	lsrs	r3, r3, #8
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	491d      	ldr	r1, [pc, #116]	@ (8004cbc <camellia_feistel+0xf0>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 8004c4a:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1((I1      ) & 0xFF)      );
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	4917      	ldr	r1, [pc, #92]	@ (8004cb0 <camellia_feistel+0xe4>)
 8004c52:	5c8a      	ldrb	r2, [r1, r2]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	ea4f 6333 	mov.w	r3, r3, ror #24
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4053      	eors	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	4053      	eors	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4053      	eors	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	4053      	eors	r3, r2
 8004c86:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	405a      	eors	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	404a      	eors	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	0800eebc 	.word	0x0800eebc
 8004cb4:	0800efbc 	.word	0x0800efbc
 8004cb8:	0800f0bc 	.word	0x0800f0bc
 8004cbc:	0800f1bc 	.word	0x0800f1bc

08004cc0 <mbedtls_camellia_init>:

void mbedtls_camellia_init( mbedtls_camellia_context *ctx )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
    CAMELLIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_camellia_context ) );
 8004cc8:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8004ccc:	2100      	movs	r1, #0
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f007 fe14 	bl	800c8fc <memset>
}
 8004cd4:	bf00      	nop
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <mbedtls_camellia_free>:

void mbedtls_camellia_free( mbedtls_camellia_context *ctx )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <mbedtls_camellia_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_camellia_context ) );
 8004cea:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f004 f94e 	bl	8008f90 <mbedtls_platform_zeroize>
 8004cf4:	e000      	b.n	8004cf8 <mbedtls_camellia_free+0x1c>
        return;
 8004cf6:	bf00      	nop
}
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0c8      	sub	sp, #288	@ 0x120
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d0e:	6018      	str	r0, [r3, #0]
 8004d10:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004d18:	6019      	str	r1, [r3, #0]
 8004d1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d22:	601a      	str	r2, [r3, #0]
    uint32_t TK[20];

    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    RK = ctx->rk;
 8004d24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d28:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    memset( t, 0, 64 );
 8004d34:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004d38:	2240      	movs	r2, #64	@ 0x40
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f007 fddd 	bl	800c8fc <memset>
    memset( RK, 0, sizeof(ctx->rk) );
 8004d42:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8004d46:	2100      	movs	r1, #0
 8004d48:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8004d4c:	f007 fdd6 	bl	800c8fc <memset>

    switch( keybits )
 8004d50:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d54:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5e:	d021      	beq.n	8004da4 <mbedtls_camellia_setkey_enc+0xa4>
 8004d60:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d64:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d6e:	d824      	bhi.n	8004dba <mbedtls_camellia_setkey_enc+0xba>
 8004d70:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d74:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b80      	cmp	r3, #128	@ 0x80
 8004d7c:	d007      	beq.n	8004d8e <mbedtls_camellia_setkey_enc+0x8e>
 8004d7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d82:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d8a:	d00b      	beq.n	8004da4 <mbedtls_camellia_setkey_enc+0xa4>
 8004d8c:	e015      	b.n	8004dba <mbedtls_camellia_setkey_enc+0xba>
    {
        case 128: ctx->nr = 3; idx = 0; break;
 8004d8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004d92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004da2:	e00e      	b.n	8004dc2 <mbedtls_camellia_setkey_enc+0xc2>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 8004da4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004da8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2204      	movs	r2, #4
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	2301      	movs	r3, #1
 8004db4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004db8:	e003      	b.n	8004dc2 <mbedtls_camellia_setkey_enc+0xc2>
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 8004dba:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8004dbe:	f000 be1f 	b.w	8005a00 <mbedtls_camellia_setkey_enc+0xd00>
    }

    for( i = 0; i < keybits / 8; ++i )
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004dc8:	e014      	b.n	8004df4 <mbedtls_camellia_setkey_enc+0xf4>
        t[i] = key[i];
 8004dca:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004dce:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004dd8:	4413      	add	r3, r2
 8004dda:	7819      	ldrb	r1, [r3, #0]
 8004ddc:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8004de0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004de4:	4413      	add	r3, r2
 8004de6:	460a      	mov	r2, r1
 8004de8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keybits / 8; ++i )
 8004dea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004dee:	3301      	adds	r3, #1
 8004df0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004df4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004df8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	08db      	lsrs	r3, r3, #3
 8004e00:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d3e0      	bcc.n	8004dca <mbedtls_camellia_setkey_enc+0xca>

    if( keybits == 192 ) {
 8004e08:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004e0c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e14:	d11e      	bne.n	8004e54 <mbedtls_camellia_setkey_enc+0x154>
        for( i = 0; i < 8; i++ )
 8004e16:	2300      	movs	r3, #0
 8004e18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004e1c:	e016      	b.n	8004e4c <mbedtls_camellia_setkey_enc+0x14c>
            t[24 + i] = ~t[16 + i];
 8004e1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e22:	3310      	adds	r3, #16
 8004e24:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e28:	443b      	add	r3, r7
 8004e2a:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8004e2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e32:	3318      	adds	r3, #24
 8004e34:	43d2      	mvns	r2, r2
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e3c:	443b      	add	r3, r7
 8004e3e:	f803 2c4c 	strb.w	r2, [r3, #-76]
        for( i = 0; i < 8; i++ )
 8004e42:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e46:	3301      	adds	r3, #1
 8004e48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004e4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e50:	2b07      	cmp	r3, #7
 8004e52:	d9e4      	bls.n	8004e1e <mbedtls_camellia_setkey_enc+0x11e>
    }

    /*
     * Prepare SIGMA values
     */
    for( i = 0; i < 6; i++ ) {
 8004e54:	2300      	movs	r3, #0
 8004e56:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004e5a:	e04f      	b.n	8004efc <mbedtls_camellia_setkey_enc+0x1fc>
        GET_UINT32_BE( SIGMA[i][0], SIGMA_CHARS[i], 0 );
 8004e5c:	4abd      	ldr	r2, [pc, #756]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004e5e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e62:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004e66:	061a      	lsls	r2, r3, #24
 8004e68:	49ba      	ldr	r1, [pc, #744]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004e6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	440b      	add	r3, r1
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	041b      	lsls	r3, r3, #16
 8004e76:	431a      	orrs	r2, r3
 8004e78:	49b6      	ldr	r1, [pc, #728]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004e7a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	440b      	add	r3, r1
 8004e82:	789b      	ldrb	r3, [r3, #2]
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	431a      	orrs	r2, r3
 8004e88:	49b2      	ldr	r1, [pc, #712]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004e8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	440b      	add	r3, r1
 8004e92:	78db      	ldrb	r3, [r3, #3]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004ea0:	443b      	add	r3, r7
 8004ea2:	f843 2c7c 	str.w	r2, [r3, #-124]
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 8004ea6:	4aab      	ldr	r2, [pc, #684]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004ea8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	4413      	add	r3, r2
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	061a      	lsls	r2, r3, #24
 8004eb4:	49a7      	ldr	r1, [pc, #668]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004eb6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	440b      	add	r3, r1
 8004ebe:	795b      	ldrb	r3, [r3, #5]
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	49a3      	ldr	r1, [pc, #652]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004ec6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	799b      	ldrb	r3, [r3, #6]
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	499f      	ldr	r1, [pc, #636]	@ (8005154 <mbedtls_camellia_setkey_enc+0x454>)
 8004ed6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	440b      	add	r3, r1
 8004ede:	79db      	ldrb	r3, [r3, #7]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ee6:	00db      	lsls	r3, r3, #3
 8004ee8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004eec:	443b      	add	r3, r7
 8004eee:	f843 2c78 	str.w	r2, [r3, #-120]
    for( i = 0; i < 6; i++ ) {
 8004ef2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004efc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f00:	2b05      	cmp	r3, #5
 8004f02:	d9ab      	bls.n	8004e5c <mbedtls_camellia_setkey_enc+0x15c>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset( KC, 0, sizeof(KC) );
 8004f04:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004f08:	2240      	movs	r2, #64	@ 0x40
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f007 fcf5 	bl	800c8fc <memset>

    /* Store KL, KR */
    for( i = 0; i < 8; i++ )
 8004f12:	2300      	movs	r3, #0
 8004f14:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004f18:	e035      	b.n	8004f86 <mbedtls_camellia_setkey_enc+0x286>
        GET_UINT32_BE( KC[i], t, i * 4 );
 8004f1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f24:	443b      	add	r3, r7
 8004f26:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8004f2a:	061a      	lsls	r2, r3, #24
 8004f2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	3301      	adds	r3, #1
 8004f34:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f38:	443b      	add	r3, r7
 8004f3a:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	431a      	orrs	r2, r3
 8004f42:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	3302      	adds	r3, #2
 8004f4a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f4e:	443b      	add	r3, r7
 8004f50:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004f5c:	0092      	lsls	r2, r2, #2
 8004f5e:	3203      	adds	r2, #3
 8004f60:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 8004f64:	443a      	add	r2, r7
 8004f66:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f76:	443b      	add	r3, r7
 8004f78:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 8; i++ )
 8004f7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f80:	3301      	adds	r3, #1
 8004f82:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004f86:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f8a:	2b07      	cmp	r3, #7
 8004f8c:	d9c5      	bls.n	8004f1a <mbedtls_camellia_setkey_enc+0x21a>

    /* Generate KA */
    for( i = 0; i < 4; ++i )
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004f94:	e01f      	b.n	8004fd6 <mbedtls_camellia_setkey_enc+0x2d6>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 8004f96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004fa0:	443b      	add	r3, r7
 8004fa2:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8004fa6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004faa:	3304      	adds	r3, #4
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004fb2:	443b      	add	r3, r7
 8004fb4:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8004fb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	404a      	eors	r2, r1
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004fc6:	443b      	add	r3, r7
 8004fc8:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 8004fcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004fd6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d9db      	bls.n	8004f96 <mbedtls_camellia_setkey_enc+0x296>

    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 8004fde:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004fe2:	3320      	adds	r3, #32
 8004fe4:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004fe8:	3228      	adds	r2, #40	@ 0x28
 8004fea:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff fdec 	bl	8004bcc <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[1], KC + 8 );
 8004ff4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004ff8:	3328      	adds	r3, #40	@ 0x28
 8004ffa:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004ffe:	3220      	adds	r2, #32
 8005000:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8005004:	3108      	adds	r1, #8
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fde0 	bl	8004bcc <camellia_feistel>

    for( i = 0; i < 4; ++i )
 800500c:	2300      	movs	r3, #0
 800500e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005012:	e01f      	b.n	8005054 <mbedtls_camellia_setkey_enc+0x354>
        KC[8 + i] ^= KC[i];
 8005014:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005018:	3308      	adds	r3, #8
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005020:	443b      	add	r3, r7
 8005022:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8005026:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005030:	443b      	add	r3, r7
 8005032:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8005036:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800503a:	3308      	adds	r3, #8
 800503c:	404a      	eors	r2, r1
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005044:	443b      	add	r3, r7
 8005046:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 800504a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800504e:	3301      	adds	r3, #1
 8005050:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005054:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005058:	2b03      	cmp	r3, #3
 800505a:	d9db      	bls.n	8005014 <mbedtls_camellia_setkey_enc+0x314>

    camellia_feistel( KC + 8, SIGMA[2], KC + 10 );
 800505c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005060:	3320      	adds	r3, #32
 8005062:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8005066:	3228      	adds	r2, #40	@ 0x28
 8005068:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 800506c:	3110      	adds	r1, #16
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fdac 	bl	8004bcc <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[3], KC + 8 );
 8005074:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005078:	3328      	adds	r3, #40	@ 0x28
 800507a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800507e:	3220      	adds	r2, #32
 8005080:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8005084:	3118      	adds	r1, #24
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fda0 	bl	8004bcc <camellia_feistel>

    if( keybits > 128 ) {
 800508c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005090:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b80      	cmp	r3, #128	@ 0x80
 8005098:	d940      	bls.n	800511c <mbedtls_camellia_setkey_enc+0x41c>
        /* Generate KB */
        for( i = 0; i < 4; ++i )
 800509a:	2300      	movs	r3, #0
 800509c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80050a0:	e020      	b.n	80050e4 <mbedtls_camellia_setkey_enc+0x3e4>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 80050a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80050a6:	3304      	adds	r3, #4
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80050ae:	443b      	add	r3, r7
 80050b0:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 80050b4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80050b8:	3308      	adds	r3, #8
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80050c0:	443b      	add	r3, r7
 80050c2:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 80050c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80050ca:	330c      	adds	r3, #12
 80050cc:	404a      	eors	r2, r1
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80050d4:	443b      	add	r3, r7
 80050d6:	f843 2cbc 	str.w	r2, [r3, #-188]
        for( i = 0; i < 4; ++i )
 80050da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80050de:	3301      	adds	r3, #1
 80050e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80050e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d9da      	bls.n	80050a2 <mbedtls_camellia_setkey_enc+0x3a2>

        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 80050ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80050f0:	3330      	adds	r3, #48	@ 0x30
 80050f2:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80050f6:	3238      	adds	r2, #56	@ 0x38
 80050f8:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80050fc:	3120      	adds	r1, #32
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fd64 	bl	8004bcc <camellia_feistel>
        camellia_feistel( KC + 14, SIGMA[5], KC + 12 );
 8005104:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005108:	3338      	adds	r3, #56	@ 0x38
 800510a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800510e:	3230      	adds	r2, #48	@ 0x30
 8005110:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8005114:	3128      	adds	r1, #40	@ 0x28
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fd58 	bl	8004bcc <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE( idx, 0 );
 800511c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800511e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005122:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800512a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800512e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005132:	605a      	str	r2, [r3, #4]
 8005134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005136:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800513a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005142:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	2301      	movs	r3, #1
 800514e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005152:	e0aa      	b.n	80052aa <mbedtls_camellia_setkey_enc+0x5aa>
 8005154:	0800ee8c 	.word	0x0800ee8c
 8005158:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800515c:	3b01      	subs	r3, #1
 800515e:	49dd      	ldr	r1, [pc, #884]	@ (80054d4 <mbedtls_camellia_setkey_enc+0x7d4>)
 8005160:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005164:	0112      	lsls	r2, r2, #4
 8005166:	440a      	add	r2, r1
 8005168:	4413      	add	r3, r2
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8097 	beq.w	80052a0 <mbedtls_camellia_setkey_enc+0x5a0>
 8005172:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005176:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800517a:	6819      	ldr	r1, [r3, #0]
 800517c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005180:	4613      	mov	r3, r2
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	f003 031f 	and.w	r3, r3, #31
 800518a:	4099      	lsls	r1, r3
 800518c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005190:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005194:	6858      	ldr	r0, [r3, #4]
 8005196:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	f1c3 0320 	rsb	r3, r3, #32
 80051a8:	fa20 f203 	lsr.w	r2, r0, r3
 80051ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	f107 0014 	add.w	r0, r7, #20
 80051b6:	4403      	add	r3, r0
 80051b8:	404a      	eors	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80051c4:	6859      	ldr	r1, [r3, #4]
 80051c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80051ca:	4613      	mov	r3, r2
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	f003 031f 	and.w	r3, r3, #31
 80051d4:	4099      	lsls	r1, r3
 80051d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80051de:	6898      	ldr	r0, [r3, #8]
 80051e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80051e4:	4613      	mov	r3, r2
 80051e6:	011b      	lsls	r3, r3, #4
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	f1c3 0320 	rsb	r3, r3, #32
 80051f2:	fa20 f203 	lsr.w	r2, r0, r3
 80051f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	3304      	adds	r3, #4
 80051fe:	f107 0014 	add.w	r0, r7, #20
 8005202:	4403      	add	r3, r0
 8005204:	404a      	eors	r2, r1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800520c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005210:	6899      	ldr	r1, [r3, #8]
 8005212:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005216:	4613      	mov	r3, r2
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	4099      	lsls	r1, r3
 8005222:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005226:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800522a:	68d8      	ldr	r0, [r3, #12]
 800522c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005230:	4613      	mov	r3, r2
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	1a9b      	subs	r3, r3, r2
 8005236:	f003 031f 	and.w	r3, r3, #31
 800523a:	f1c3 0320 	rsb	r3, r3, #32
 800523e:	fa20 f203 	lsr.w	r2, r0, r3
 8005242:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	3308      	adds	r3, #8
 800524a:	f107 0014 	add.w	r0, r7, #20
 800524e:	4403      	add	r3, r0
 8005250:	404a      	eors	r2, r1
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005258:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800525c:	68d9      	ldr	r1, [r3, #12]
 800525e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005262:	4613      	mov	r3, r2
 8005264:	011b      	lsls	r3, r3, #4
 8005266:	1a9b      	subs	r3, r3, r2
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	4099      	lsls	r1, r3
 800526e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005272:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800527c:	4613      	mov	r3, r2
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	1a9b      	subs	r3, r3, r2
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	f1c3 0320 	rsb	r3, r3, #32
 800528a:	fa20 f203 	lsr.w	r2, r0, r3
 800528e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	330c      	adds	r3, #12
 8005296:	f107 0014 	add.w	r0, r7, #20
 800529a:	4403      	add	r3, r0
 800529c:	404a      	eors	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052a4:	3301      	adds	r3, #1
 80052a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80052aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	f67f af52 	bls.w	8005158 <mbedtls_camellia_setkey_enc+0x458>
 80052b4:	2300      	movs	r3, #0
 80052b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80052ba:	e02e      	b.n	800531a <mbedtls_camellia_setkey_enc+0x61a>
 80052bc:	4986      	ldr	r1, [pc, #536]	@ (80054d8 <mbedtls_camellia_setkey_enc+0x7d8>)
 80052be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	18ca      	adds	r2, r1, r3
 80052cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052d0:	4413      	add	r3, r2
 80052d2:	f993 3000 	ldrsb.w	r3, [r3]
 80052d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052da:	d019      	beq.n	8005310 <mbedtls_camellia_setkey_enc+0x610>
 80052dc:	497e      	ldr	r1, [pc, #504]	@ (80054d8 <mbedtls_camellia_setkey_enc+0x7d8>)
 80052de:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	18ca      	adds	r2, r1, r3
 80052ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052f0:	4413      	add	r3, r2
 80052f2:	f993 3000 	ldrsb.w	r3, [r3]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80052fc:	4413      	add	r3, r2
 80052fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005302:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005306:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800530a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005314:	3301      	adds	r3, #1
 8005316:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800531a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800531e:	2b13      	cmp	r3, #19
 8005320:	d9cc      	bls.n	80052bc <mbedtls_camellia_setkey_enc+0x5bc>

    /* Manipulating KR */
    if( keybits > 128 ) {
 8005322:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005326:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b80      	cmp	r3, #128	@ 0x80
 800532e:	f240 810a 	bls.w	8005546 <mbedtls_camellia_setkey_enc+0x846>
        SHIFT_AND_PLACE( idx, 1 );
 8005332:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005334:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005338:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005340:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005344:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800534c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005350:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005354:	609a      	str	r2, [r3, #8]
 8005356:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800535a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800535e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005362:	60da      	str	r2, [r3, #12]
 8005364:	2301      	movs	r3, #1
 8005366:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800536a:	e0a9      	b.n	80054c0 <mbedtls_camellia_setkey_enc+0x7c0>
 800536c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005370:	3b01      	subs	r3, #1
 8005372:	4958      	ldr	r1, [pc, #352]	@ (80054d4 <mbedtls_camellia_setkey_enc+0x7d4>)
 8005374:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005378:	0112      	lsls	r2, r2, #4
 800537a:	440a      	add	r2, r1
 800537c:	4413      	add	r3, r2
 800537e:	3304      	adds	r3, #4
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 8097 	beq.w	80054b6 <mbedtls_camellia_setkey_enc+0x7b6>
 8005388:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800538c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	4099      	lsls	r1, r3
 80053a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053aa:	6858      	ldr	r0, [r3, #4]
 80053ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80053b0:	4613      	mov	r3, r2
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	f1c3 0320 	rsb	r3, r3, #32
 80053be:	fa20 f203 	lsr.w	r2, r0, r3
 80053c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	f107 0014 	add.w	r0, r7, #20
 80053cc:	4403      	add	r3, r0
 80053ce:	404a      	eors	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80053e0:	4613      	mov	r3, r2
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	4099      	lsls	r1, r3
 80053ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80053f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80053f4:	6898      	ldr	r0, [r3, #8]
 80053f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80053fa:	4613      	mov	r3, r2
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	f003 031f 	and.w	r3, r3, #31
 8005404:	f1c3 0320 	rsb	r3, r3, #32
 8005408:	fa20 f203 	lsr.w	r2, r0, r3
 800540c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	3304      	adds	r3, #4
 8005414:	f107 0014 	add.w	r0, r7, #20
 8005418:	4403      	add	r3, r0
 800541a:	404a      	eors	r2, r1
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005422:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005426:	6899      	ldr	r1, [r3, #8]
 8005428:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800542c:	4613      	mov	r3, r2
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	f003 031f 	and.w	r3, r3, #31
 8005436:	4099      	lsls	r1, r3
 8005438:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800543c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005440:	68d8      	ldr	r0, [r3, #12]
 8005442:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005446:	4613      	mov	r3, r2
 8005448:	011b      	lsls	r3, r3, #4
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	f1c3 0320 	rsb	r3, r3, #32
 8005454:	fa20 f203 	lsr.w	r2, r0, r3
 8005458:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	3308      	adds	r3, #8
 8005460:	f107 0014 	add.w	r0, r7, #20
 8005464:	4403      	add	r3, r0
 8005466:	404a      	eors	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800546e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005472:	68d9      	ldr	r1, [r3, #12]
 8005474:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	f003 031f 	and.w	r3, r3, #31
 8005482:	4099      	lsls	r1, r3
 8005484:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005488:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005492:	4613      	mov	r3, r2
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	f1c3 0320 	rsb	r3, r3, #32
 80054a0:	fa20 f203 	lsr.w	r2, r0, r3
 80054a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	330c      	adds	r3, #12
 80054ac:	f107 0014 	add.w	r0, r7, #20
 80054b0:	4403      	add	r3, r0
 80054b2:	404a      	eors	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80054ba:	3301      	adds	r3, #1
 80054bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80054c0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80054c4:	2b04      	cmp	r3, #4
 80054c6:	f67f af51 	bls.w	800536c <mbedtls_camellia_setkey_enc+0x66c>
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80054d0:	e035      	b.n	800553e <mbedtls_camellia_setkey_enc+0x83e>
 80054d2:	bf00      	nop
 80054d4:	0800f2bc 	.word	0x0800f2bc
 80054d8:	0800f2dc 	.word	0x0800f2dc
 80054dc:	49b2      	ldr	r1, [pc, #712]	@ (80057a8 <mbedtls_camellia_setkey_enc+0xaa8>)
 80054de:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80054e2:	4613      	mov	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	4413      	add	r3, r2
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	18ca      	adds	r2, r1, r3
 80054ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80054f0:	4413      	add	r3, r2
 80054f2:	3314      	adds	r3, #20
 80054f4:	f993 3000 	ldrsb.w	r3, [r3]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fc:	d01a      	beq.n	8005534 <mbedtls_camellia_setkey_enc+0x834>
 80054fe:	49aa      	ldr	r1, [pc, #680]	@ (80057a8 <mbedtls_camellia_setkey_enc+0xaa8>)
 8005500:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	18ca      	adds	r2, r1, r3
 800550e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005512:	4413      	add	r3, r2
 8005514:	3314      	adds	r3, #20
 8005516:	f993 3000 	ldrsb.w	r3, [r3]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005520:	4413      	add	r3, r2
 8005522:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005526:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800552a:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800552e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005538:	3301      	adds	r3, #1
 800553a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800553e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005542:	2b13      	cmp	r3, #19
 8005544:	d9ca      	bls.n	80054dc <mbedtls_camellia_setkey_enc+0x7dc>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE( idx, 2 );
 8005546:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800554a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800554e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005558:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800555c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005566:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800556a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005574:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005578:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	2301      	movs	r3, #1
 8005580:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005584:	e0a9      	b.n	80056da <mbedtls_camellia_setkey_enc+0x9da>
 8005586:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800558a:	3b01      	subs	r3, #1
 800558c:	4987      	ldr	r1, [pc, #540]	@ (80057ac <mbedtls_camellia_setkey_enc+0xaac>)
 800558e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005592:	0112      	lsls	r2, r2, #4
 8005594:	440a      	add	r2, r1
 8005596:	4413      	add	r3, r2
 8005598:	3308      	adds	r3, #8
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 8097 	beq.w	80056d0 <mbedtls_camellia_setkey_enc+0x9d0>
 80055a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055aa:	6819      	ldr	r1, [r3, #0]
 80055ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	4099      	lsls	r1, r3
 80055bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055c4:	6858      	ldr	r0, [r3, #4]
 80055c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80055ca:	4613      	mov	r3, r2
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	f1c3 0320 	rsb	r3, r3, #32
 80055d8:	fa20 f203 	lsr.w	r2, r0, r3
 80055dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	f107 0014 	add.w	r0, r7, #20
 80055e6:	4403      	add	r3, r0
 80055e8:	404a      	eors	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80055f0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80055f4:	6859      	ldr	r1, [r3, #4]
 80055f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80055fa:	4613      	mov	r3, r2
 80055fc:	011b      	lsls	r3, r3, #4
 80055fe:	1a9b      	subs	r3, r3, r2
 8005600:	f003 031f 	and.w	r3, r3, #31
 8005604:	4099      	lsls	r1, r3
 8005606:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800560a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800560e:	6898      	ldr	r0, [r3, #8]
 8005610:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005614:	4613      	mov	r3, r2
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	1a9b      	subs	r3, r3, r2
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	f1c3 0320 	rsb	r3, r3, #32
 8005622:	fa20 f203 	lsr.w	r2, r0, r3
 8005626:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	3304      	adds	r3, #4
 800562e:	f107 0014 	add.w	r0, r7, #20
 8005632:	4403      	add	r3, r0
 8005634:	404a      	eors	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800563c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005640:	6899      	ldr	r1, [r3, #8]
 8005642:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005646:	4613      	mov	r3, r2
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	1a9b      	subs	r3, r3, r2
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	4099      	lsls	r1, r3
 8005652:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005656:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800565a:	68d8      	ldr	r0, [r3, #12]
 800565c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005660:	4613      	mov	r3, r2
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	f003 031f 	and.w	r3, r3, #31
 800566a:	f1c3 0320 	rsb	r3, r3, #32
 800566e:	fa20 f203 	lsr.w	r2, r0, r3
 8005672:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	3308      	adds	r3, #8
 800567a:	f107 0014 	add.w	r0, r7, #20
 800567e:	4403      	add	r3, r0
 8005680:	404a      	eors	r2, r1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005688:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800568c:	68d9      	ldr	r1, [r3, #12]
 800568e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005692:	4613      	mov	r3, r2
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	4099      	lsls	r1, r3
 800569e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056a2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80056a6:	6818      	ldr	r0, [r3, #0]
 80056a8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	f003 031f 	and.w	r3, r3, #31
 80056b6:	f1c3 0320 	rsb	r3, r3, #32
 80056ba:	fa20 f203 	lsr.w	r2, r0, r3
 80056be:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	330c      	adds	r3, #12
 80056c6:	f107 0014 	add.w	r0, r7, #20
 80056ca:	4403      	add	r3, r0
 80056cc:	404a      	eors	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80056d4:	3301      	adds	r3, #1
 80056d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80056da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80056de:	2b04      	cmp	r3, #4
 80056e0:	f67f af51 	bls.w	8005586 <mbedtls_camellia_setkey_enc+0x886>
 80056e4:	2300      	movs	r3, #0
 80056e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80056ea:	e030      	b.n	800574e <mbedtls_camellia_setkey_enc+0xa4e>
 80056ec:	492e      	ldr	r1, [pc, #184]	@ (80057a8 <mbedtls_camellia_setkey_enc+0xaa8>)
 80056ee:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	18ca      	adds	r2, r1, r3
 80056fc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005700:	4413      	add	r3, r2
 8005702:	3328      	adds	r3, #40	@ 0x28
 8005704:	f993 3000 	ldrsb.w	r3, [r3]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d01a      	beq.n	8005744 <mbedtls_camellia_setkey_enc+0xa44>
 800570e:	4926      	ldr	r1, [pc, #152]	@ (80057a8 <mbedtls_camellia_setkey_enc+0xaa8>)
 8005710:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	18ca      	adds	r2, r1, r3
 800571e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005722:	4413      	add	r3, r2
 8005724:	3328      	adds	r3, #40	@ 0x28
 8005726:	f993 3000 	ldrsb.w	r3, [r3]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005730:	4413      	add	r3, r2
 8005732:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005736:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800573a:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800573e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005748:	3301      	adds	r3, #1
 800574a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800574e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005752:	2b13      	cmp	r3, #19
 8005754:	d9ca      	bls.n	80056ec <mbedtls_camellia_setkey_enc+0x9ec>

    /* Manipulating KB */
    if( keybits > 128 ) {
 8005756:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800575a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b80      	cmp	r3, #128	@ 0x80
 8005762:	f240 810d 	bls.w	8005980 <mbedtls_camellia_setkey_enc+0xc80>
        SHIFT_AND_PLACE( idx, 3 );
 8005766:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800576a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800576e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005778:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800577c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8005786:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800578a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8005794:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005798:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	2301      	movs	r3, #1
 80057a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057a4:	e0ae      	b.n	8005904 <mbedtls_camellia_setkey_enc+0xc04>
 80057a6:	bf00      	nop
 80057a8:	0800f2dc 	.word	0x0800f2dc
 80057ac:	0800f2bc 	.word	0x0800f2bc
 80057b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057b4:	3b01      	subs	r3, #1
 80057b6:	4995      	ldr	r1, [pc, #596]	@ (8005a0c <mbedtls_camellia_setkey_enc+0xd0c>)
 80057b8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80057bc:	0112      	lsls	r2, r2, #4
 80057be:	440a      	add	r2, r1
 80057c0:	4413      	add	r3, r2
 80057c2:	330c      	adds	r3, #12
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 8097 	beq.w	80058fa <mbedtls_camellia_setkey_enc+0xbfa>
 80057cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057d0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057d4:	6819      	ldr	r1, [r3, #0]
 80057d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80057da:	4613      	mov	r3, r2
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	4099      	lsls	r1, r3
 80057e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80057ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057ee:	6858      	ldr	r0, [r3, #4]
 80057f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80057f4:	4613      	mov	r3, r2
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	f1c3 0320 	rsb	r3, r3, #32
 8005802:	fa20 f203 	lsr.w	r2, r0, r3
 8005806:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	f107 0014 	add.w	r0, r7, #20
 8005810:	4403      	add	r3, r0
 8005812:	404a      	eors	r2, r1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800581a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005824:	4613      	mov	r3, r2
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	4099      	lsls	r1, r3
 8005830:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005834:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005838:	6898      	ldr	r0, [r3, #8]
 800583a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800583e:	4613      	mov	r3, r2
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	f1c3 0320 	rsb	r3, r3, #32
 800584c:	fa20 f203 	lsr.w	r2, r0, r3
 8005850:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	3304      	adds	r3, #4
 8005858:	f107 0014 	add.w	r0, r7, #20
 800585c:	4403      	add	r3, r0
 800585e:	404a      	eors	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005866:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800586a:	6899      	ldr	r1, [r3, #8]
 800586c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005870:	4613      	mov	r3, r2
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	1a9b      	subs	r3, r3, r2
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	4099      	lsls	r1, r3
 800587c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005880:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005884:	68d8      	ldr	r0, [r3, #12]
 8005886:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800588a:	4613      	mov	r3, r2
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	f003 031f 	and.w	r3, r3, #31
 8005894:	f1c3 0320 	rsb	r3, r3, #32
 8005898:	fa20 f203 	lsr.w	r2, r0, r3
 800589c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	3308      	adds	r3, #8
 80058a4:	f107 0014 	add.w	r0, r7, #20
 80058a8:	4403      	add	r3, r0
 80058aa:	404a      	eors	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80058b6:	68d9      	ldr	r1, [r3, #12]
 80058b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80058bc:	4613      	mov	r3, r2
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	1a9b      	subs	r3, r3, r2
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	4099      	lsls	r1, r3
 80058c8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80058cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80058d0:	6818      	ldr	r0, [r3, #0]
 80058d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80058d6:	4613      	mov	r3, r2
 80058d8:	011b      	lsls	r3, r3, #4
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	f003 031f 	and.w	r3, r3, #31
 80058e0:	f1c3 0320 	rsb	r3, r3, #32
 80058e4:	fa20 f203 	lsr.w	r2, r0, r3
 80058e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	330c      	adds	r3, #12
 80058f0:	f107 0014 	add.w	r0, r7, #20
 80058f4:	4403      	add	r3, r0
 80058f6:	404a      	eors	r2, r1
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058fe:	3301      	adds	r3, #1
 8005900:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005904:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005908:	2b04      	cmp	r3, #4
 800590a:	f67f af51 	bls.w	80057b0 <mbedtls_camellia_setkey_enc+0xab0>
 800590e:	2300      	movs	r3, #0
 8005910:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005914:	e030      	b.n	8005978 <mbedtls_camellia_setkey_enc+0xc78>
 8005916:	493e      	ldr	r1, [pc, #248]	@ (8005a10 <mbedtls_camellia_setkey_enc+0xd10>)
 8005918:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	18ca      	adds	r2, r1, r3
 8005926:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800592a:	4413      	add	r3, r2
 800592c:	333c      	adds	r3, #60	@ 0x3c
 800592e:	f993 3000 	ldrsb.w	r3, [r3]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d01a      	beq.n	800596e <mbedtls_camellia_setkey_enc+0xc6e>
 8005938:	4935      	ldr	r1, [pc, #212]	@ (8005a10 <mbedtls_camellia_setkey_enc+0xd10>)
 800593a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	18ca      	adds	r2, r1, r3
 8005948:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800594c:	4413      	add	r3, r2
 800594e:	333c      	adds	r3, #60	@ 0x3c
 8005950:	f993 3000 	ldrsb.w	r3, [r3]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800595a:	4413      	add	r3, r2
 800595c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005960:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005964:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8005968:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005972:	3301      	adds	r3, #1
 8005974:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005978:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800597c:	2b13      	cmp	r3, #19
 800597e:	d9ca      	bls.n	8005916 <mbedtls_camellia_setkey_enc+0xc16>
    }

    /* Do transpositions */
    for( i = 0; i < 20; i++ ) {
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005986:	e036      	b.n	80059f6 <mbedtls_camellia_setkey_enc+0xcf6>
        if( transposes[idx][i] != -1 ) {
 8005988:	4922      	ldr	r1, [pc, #136]	@ (8005a14 <mbedtls_camellia_setkey_enc+0xd14>)
 800598a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	18ca      	adds	r2, r1, r3
 8005998:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800599c:	4413      	add	r3, r2
 800599e:	f993 3000 	ldrsb.w	r3, [r3]
 80059a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a6:	d021      	beq.n	80059ec <mbedtls_camellia_setkey_enc+0xcec>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 80059a8:	491a      	ldr	r1, [pc, #104]	@ (8005a14 <mbedtls_camellia_setkey_enc+0xd14>)
 80059aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	18ca      	adds	r2, r1, r3
 80059b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80059bc:	4413      	add	r3, r2
 80059be:	f993 3000 	ldrsb.w	r3, [r3]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80059c8:	18d1      	adds	r1, r2, r3
 80059ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	461a      	mov	r2, r3
 80059d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80059dc:	4413      	add	r3, r2
 80059de:	3320      	adds	r3, #32
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80059e6:	4413      	add	r3, r2
 80059e8:	680a      	ldr	r2, [r1, #0]
 80059ea:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 20; i++ ) {
 80059ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80059f0:	3301      	adds	r3, #1
 80059f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80059f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80059fa:	2b13      	cmp	r3, #19
 80059fc:	d9c4      	bls.n	8005988 <mbedtls_camellia_setkey_enc+0xc88>
        }
    }

    return( 0 );
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	0800f2bc 	.word	0x0800f2bc
 8005a10:	0800f2dc 	.word	0x0800f2dc
 8005a14:	0800f37c 	.word	0x0800f37c

08005a18 <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b0ce      	sub	sp, #312	@ 0x138
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a26:	6018      	str	r0, [r3, #0]
 8005a28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a2c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005a30:	6019      	str	r1, [r3, #0]
 8005a32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005a3a:	601a      	str	r2, [r3, #0]
    uint32_t *RK;
    uint32_t *SK;
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    mbedtls_camellia_init( &cty );
 8005a3c:	f107 0310 	add.w	r3, r7, #16
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff f93d 	bl	8004cc0 <mbedtls_camellia_init>

    /* Also checks keybits */
    if( ( ret = mbedtls_camellia_setkey_enc( &cty, key, keybits ) ) != 0 )
 8005a46:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a4a:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 8005a4e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005a56:	f107 0010 	add.w	r0, r7, #16
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	6819      	ldr	r1, [r3, #0]
 8005a5e:	f7ff f94f 	bl	8004d00 <mbedtls_camellia_setkey_enc>
 8005a62:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8005a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f040 80c3 	bne.w	8005bf6 <mbedtls_camellia_setkey_dec+0x1de>
        goto exit;

    ctx->nr = cty.nr;
 8005a70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a74:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	601a      	str	r2, [r3, #0]
    idx = ( ctx->nr == 4 );
 8005a86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	bf0c      	ite	eq
 8005a96:	2301      	moveq	r3, #1
 8005a98:	2300      	movne	r3, #0
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    RK = ctx->rk;
 8005aa0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005aa4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3304      	adds	r3, #4
 8005aac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 8005ab0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	f107 0210 	add.w	r2, r7, #16
 8005abe:	3204      	adds	r2, #4
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    *RK++ = *SK++;
 8005ac6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005aca:	1d13      	adds	r3, r2, #4
 8005acc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005ad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ad4:	1d19      	adds	r1, r3, #4
 8005ad6:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005ade:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005ae2:	1d13      	adds	r3, r2, #4
 8005ae4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005ae8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005aec:	1d19      	adds	r1, r3, #4
 8005aee:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005af6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005afa:	1d13      	adds	r3, r2, #4
 8005afc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005b00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b04:	1d19      	adds	r1, r3, #4
 8005b06:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005b0e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005b12:	1d13      	adds	r3, r2, #4
 8005b14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005b18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b1c:	1d19      	adds	r1, r3, #4
 8005b1e:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	601a      	str	r2, [r3, #0]

    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 8005b26:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	3316      	adds	r3, #22
 8005b2e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b36:	3b18      	subs	r3, #24
 8005b38:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005b3c:	e021      	b.n	8005b82 <mbedtls_camellia_setkey_dec+0x16a>
    {
        *RK++ = *SK++;
 8005b3e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005b42:	1d13      	adds	r3, r2, #4
 8005b44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005b48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b4c:	1d19      	adds	r1, r3, #4
 8005b4e:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 8005b56:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005b5a:	1d13      	adds	r3, r2, #4
 8005b5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005b60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b64:	1d19      	adds	r1, r3, #4
 8005b66:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	601a      	str	r2, [r3, #0]
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 8005b6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b72:	3b01      	subs	r3, #1
 8005b74:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b7c:	3b10      	subs	r3, #16
 8005b7e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005b82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1d9      	bne.n	8005b3e <mbedtls_camellia_setkey_dec+0x126>
    }

    SK -= 2;
 8005b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b8e:	3b08      	subs	r3, #8
 8005b90:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    *RK++ = *SK++;
 8005b94:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005b98:	1d13      	adds	r3, r2, #4
 8005b9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005b9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ba2:	1d19      	adds	r1, r3, #4
 8005ba4:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005ba8:	6812      	ldr	r2, [r2, #0]
 8005baa:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005bac:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005bb0:	1d13      	adds	r3, r2, #4
 8005bb2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005bb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005bba:	1d19      	adds	r1, r3, #4
 8005bbc:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005bc0:	6812      	ldr	r2, [r2, #0]
 8005bc2:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005bc4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005bc8:	1d13      	adds	r3, r2, #4
 8005bca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005bce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005bd2:	1d19      	adds	r1, r3, #4
 8005bd4:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005bdc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005be0:	1d13      	adds	r3, r2, #4
 8005be2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005be6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005bea:	1d19      	adds	r1, r3, #4
 8005bec:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e000      	b.n	8005bf8 <mbedtls_camellia_setkey_dec+0x1e0>
        goto exit;
 8005bf6:	bf00      	nop

exit:
    mbedtls_camellia_free( &cty );
 8005bf8:	f107 0310 	add.w	r3, r7, #16
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff f86d 	bl	8004cdc <mbedtls_camellia_free>

    return( ret );
 8005c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb( mbedtls_camellia_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b08a      	sub	sp, #40	@ 0x28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( input  != NULL );
    CAMELLIA_VALIDATE_RET( output != NULL );

    ( (void) mode );

    NR = ctx->nr;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
    RK = ctx->rk;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3304      	adds	r3, #4
 8005c28:	623b      	str	r3, [r7, #32]

    GET_UINT32_BE( X[0], input,  0 );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	061a      	lsls	r2, r3, #24
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3301      	adds	r3, #1
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3302      	adds	r3, #2
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	4313      	orrs	r3, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	3203      	adds	r2, #3
 8005c48:	7812      	ldrb	r2, [r2, #0]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]
    GET_UINT32_BE( X[1], input,  4 );
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3304      	adds	r3, #4
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	061a      	lsls	r2, r3, #24
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3305      	adds	r3, #5
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	041b      	lsls	r3, r3, #16
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3306      	adds	r3, #6
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	3207      	adds	r2, #7
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
    GET_UINT32_BE( X[2], input,  8 );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3308      	adds	r3, #8
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	061a      	lsls	r2, r3, #24
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3309      	adds	r3, #9
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	330a      	adds	r3, #10
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	320b      	adds	r2, #11
 8005c94:	7812      	ldrb	r2, [r2, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
    GET_UINT32_BE( X[3], input, 12 );
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	061a      	lsls	r2, r3, #24
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	330d      	adds	r3, #13
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	330e      	adds	r3, #14
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	320f      	adds	r2, #15
 8005cba:	7812      	ldrb	r2, [r2, #0]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61fb      	str	r3, [r7, #28]

    X[0] ^= *RK++;
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	1d1a      	adds	r2, r3, #4
 8005cc4:	623a      	str	r2, [r7, #32]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4053      	eors	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	1d1a      	adds	r2, r3, #4
 8005cd2:	623a      	str	r2, [r7, #32]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	4053      	eors	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
    X[2] ^= *RK++;
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	1d1a      	adds	r2, r3, #4
 8005ce0:	623a      	str	r2, [r7, #32]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	4053      	eors	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	1d1a      	adds	r2, r3, #4
 8005cee:	623a      	str	r2, [r7, #32]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4053      	eors	r3, r2
 8005cf6:	61fb      	str	r3, [r7, #28]

    while( NR ) {
 8005cf8:	e075      	b.n	8005de6 <mbedtls_camellia_crypt_ecb+0x1d6>
        --NR;
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        camellia_feistel( X, RK, X + 2 );
 8005d00:	f107 0310 	add.w	r3, r7, #16
 8005d04:	3308      	adds	r3, #8
 8005d06:	f107 0010 	add.w	r0, r7, #16
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	6a39      	ldr	r1, [r7, #32]
 8005d0e:	f7fe ff5d 	bl	8004bcc <camellia_feistel>
        RK += 2;
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	3308      	adds	r3, #8
 8005d16:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 8005d18:	f107 0310 	add.w	r3, r7, #16
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	f107 0210 	add.w	r2, r7, #16
 8005d22:	6a39      	ldr	r1, [r7, #32]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fe ff51 	bl	8004bcc <camellia_feistel>
        RK += 2;
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	3308      	adds	r3, #8
 8005d2e:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 8005d30:	f107 0310 	add.w	r3, r7, #16
 8005d34:	3308      	adds	r3, #8
 8005d36:	f107 0010 	add.w	r0, r7, #16
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6a39      	ldr	r1, [r7, #32]
 8005d3e:	f7fe ff45 	bl	8004bcc <camellia_feistel>
        RK += 2;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	3308      	adds	r3, #8
 8005d46:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 8005d48:	f107 0310 	add.w	r3, r7, #16
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	f107 0210 	add.w	r2, r7, #16
 8005d52:	6a39      	ldr	r1, [r7, #32]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe ff39 	bl	8004bcc <camellia_feistel>
        RK += 2;
 8005d5a:	6a3b      	ldr	r3, [r7, #32]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 8005d60:	f107 0310 	add.w	r3, r7, #16
 8005d64:	3308      	adds	r3, #8
 8005d66:	f107 0010 	add.w	r0, r7, #16
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6a39      	ldr	r1, [r7, #32]
 8005d6e:	f7fe ff2d 	bl	8004bcc <camellia_feistel>
        RK += 2;
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	3308      	adds	r3, #8
 8005d76:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 8005d78:	f107 0310 	add.w	r3, r7, #16
 8005d7c:	3308      	adds	r3, #8
 8005d7e:	f107 0210 	add.w	r2, r7, #16
 8005d82:	6a39      	ldr	r1, [r7, #32]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe ff21 	bl	8004bcc <camellia_feistel>
        RK += 2;
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	623b      	str	r3, [r7, #32]

        if( NR ) {
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d027      	beq.n	8005de6 <mbedtls_camellia_crypt_ecb+0x1d6>
            FL(X[0], X[1], RK[0], RK[1]);
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	6a3b      	ldr	r3, [r7, #32]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	4053      	eors	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	3304      	adds	r3, #4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4053      	eors	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
            RK += 2;
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	623b      	str	r3, [r7, #32]
            FLInv(X[2], X[3], RK[0], RK[1]);
 8005dbe:	69fa      	ldr	r2, [r7, #28]
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	4053      	eors	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	4053      	eors	r3, r2
 8005dde:	61fb      	str	r3, [r7, #28]
            RK += 2;
 8005de0:	6a3b      	ldr	r3, [r7, #32]
 8005de2:	3308      	adds	r3, #8
 8005de4:	623b      	str	r3, [r7, #32]
    while( NR ) {
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d186      	bne.n	8005cfa <mbedtls_camellia_crypt_ecb+0xea>
        }
    }

    X[2] ^= *RK++;
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	1d1a      	adds	r2, r3, #4
 8005df0:	623a      	str	r2, [r7, #32]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	4053      	eors	r3, r2
 8005df8:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	1d1a      	adds	r2, r3, #4
 8005dfe:	623a      	str	r2, [r7, #32]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	4053      	eors	r3, r2
 8005e06:	61fb      	str	r3, [r7, #28]
    X[0] ^= *RK++;
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	1d1a      	adds	r2, r3, #4
 8005e0c:	623a      	str	r2, [r7, #32]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4053      	eors	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	1d1a      	adds	r2, r3, #4
 8005e1a:	623a      	str	r2, [r7, #32]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	4053      	eors	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

    PUT_UINT32_BE( X[2], output,  0 );
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	0e1b      	lsrs	r3, r3, #24
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	0c1a      	lsrs	r2, r3, #16
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	0a1a      	lsrs	r2, r3, #8
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	3302      	adds	r3, #2
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	3303      	adds	r3, #3
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[3], output,  4 );
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	0e1a      	lsrs	r2, r3, #24
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	3304      	adds	r3, #4
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	0c1a      	lsrs	r2, r3, #16
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	3305      	adds	r3, #5
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	0a1a      	lsrs	r2, r3, #8
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	3306      	adds	r3, #6
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	3307      	adds	r3, #7
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[0], output,  8 );
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	0e1a      	lsrs	r2, r3, #24
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	0c1a      	lsrs	r2, r3, #16
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	3309      	adds	r3, #9
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	701a      	strb	r2, [r3, #0]
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	0a1a      	lsrs	r2, r3, #8
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	330a      	adds	r3, #10
 8005e9e:	b2d2      	uxtb	r2, r2
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	330b      	adds	r3, #11
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[1], output, 12 );
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	0e1a      	lsrs	r2, r3, #24
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	330c      	adds	r3, #12
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	701a      	strb	r2, [r3, #0]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	0c1a      	lsrs	r2, r3, #16
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	330d      	adds	r3, #13
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	0a1a      	lsrs	r2, r3, #8
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	330e      	adds	r3, #14
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	330f      	adds	r3, #15
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3728      	adds	r7, #40	@ 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <mbedtls_camellia_crypt_cbc>:
                                int mode,
                                size_t length,
                                unsigned char iv[16],
                                const unsigned char *input,
                                unsigned char *output )
{
 8005ee4:	b5b0      	push	{r4, r5, r7, lr}
 8005ee6:	b08a      	sub	sp, #40	@ 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
                           mode == MBEDTLS_CAMELLIA_DECRYPT );
    CAMELLIA_VALIDATE_RET( iv != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    if( length % 16 )
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <mbedtls_camellia_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH );
 8005efc:	f06f 0325 	mvn.w	r3, #37	@ 0x25
 8005f00:	e06d      	b.n	8005fde <mbedtls_camellia_crypt_cbc+0xfa>

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d166      	bne.n	8005fd6 <mbedtls_camellia_crypt_cbc+0xf2>
    {
        while( length > 0 )
 8005f08:	e036      	b.n	8005f78 <mbedtls_camellia_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0c:	f107 0414 	add.w	r4, r7, #20
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	6859      	ldr	r1, [r3, #4]
 8005f14:	689a      	ldr	r2, [r3, #8]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb( ctx, mode, input, output );
 8005f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f1e:	68b9      	ldr	r1, [r7, #8]
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f7ff fe75 	bl	8005c10 <mbedtls_camellia_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8005f26:	2300      	movs	r3, #0
 8005f28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f2a:	e010      	b.n	8005f4e <mbedtls_camellia_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f30:	4413      	add	r3, r2
 8005f32:	7819      	ldrb	r1, [r3, #0]
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	4413      	add	r3, r2
 8005f3a:	781a      	ldrb	r2, [r3, #0]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005f40:	4403      	add	r3, r0
 8005f42:	404a      	eors	r2, r1
 8005f44:	b2d2      	uxtb	r2, r2
 8005f46:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	2b0f      	cmp	r3, #15
 8005f52:	ddeb      	ble.n	8005f2c <mbedtls_camellia_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	461d      	mov	r5, r3
 8005f58:	f107 0414 	add.w	r4, r7, #20
 8005f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f5e:	6028      	str	r0, [r5, #0]
 8005f60:	6069      	str	r1, [r5, #4]
 8005f62:	60aa      	str	r2, [r5, #8]
 8005f64:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8005f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f68:	3310      	adds	r3, #16
 8005f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8005f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6e:	3310      	adds	r3, #16
 8005f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3b10      	subs	r3, #16
 8005f76:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d1c5      	bne.n	8005f0a <mbedtls_camellia_crypt_cbc+0x26>
 8005f7e:	e02d      	b.n	8005fdc <mbedtls_camellia_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8005f80:	2300      	movs	r3, #0
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f84:	e010      	b.n	8005fa8 <mbedtls_camellia_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f8a:	4413      	add	r3, r2
 8005f8c:	7819      	ldrb	r1, [r3, #0]
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	4413      	add	r3, r2
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005f9a:	4403      	add	r3, r0
 8005f9c:	404a      	eors	r2, r1
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	ddeb      	ble.n	8005f86 <mbedtls_camellia_crypt_cbc+0xa2>

            mbedtls_camellia_crypt_ecb( ctx, mode, output, output );
 8005fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f7ff fe2b 	bl	8005c10 <mbedtls_camellia_crypt_ecb>
            memcpy( iv, output, 16 );
 8005fba:	2210      	movs	r2, #16
 8005fbc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fbe:	6838      	ldr	r0, [r7, #0]
 8005fc0:	f006 fce0 	bl	800c984 <memcpy>

            input  += 16;
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	3310      	adds	r3, #16
 8005fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8005fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fcc:	3310      	adds	r3, #16
 8005fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3b10      	subs	r3, #16
 8005fd4:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1d1      	bne.n	8005f80 <mbedtls_camellia_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3728      	adds	r7, #40	@ 0x28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bdb0      	pop	{r4, r5, r7, pc}

08005fe6 <chacha20_quarter_round>:
static inline void chacha20_quarter_round( uint32_t state[16],
                                           size_t a,
                                           size_t b,
                                           size_t c,
                                           size_t d )
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	6819      	ldr	r1, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	4403      	add	r3, r0
 8006010:	440a      	add	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4413      	add	r3, r2
 800601c:	6819      	ldr	r1, [r3, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	4403      	add	r3, r0
 8006030:	404a      	eors	r2, r1
 8006032:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 16 );
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	440b      	add	r3, r1
 8006046:	ea4f 4232 	mov.w	r2, r2, ror #16
 800604a:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	4413      	add	r3, r2
 8006054:	6819      	ldr	r1, [r3, #0]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4413      	add	r3, r2
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	4403      	add	r3, r0
 8006068:	440a      	add	r2, r1
 800606a:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	6819      	ldr	r1, [r3, #0]
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4413      	add	r3, r2
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	4403      	add	r3, r0
 8006088:	404a      	eors	r2, r1
 800608a:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 12 );
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	68f9      	ldr	r1, [r7, #12]
 800609c:	440b      	add	r3, r1
 800609e:	ea4f 5232 	mov.w	r2, r2, ror #20
 80060a2:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	6819      	ldr	r1, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	4403      	add	r3, r0
 80060c0:	440a      	add	r2, r1
 80060c2:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	6819      	ldr	r1, [r3, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	4403      	add	r3, r0
 80060e0:	404a      	eors	r2, r1
 80060e2:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 8 );
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	440b      	add	r3, r1
 80060f6:	ea4f 6232 	mov.w	r2, r2, ror #24
 80060fa:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	4403      	add	r3, r0
 8006118:	440a      	add	r2, r1
 800611a:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	6819      	ldr	r1, [r3, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4413      	add	r3, r2
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	4403      	add	r3, r0
 8006138:	404a      	eors	r2, r1
 800613a:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 7 );
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	009b      	lsls	r3, r3, #2
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	440b      	add	r3, r1
 800614e:	ea4f 6272 	mov.w	r2, r2, ror #25
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	3714      	adds	r7, #20
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block( uint32_t state[16] )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round( state, 0, 4, 8,  12 );
 8006168:	230c      	movs	r3, #12
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	2308      	movs	r3, #8
 800616e:	2204      	movs	r2, #4
 8006170:	2100      	movs	r1, #0
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7ff ff37 	bl	8005fe6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 5, 9,  13 );
 8006178:	230d      	movs	r3, #13
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	2309      	movs	r3, #9
 800617e:	2205      	movs	r2, #5
 8006180:	2101      	movs	r1, #1
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7ff ff2f 	bl	8005fe6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 6, 10, 14 );
 8006188:	230e      	movs	r3, #14
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	230a      	movs	r3, #10
 800618e:	2206      	movs	r2, #6
 8006190:	2102      	movs	r1, #2
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff ff27 	bl	8005fe6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 7, 11, 15 );
 8006198:	230f      	movs	r3, #15
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	230b      	movs	r3, #11
 800619e:	2207      	movs	r2, #7
 80061a0:	2103      	movs	r1, #3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff ff1f 	bl	8005fe6 <chacha20_quarter_round>

    chacha20_quarter_round( state, 0, 5, 10, 15 );
 80061a8:	230f      	movs	r3, #15
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	230a      	movs	r3, #10
 80061ae:	2205      	movs	r2, #5
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff ff17 	bl	8005fe6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 6, 11, 12 );
 80061b8:	230c      	movs	r3, #12
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	230b      	movs	r3, #11
 80061be:	2206      	movs	r2, #6
 80061c0:	2101      	movs	r1, #1
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff ff0f 	bl	8005fe6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 7, 8,  13 );
 80061c8:	230d      	movs	r3, #13
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	2308      	movs	r3, #8
 80061ce:	2207      	movs	r2, #7
 80061d0:	2102      	movs	r1, #2
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff ff07 	bl	8005fe6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 4, 9,  14 );
 80061d8:	230e      	movs	r3, #14
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	2309      	movs	r3, #9
 80061de:	2204      	movs	r2, #4
 80061e0:	2103      	movs	r1, #3
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff feff 	bl	8005fe6 <chacha20_quarter_round>
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block( const uint32_t initial_state[16],
                            unsigned char keystream[64] )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b094      	sub	sp, #80	@ 0x50
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy( working_state,
 80061fa:	f107 0308 	add.w	r3, r7, #8
 80061fe:	2240      	movs	r2, #64	@ 0x40
 8006200:	6879      	ldr	r1, [r7, #4]
 8006202:	4618      	mov	r0, r3
 8006204:	f006 fbbe 	bl	800c984 <memcpy>
            initial_state,
            CHACHA20_BLOCK_SIZE_BYTES );

    for( i = 0U; i < 10U; i++ )
 8006208:	2300      	movs	r3, #0
 800620a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800620c:	e007      	b.n	800621e <chacha20_block+0x2e>
        chacha20_inner_block( working_state );
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f7ff ffa4 	bl	8006160 <chacha20_inner_block>
    for( i = 0U; i < 10U; i++ )
 8006218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800621a:	3301      	adds	r3, #1
 800621c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800621e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006220:	2b09      	cmp	r3, #9
 8006222:	d9f4      	bls.n	800620e <chacha20_block+0x1e>

    working_state[ 0] += initial_state[ 0];
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4413      	add	r3, r2
 800622c:	60bb      	str	r3, [r7, #8]
    working_state[ 1] += initial_state[ 1];
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4413      	add	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
    working_state[ 2] += initial_state[ 2];
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3308      	adds	r3, #8
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4413      	add	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
    working_state[ 3] += initial_state[ 3];
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	330c      	adds	r3, #12
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4413      	add	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
    working_state[ 4] += initial_state[ 4];
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3310      	adds	r3, #16
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4413      	add	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
    working_state[ 5] += initial_state[ 5];
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3314      	adds	r3, #20
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4413      	add	r3, r2
 8006268:	61fb      	str	r3, [r7, #28]
    working_state[ 6] += initial_state[ 6];
 800626a:	6a3a      	ldr	r2, [r7, #32]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3318      	adds	r3, #24
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4413      	add	r3, r2
 8006274:	623b      	str	r3, [r7, #32]
    working_state[ 7] += initial_state[ 7];
 8006276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	331c      	adds	r3, #28
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4413      	add	r3, r2
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
    working_state[ 8] += initial_state[ 8];
 8006282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3320      	adds	r3, #32
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4413      	add	r3, r2
 800628c:	62bb      	str	r3, [r7, #40]	@ 0x28
    working_state[ 9] += initial_state[ 9];
 800628e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3324      	adds	r3, #36	@ 0x24
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4413      	add	r3, r2
 8006298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    working_state[10] += initial_state[10];
 800629a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3328      	adds	r3, #40	@ 0x28
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4413      	add	r3, r2
 80062a4:	633b      	str	r3, [r7, #48]	@ 0x30
    working_state[11] += initial_state[11];
 80062a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	332c      	adds	r3, #44	@ 0x2c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4413      	add	r3, r2
 80062b0:	637b      	str	r3, [r7, #52]	@ 0x34
    working_state[12] += initial_state[12];
 80062b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3330      	adds	r3, #48	@ 0x30
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4413      	add	r3, r2
 80062bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    working_state[13] += initial_state[13];
 80062be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3334      	adds	r3, #52	@ 0x34
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4413      	add	r3, r2
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    working_state[14] += initial_state[14];
 80062ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3338      	adds	r3, #56	@ 0x38
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4413      	add	r3, r2
 80062d4:	643b      	str	r3, [r7, #64]	@ 0x40
    working_state[15] += initial_state[15];
 80062d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	333c      	adds	r3, #60	@ 0x3c
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4413      	add	r3, r2
 80062e0:	647b      	str	r3, [r7, #68]	@ 0x44

    for( i = 0U; i < 16; i++ )
 80062e2:	2300      	movs	r3, #0
 80062e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e6:	e037      	b.n	8006358 <chacha20_block+0x168>
    {
        size_t offset = i * 4U;
 80062e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	64bb      	str	r3, [r7, #72]	@ 0x48

        keystream[offset     ] = (unsigned char)( working_state[i]       );
 80062ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	3350      	adds	r3, #80	@ 0x50
 80062f4:	443b      	add	r3, r7
 80062f6:	f853 1c48 	ldr.w	r1, [r3, #-72]
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062fe:	4413      	add	r3, r2
 8006300:	b2ca      	uxtb	r2, r1
 8006302:	701a      	strb	r2, [r3, #0]
        keystream[offset + 1U] = (unsigned char)( working_state[i] >>  8 );
 8006304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	3350      	adds	r3, #80	@ 0x50
 800630a:	443b      	add	r3, r7
 800630c:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8006310:	0a19      	lsrs	r1, r3, #8
 8006312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006314:	3301      	adds	r3, #1
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	4413      	add	r3, r2
 800631a:	b2ca      	uxtb	r2, r1
 800631c:	701a      	strb	r2, [r3, #0]
        keystream[offset + 2U] = (unsigned char)( working_state[i] >> 16 );
 800631e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	3350      	adds	r3, #80	@ 0x50
 8006324:	443b      	add	r3, r7
 8006326:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800632a:	0c19      	lsrs	r1, r3, #16
 800632c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800632e:	3302      	adds	r3, #2
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	4413      	add	r3, r2
 8006334:	b2ca      	uxtb	r2, r1
 8006336:	701a      	strb	r2, [r3, #0]
        keystream[offset + 3U] = (unsigned char)( working_state[i] >> 24 );
 8006338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	3350      	adds	r3, #80	@ 0x50
 800633e:	443b      	add	r3, r7
 8006340:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8006344:	0e19      	lsrs	r1, r3, #24
 8006346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006348:	3303      	adds	r3, #3
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	4413      	add	r3, r2
 800634e:	b2ca      	uxtb	r2, r1
 8006350:	701a      	strb	r2, [r3, #0]
    for( i = 0U; i < 16; i++ )
 8006352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006354:	3301      	adds	r3, #1
 8006356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800635a:	2b0f      	cmp	r3, #15
 800635c:	d9c4      	bls.n	80062e8 <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize( working_state, sizeof( working_state ) );
 800635e:	f107 0308 	add.w	r3, r7, #8
 8006362:	2140      	movs	r1, #64	@ 0x40
 8006364:	4618      	mov	r0, r3
 8006366:	f002 fe13 	bl	8008f90 <mbedtls_platform_zeroize>
}
 800636a:	bf00      	nop
 800636c:	3750      	adds	r7, #80	@ 0x50
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <mbedtls_chacha20_init>:

void mbedtls_chacha20_init( mbedtls_chacha20_context *ctx )
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b082      	sub	sp, #8
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
    CHACHA20_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx->state, sizeof( ctx->state ) );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2140      	movs	r1, #64	@ 0x40
 800637e:	4618      	mov	r0, r3
 8006380:	f002 fe06 	bl	8008f90 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3340      	adds	r3, #64	@ 0x40
 8006388:	2140      	movs	r1, #64	@ 0x40
 800638a:	4618      	mov	r0, r3
 800638c:	f002 fe00 	bl	8008f90 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2240      	movs	r2, #64	@ 0x40
 8006394:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8006398:	bf00      	nop
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free( mbedtls_chacha20_context *ctx )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
    if( ctx != NULL )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <mbedtls_chacha20_free+0x16>
    {
        mbedtls_platform_zeroize( ctx, sizeof( mbedtls_chacha20_context ) );
 80063ae:	2184      	movs	r1, #132	@ 0x84
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f002 fded 	bl	8008f90 <mbedtls_platform_zeroize>
    }
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey( mbedtls_chacha20_context *ctx,
                            const unsigned char key[32] )
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( key != NULL );

    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a5c      	ldr	r2, [pc, #368]	@ (8006540 <mbedtls_chacha20_setkey+0x180>)
 80063ce:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a5c      	ldr	r2, [pc, #368]	@ (8006544 <mbedtls_chacha20_setkey+0x184>)
 80063d4:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a5b      	ldr	r2, [pc, #364]	@ (8006548 <mbedtls_chacha20_setkey+0x188>)
 80063da:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a5b      	ldr	r2, [pc, #364]	@ (800654c <mbedtls_chacha20_setkey+0x18c>)
 80063e0:	60da      	str	r2, [r3, #12]

    /* Set key */
    ctx->state[4]  = BYTES_TO_U32_LE( key, 0 );
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	021b      	lsls	r3, r3, #8
 80063f0:	431a      	orrs	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	3302      	adds	r3, #2
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	041b      	lsls	r3, r3, #16
 80063fa:	431a      	orrs	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	3303      	adds	r3, #3
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	061b      	lsls	r3, r3, #24
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = BYTES_TO_U32_LE( key, 4 );
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	3304      	adds	r3, #4
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	461a      	mov	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	3305      	adds	r3, #5
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	431a      	orrs	r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	3306      	adds	r3, #6
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	041b      	lsls	r3, r3, #16
 8006424:	431a      	orrs	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	3307      	adds	r3, #7
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	061b      	lsls	r3, r3, #24
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = BYTES_TO_U32_LE( key, 8 );
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	3309      	adds	r3, #9
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	021b      	lsls	r3, r3, #8
 8006444:	431a      	orrs	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	330a      	adds	r3, #10
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	431a      	orrs	r2, r3
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	330b      	adds	r3, #11
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	061b      	lsls	r3, r3, #24
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = BYTES_TO_U32_LE( key, 12 );
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	330d      	adds	r3, #13
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	021b      	lsls	r3, r3, #8
 800646e:	431a      	orrs	r2, r3
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	330e      	adds	r3, #14
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	041b      	lsls	r3, r3, #16
 8006478:	431a      	orrs	r2, r3
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	330f      	adds	r3, #15
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	061b      	lsls	r3, r3, #24
 8006482:	431a      	orrs	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = BYTES_TO_U32_LE( key, 16 );
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	3310      	adds	r3, #16
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	3311      	adds	r3, #17
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	431a      	orrs	r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	3312      	adds	r3, #18
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	431a      	orrs	r2, r3
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	3313      	adds	r3, #19
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	061b      	lsls	r3, r3, #24
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = BYTES_TO_U32_LE( key, 20 );
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	3314      	adds	r3, #20
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	461a      	mov	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	3315      	adds	r3, #21
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	431a      	orrs	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	3316      	adds	r3, #22
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	041b      	lsls	r3, r3, #16
 80064cc:	431a      	orrs	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	3317      	adds	r3, #23
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	061b      	lsls	r3, r3, #24
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->state[10] = BYTES_TO_U32_LE( key, 24 );
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	3318      	adds	r3, #24
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	3319      	adds	r3, #25
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	431a      	orrs	r2, r3
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	331a      	adds	r3, #26
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	431a      	orrs	r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	331b      	adds	r3, #27
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	061b      	lsls	r3, r3, #24
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->state[11] = BYTES_TO_U32_LE( key, 28 );
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	331c      	adds	r3, #28
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	331d      	adds	r3, #29
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	431a      	orrs	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	331e      	adds	r3, #30
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	041b      	lsls	r3, r3, #16
 8006520:	431a      	orrs	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	331f      	adds	r3, #31
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	061b      	lsls	r3, r3, #24
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	62da      	str	r2, [r3, #44]	@ 0x2c

    return( 0 );
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	61707865 	.word	0x61707865
 8006544:	3320646e 	.word	0x3320646e
 8006548:	79622d32 	.word	0x79622d32
 800654c:	6b206574 	.word	0x6b206574

08006550 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update( mbedtls_chacha20_context *ctx,
                              size_t size,
                              const unsigned char *input,
                              unsigned char *output )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
 800655c:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	617b      	str	r3, [r7, #20]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || input  != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || output != NULL );

    /* Use leftover keystream bytes, if available */
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8006562:	e01d      	b.n	80065a0 <mbedtls_chacha20_update+0x50>
    {
        output[offset] = input[offset]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	4413      	add	r3, r2
 800656a:	7819      	ldrb	r1, [r3, #0]
                       ^ ctx->keystream8[ctx->keystream_bytes_used];
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
        output[offset] = input[offset]
 800657a:	6838      	ldr	r0, [r7, #0]
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4403      	add	r3, r0
 8006580:	404a      	eors	r2, r1
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        offset++;
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	3301      	adds	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
        size--;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	3b01      	subs	r3, #1
 800659e:	60bb      	str	r3, [r7, #8]
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 80cf 	beq.w	8006746 <mbedtls_chacha20_update+0x1f6>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80065b0:	d9d8      	bls.n	8006564 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 80065b2:	e0c8      	b.n	8006746 <mbedtls_chacha20_update+0x1f6>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3340      	adds	r3, #64	@ 0x40
 80065ba:	4619      	mov	r1, r3
 80065bc:	4610      	mov	r0, r2
 80065be:	f7ff fe17 	bl	80061f0 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30

        for( i = 0U; i < 64U; i += 8U )
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
 80065d0:	e0af      	b.n	8006732 <mbedtls_chacha20_update+0x1e2>
        {
            output[offset + i  ] = input[offset + i  ] ^ ctx->keystream8[i  ];
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4413      	add	r3, r2
 80065dc:	7819      	ldrb	r1, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4413      	add	r3, r2
 80065e4:	3340      	adds	r3, #64	@ 0x40
 80065e6:	781a      	ldrb	r2, [r3, #0]
 80065e8:	6978      	ldr	r0, [r7, #20]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4403      	add	r3, r0
 80065ee:	6838      	ldr	r0, [r7, #0]
 80065f0:	4403      	add	r3, r0
 80065f2:	404a      	eors	r2, r1
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	701a      	strb	r2, [r3, #0]
            output[offset + i+1] = input[offset + i+1] ^ ctx->keystream8[i+1];
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4413      	add	r3, r2
 80065fe:	3301      	adds	r3, #1
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	4413      	add	r3, r2
 8006604:	7819      	ldrb	r1, [r3, #0]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	3301      	adds	r3, #1
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4413      	add	r3, r2
 800660e:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4403      	add	r3, r0
 8006618:	3301      	adds	r3, #1
 800661a:	6838      	ldr	r0, [r7, #0]
 800661c:	4403      	add	r3, r0
 800661e:	404a      	eors	r2, r1
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
            output[offset + i+2] = input[offset + i+2] ^ ctx->keystream8[i+2];
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4413      	add	r3, r2
 800662a:	3302      	adds	r3, #2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4413      	add	r3, r2
 8006630:	7819      	ldrb	r1, [r3, #0]
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	3302      	adds	r3, #2
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800663e:	6978      	ldr	r0, [r7, #20]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4403      	add	r3, r0
 8006644:	3302      	adds	r3, #2
 8006646:	6838      	ldr	r0, [r7, #0]
 8006648:	4403      	add	r3, r0
 800664a:	404a      	eors	r2, r1
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
            output[offset + i+3] = input[offset + i+3] ^ ctx->keystream8[i+3];
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	4413      	add	r3, r2
 8006656:	3303      	adds	r3, #3
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	7819      	ldrb	r1, [r3, #0]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	3303      	adds	r3, #3
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800666a:	6978      	ldr	r0, [r7, #20]
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4403      	add	r3, r0
 8006670:	3303      	adds	r3, #3
 8006672:	6838      	ldr	r0, [r7, #0]
 8006674:	4403      	add	r3, r0
 8006676:	404a      	eors	r2, r1
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
            output[offset + i+4] = input[offset + i+4] ^ ctx->keystream8[i+4];
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4413      	add	r3, r2
 8006682:	3304      	adds	r3, #4
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	4413      	add	r3, r2
 8006688:	7819      	ldrb	r1, [r3, #0]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	3304      	adds	r3, #4
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006696:	6978      	ldr	r0, [r7, #20]
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4403      	add	r3, r0
 800669c:	3304      	adds	r3, #4
 800669e:	6838      	ldr	r0, [r7, #0]
 80066a0:	4403      	add	r3, r0
 80066a2:	404a      	eors	r2, r1
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	701a      	strb	r2, [r3, #0]
            output[offset + i+5] = input[offset + i+5] ^ ctx->keystream8[i+5];
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4413      	add	r3, r2
 80066ae:	3305      	adds	r3, #5
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	4413      	add	r3, r2
 80066b4:	7819      	ldrb	r1, [r3, #0]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3305      	adds	r3, #5
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80066c2:	6978      	ldr	r0, [r7, #20]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4403      	add	r3, r0
 80066c8:	3305      	adds	r3, #5
 80066ca:	6838      	ldr	r0, [r7, #0]
 80066cc:	4403      	add	r3, r0
 80066ce:	404a      	eors	r2, r1
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
            output[offset + i+6] = input[offset + i+6] ^ ctx->keystream8[i+6];
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	4413      	add	r3, r2
 80066da:	3306      	adds	r3, #6
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	7819      	ldrb	r1, [r3, #0]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	3306      	adds	r3, #6
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80066ee:	6978      	ldr	r0, [r7, #20]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	4403      	add	r3, r0
 80066f4:	3306      	adds	r3, #6
 80066f6:	6838      	ldr	r0, [r7, #0]
 80066f8:	4403      	add	r3, r0
 80066fa:	404a      	eors	r2, r1
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
            output[offset + i+7] = input[offset + i+7] ^ ctx->keystream8[i+7];
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	3307      	adds	r3, #7
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	7819      	ldrb	r1, [r3, #0]
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3307      	adds	r3, #7
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	4413      	add	r3, r2
 8006716:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800671a:	6978      	ldr	r0, [r7, #20]
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4403      	add	r3, r0
 8006720:	3307      	adds	r3, #7
 8006722:	6838      	ldr	r0, [r7, #0]
 8006724:	4403      	add	r3, r0
 8006726:	404a      	eors	r2, r1
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < 64U; i += 8U )
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	3308      	adds	r3, #8
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b3f      	cmp	r3, #63	@ 0x3f
 8006736:	f67f af4c 	bls.w	80065d2 <mbedtls_chacha20_update+0x82>
        }

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	3340      	adds	r3, #64	@ 0x40
 800673e:	617b      	str	r3, [r7, #20]
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	3b40      	subs	r3, #64	@ 0x40
 8006744:	60bb      	str	r3, [r7, #8]
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2b3f      	cmp	r3, #63	@ 0x3f
 800674a:	f63f af33 	bhi.w	80065b4 <mbedtls_chacha20_update+0x64>
    }

    /* Last (partial) block */
    if( size > 0U )
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d02c      	beq.n	80067ae <mbedtls_chacha20_update+0x25e>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3340      	adds	r3, #64	@ 0x40
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f7ff fd47 	bl	80061f0 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30

        for( i = 0U; i < size; i++)
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	e015      	b.n	800679e <mbedtls_chacha20_update+0x24e>
        {
            output[offset + i] = input[offset + i] ^ ctx->keystream8[i];
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4413      	add	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4413      	add	r3, r2
 800677c:	7819      	ldrb	r1, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	3340      	adds	r3, #64	@ 0x40
 8006786:	781a      	ldrb	r2, [r3, #0]
 8006788:	6978      	ldr	r0, [r7, #20]
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	4403      	add	r3, r0
 800678e:	6838      	ldr	r0, [r7, #0]
 8006790:	4403      	add	r3, r0
 8006792:	404a      	eors	r2, r1
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < size; i++)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3301      	adds	r3, #1
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d3e5      	bcc.n	8006772 <mbedtls_chacha20_update+0x222>
        }

        ctx->keystream_bytes_used = size;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    }

    return( 0 );
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad( mbedtls_chachapoly_context *ctx )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) ( ctx->aad_len % 16U );
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 80067c6:	4613      	mov	r3, r2
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if( partial_block_len == 0U )
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <chachapoly_pad_aad+0x20>
        return( 0 );
 80067d4:	2300      	movs	r3, #0
 80067d6:	e012      	b.n	80067fe <chachapoly_pad_aad+0x46>

    memset( zeroes, 0, sizeof( zeroes ) );
 80067d8:	f107 030c 	add.w	r3, r7, #12
 80067dc:	220f      	movs	r2, #15
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f006 f88b 	bl	800c8fc <memset>

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f103 0084 	add.w	r0, r3, #132	@ 0x84
                                     zeroes,
                                     16U - partial_block_len ) );
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f1c3 0210 	rsb	r2, r3, #16
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 80067f2:	f107 030c 	add.w	r3, r7, #12
 80067f6:	4619      	mov	r1, r3
 80067f8:	f003 f84a 	bl	8009890 <mbedtls_poly1305_update>
 80067fc:	4603      	mov	r3, r0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3720      	adds	r7, #32
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <mbedtls_chachapoly_init>:
                                     zeroes,
                                     16U - partial_block_len ) );
}

void mbedtls_chachapoly_init( mbedtls_chachapoly_context *ctx )
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
    CHACHAPOLY_VALIDATE( ctx != NULL );

    mbedtls_chacha20_init( &ctx->chacha20_ctx );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fdae 	bl	8006372 <mbedtls_chacha20_init>
    mbedtls_poly1305_init( &ctx->poly1305_ctx );
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3384      	adds	r3, #132	@ 0x84
 800681a:	4618      	mov	r0, r3
 800681c:	f003 f81c 	bl	8009858 <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 8006820:	6879      	ldr	r1, [r7, #4]
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    ctx->ciphertext_len = 0U;
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
}
 800684c:	bf00      	nop
 800684e:	3708      	adds	r7, #8
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free( mbedtls_chachapoly_context *ctx )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d01f      	beq.n	80068a2 <mbedtls_chachapoly_free+0x4e>
        return;

    mbedtls_chacha20_free( &ctx->chacha20_ctx );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fd9b 	bl	80063a0 <mbedtls_chacha20_free>
    mbedtls_poly1305_free( &ctx->poly1305_ctx );
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3384      	adds	r3, #132	@ 0x84
 800686e:	4618      	mov	r0, r3
 8006870:	f002 fffe 	bl	8009870 <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	f04f 0200 	mov.w	r2, #0
 800687a:	f04f 0300 	mov.w	r3, #0
 800687e:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    ctx->ciphertext_len = 0U;
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 80068a0:	e000      	b.n	80068a4 <mbedtls_chachapoly_free+0x50>
        return;
 80068a2:	bf00      	nop
}
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey( mbedtls_chachapoly_context *ctx,
                               const unsigned char key[32] )
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( key != NULL );

    ret = mbedtls_chacha20_setkey( &ctx->chacha20_ctx, key );
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6839      	ldr	r1, [r7, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fd81 	bl	80063c0 <mbedtls_chacha20_setkey>
 80068be:	60f8      	str	r0, [r7, #12]

    return( ret );
 80068c0:	68fb      	ldr	r3, [r7, #12]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update( mbedtls_chachapoly_context *ctx,
                               size_t len,
                               const unsigned char *input,
                               unsigned char *output )
{
 80068ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || input != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || output != NULL );

    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d007      	beq.n	80068f4 <mbedtls_chachapoly_update+0x2a>
        ( ctx->state != CHACHAPOLY_STATE_CIPHERTEXT ) )
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d002      	beq.n	80068f4 <mbedtls_chachapoly_update+0x2a>
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 80068ee:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80068f2:	e057      	b.n	80069a4 <mbedtls_chachapoly_update+0xda>
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10c      	bne.n	8006918 <mbedtls_chachapoly_update+0x4e>
    {
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2202      	movs	r2, #2
 8006902:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

        ret = chachapoly_pad_aad( ctx );
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff ff56 	bl	80067b8 <chachapoly_pad_aad>
 800690c:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <mbedtls_chachapoly_update+0x4e>
            return( ret );
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	e045      	b.n	80069a4 <mbedtls_chachapoly_update+0xda>
    }

    ctx->ciphertext_len += len;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 800691e:	68b9      	ldr	r1, [r7, #8]
 8006920:	2000      	movs	r0, #0
 8006922:	460c      	mov	r4, r1
 8006924:	4605      	mov	r5, r0
 8006926:	eb12 0804 	adds.w	r8, r2, r4
 800692a:	eb43 0905 	adc.w	r9, r3, r5
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	e9c3 8936 	strd	r8, r9, [r3, #216]	@ 0xd8

    if( ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT )
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800693a:	2b00      	cmp	r3, #0
 800693c:	d118      	bne.n	8006970 <mbedtls_chachapoly_update+0xa6>
    {
        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	f7ff fe03 	bl	8006550 <mbedtls_chacha20_update>
 800694a:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <mbedtls_chachapoly_update+0x8c>
            return( ret );
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	e026      	b.n	80069a4 <mbedtls_chachapoly_update+0xda>

        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, output, len );
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	3384      	adds	r3, #132	@ 0x84
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f002 ff96 	bl	8009890 <mbedtls_poly1305_update>
 8006964:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01a      	beq.n	80069a2 <mbedtls_chachapoly_update+0xd8>
            return( ret );
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	e019      	b.n	80069a4 <mbedtls_chachapoly_update+0xda>
    }
    else /* DECRYPT */
    {
        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, input, len );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	3384      	adds	r3, #132	@ 0x84
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4618      	mov	r0, r3
 800697a:	f002 ff89 	bl	8009890 <mbedtls_poly1305_update>
 800697e:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <mbedtls_chachapoly_update+0xc0>
            return( ret );
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	e00c      	b.n	80069a4 <mbedtls_chachapoly_update+0xda>

        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	f7ff fddd 	bl	8006550 <mbedtls_chacha20_update>
 8006996:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <mbedtls_chachapoly_update+0xd8>
            return( ret );
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	e000      	b.n	80069a4 <mbedtls_chachapoly_update+0xda>
    }

    return( 0 );
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080069ae <mbedtls_cipher_get_block_size>:
 * \return       The block size of the underlying cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	e002      	b.n	80069c8 <mbedtls_cipher_get_block_size+0x1a>

    return ctx->cipher_info->block_size;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	6039      	str	r1, [r7, #0]
 80069de:	71fb      	strb	r3, [r7, #7]
 80069e0:	4613      	mov	r3, r2
 80069e2:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80069e4:	4b13      	ldr	r3, [pc, #76]	@ (8006a34 <mbedtls_cipher_info_from_values+0x60>)
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e018      	b.n	8006a1c <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	79fa      	ldrb	r2, [r7, #7]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d10e      	bne.n	8006a16 <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d108      	bne.n	8006a16 <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 8006a0a:	79ba      	ldrb	r2, [r7, #6]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d102      	bne.n	8006a16 <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	e007      	b.n	8006a26 <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3308      	adds	r3, #8
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1e2      	bne.n	80069ea <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	0800f778 	.word	0x0800f778

08006a38 <mbedtls_cipher_free>:
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d010      	beq.n	8006a68 <mbedtls_cipher_free+0x30>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d007      	beq.n	8006a5e <mbedtls_cipher_free+0x26>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 8006a5e:	2140      	movs	r1, #64	@ 0x40
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f002 fa95 	bl	8008f90 <mbedtls_platform_zeroize>
 8006a66:	e000      	b.n	8006a6a <mbedtls_cipher_free+0x32>
        return;
 8006a68:	bf00      	nop
}
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <mbedtls_cipher_setup+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006a80:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac0 <mbedtls_cipher_setup+0x50>)
 8006a82:	e019      	b.n	8006ab8 <mbedtls_cipher_setup+0x48>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8006a84:	2240      	movs	r2, #64	@ 0x40
 8006a86:	2100      	movs	r1, #0
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f005 ff37 	bl	800c8fc <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	4798      	blx	r3
 8006a96:	4602      	mov	r2, r0
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <mbedtls_cipher_setup+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8006aa4:	4b07      	ldr	r3, [pc, #28]	@ (8006ac4 <mbedtls_cipher_setup+0x54>)
 8006aa6:	e007      	b.n	8006ab8 <mbedtls_cipher_setup+0x48>

    ctx->cipher_info = cipher_info;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	601a      	str	r2, [r3, #0]
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 8006aae:	2104      	movs	r1, #4
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa45 	bl	8006f40 <mbedtls_cipher_set_padding_mode>
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	ffff9f00 	.word	0xffff9f00
 8006ac4:	ffff9e80 	.word	0xffff9e80

08006ac8 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
 8006ad4:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <mbedtls_cipher_setkey+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006ade:	4b26      	ldr	r3, [pc, #152]	@ (8006b78 <mbedtls_cipher_setkey+0xb0>)
 8006ae0:	e045      	b.n	8006b6e <mbedtls_cipher_setkey+0xa6>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d108      	bne.n	8006b02 <mbedtls_cipher_setkey+0x3a>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d001      	beq.n	8006b02 <mbedtls_cipher_setkey+0x3a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006afe:	4b1e      	ldr	r3, [pc, #120]	@ (8006b78 <mbedtls_cipher_setkey+0xb0>)
 8006b00:	e035      	b.n	8006b6e <mbedtls_cipher_setkey+0xa6>
    }

    ctx->key_bitlen = key_bitlen;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	721a      	strb	r2, [r3, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 8006b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d00e      	beq.n	8006b34 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d009      	beq.n	8006b34 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d004      	beq.n	8006b34 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 8006b30:	2b05      	cmp	r3, #5
 8006b32:	d10b      	bne.n	8006b4c <mbedtls_cipher_setkey+0x84>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
                                                         ctx->key_bitlen ) );
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	4798      	blx	r3
 8006b48:	4603      	mov	r3, r0
 8006b4a:	e010      	b.n	8006b6e <mbedtls_cipher_setkey+0xa6>
    }

    if( MBEDTLS_DECRYPT == operation )
 8006b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10b      	bne.n	8006b6c <mbedtls_cipher_setkey+0xa4>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	69db      	ldr	r3, [r3, #28]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
                                                         ctx->key_bitlen ) );
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	4798      	blx	r3
 8006b68:	4603      	mov	r3, r0
 8006b6a:	e000      	b.n	8006b6e <mbedtls_cipher_setkey+0xa6>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006b6c:	4b02      	ldr	r3, [pc, #8]	@ (8006b78 <mbedtls_cipher_setkey+0xb0>)
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	ffff9f00 	.word	0xffff9f00

08006b7c <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	b08a      	sub	sp, #40	@ 0x28
 8006b80:	af02      	add	r7, sp, #8
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	603b      	str	r3, [r7, #0]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <mbedtls_cipher_update+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006b92:	4b7c      	ldr	r3, [pc, #496]	@ (8006d84 <mbedtls_cipher_update+0x208>)
 8006b94:	e1b4      	b.n	8006f00 <mbedtls_cipher_update+0x384>

    *olen = 0;
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff ff06 	bl	80069ae <mbedtls_cipher_get_block_size>
 8006ba2:	61b8      	str	r0, [r7, #24]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d11c      	bne.n	8006be8 <mbedtls_cipher_update+0x6c>
    {
        if( ilen != block_size )
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d001      	beq.n	8006bba <mbedtls_cipher_update+0x3e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8006bb6:	4b74      	ldr	r3, [pc, #464]	@ (8006d88 <mbedtls_cipher_update+0x20c>)
 8006bb8:	e1a2      	b.n	8006f00 <mbedtls_cipher_update+0x384>

        *olen = ilen;
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	685c      	ldr	r4, [r3, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	47a0      	blx	r4
 8006bd8:	6178      	str	r0, [r7, #20]
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <mbedtls_cipher_update+0x68>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	e18d      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        }

        return( 0 );
 8006be4:	2300      	movs	r3, #0
 8006be6:	e18b      	b.n	8006f00 <mbedtls_cipher_update+0x384>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b06      	cmp	r3, #6
 8006bf0:	d10b      	bne.n	8006c0a <mbedtls_cipher_update+0x8e>
    {
        *olen = ilen;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	f001 ff14 	bl	8008a2e <mbedtls_gcm_update>
 8006c06:	4603      	mov	r3, r0
 8006c08:	e17a      	b.n	8006f00 <mbedtls_cipher_update+0x384>
                                    output ) );
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( ctx->cipher_info->type == MBEDTLS_CIPHER_CHACHA20_POLY1305 )
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b49      	cmp	r3, #73	@ 0x49
 8006c12:	d10b      	bne.n	8006c2c <mbedtls_cipher_update+0xb0>
    {
        *olen = ilen;
 8006c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	601a      	str	r2, [r3, #0]
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	f7ff fe51 	bl	80068ca <mbedtls_chachapoly_update>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	e169      	b.n	8006f00 <mbedtls_cipher_update+0x384>
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <mbedtls_cipher_update+0xba>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8006c32:	4b56      	ldr	r3, [pc, #344]	@ (8006d8c <mbedtls_cipher_update+0x210>)
 8006c34:	e164      	b.n	8006f00 <mbedtls_cipher_update+0x384>
    }

    if( input == output &&
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d10f      	bne.n	8006c5e <mbedtls_cipher_update+0xe2>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if( input == output &&
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d109      	bne.n	8006c5a <mbedtls_cipher_update+0xde>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c4e:	69b9      	ldr	r1, [r7, #24]
 8006c50:	fb01 f202 	mul.w	r2, r1, r2
 8006c54:	1a9b      	subs	r3, r3, r2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <mbedtls_cipher_update+0xe2>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d84 <mbedtls_cipher_update+0x208>)
 8006c5c:	e150      	b.n	8006f00 <mbedtls_cipher_update+0x384>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	f040 80e4 	bne.w	8006e32 <mbedtls_cipher_update+0x2b6>
    {
        size_t copy_len = 0;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <mbedtls_cipher_update+0x112>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <mbedtls_cipher_update+0x112>
                ilen <= block_size - ctx->unprocessed_len ) ||
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	69ba      	ldr	r2, [r7, #24]
 8006c86:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d91b      	bls.n	8006cc6 <mbedtls_cipher_update+0x14a>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <mbedtls_cipher_update+0x132>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d106      	bne.n	8006cae <mbedtls_cipher_update+0x132>
                ilen < block_size - ctx->unprocessed_len ) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d30b      	bcc.n	8006cc6 <mbedtls_cipher_update+0x14a>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen < block_size - ctx->unprocessed_len ) ||
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d119      	bne.n	8006cec <mbedtls_cipher_update+0x170>
                ilen < block_size - ctx->unprocessed_len ) )
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d212      	bcs.n	8006cec <mbedtls_cipher_update+0x170>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cca:	3310      	adds	r3, #16
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4413      	add	r3, r2
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f005 fe54 	bl	800c984 <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	441a      	add	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	625a      	str	r2, [r3, #36]	@ 0x24
            return( 0 );
 8006ce8:	2300      	movs	r3, #0
 8006cea:	e109      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d03e      	beq.n	8006d72 <mbedtls_cipher_update+0x1f6>
        {
            copy_len = block_size - ctx->unprocessed_len;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	3310      	adds	r3, #16
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	4413      	add	r3, r2
 8006d08:	3304      	adds	r3, #4
 8006d0a:	69fa      	ldr	r2, [r7, #28]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f005 fe38 	bl	800c984 <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	689c      	ldr	r4, [r3, #8]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f103 0528 	add.w	r5, r3, #40	@ 0x28
                    ctx->unprocessed_data, output ) ) )
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006d30:	683a      	ldr	r2, [r7, #0]
 8006d32:	9201      	str	r2, [sp, #4]
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	462b      	mov	r3, r5
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	47a0      	blx	r4
 8006d3c:	6178      	str	r0, [r7, #20]
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <mbedtls_cipher_update+0x1cc>
            {
                return( ret );
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	e0db      	b.n	8006f00 <mbedtls_cipher_update+0x384>
            }

            *olen += block_size;
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	441a      	add	r2, r3
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	601a      	str	r2, [r3, #0]
            output += block_size;
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	4413      	add	r3, r2
 8006d5a:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	625a      	str	r2, [r3, #36]	@ 0x24

            input += copy_len;
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	4413      	add	r3, r2
 8006d68:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d038      	beq.n	8006dea <mbedtls_cipher_update+0x26e>
        {
            if( 0 == block_size )
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d108      	bne.n	8006d90 <mbedtls_cipher_update+0x214>
            {
                return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8006d7e:	4b03      	ldr	r3, [pc, #12]	@ (8006d8c <mbedtls_cipher_update+0x210>)
 8006d80:	e0be      	b.n	8006f00 <mbedtls_cipher_update+0x384>
 8006d82:	bf00      	nop
 8006d84:	ffff9f00 	.word	0xffff9f00
 8006d88:	ffff9d80 	.word	0xffff9d80
 8006d8c:	ffff9c80 	.word	0xffff9c80

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d98:	69b9      	ldr	r1, [r7, #24]
 8006d9a:	fb01 f202 	mul.w	r2, r1, r2
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 &&
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <mbedtls_cipher_update+0x242>
                ctx->operation == MBEDTLS_DECRYPT &&
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if( copy_len == 0 &&
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d105      	bne.n	8006dbe <mbedtls_cipher_update+0x242>
                NULL != ctx->add_padding)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <mbedtls_cipher_update+0x242>
            {
                copy_len = block_size;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	61fb      	str	r3, [r7, #28]
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f103 0014 	add.w	r0, r3, #20
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	4413      	add	r3, r2
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	f005 fdd7 	bl	800c984 <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	441a      	add	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	@ 0x24
            ilen -= copy_len;
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01e      	beq.n	8006e2e <mbedtls_cipher_update+0x2b2>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	689c      	ldr	r4, [r3, #8]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f103 0228 	add.w	r2, r3, #40	@ 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	9301      	str	r3, [sp, #4]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4613      	mov	r3, r2
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	47a0      	blx	r4
 8006e16:	6178      	str	r0, [r7, #20]
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <mbedtls_cipher_update+0x2a6>
            {
                return( ret );
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	e06e      	b.n	8006f00 <mbedtls_cipher_update+0x384>
            }

            *olen += ilen;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	441a      	add	r2, r3
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e066      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	785b      	ldrb	r3, [r3, #1]
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d11d      	bne.n	8006e78 <mbedtls_cipher_update+0x2fc>
    {
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	68dc      	ldr	r4, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
                ilen, &ctx->unprocessed_len, ctx->iv, input, output ) ) )
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f103 0128 	add.w	r1, r3, #40	@ 0x28
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	47a0      	blx	r4
 8006e62:	6178      	str	r0, [r7, #20]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <mbedtls_cipher_update+0x2f2>
        {
            return( ret );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	e048      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	601a      	str	r2, [r3, #0]

        return( 0 );
 8006e74:	2300      	movs	r3, #0
 8006e76:	e043      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_XTS )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	785b      	ldrb	r3, [r3, #1]
 8006e7e:	2b09      	cmp	r3, #9
 8006e80:	d123      	bne.n	8006eca <mbedtls_cipher_update+0x34e>
    {
        if( ctx->unprocessed_len > 0 ) {
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <mbedtls_cipher_update+0x312>
            /* We can only process an entire data unit at a time. */
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8006e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f08 <mbedtls_cipher_update+0x38c>)
 8006e8c:	e038      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        }

        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	691c      	ldr	r4, [r3, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f993 1008 	ldrsb.w	r1, [r3, #8]
                ctx->operation, ilen, ctx->iv, input, output );
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f103 0228 	add.w	r2, r3, #40	@ 0x28
        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	47a0      	blx	r4
 8006eb4:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <mbedtls_cipher_update+0x344>
        {
            return( ret );
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	e01f      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	601a      	str	r2, [r3, #0]

        return( 0 );
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e01a      	b.n	8006f00 <mbedtls_cipher_update+0x384>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	785b      	ldrb	r3, [r3, #1]
 8006ed0:	2b07      	cmp	r3, #7
 8006ed2:	d114      	bne.n	8006efe <mbedtls_cipher_update+0x382>
    {
        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	695c      	ldr	r4, [r3, #20]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	47a0      	blx	r4
 8006ee8:	6178      	str	r0, [r7, #20]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <mbedtls_cipher_update+0x378>
                                                    ilen, input, output ) ) )
        {
            return( ret );
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	e005      	b.n	8006f00 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	601a      	str	r2, [r3, #0]

        return( 0 );
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <mbedtls_cipher_update+0x384>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8006efe:	4b02      	ldr	r3, [pc, #8]	@ (8006f08 <mbedtls_cipher_update+0x38c>)
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bdb0      	pop	{r4, r5, r7, pc}
 8006f08:	ffff9f80 	.word	0xffff9f80

08006f0c <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <get_no_padding+0x18>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006f24:	4b05      	ldr	r3, [pc, #20]	@ (8006f3c <get_no_padding+0x30>)
 8006f26:	e003      	b.n	8006f30 <get_no_padding+0x24>

    *data_len = input_len;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006f2e:	2300      	movs	r3, #0
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	ffff9f00 	.word	0xffff9f00

08006f40 <mbedtls_cipher_set_padding_mode>:
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d004      	beq.n	8006f5e <mbedtls_cipher_set_padding_mode+0x1e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d001      	beq.n	8006f62 <mbedtls_cipher_set_padding_mode+0x22>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <mbedtls_cipher_set_padding_mode+0x48>)
 8006f60:	e00c      	b.n	8006f7c <mbedtls_cipher_set_padding_mode+0x3c>
    }

    switch( mode )
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d108      	bne.n	8006f7a <mbedtls_cipher_set_padding_mode+0x3a>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a06      	ldr	r2, [pc, #24]	@ (8006f8c <mbedtls_cipher_set_padding_mode+0x4c>)
 8006f72:	611a      	str	r2, [r3, #16]
        break;
 8006f74:	bf00      	nop

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <mbedtls_cipher_set_padding_mode+0x3c>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8006f7a:	4b05      	ldr	r3, [pc, #20]	@ (8006f90 <mbedtls_cipher_set_padding_mode+0x50>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	ffff9f00 	.word	0xffff9f00
 8006f8c:	08006f0d 	.word	0x08006f0d
 8006f90:	ffff9f80 	.word	0xffff9f80

08006f94 <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8006f9a:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006f9e:	2001      	movs	r0, #1
 8006fa0:	f005 fbda 	bl	800c758 <calloc>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 f861 	bl	8008076 <mbedtls_gcm_init>

    return( ctx );
 8006fb4:	687b      	ldr	r3, [r7, #4]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 ffcd 	bl	8008f66 <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f005 fbdf 	bl	800c790 <free>
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8006fea:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f7fd f948 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8006ff8:	4603      	mov	r3, r0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b086      	sub	sp, #24
 8007006:	af02      	add	r7, sp, #8
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	460b      	mov	r3, r1
 8007010:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 8007012:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7fd f94b 	bl	80042be <mbedtls_aes_crypt_cbc>
 8007028:	4603      	mov	r3, r0
                          output );
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap( void *ctx, size_t length, size_t *iv_off,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af02      	add	r7, sp, #8
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7fd fd7b 	bl	8004b4a <mbedtls_aes_crypt_ofb>
 8007054:	4603      	mov	r3, r0
                                    iv, input, output );
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap( void *ctx, mbedtls_operation_t operation,
                               size_t length,
                               const unsigned char data_unit[16],
                               const unsigned char *input,
                               unsigned char *output )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	460b      	mov	r3, r1
 800706e:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	613b      	str	r3, [r7, #16]
    int mode;

    switch( operation )
 8007074:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <aes_crypt_xts_wrap+0x26>
 800707c:	2b01      	cmp	r3, #1
 800707e:	d105      	bne.n	800708c <aes_crypt_xts_wrap+0x2c>
    {
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 8007080:	2301      	movs	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
            break;
 8007084:	e004      	b.n	8007090 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
            break;
 800708a:	e001      	b.n	8007090 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 800708c:	4b08      	ldr	r3, [pc, #32]	@ (80070b0 <aes_crypt_xts_wrap+0x50>)
 800708e:	e00a      	b.n	80070a6 <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts( xts_ctx, mode, length,
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	9301      	str	r3, [sp, #4]
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	6979      	ldr	r1, [r7, #20]
 800709e:	6938      	ldr	r0, [r7, #16]
 80070a0:	f7fd fc4a 	bl	8004938 <mbedtls_aes_crypt_xts>
 80070a4:	4603      	mov	r3, r0
                                  data_unit, input, output );
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	ffff9f00 	.word	0xffff9f00

080070b4 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	68b9      	ldr	r1, [r7, #8]
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7fc f953 	bl	8003370 <mbedtls_aes_setkey_dec>
 80070ca:	4603      	mov	r3, r0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68b9      	ldr	r1, [r7, #8]
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7fb ff6d 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 80070ea:	4603      	mov	r3, r0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 80070fa:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80070fe:	2001      	movs	r0, #1
 8007100:	f005 fb2a 	bl	800c758 <calloc>
 8007104:	4603      	mov	r3, r0
 8007106:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <aes_ctx_alloc+0x1e>
        return( NULL );
 800710e:	2300      	movs	r3, #0
 8007110:	e003      	b.n	800711a <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fb ff0f 	bl	8002f36 <mbedtls_aes_init>

    return( aes );
 8007118:	687b      	ldr	r3, [r7, #4]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b082      	sub	sp, #8
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fb ff11 	bl	8002f52 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f005 fb2d 	bl	800c790 <free>
}
 8007136:	bf00      	nop
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_enc( xts_ctx, key, key_bitlen ) );
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	6978      	ldr	r0, [r7, #20]
 8007154:	f7fc fa6c 	bl	8003630 <mbedtls_aes_xts_setkey_enc>
 8007158:	4603      	mov	r3, r0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b086      	sub	sp, #24
 8007166:	af00      	add	r7, sp, #0
 8007168:	60f8      	str	r0, [r7, #12]
 800716a:	60b9      	str	r1, [r7, #8]
 800716c:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_dec( xts_ctx, key, key_bitlen ) );
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	68b9      	ldr	r1, [r7, #8]
 8007176:	6978      	ldr	r0, [r7, #20]
 8007178:	f7fc fa8e 	bl	8003698 <mbedtls_aes_xts_setkey_dec>
 800717c:	4603      	mov	r3, r0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc( void )
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc( 1, sizeof( *xts_ctx ) );
 800718c:	f44f 710c 	mov.w	r1, #560	@ 0x230
 8007190:	2001      	movs	r0, #1
 8007192:	f005 fae1 	bl	800c758 <calloc>
 8007196:	4603      	mov	r3, r0
 8007198:	607b      	str	r3, [r7, #4]

    if( xts_ctx != NULL )
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init( xts_ctx );
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f7fb fee7 	bl	8002f74 <mbedtls_aes_xts_init>

    return( xts_ctx );
 80071a6:	687b      	ldr	r3, [r7, #4]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <xts_aes_ctx_free>:

static void xts_aes_ctx_free( void *ctx )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	60fb      	str	r3, [r7, #12]

    if( xts_ctx == NULL )
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d006      	beq.n	80071d0 <xts_aes_ctx_free+0x20>
        return;

    mbedtls_aes_xts_free( xts_ctx );
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7fb fee8 	bl	8002f98 <mbedtls_aes_xts_free>
    mbedtls_free( xts_ctx );
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f005 fae1 	bl	800c790 <free>
 80071ce:	e000      	b.n	80071d2 <xts_aes_ctx_free+0x22>
        return;
 80071d0:	bf00      	nop
}
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	2102      	movs	r1, #2
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f001 f8cb 	bl	8008386 <mbedtls_gcm_setkey>
 80071f0:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	603b      	str	r3, [r7, #0]
 8007206:	460b      	mov	r3, r1
 8007208:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
 800720a:	f997 100b 	ldrsb.w	r1, [r7, #11]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f7fe fcfc 	bl	8005c10 <mbedtls_camellia_crypt_ecb>
 8007218:	4603      	mov	r3, r0
                               output );
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af02      	add	r7, sp, #8
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	460b      	mov	r3, r1
 8007230:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,
 8007232:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f7fe fe4e 	bl	8005ee4 <mbedtls_camellia_crypt_cbc>
 8007248:	4603      	mov	r3, r0
                               input, output );
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <camellia_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	68b9      	ldr	r1, [r7, #8]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	f7fe fbd8 	bl	8005a18 <mbedtls_camellia_setkey_dec>
 8007268:	4603      	mov	r3, r0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <camellia_setkey_enc_wrap>:

static int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	f7fd fd3c 	bl	8004d00 <mbedtls_camellia_setkey_enc>
 8007288:	4603      	mov	r3, r0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <camellia_ctx_alloc>:

static void * camellia_ctx_alloc( void )
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
 8007298:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800729c:	2001      	movs	r0, #1
 800729e:	f005 fa5b 	bl	800c758 <calloc>
 80072a2:	4603      	mov	r3, r0
 80072a4:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <camellia_ctx_alloc+0x1e>
        return( NULL );
 80072ac:	2300      	movs	r3, #0
 80072ae:	e003      	b.n	80072b8 <camellia_ctx_alloc+0x26>

    mbedtls_camellia_init( ctx );
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7fd fd05 	bl	8004cc0 <mbedtls_camellia_init>

    return( ctx );
 80072b6:	687b      	ldr	r3, [r7, #4]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <camellia_ctx_free>:

static void camellia_ctx_free( void *ctx )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fd fd07 	bl	8004cdc <mbedtls_camellia_free>
    mbedtls_free( ctx );
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f005 fa5e 	bl	800c790 <free>
}
 80072d4:	bf00      	nop
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	2105      	movs	r1, #5
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 f849 	bl	8008386 <mbedtls_gcm_setkey>
 80072f4:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
	...

08007300 <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap( void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007312:	d001      	beq.n	8007318 <chacha20_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007314:	4b07      	ldr	r3, [pc, #28]	@ (8007334 <chacha20_setkey_wrap+0x34>)
 8007316:	e009      	b.n	800732c <chacha20_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chacha20_setkey( (mbedtls_chacha20_context*)ctx, key ) )
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f7ff f850 	bl	80063c0 <mbedtls_chacha20_setkey>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <chacha20_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8007326:	4b03      	ldr	r3, [pc, #12]	@ (8007334 <chacha20_setkey_wrap+0x34>)
 8007328:	e000      	b.n	800732c <chacha20_setkey_wrap+0x2c>

    return( 0 );
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	ffff9f00 	.word	0xffff9f00

08007338 <chacha20_stream_wrap>:

static int chacha20_stream_wrap( void *ctx,  size_t length,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
    int ret;

    ret = mbedtls_chacha20_update( ctx, length, input, output );
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	68b9      	ldr	r1, [r7, #8]
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff f8ff 	bl	8006550 <mbedtls_chacha20_update>
 8007352:	6178      	str	r0, [r7, #20]
    if( ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA )
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800735a:	d101      	bne.n	8007360 <chacha20_stream_wrap+0x28>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800735c:	4b03      	ldr	r3, [pc, #12]	@ (800736c <chacha20_stream_wrap+0x34>)
 800735e:	e000      	b.n	8007362 <chacha20_stream_wrap+0x2a>

    return( ret );
 8007360:	697b      	ldr	r3, [r7, #20]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	ffff9f00 	.word	0xffff9f00

08007370 <chacha20_ctx_alloc>:

static void * chacha20_ctx_alloc( void )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chacha20_context ) );
 8007376:	2184      	movs	r1, #132	@ 0x84
 8007378:	2001      	movs	r0, #1
 800737a:	f005 f9ed 	bl	800c758 <calloc>
 800737e:	4603      	mov	r3, r0
 8007380:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <chacha20_ctx_alloc+0x1c>
        return( NULL );
 8007388:	2300      	movs	r3, #0
 800738a:	e003      	b.n	8007394 <chacha20_ctx_alloc+0x24>

    mbedtls_chacha20_init( ctx );
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7fe fff0 	bl	8006372 <mbedtls_chacha20_init>

    return( ctx );
 8007392:	687b      	ldr	r3, [r7, #4]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <chacha20_ctx_free>:

static void chacha20_ctx_free( void *ctx )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free( (mbedtls_chacha20_context *) ctx );
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7fe fffb 	bl	80063a0 <mbedtls_chacha20_free>
    mbedtls_free( ctx );
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f005 f9f0 	bl	800c790 <free>
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap( void *ctx,
                                   const unsigned char *key,
                                   unsigned int key_bitlen )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ca:	d001      	beq.n	80073d0 <chachapoly_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80073cc:	4b07      	ldr	r3, [pc, #28]	@ (80073ec <chachapoly_setkey_wrap+0x34>)
 80073ce:	e009      	b.n	80073e4 <chachapoly_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chachapoly_setkey( (mbedtls_chachapoly_context*)ctx, key ) )
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff fa69 	bl	80068aa <mbedtls_chachapoly_setkey>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <chachapoly_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80073de:	4b03      	ldr	r3, [pc, #12]	@ (80073ec <chachapoly_setkey_wrap+0x34>)
 80073e0:	e000      	b.n	80073e4 <chachapoly_setkey_wrap+0x2c>

    return( 0 );
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	ffff9f00 	.word	0xffff9f00

080073f0 <chachapoly_ctx_alloc>:

static void * chachapoly_ctx_alloc( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chachapoly_context ) );
 80073f6:	21e8      	movs	r1, #232	@ 0xe8
 80073f8:	2001      	movs	r0, #1
 80073fa:	f005 f9ad 	bl	800c758 <calloc>
 80073fe:	4603      	mov	r3, r0
 8007400:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <chachapoly_ctx_alloc+0x1c>
        return( NULL );
 8007408:	2300      	movs	r3, #0
 800740a:	e003      	b.n	8007414 <chachapoly_ctx_alloc+0x24>

    mbedtls_chachapoly_init( ctx );
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff f9fa 	bl	8006806 <mbedtls_chachapoly_init>

    return( ctx );
 8007412:	687b      	ldr	r3, [r7, #4]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <chachapoly_ctx_free>:

static void chachapoly_ctx_free( void *ctx )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free( (mbedtls_chachapoly_context *) ctx );
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fa15 	bl	8006854 <mbedtls_chachapoly_free>
    mbedtls_free( ctx );
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f005 f9b0 	bl	800c790 <free>
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <mbedtls_ctr_drbg_init>:

/*
 * CTR_DRBG context initialization
 */
void mbedtls_ctr_drbg_init( mbedtls_ctr_drbg_context *ctx )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_ctr_drbg_context ) );
 8007440:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007444:	2100      	movs	r1, #0
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f005 fa58 	bl	800c8fc <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <mbedtls_ctr_drbg_seed_entropy_len>:
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len,
                   size_t entropy_len )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08e      	sub	sp, #56	@ 0x38
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];

    memset( key, 0, MBEDTLS_CTR_DRBG_KEYSIZE );
 8007462:	f107 0314 	add.w	r3, r7, #20
 8007466:	2220      	movs	r2, #32
 8007468:	2100      	movs	r1, #0
 800746a:	4618      	mov	r0, r3
 800746c:	f005 fa46 	bl	800c8fc <memset>

    mbedtls_aes_init( &ctx->aes_ctx );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	3320      	adds	r3, #32
 8007474:	4618      	mov	r0, r3
 8007476:	f7fb fd5e 	bl	8002f36 <mbedtls_aes_init>

    ctx->f_entropy = f_entropy;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    ctx->p_entropy = p_entropy;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c

    ctx->entropy_len = entropy_len;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800748e:	619a      	str	r2, [r3, #24]
    ctx->reseed_interval = MBEDTLS_CTR_DRBG_RESEED_INTERVAL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007496:	61da      	str	r2, [r3, #28]

    /*
     * Initialize with an empty key
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3320      	adds	r3, #32
 800749c:	f107 0114 	add.w	r1, r7, #20
 80074a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7fb fd8d 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 80074aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80074ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <mbedtls_ctr_drbg_seed_entropy_len+0x62>
    {
        return( ret );
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	e00b      	b.n	80074ce <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }

    if( ( ret = mbedtls_ctr_drbg_reseed( ctx, custom, len ) ) != 0 )
 80074b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fa6d 	bl	800799a <mbedtls_ctr_drbg_reseed>
 80074c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80074c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <mbedtls_ctr_drbg_seed_entropy_len+0x78>
    {
        return( ret );
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	e000      	b.n	80074ce <mbedtls_ctr_drbg_seed_entropy_len+0x7a>
    }
    return( 0 );
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3738      	adds	r7, #56	@ 0x38
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <mbedtls_ctr_drbg_seed>:
int mbedtls_ctr_drbg_seed( mbedtls_ctr_drbg_context *ctx,
                   int (*f_entropy)(void *, unsigned char *, size_t),
                   void *p_entropy,
                   const unsigned char *custom,
                   size_t len )
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b086      	sub	sp, #24
 80074da:	af02      	add	r7, sp, #8
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	603b      	str	r3, [r7, #0]
    return( mbedtls_ctr_drbg_seed_entropy_len( ctx, f_entropy, p_entropy, custom, len,
 80074e4:	2330      	movs	r3, #48	@ 0x30
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f7ff ffae 	bl	8007454 <mbedtls_ctr_drbg_seed_entropy_len>
 80074f8:	4603      	mov	r3, r0
                                       MBEDTLS_CTR_DRBG_ENTROPY_LEN ) );
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3710      	adds	r7, #16
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <mbedtls_ctr_drbg_free>:

void mbedtls_ctr_drbg_free( mbedtls_ctr_drbg_context *ctx )
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00a      	beq.n	8007526 <mbedtls_ctr_drbg_free+0x24>
        return;

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
    mbedtls_aes_free( &ctx->aes_ctx );
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3320      	adds	r3, #32
 8007514:	4618      	mov	r0, r3
 8007516:	f7fb fd1c 	bl	8002f52 <mbedtls_aes_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_ctr_drbg_context ) );
 800751a:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fd36 	bl	8008f90 <mbedtls_platform_zeroize>
 8007524:	e000      	b.n	8007528 <mbedtls_ctr_drbg_free+0x26>
        return;
 8007526:	bf00      	nop
}
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <block_cipher_df>:
    ctx->reseed_interval = interval;
}

static int block_cipher_df( unsigned char *output,
                            const unsigned char *data, size_t data_len )
{
 800752e:	b5b0      	push	{r4, r5, r7, lr}
 8007530:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8007534:	af00      	add	r7, sp, #0
 8007536:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800753a:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800753e:	6018      	str	r0, [r3, #0]
 8007540:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007544:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8007548:	6019      	str	r1, [r3, #0]
 800754a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800754e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007552:	601a      	str	r2, [r3, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char key[MBEDTLS_CTR_DRBG_KEYSIZE];
    unsigned char chain[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    unsigned char *p, *iv;
    mbedtls_aes_context aes_ctx;
    int ret = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340

    int i, j;
    size_t buf_len, use_len;

    if( data_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT )
 800755a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800755e:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8007568:	d902      	bls.n	8007570 <block_cipher_df+0x42>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 800756a:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 800756e:	e191      	b.n	8007894 <block_cipher_df+0x366>

    memset( buf, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT + MBEDTLS_CTR_DRBG_BLOCKSIZE + 16 );
 8007570:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 8007574:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
 8007578:	2100      	movs	r1, #0
 800757a:	4618      	mov	r0, r3
 800757c:	f005 f9be 	bl	800c8fc <memset>
    mbedtls_aes_init( &aes_ctx );
 8007580:	f107 0314 	add.w	r3, r7, #20
 8007584:	4618      	mov	r0, r3
 8007586:	f7fb fcd6 	bl	8002f36 <mbedtls_aes_init>
     * IV = Counter (in 32-bits) padded to 16 with zeroes
     * S = Length input string (in 32-bits) || Length of output (in 32-bits) ||
     *     data || 0x80
     *     (Total is padded to a multiple of 16-bytes with zeroes)
     */
    p = buf + MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800758a:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800758e:	3310      	adds	r3, #16
 8007590:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = ( data_len >> 24 ) & 0xff;
 8007594:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007598:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	0e19      	lsrs	r1, r3, #24
 80075a0:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80075a4:	1c5a      	adds	r2, r3, #1
 80075a6:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80075aa:	b2ca      	uxtb	r2, r1
 80075ac:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 16 ) & 0xff;
 80075ae:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80075b2:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	0c19      	lsrs	r1, r3, #16
 80075ba:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80075c4:	b2ca      	uxtb	r2, r1
 80075c6:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len >> 8  ) & 0xff;
 80075c8:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80075cc:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	0a19      	lsrs	r1, r3, #8
 80075d4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80075de:	b2ca      	uxtb	r2, r1
 80075e0:	701a      	strb	r2, [r3, #0]
    *p++ = ( data_len       ) & 0xff;
 80075e2:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80075e6:	1c5a      	adds	r2, r3, #1
 80075e8:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 80075ec:	f507 7252 	add.w	r2, r7, #840	@ 0x348
 80075f0:	f5a2 7251 	sub.w	r2, r2, #836	@ 0x344
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]
    p += 3;
 80075fa:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80075fe:	3303      	adds	r3, #3
 8007600:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
 8007604:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	f8c7 2344 	str.w	r2, [r7, #836]	@ 0x344
 800760e:	2230      	movs	r2, #48	@ 0x30
 8007610:	701a      	strb	r2, [r3, #0]
    memcpy( p, data, data_len );
 8007612:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007616:	f5a3 7251 	sub.w	r2, r3, #836	@ 0x344
 800761a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800761e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	6819      	ldr	r1, [r3, #0]
 8007626:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 800762a:	f005 f9ab 	bl	800c984 <memcpy>
    p[data_len] = 0x80;
 800762e:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007632:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8007636:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4413      	add	r3, r2
 800763e:	2280      	movs	r2, #128	@ 0x80
 8007640:	701a      	strb	r2, [r3, #0]

    buf_len = MBEDTLS_CTR_DRBG_BLOCKSIZE + 8 + data_len + 1;
 8007642:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007646:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3319      	adds	r3, #25
 800764e:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330

    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8007652:	2300      	movs	r3, #0
 8007654:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8007658:	e010      	b.n	800767c <block_cipher_df+0x14e>
        key[i] = i;
 800765a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800765e:	b2d9      	uxtb	r1, r3
 8007660:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007664:	f5a3 7203 	sub.w	r2, r3, #524	@ 0x20c
 8007668:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800766c:	4413      	add	r3, r2
 800766e:	460a      	mov	r2, r1
 8007670:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_KEYSIZE; i++ )
 8007672:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8007676:	3301      	adds	r3, #1
 8007678:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800767c:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8007680:	2b1f      	cmp	r3, #31
 8007682:	ddea      	ble.n	800765a <block_cipher_df+0x12c>

    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, key, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8007684:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8007688:	f107 0314 	add.w	r3, r7, #20
 800768c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007690:	4618      	mov	r0, r3
 8007692:	f7fb fc97 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 8007696:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 800769a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f040 80c5 	bne.w	800782e <block_cipher_df+0x300>
    }

    /*
     * Reduce data to MBEDTLS_CTR_DRBG_SEEDLEN bytes of data
     */
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80076a4:	2300      	movs	r3, #0
 80076a6:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80076aa:	e078      	b.n	800779e <block_cipher_df+0x270>
    {
        p = buf;
 80076ac:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80076b0:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
        memset( chain, 0, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 80076b4:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80076b8:	2210      	movs	r2, #16
 80076ba:	2100      	movs	r1, #0
 80076bc:	4618      	mov	r0, r3
 80076be:	f005 f91d 	bl	800c8fc <memset>
        use_len = buf_len;
 80076c2:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80076c6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

        while( use_len > 0 )
 80076ca:	e043      	b.n	8007754 <block_cipher_df+0x226>
        {
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 80076cc:	2300      	movs	r3, #0
 80076ce:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80076d2:	e01d      	b.n	8007710 <block_cipher_df+0x1e2>
                chain[i] ^= p[i];
 80076d4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80076d8:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80076dc:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80076e0:	4413      	add	r3, r2
 80076e2:	781a      	ldrb	r2, [r3, #0]
 80076e4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80076e8:	f8d7 1344 	ldr.w	r1, [r7, #836]	@ 0x344
 80076ec:	440b      	add	r3, r1
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	4053      	eors	r3, r2
 80076f2:	b2d9      	uxtb	r1, r3
 80076f4:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80076f8:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 80076fc:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8007700:	4413      	add	r3, r2
 8007702:	460a      	mov	r2, r1
 8007704:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MBEDTLS_CTR_DRBG_BLOCKSIZE; i++ )
 8007706:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800770a:	3301      	adds	r3, #1
 800770c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8007710:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8007714:	2b0f      	cmp	r3, #15
 8007716:	dddd      	ble.n	80076d4 <block_cipher_df+0x1a6>
            p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8007718:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800771c:	3310      	adds	r3, #16
 800771e:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
                       MBEDTLS_CTR_DRBG_BLOCKSIZE : use_len;
 8007722:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8007726:	2b10      	cmp	r3, #16
 8007728:	bf28      	it	cs
 800772a:	2310      	movcs	r3, #16
            use_len -= ( use_len >= MBEDTLS_CTR_DRBG_BLOCKSIZE ) ?
 800772c:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8007730:	1ad3      	subs	r3, r2, r3
 8007732:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334

            if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, chain, chain ) ) != 0 )
 8007736:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800773a:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 800773e:	f107 0014 	add.w	r0, r7, #20
 8007742:	2101      	movs	r1, #1
 8007744:	f7fc fda0 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8007748:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 800774c:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 8007750:	2b00      	cmp	r3, #0
 8007752:	d16e      	bne.n	8007832 <block_cipher_df+0x304>
        while( use_len > 0 )
 8007754:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1b7      	bne.n	80076cc <block_cipher_df+0x19e>
            {
                goto exit;
            }
        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800775c:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8007760:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8007764:	441a      	add	r2, r3
 8007766:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800776a:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800776e:	4614      	mov	r4, r2
 8007770:	461d      	mov	r5, r3
 8007772:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007774:	6020      	str	r0, [r4, #0]
 8007776:	6061      	str	r1, [r4, #4]
 8007778:	60a2      	str	r2, [r4, #8]
 800777a:	60e3      	str	r3, [r4, #12]

        /*
         * Update IV
         */
        buf[3]++;
 800777c:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007780:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007784:	78db      	ldrb	r3, [r3, #3]
 8007786:	3301      	adds	r3, #1
 8007788:	b2da      	uxtb	r2, r3
 800778a:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 800778e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007792:	70da      	strb	r2, [r3, #3]
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8007794:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8007798:	3310      	adds	r3, #16
 800779a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 800779e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80077a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80077a4:	dd82      	ble.n	80076ac <block_cipher_df+0x17e>
    }

    /*
     * Do final encryption with reduced data
     */
    if( ( ret = mbedtls_aes_setkey_enc( &aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 80077a6:	f507 71ae 	add.w	r1, r7, #348	@ 0x15c
 80077aa:	f107 0314 	add.w	r3, r7, #20
 80077ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fb fc06 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 80077b8:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 80077bc:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d138      	bne.n	8007836 <block_cipher_df+0x308>
    {
        goto exit;
    }
    iv = tmp + MBEDTLS_CTR_DRBG_KEYSIZE;
 80077c4:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80077c8:	3320      	adds	r3, #32
 80077ca:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
    p = output;
 80077ce:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 80077d2:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80077dc:	2300      	movs	r3, #0
 80077de:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80077e2:	e01f      	b.n	8007824 <block_cipher_df+0x2f6>
    {
        if( ( ret = mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv ) ) != 0 )
 80077e4:	f107 0014 	add.w	r0, r7, #20
 80077e8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80077ec:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80077f0:	2101      	movs	r1, #1
 80077f2:	f7fc fd49 	bl	8004288 <mbedtls_aes_crypt_ecb>
 80077f6:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 80077fa:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d11b      	bne.n	800783a <block_cipher_df+0x30c>
        {
            goto exit;
        }
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 8007802:	2210      	movs	r2, #16
 8007804:	f8d7 132c 	ldr.w	r1, [r7, #812]	@ 0x32c
 8007808:	f8d7 0344 	ldr.w	r0, [r7, #836]	@ 0x344
 800780c:	f005 f8ba 	bl	800c984 <memcpy>
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 8007810:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8007814:	3310      	adds	r3, #16
 8007816:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 800781a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800781e:	3310      	adds	r3, #16
 8007820:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8007824:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8007828:	2b2f      	cmp	r3, #47	@ 0x2f
 800782a:	dddb      	ble.n	80077e4 <block_cipher_df+0x2b6>
    }
exit:
 800782c:	e006      	b.n	800783c <block_cipher_df+0x30e>
        goto exit;
 800782e:	bf00      	nop
 8007830:	e004      	b.n	800783c <block_cipher_df+0x30e>
                goto exit;
 8007832:	bf00      	nop
 8007834:	e002      	b.n	800783c <block_cipher_df+0x30e>
        goto exit;
 8007836:	bf00      	nop
 8007838:	e000      	b.n	800783c <block_cipher_df+0x30e>
            goto exit;
 800783a:	bf00      	nop
    mbedtls_aes_free( &aes_ctx );
 800783c:	f107 0314 	add.w	r3, r7, #20
 8007840:	4618      	mov	r0, r3
 8007842:	f7fb fb86 	bl	8002f52 <mbedtls_aes_free>
    /*
    * tidy up the stack
    */
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8007846:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 800784a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 800784e:	4618      	mov	r0, r3
 8007850:	f001 fb9e 	bl	8008f90 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8007854:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8007858:	2130      	movs	r1, #48	@ 0x30
 800785a:	4618      	mov	r0, r3
 800785c:	f001 fb98 	bl	8008f90 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( key, sizeof( key ) );
 8007860:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8007864:	2120      	movs	r1, #32
 8007866:	4618      	mov	r0, r3
 8007868:	f001 fb92 	bl	8008f90 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( chain, sizeof( chain ) );
 800786c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8007870:	2110      	movs	r1, #16
 8007872:	4618      	mov	r0, r3
 8007874:	f001 fb8c 	bl	8008f90 <mbedtls_platform_zeroize>
    if( 0 != ret )
 8007878:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <block_cipher_df+0x362>
    {
        /*
        * wipe partial seed from memory
        */
        mbedtls_platform_zeroize( output, MBEDTLS_CTR_DRBG_SEEDLEN );
 8007880:	f507 7352 	add.w	r3, r7, #840	@ 0x348
 8007884:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8007888:	2130      	movs	r1, #48	@ 0x30
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	f001 fb80 	bl	8008f90 <mbedtls_platform_zeroize>
    }

    return( ret );
 8007890:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
}
 8007894:	4618      	mov	r0, r3
 8007896:	f507 7752 	add.w	r7, r7, #840	@ 0x348
 800789a:	46bd      	mov	sp, r7
 800789c:	bdb0      	pop	{r4, r5, r7, pc}

0800789e <ctr_drbg_update_internal>:
 *   ctx->aes_ctx = Key
 *   ctx->counter = V
 */
static int ctr_drbg_update_internal( mbedtls_ctr_drbg_context *ctx,
                              const unsigned char data[MBEDTLS_CTR_DRBG_SEEDLEN] )
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b092      	sub	sp, #72	@ 0x48
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
    unsigned char tmp[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = tmp;
 80078a8:	f107 0308 	add.w	r3, r7, #8
 80078ac:	647b      	str	r3, [r7, #68]	@ 0x44
    int i, j;
    int ret = 0;
 80078ae:	2300      	movs	r3, #0
 80078b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    memset( tmp, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 80078b2:	f107 0308 	add.w	r3, r7, #8
 80078b6:	2230      	movs	r2, #48	@ 0x30
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f005 f81e 	bl	800c8fc <memset>

    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 80078c0:	2300      	movs	r3, #0
 80078c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078c4:	e028      	b.n	8007918 <ctr_drbg_update_internal+0x7a>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80078c6:	2310      	movs	r3, #16
 80078c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ca:	e00e      	b.n	80078ea <ctr_drbg_update_internal+0x4c>
            if( ++ctx->counter[i - 1] != 0 )
 80078cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ce:	3b01      	subs	r3, #1
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	5cd2      	ldrb	r2, [r2, r3]
 80078d4:	3201      	adds	r2, #1
 80078d6:	b2d1      	uxtb	r1, r2
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	54d1      	strb	r1, [r2, r3]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	5cd3      	ldrb	r3, [r2, r3]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d106      	bne.n	80078f2 <ctr_drbg_update_internal+0x54>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 80078e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078e6:	3b01      	subs	r3, #1
 80078e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80078ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dced      	bgt.n	80078cc <ctr_drbg_update_internal+0x2e>
 80078f0:	e000      	b.n	80078f4 <ctr_drbg_update_internal+0x56>
                break;
 80078f2:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, p ) ) != 0 )
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f103 0020 	add.w	r0, r3, #32
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078fe:	2101      	movs	r1, #1
 8007900:	f7fc fcc2 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8007904:	63b8      	str	r0, [r7, #56]	@ 0x38
 8007906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007908:	2b00      	cmp	r3, #0
 800790a:	d138      	bne.n	800797e <ctr_drbg_update_internal+0xe0>
            goto exit;

        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
 800790c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800790e:	3310      	adds	r3, #16
 8007910:	647b      	str	r3, [r7, #68]	@ 0x44
    for( j = 0; j < MBEDTLS_CTR_DRBG_SEEDLEN; j += MBEDTLS_CTR_DRBG_BLOCKSIZE )
 8007912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007914:	3310      	adds	r3, #16
 8007916:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800791a:	2b2f      	cmp	r3, #47	@ 0x2f
 800791c:	ddd3      	ble.n	80078c6 <ctr_drbg_update_internal+0x28>
    }

    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 800791e:	2300      	movs	r3, #0
 8007920:	643b      	str	r3, [r7, #64]	@ 0x40
 8007922:	e013      	b.n	800794c <ctr_drbg_update_internal+0xae>
        tmp[i] ^= data[i];
 8007924:	f107 0208 	add.w	r2, r7, #8
 8007928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800792a:	4413      	add	r3, r2
 800792c:	781a      	ldrb	r2, [r3, #0]
 800792e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	440b      	add	r3, r1
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	4053      	eors	r3, r2
 8007938:	b2d9      	uxtb	r1, r3
 800793a:	f107 0208 	add.w	r2, r7, #8
 800793e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007940:	4413      	add	r3, r2
 8007942:	460a      	mov	r2, r1
 8007944:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < MBEDTLS_CTR_DRBG_SEEDLEN; i++ )
 8007946:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007948:	3301      	adds	r3, #1
 800794a:	643b      	str	r3, [r7, #64]	@ 0x40
 800794c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800794e:	2b2f      	cmp	r3, #47	@ 0x2f
 8007950:	dde8      	ble.n	8007924 <ctr_drbg_update_internal+0x86>

    /*
     * Update key and counter
     */
    if( ( ret = mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS ) ) != 0 )
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	3320      	adds	r3, #32
 8007956:	f107 0108 	add.w	r1, r7, #8
 800795a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800795e:	4618      	mov	r0, r3
 8007960:	f7fb fb30 	bl	8002fc4 <mbedtls_aes_setkey_enc>
 8007964:	63b8      	str	r0, [r7, #56]	@ 0x38
 8007966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <ctr_drbg_update_internal+0xe4>
        goto exit;
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f107 0308 	add.w	r3, r7, #8
 8007972:	3320      	adds	r3, #32
 8007974:	2210      	movs	r2, #16
 8007976:	4619      	mov	r1, r3
 8007978:	f005 f804 	bl	800c984 <memcpy>
 800797c:	e002      	b.n	8007984 <ctr_drbg_update_internal+0xe6>
            goto exit;
 800797e:	bf00      	nop
 8007980:	e000      	b.n	8007984 <ctr_drbg_update_internal+0xe6>
        goto exit;
 8007982:	bf00      	nop

exit:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8007984:	f107 0308 	add.w	r3, r7, #8
 8007988:	2130      	movs	r1, #48	@ 0x30
 800798a:	4618      	mov	r0, r3
 800798c:	f001 fb00 	bl	8008f90 <mbedtls_platform_zeroize>
    return( ret );
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007992:	4618      	mov	r0, r3
 8007994:	3748      	adds	r7, #72	@ 0x48
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <mbedtls_ctr_drbg_reseed>:
 * and with output
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_reseed( mbedtls_ctr_drbg_context *ctx,
                     const unsigned char *additional, size_t len )
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b0e6      	sub	sp, #408	@ 0x198
 800799e:	af00      	add	r7, sp, #0
 80079a0:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80079a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80079a8:	6018      	str	r0, [r3, #0]
 80079aa:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80079ae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80079b2:	6019      	str	r1, [r3, #0]
 80079b4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80079b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80079bc:	601a      	str	r2, [r3, #0]
    unsigned char seed[MBEDTLS_CTR_DRBG_MAX_SEED_INPUT];
    size_t seedlen = 0;
 80079be:	2300      	movs	r3, #0
 80079c0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    int ret;

    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80079c4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80079c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80079d4:	d80e      	bhi.n	80079f4 <mbedtls_ctr_drbg_reseed+0x5a>
        len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT - ctx->entropy_len )
 80079d6:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 80079da:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f5c3 73c0 	rsb	r3, r3, #384	@ 0x180
    if( ctx->entropy_len > MBEDTLS_CTR_DRBG_MAX_SEED_INPUT ||
 80079e6:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 80079ea:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d902      	bls.n	80079fa <mbedtls_ctr_drbg_reseed+0x60>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 80079f4:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 80079f8:	e08b      	b.n	8007b12 <mbedtls_ctr_drbg_reseed+0x178>

    memset( seed, 0, MBEDTLS_CTR_DRBG_MAX_SEED_INPUT );
 80079fa:	f107 0310 	add.w	r3, r7, #16
 80079fe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f004 ff79 	bl	800c8fc <memset>

    /*
     * Gather entropy_len bytes of entropy to seed state
     */
    if( 0 != ctx->f_entropy( ctx->p_entropy, seed,
 8007a0a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007a0e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8007a18:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8007a1c:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	f8d2 013c 	ldr.w	r0, [r2, #316]	@ 0x13c
 8007a26:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8007a2a:	f5a2 72c6 	sub.w	r2, r2, #396	@ 0x18c
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	6992      	ldr	r2, [r2, #24]
 8007a32:	f107 0110 	add.w	r1, r7, #16
 8007a36:	4798      	blx	r3
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <mbedtls_ctr_drbg_reseed+0xaa>
                             ctx->entropy_len ) )
    {
        return( MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED );
 8007a3e:	f06f 0333 	mvn.w	r3, #51	@ 0x33
 8007a42:	e066      	b.n	8007b12 <mbedtls_ctr_drbg_reseed+0x178>
    }

    seedlen += ctx->entropy_len;
 8007a44:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007a48:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699b      	ldr	r3, [r3, #24]
 8007a50:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8007a54:	4413      	add	r3, r2
 8007a56:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    /*
     * Add additional data
     */
    if( additional && len )
 8007a5a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007a5e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d021      	beq.n	8007aac <mbedtls_ctr_drbg_reseed+0x112>
 8007a68:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007a6c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d01a      	beq.n	8007aac <mbedtls_ctr_drbg_reseed+0x112>
    {
        memcpy( seed + seedlen, additional, len );
 8007a76:	f107 0210 	add.w	r2, r7, #16
 8007a7a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007a7e:	18d0      	adds	r0, r2, r3
 8007a80:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007a84:	f5a3 72ca 	sub.w	r2, r3, #404	@ 0x194
 8007a88:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007a8c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	f004 ff76 	bl	800c984 <memcpy>
        seedlen += len;
 8007a98:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007a9c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8007aa0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    }

    /*
     * Reduce to 384 bits
     */
    if( ( ret = block_cipher_df( seed, seed, seedlen ) ) != 0 )
 8007aac:	f107 0110 	add.w	r1, r7, #16
 8007ab0:	f107 0310 	add.w	r3, r7, #16
 8007ab4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff fd38 	bl	800752e <block_cipher_df>
 8007abe:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8007ac2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d117      	bne.n	8007afa <mbedtls_ctr_drbg_reseed+0x160>
        goto exit;

    /*
     * Update state
     */
    if( ( ret = ctr_drbg_update_internal( ctx, seed ) ) != 0 )
 8007aca:	f107 0210 	add.w	r2, r7, #16
 8007ace:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007ad2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	6818      	ldr	r0, [r3, #0]
 8007ada:	f7ff fee0 	bl	800789e <ctr_drbg_update_internal>
 8007ade:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
 8007ae2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d109      	bne.n	8007afe <mbedtls_ctr_drbg_reseed+0x164>
        goto exit;
    ctx->reseed_counter = 1;
 8007aea:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8007aee:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2201      	movs	r2, #1
 8007af6:	611a      	str	r2, [r3, #16]
 8007af8:	e002      	b.n	8007b00 <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <mbedtls_ctr_drbg_reseed+0x166>
        goto exit;
 8007afe:	bf00      	nop

exit:
    mbedtls_platform_zeroize( seed, sizeof( seed ) );
 8007b00:	f107 0310 	add.w	r3, r7, #16
 8007b04:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fa41 	bl	8008f90 <mbedtls_platform_zeroize>
    return( ret );
 8007b0e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <mbedtls_ctr_drbg_random_with_add>:
 *   ctx contains new_working_state
 */
int mbedtls_ctr_drbg_random_with_add( void *p_rng,
                              unsigned char *output, size_t output_len,
                              const unsigned char *additional, size_t add_len )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b09a      	sub	sp, #104	@ 0x68
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	65bb      	str	r3, [r7, #88]	@ 0x58
    unsigned char add_input[MBEDTLS_CTR_DRBG_SEEDLEN];
    unsigned char *p = output;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	667b      	str	r3, [r7, #100]	@ 0x64
    unsigned char tmp[MBEDTLS_CTR_DRBG_BLOCKSIZE];
    int i;
    size_t use_len;

    if( output_len > MBEDTLS_CTR_DRBG_MAX_REQUEST )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b3c:	d902      	bls.n	8007b44 <mbedtls_ctr_drbg_random_with_add+0x28>
        return( MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG );
 8007b3e:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 8007b42:	e09c      	b.n	8007c7e <mbedtls_ctr_drbg_random_with_add+0x162>

    if( add_len > MBEDTLS_CTR_DRBG_MAX_INPUT )
 8007b44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b4a:	d902      	bls.n	8007b52 <mbedtls_ctr_drbg_random_with_add+0x36>
        return( MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG );
 8007b4c:	f06f 0337 	mvn.w	r3, #55	@ 0x37
 8007b50:	e095      	b.n	8007c7e <mbedtls_ctr_drbg_random_with_add+0x162>

    memset( add_input, 0, MBEDTLS_CTR_DRBG_SEEDLEN );
 8007b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b56:	2230      	movs	r2, #48	@ 0x30
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f004 fece 	bl	800c8fc <memset>

    if( ctx->reseed_counter > ctx->reseed_interval ||
 8007b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b62:	691a      	ldr	r2, [r3, #16]
 8007b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	dc03      	bgt.n	8007b74 <mbedtls_ctr_drbg_random_with_add+0x58>
        ctx->prediction_resistance )
 8007b6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b6e:	695b      	ldr	r3, [r3, #20]
    if( ctx->reseed_counter > ctx->reseed_interval ||
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00c      	beq.n	8007b8e <mbedtls_ctr_drbg_random_with_add+0x72>
    {
        if( ( ret = mbedtls_ctr_drbg_reseed( ctx, additional, add_len ) ) != 0 )
 8007b74:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007b7a:	f7ff ff0e 	bl	800799a <mbedtls_ctr_drbg_reseed>
 8007b7e:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8007b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <mbedtls_ctr_drbg_random_with_add+0x6e>
        {
            return( ret );
 8007b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b88:	e079      	b.n	8007c7e <mbedtls_ctr_drbg_random_with_add+0x162>
        }
        add_len = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	673b      	str	r3, [r7, #112]	@ 0x70
    }

    if( add_len > 0 )
 8007b8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d04d      	beq.n	8007c30 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        if( ( ret = block_cipher_df( add_input, additional, add_len ) ) != 0 )
 8007b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b98:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff fcc6 	bl	800752e <block_cipher_df>
 8007ba2:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8007ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d155      	bne.n	8007c56 <mbedtls_ctr_drbg_random_with_add+0x13a>
            goto exit;
        if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8007baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007bb2:	f7ff fe74 	bl	800789e <ctr_drbg_update_internal>
 8007bb6:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8007bb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d14d      	bne.n	8007c5a <mbedtls_ctr_drbg_random_with_add+0x13e>
            goto exit;
    }

    while( output_len > 0 )
 8007bbe:	e037      	b.n	8007c30 <mbedtls_ctr_drbg_random_with_add+0x114>
    {
        /*
         * Increase counter
         */
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bc4:	e00e      	b.n	8007be4 <mbedtls_ctr_drbg_random_with_add+0xc8>
            if( ++ctx->counter[i - 1] != 0 )
 8007bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bc8:	3b01      	subs	r3, #1
 8007bca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bcc:	5cd2      	ldrb	r2, [r2, r3]
 8007bce:	3201      	adds	r2, #1
 8007bd0:	b2d1      	uxtb	r1, r2
 8007bd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bd4:	54d1      	strb	r1, [r2, r3]
 8007bd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bd8:	5cd3      	ldrb	r3, [r2, r3]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <mbedtls_ctr_drbg_random_with_add+0xd0>
        for( i = MBEDTLS_CTR_DRBG_BLOCKSIZE; i > 0; i-- )
 8007bde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007be0:	3b01      	subs	r3, #1
 8007be2:	663b      	str	r3, [r7, #96]	@ 0x60
 8007be4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dced      	bgt.n	8007bc6 <mbedtls_ctr_drbg_random_with_add+0xaa>
 8007bea:	e000      	b.n	8007bee <mbedtls_ctr_drbg_random_with_add+0xd2>
                break;
 8007bec:	bf00      	nop

        /*
         * Crypt counter block
         */
        if( ( ret = mbedtls_aes_crypt_ecb( &ctx->aes_ctx, MBEDTLS_AES_ENCRYPT, ctx->counter, tmp ) ) != 0 )
 8007bee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007bf0:	f103 0020 	add.w	r0, r3, #32
 8007bf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007bf6:	f107 0314 	add.w	r3, r7, #20
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	f7fc fb44 	bl	8004288 <mbedtls_aes_crypt_ecb>
 8007c00:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8007c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d12a      	bne.n	8007c5e <mbedtls_ctr_drbg_random_with_add+0x142>
            goto exit;

        use_len = ( output_len > MBEDTLS_CTR_DRBG_BLOCKSIZE ) ? MBEDTLS_CTR_DRBG_BLOCKSIZE :
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	bf28      	it	cs
 8007c0e:	2310      	movcs	r3, #16
 8007c10:	657b      	str	r3, [r7, #84]	@ 0x54
                                                       output_len;
        /*
         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
 8007c12:	f107 0314 	add.w	r3, r7, #20
 8007c16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8007c1c:	f004 feb2 	bl	800c984 <memcpy>
        p += use_len;
 8007c20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c24:	4413      	add	r3, r2
 8007c26:	667b      	str	r3, [r7, #100]	@ 0x64
        output_len -= use_len;
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	607b      	str	r3, [r7, #4]
    while( output_len > 0 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1c4      	bne.n	8007bc0 <mbedtls_ctr_drbg_random_with_add+0xa4>
    }

    if( ( ret = ctr_drbg_update_internal( ctx, add_input ) ) != 0 )
 8007c36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007c3e:	f7ff fe2e 	bl	800789e <ctr_drbg_update_internal>
 8007c42:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8007c44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10b      	bne.n	8007c62 <mbedtls_ctr_drbg_random_with_add+0x146>
        goto exit;

    ctx->reseed_counter++;
 8007c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c52:	611a      	str	r2, [r3, #16]
 8007c54:	e006      	b.n	8007c64 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8007c56:	bf00      	nop
 8007c58:	e004      	b.n	8007c64 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8007c5a:	bf00      	nop
 8007c5c:	e002      	b.n	8007c64 <mbedtls_ctr_drbg_random_with_add+0x148>
            goto exit;
 8007c5e:	bf00      	nop
 8007c60:	e000      	b.n	8007c64 <mbedtls_ctr_drbg_random_with_add+0x148>
        goto exit;
 8007c62:	bf00      	nop

exit:
    mbedtls_platform_zeroize( add_input, sizeof( add_input ) );
 8007c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c68:	2130      	movs	r1, #48	@ 0x30
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 f990 	bl	8008f90 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8007c70:	f107 0314 	add.w	r3, r7, #20
 8007c74:	2110      	movs	r1, #16
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 f98a 	bl	8008f90 <mbedtls_platform_zeroize>
    return( 0 );
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3768      	adds	r7, #104	@ 0x68
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <mbedtls_ctr_drbg_random>:

int mbedtls_ctr_drbg_random( void *p_rng, unsigned char *output, size_t output_len )
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b088      	sub	sp, #32
 8007c8a:	af02      	add	r7, sp, #8
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	607a      	str	r2, [r7, #4]
    int ret;
    mbedtls_ctr_drbg_context *ctx = (mbedtls_ctr_drbg_context *) p_rng;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	617b      	str	r3, [r7, #20]
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    ret = mbedtls_ctr_drbg_random_with_add( ctx, output, output_len, NULL, 0 );
 8007c96:	2300      	movs	r3, #0
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	6978      	ldr	r0, [r7, #20]
 8007ca2:	f7ff ff3b 	bl	8007b1c <mbedtls_ctr_drbg_random_with_add>
 8007ca6:	6138      	str	r0, [r7, #16]
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 8007ca8:	693b      	ldr	r3, [r7, #16]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <mbedtls_entropy_init>:
#endif

#define ENTROPY_MAX_LOOP    256     /**< Maximum amount to loop before error */

void mbedtls_entropy_init( mbedtls_entropy_context *ctx )
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
    ctx->source_count = 0;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    memset( ctx->source, 0, sizeof( ctx->source ) );
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	33e4      	adds	r3, #228	@ 0xe4
 8007cc6:	2228      	movs	r2, #40	@ 0x28
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f004 fe16 	bl	800c8fc <memset>

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &ctx->mutex );
#endif

    ctx->accumulator_started = 0;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_init( &ctx->accumulator );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 fe50 	bl	8009980 <mbedtls_sha512_init>
                                MBEDTLS_ENTROPY_BLOCK_SIZE,
                                MBEDTLS_ENTROPY_SOURCE_STRONG );
    ctx->initial_entropy_run = 0;
#endif
#endif /* MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES */
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <mbedtls_entropy_free>:

void mbedtls_entropy_free( mbedtls_entropy_context *ctx )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
#endif
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    mbedtls_sha512_free( &ctx->accumulator );
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3308      	adds	r3, #8
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 fe50 	bl	800999a <mbedtls_sha512_free>
    mbedtls_sha256_free( &ctx->accumulator );
#endif
#if defined(MBEDTLS_ENTROPY_NV_SEED)
    ctx->initial_entropy_run = 0;
#endif
    ctx->source_count = 0;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    mbedtls_platform_zeroize( ctx->source, sizeof( ctx->source ) );
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	33e4      	adds	r3, #228	@ 0xe4
 8007d06:	2128      	movs	r1, #40	@ 0x28
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f001 f941 	bl	8008f90 <mbedtls_platform_zeroize>
    ctx->accumulator_started = 0;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <entropy_update>:
/*
 * Entropy accumulator update
 */
static int entropy_update( mbedtls_entropy_context *ctx, unsigned char source_id,
                           const unsigned char *data, size_t len )
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b098      	sub	sp, #96	@ 0x60
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	607a      	str	r2, [r7, #4]
 8007d26:	603b      	str	r3, [r7, #0]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	72fb      	strb	r3, [r7, #11]
    unsigned char header[2];
    unsigned char tmp[MBEDTLS_ENTROPY_BLOCK_SIZE];
    size_t use_len = len;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const unsigned char *p = data;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	65bb      	str	r3, [r7, #88]	@ 0x58
    int ret = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	657b      	str	r3, [r7, #84]	@ 0x54

    if( use_len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8007d38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d3a:	2b40      	cmp	r3, #64	@ 0x40
 8007d3c:	d90f      	bls.n	8007d5e <entropy_update+0x42>
    {
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
        if( ( ret = mbedtls_sha512_ret( data, len, tmp, 0 ) ) != 0 )
 8007d3e:	f107 0210 	add.w	r2, r7, #16
 8007d42:	2300      	movs	r3, #0
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f004 fcc6 	bl	800c6d8 <mbedtls_sha512_ret>
 8007d4c:	6578      	str	r0, [r7, #84]	@ 0x54
 8007d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d131      	bne.n	8007db8 <entropy_update+0x9c>
            goto cleanup;
#else
        if( ( ret = mbedtls_sha256_ret( data, len, tmp, 0 ) ) != 0 )
            goto cleanup;
#endif
        p = tmp;
 8007d54:	f107 0310 	add.w	r3, r7, #16
 8007d58:	65bb      	str	r3, [r7, #88]	@ 0x58
        use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;
 8007d5a:	2340      	movs	r3, #64	@ 0x40
 8007d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    header[0] = source_id;
 8007d5e:	7afb      	ldrb	r3, [r7, #11]
 8007d60:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
    header[1] = use_len & 0xFF;
 8007d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
     * Start the accumulator if this has not already happened. Note that
     * it is sufficient to start the accumulator here only because all calls to
     * gather entropy eventually execute this code.
     */
#if defined(MBEDTLS_ENTROPY_SHA512_ACCUMULATOR)
    if( ctx->accumulator_started == 0 &&
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d109      	bne.n	8007d88 <entropy_update+0x6c>
        ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3308      	adds	r3, #8
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fe20 	bl	80099c0 <mbedtls_sha512_starts_ret>
 8007d80:	6578      	str	r0, [r7, #84]	@ 0x54
    if( ctx->accumulator_started == 0 &&
 8007d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d119      	bne.n	8007dbc <entropy_update+0xa0>
        goto cleanup;
    else
        ctx->accumulator_started = 1;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	601a      	str	r2, [r3, #0]
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, header, 2 ) ) != 0 )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3308      	adds	r3, #8
 8007d92:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8007d96:	2202      	movs	r2, #2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f003 ff93 	bl	800bcc4 <mbedtls_sha512_update_ret>
 8007d9e:	6578      	str	r0, [r7, #84]	@ 0x54
 8007da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10c      	bne.n	8007dc0 <entropy_update+0xa4>
        goto cleanup;
    ret = mbedtls_sha512_update_ret( &ctx->accumulator, p, use_len );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3308      	adds	r3, #8
 8007daa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007dac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007dae:	4618      	mov	r0, r3
 8007db0:	f003 ff88 	bl	800bcc4 <mbedtls_sha512_update_ret>
 8007db4:	6578      	str	r0, [r7, #84]	@ 0x54
 8007db6:	e004      	b.n	8007dc2 <entropy_update+0xa6>
            goto cleanup;
 8007db8:	bf00      	nop
 8007dba:	e002      	b.n	8007dc2 <entropy_update+0xa6>
        goto cleanup;
 8007dbc:	bf00      	nop
 8007dbe:	e000      	b.n	8007dc2 <entropy_update+0xa6>
        goto cleanup;
 8007dc0:	bf00      	nop
        goto cleanup;
    ret = mbedtls_sha256_update_ret( &ctx->accumulator, p, use_len );
#endif

cleanup:
    mbedtls_platform_zeroize( tmp, sizeof( tmp ) );
 8007dc2:	f107 0310 	add.w	r3, r7, #16
 8007dc6:	2140      	movs	r1, #64	@ 0x40
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f001 f8e1 	bl	8008f90 <mbedtls_platform_zeroize>

    return( ret );
 8007dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3760      	adds	r7, #96	@ 0x60
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <entropy_gather_internal>:

/*
 * Run through the different sources to add entropy to our accumulator
 */
static int entropy_gather_internal( mbedtls_entropy_context *ctx )
{
 8007dd8:	b590      	push	{r4, r7, lr}
 8007dda:	b0a7      	sub	sp, #156	@ 0x9c
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
    int ret, i, have_one_strong = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    unsigned char buf[MBEDTLS_ENTROPY_MAX_GATHER];
    size_t olen;

    if( ctx->source_count == 0 )
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <entropy_gather_internal+0x1e>
        return( MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED );
 8007df0:	f06f 033f 	mvn.w	r3, #63	@ 0x3f
 8007df4:	e07f      	b.n	8007ef6 <entropy_gather_internal+0x11e>

    /*
     * Run through our entropy sources
     */
    for( i = 0; i < ctx->source_count; i++ )
 8007df6:	2300      	movs	r3, #0
 8007df8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007dfc:	e060      	b.n	8007ec0 <entropy_gather_internal+0xe8>
    {
        if( ctx->source[i].strong == MBEDTLS_ENTROPY_SOURCE_STRONG )
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007e04:	4613      	mov	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	33f4      	adds	r3, #244	@ 0xf4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d102      	bne.n	8007e1c <entropy_gather_internal+0x44>
            have_one_strong = 1;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

        olen = 0;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60bb      	str	r3, [r7, #8]
        if( ( ret = ctx->source[i].f_source( ctx->source[i].p_source,
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	440b      	add	r3, r1
 8007e30:	33e4      	adds	r3, #228	@ 0xe4
 8007e32:	681c      	ldr	r4, [r3, #0]
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	33e8      	adds	r3, #232	@ 0xe8
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	f107 0308 	add.w	r3, r7, #8
 8007e4c:	f107 010c 	add.w	r1, r7, #12
 8007e50:	2280      	movs	r2, #128	@ 0x80
 8007e52:	47a0      	blx	r4
 8007e54:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8007e58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d13f      	bne.n	8007ee0 <entropy_gather_internal+0x108>
        }

        /*
         * Add if we actually gathered something
         */
        if( olen > 0 )
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d027      	beq.n	8007eb6 <entropy_gather_internal+0xde>
        {
            if( ( ret = entropy_update( ctx, (unsigned char) i,
 8007e66:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e6a:	b2d9      	uxtb	r1, r3
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f107 020c 	add.w	r2, r7, #12
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7ff ff52 	bl	8007d1c <entropy_update>
 8007e78:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 8007e7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d002      	beq.n	8007e8a <entropy_gather_internal+0xb2>
                                        buf, olen ) ) != 0 )
                return( ret );
 8007e84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e88:	e035      	b.n	8007ef6 <entropy_gather_internal+0x11e>
            ctx->source[i].size += olen;
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	33ec      	adds	r3, #236	@ 0xec
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	18d1      	adds	r1, r2, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4403      	add	r3, r0
 8007eb2:	33ec      	adds	r3, #236	@ 0xec
 8007eb4:	6019      	str	r1, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 8007eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eba:	3301      	adds	r3, #1
 8007ebc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007ec6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	db97      	blt.n	8007dfe <entropy_gather_internal+0x26>
        }
    }

    if( have_one_strong == 0 )
 8007ece:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d106      	bne.n	8007ee4 <entropy_gather_internal+0x10c>
        ret = MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE;
 8007ed6:	f06f 033c 	mvn.w	r3, #60	@ 0x3c
 8007eda:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ede:	e002      	b.n	8007ee6 <entropy_gather_internal+0x10e>
            goto cleanup;
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <entropy_gather_internal+0x10e>

cleanup:
 8007ee4:	bf00      	nop
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8007ee6:	f107 030c 	add.w	r3, r7, #12
 8007eea:	2180      	movs	r1, #128	@ 0x80
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 f84f 	bl	8008f90 <mbedtls_platform_zeroize>

    return( ret );
 8007ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	379c      	adds	r7, #156	@ 0x9c
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd90      	pop	{r4, r7, pc}

08007efe <mbedtls_entropy_func>:

    return( ret );
}

int mbedtls_entropy_func( void *data, unsigned char *output, size_t len )
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b09a      	sub	sp, #104	@ 0x68
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	60f8      	str	r0, [r7, #12]
 8007f06:	60b9      	str	r1, [r7, #8]
 8007f08:	607a      	str	r2, [r7, #4]
    int ret, count = 0, i, done;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	663b      	str	r3, [r7, #96]	@ 0x60
    mbedtls_entropy_context *ctx = (mbedtls_entropy_context *) data;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	657b      	str	r3, [r7, #84]	@ 0x54
    unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];

    if( len > MBEDTLS_ENTROPY_BLOCK_SIZE )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b40      	cmp	r3, #64	@ 0x40
 8007f16:	d902      	bls.n	8007f1e <mbedtls_entropy_func+0x20>
        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
 8007f18:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 8007f1c:	e0a7      	b.n	800806e <mbedtls_entropy_func+0x170>
    /*
     * Always gather extra entropy before a call
     */
    do
    {
        if( count++ > ENTROPY_MAX_LOOP )
 8007f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	663a      	str	r2, [r7, #96]	@ 0x60
 8007f24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f28:	dd03      	ble.n	8007f32 <mbedtls_entropy_func+0x34>
        {
            ret = MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
 8007f2a:	f06f 033b 	mvn.w	r3, #59	@ 0x3b
 8007f2e:	667b      	str	r3, [r7, #100]	@ 0x64
            goto exit;
 8007f30:	e096      	b.n	8008060 <mbedtls_entropy_func+0x162>
        }

        if( ( ret = entropy_gather_internal( ctx ) ) != 0 )
 8007f32:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007f34:	f7ff ff50 	bl	8007dd8 <entropy_gather_internal>
 8007f38:	6678      	str	r0, [r7, #100]	@ 0x64
 8007f3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	f040 8086 	bne.w	800804e <mbedtls_entropy_func+0x150>
            goto exit;

        done = 1;
 8007f42:	2301      	movs	r3, #1
 8007f44:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 8007f46:	2300      	movs	r3, #0
 8007f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f4a:	e018      	b.n	8007f7e <mbedtls_entropy_func+0x80>
            if( ctx->source[i].size < ctx->source[i].threshold )
 8007f4c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f4e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	33ec      	adds	r3, #236	@ 0xec
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007f60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4403      	add	r3, r0
 8007f6c:	33f0      	adds	r3, #240	@ 0xf0
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4299      	cmp	r1, r3
 8007f72:	d201      	bcs.n	8007f78 <mbedtls_entropy_func+0x7a>
                done = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	65bb      	str	r3, [r7, #88]	@ 0x58
        for( i = 0; i < ctx->source_count; i++ )
 8007f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007f84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f86:	429a      	cmp	r2, r3
 8007f88:	dbe0      	blt.n	8007f4c <mbedtls_entropy_func+0x4e>
    }
    while( ! done );
 8007f8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d0c6      	beq.n	8007f1e <mbedtls_entropy_func+0x20>

    memset( buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE );
 8007f90:	f107 0314 	add.w	r3, r7, #20
 8007f94:	2240      	movs	r2, #64	@ 0x40
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f004 fcaf 	bl	800c8fc <memset>
    /*
     * Note that at this stage it is assumed that the accumulator was started
     * in a previous call to entropy_update(). If this is not guaranteed, the
     * code below will fail.
     */
    if( ( ret = mbedtls_sha512_finish_ret( &ctx->accumulator, buf ) ) != 0 )
 8007f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	f107 0214 	add.w	r2, r7, #20
 8007fa6:	4611      	mov	r1, r2
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f003 ff16 	bl	800bdda <mbedtls_sha512_finish_ret>
 8007fae:	6678      	str	r0, [r7, #100]	@ 0x64
 8007fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d14d      	bne.n	8008052 <mbedtls_entropy_func+0x154>
        goto exit;

    /*
     * Reset accumulator and counters and recycle existing entropy
     */
    mbedtls_sha512_free( &ctx->accumulator );
 8007fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb8:	3308      	adds	r3, #8
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 fced 	bl	800999a <mbedtls_sha512_free>
    mbedtls_sha512_init( &ctx->accumulator );
 8007fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f001 fcdb 	bl	8009980 <mbedtls_sha512_init>
    if( ( ret = mbedtls_sha512_starts_ret( &ctx->accumulator, 0 ) ) != 0 )
 8007fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fcc:	3308      	adds	r3, #8
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fcf5 	bl	80099c0 <mbedtls_sha512_starts_ret>
 8007fd6:	6678      	str	r0, [r7, #100]	@ 0x64
 8007fd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d13b      	bne.n	8008056 <mbedtls_entropy_func+0x158>
        goto exit;
    if( ( ret = mbedtls_sha512_update_ret( &ctx->accumulator, buf,
 8007fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe0:	3308      	adds	r3, #8
 8007fe2:	f107 0114 	add.w	r1, r7, #20
 8007fe6:	2240      	movs	r2, #64	@ 0x40
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f003 fe6b 	bl	800bcc4 <mbedtls_sha512_update_ret>
 8007fee:	6678      	str	r0, [r7, #100]	@ 0x64
 8007ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d131      	bne.n	800805a <mbedtls_entropy_func+0x15c>
        goto exit;

    /*
     * Perform second SHA-512 on entropy
     */
    if( ( ret = mbedtls_sha512_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
 8007ff6:	f107 0214 	add.w	r2, r7, #20
 8007ffa:	f107 0014 	add.w	r0, r7, #20
 8007ffe:	2300      	movs	r3, #0
 8008000:	2140      	movs	r1, #64	@ 0x40
 8008002:	f004 fb69 	bl	800c6d8 <mbedtls_sha512_ret>
 8008006:	6678      	str	r0, [r7, #100]	@ 0x64
 8008008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800800a:	2b00      	cmp	r3, #0
 800800c:	d127      	bne.n	800805e <mbedtls_entropy_func+0x160>
    if( ( ret = mbedtls_sha256_ret( buf, MBEDTLS_ENTROPY_BLOCK_SIZE,
                                    buf, 0 ) ) != 0 )
        goto exit;
#endif /* MBEDTLS_ENTROPY_SHA512_ACCUMULATOR */

    for( i = 0; i < ctx->source_count; i++ )
 800800e:	2300      	movs	r3, #0
 8008010:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008012:	e00c      	b.n	800802e <mbedtls_entropy_func+0x130>
        ctx->source[i].size = 0;
 8008014:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008016:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	33ec      	adds	r3, #236	@ 0xec
 8008024:	2200      	movs	r2, #0
 8008026:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ctx->source_count; i++ )
 8008028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800802a:	3301      	adds	r3, #1
 800802c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800802e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008034:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008036:	429a      	cmp	r2, r3
 8008038:	dbec      	blt.n	8008014 <mbedtls_entropy_func+0x116>

    memcpy( output, buf, len );
 800803a:	f107 0314 	add.w	r3, r7, #20
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4619      	mov	r1, r3
 8008042:	68b8      	ldr	r0, [r7, #8]
 8008044:	f004 fc9e 	bl	800c984 <memcpy>

    ret = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	667b      	str	r3, [r7, #100]	@ 0x64
 800804c:	e008      	b.n	8008060 <mbedtls_entropy_func+0x162>
            goto exit;
 800804e:	bf00      	nop
 8008050:	e006      	b.n	8008060 <mbedtls_entropy_func+0x162>
        goto exit;
 8008052:	bf00      	nop
 8008054:	e004      	b.n	8008060 <mbedtls_entropy_func+0x162>
        goto exit;
 8008056:	bf00      	nop
 8008058:	e002      	b.n	8008060 <mbedtls_entropy_func+0x162>
        goto exit;
 800805a:	bf00      	nop
 800805c:	e000      	b.n	8008060 <mbedtls_entropy_func+0x162>
        goto exit;
 800805e:	bf00      	nop

exit:
    mbedtls_platform_zeroize( buf, sizeof( buf ) );
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	2140      	movs	r1, #64	@ 0x40
 8008066:	4618      	mov	r0, r3
 8008068:	f000 ff92 	bl	8008f90 <mbedtls_platform_zeroize>
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    return( ret );
 800806c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 800806e:	4618      	mov	r0, r3
 8008070:	3768      	adds	r7, #104	@ 0x68
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 800807e:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8008082:	2100      	movs	r1, #0
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f004 fc39 	bl	800c8fc <memset>
}
 800808a:	bf00      	nop
 800808c:	3708      	adds	r7, #8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 8008092:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008096:	b0a8      	sub	sp, #160	@ 0xa0
 8008098:	af02      	add	r7, sp, #8
 800809a:	6478      	str	r0, [r7, #68]	@ 0x44
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	64bb      	str	r3, [r7, #72]	@ 0x48

    memset( h, 0, 16 );
 80080a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80080a4:	2210      	movs	r2, #16
 80080a6:	2100      	movs	r1, #0
 80080a8:	4618      	mov	r0, r3
 80080aa:	f004 fc27 	bl	800c8fc <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 80080ae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80080b0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80080b4:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80080b8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	2210      	movs	r2, #16
 80080c2:	f7fe fd5b 	bl	8006b7c <mbedtls_cipher_update>
 80080c6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 80080c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <gcm_gen_table+0x40>
        return( ret );
 80080ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080d0:	e154      	b.n	800837c <gcm_gen_table+0x2ea>

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
 80080d2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80080d6:	061a      	lsls	r2, r3, #24
 80080d8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80080dc:	041b      	lsls	r3, r3, #16
 80080de:	431a      	orrs	r2, r3
 80080e0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	431a      	orrs	r2, r3
 80080e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80080ec:	4313      	orrs	r3, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	4698      	mov	r8, r3
 80080f2:	4691      	mov	r9, r2
 80080f4:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    GET_UINT32_BE( lo, h,  4  );
 80080f8:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80080fc:	061a      	lsls	r2, r3, #24
 80080fe:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	431a      	orrs	r2, r3
 8008106:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	431a      	orrs	r2, r3
 800810e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008112:	4313      	orrs	r3, r2
 8008114:	2200      	movs	r2, #0
 8008116:	623b      	str	r3, [r7, #32]
 8008118:	627a      	str	r2, [r7, #36]	@ 0x24
 800811a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800811e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    vh = (uint64_t) hi << 32 | lo;
 8008122:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8008126:	f04f 0000 	mov.w	r0, #0
 800812a:	f04f 0100 	mov.w	r1, #0
 800812e:	0011      	movs	r1, r2
 8008130:	2000      	movs	r0, #0
 8008132:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8008136:	ea42 0400 	orr.w	r4, r2, r0
 800813a:	ea43 0501 	orr.w	r5, r3, r1
 800813e:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80

    GET_UINT32_BE( hi, h,  8  );
 8008142:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008146:	061a      	lsls	r2, r3, #24
 8008148:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800814c:	041b      	lsls	r3, r3, #16
 800814e:	431a      	orrs	r2, r3
 8008150:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	431a      	orrs	r2, r3
 8008158:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800815c:	4313      	orrs	r3, r2
 800815e:	2200      	movs	r2, #0
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	61fa      	str	r2, [r7, #28]
 8008164:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008168:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    GET_UINT32_BE( lo, h,  12 );
 800816c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8008170:	061a      	lsls	r2, r3, #24
 8008172:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8008176:	041b      	lsls	r3, r3, #16
 8008178:	431a      	orrs	r2, r3
 800817a:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	431a      	orrs	r2, r3
 8008182:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008186:	4313      	orrs	r3, r2
 8008188:	2200      	movs	r2, #0
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	617a      	str	r2, [r7, #20]
 800818e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008192:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    vl = (uint64_t) hi << 32 | lo;
 8008196:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800819a:	f04f 0000 	mov.w	r0, #0
 800819e:	f04f 0100 	mov.w	r1, #0
 80081a2:	0011      	movs	r1, r2
 80081a4:	2000      	movs	r0, #0
 80081a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80081aa:	ea42 0a00 	orr.w	sl, r2, r0
 80081ae:	ea43 0b01 	orr.w	fp, r3, r1
 80081b2:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 80081b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081b8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80081bc:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    ctx->HH[8] = vh;
 80081c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081c2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80081c6:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 80081ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081cc:	f04f 0200 	mov.w	r2, #0
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    ctx->HL[0] = 0;
 80081d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    for( i = 4; i > 0; i >>= 1 )
 80081e6:	2304      	movs	r3, #4
 80081e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80081ec:	e05b      	b.n	80082a6 <gcm_gen_table+0x214>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 80081ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80081f2:	f003 0201 	and.w	r2, r3, #1
 80081f6:	4613      	mov	r3, r2
 80081f8:	0152      	lsls	r2, r2, #5
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	061b      	lsls	r3, r3, #24
 80081fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8008200:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008204:	f04f 0400 	mov.w	r4, #0
 8008208:	f04f 0500 	mov.w	r5, #0
 800820c:	07d5      	lsls	r5, r2, #31
 800820e:	2400      	movs	r4, #0
 8008210:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008214:	f04f 0000 	mov.w	r0, #0
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	0850      	lsrs	r0, r2, #1
 800821e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8008222:	0859      	lsrs	r1, r3, #1
 8008224:	ea44 0300 	orr.w	r3, r4, r0
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	ea45 0301 	orr.w	r3, r5, r1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008234:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 8008238:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800823c:	f04f 0000 	mov.w	r0, #0
 8008240:	f04f 0100 	mov.w	r1, #0
 8008244:	0850      	lsrs	r0, r2, #1
 8008246:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 800824a:	0859      	lsrs	r1, r3, #1
 800824c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800824e:	2200      	movs	r2, #0
 8008250:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008252:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008254:	f04f 0200 	mov.w	r2, #0
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800825e:	0023      	movs	r3, r4
 8008260:	2200      	movs	r2, #0
 8008262:	ea80 0402 	eor.w	r4, r0, r2
 8008266:	603c      	str	r4, [r7, #0]
 8008268:	404b      	eors	r3, r1
 800826a:	607b      	str	r3, [r7, #4]
 800826c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008270:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80

        ctx->HL[i] = vl;
 8008274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008276:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800827a:	3308      	adds	r3, #8
 800827c:	00db      	lsls	r3, r3, #3
 800827e:	18d1      	adds	r1, r2, r3
 8008280:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008284:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 8008288:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800828a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800828e:	3318      	adds	r3, #24
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	18d1      	adds	r1, r2, r3
 8008294:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008298:	e9c1 2300 	strd	r2, r3, [r1]
    for( i = 4; i > 0; i >>= 1 )
 800829c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082a0:	105b      	asrs	r3, r3, #1
 80082a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dc9f      	bgt.n	80081ee <gcm_gen_table+0x15c>
    }

    for( i = 2; i <= 8; i *= 2 )
 80082ae:	2302      	movs	r3, #2
 80082b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80082b4:	e05d      	b.n	8008372 <gcm_gen_table+0x2e0>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 80082b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b8:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80082bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082c0:	00db      	lsls	r3, r3, #3
 80082c2:	4413      	add	r3, r2
 80082c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80082c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082c8:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80082cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	4413      	add	r3, r2
 80082d4:	663b      	str	r3, [r7, #96]	@ 0x60
        vh = *HiH;
 80082d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082dc:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        vl = *HiL;
 80082e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        for( j = 1; j < i; j++ )
 80082ea:	2301      	movs	r3, #1
 80082ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80082f0:	e034      	b.n	800835c <gcm_gen_table+0x2ca>
        {
            HiH[j] = vh ^ ctx->HH[j];
 80082f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80082f8:	3318      	adds	r3, #24
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	4413      	add	r3, r2
 80082fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008302:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800830a:	18d4      	adds	r4, r2, r3
 800830c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8008310:	ea80 0502 	eor.w	r5, r0, r2
 8008314:	633d      	str	r5, [r7, #48]	@ 0x30
 8008316:	404b      	eors	r3, r1
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
 800831a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800831e:	e9c4 2300 	strd	r2, r3, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 8008322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008324:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008328:	3308      	adds	r3, #8
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008332:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800833a:	18d4      	adds	r4, r2, r3
 800833c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008340:	ea80 0502 	eor.w	r5, r0, r2
 8008344:	62bd      	str	r5, [r7, #40]	@ 0x28
 8008346:	404b      	eors	r3, r1
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800834a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800834e:	e9c4 2300 	strd	r2, r3, [r4]
        for( j = 1; j < i; j++ )
 8008352:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008356:	3301      	adds	r3, #1
 8008358:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800835c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8008360:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008364:	429a      	cmp	r2, r3
 8008366:	dbc4      	blt.n	80082f2 <gcm_gen_table+0x260>
    for( i = 2; i <= 8; i *= 2 )
 8008368:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008372:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008376:	2b08      	cmp	r3, #8
 8008378:	dd9d      	ble.n	80082b6 <gcm_gen_table+0x224>
        }
    }

    return( 0 );
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3798      	adds	r7, #152	@ 0x98
 8008380:	46bd      	mov	sp, r7
 8008382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008386 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b086      	sub	sp, #24
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
 8008392:	460b      	mov	r3, r1
 8008394:	72fb      	strb	r3, [r7, #11]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8008396:	6839      	ldr	r1, [r7, #0]
 8008398:	7afb      	ldrb	r3, [r7, #11]
 800839a:	2201      	movs	r2, #1
 800839c:	4618      	mov	r0, r3
 800839e:	f7fe fb19 	bl	80069d4 <mbedtls_cipher_info_from_values>
 80083a2:	6178      	str	r0, [r7, #20]
    if( cipher_info == NULL )
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <mbedtls_gcm_setkey+0x2a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80083aa:	f06f 0313 	mvn.w	r3, #19
 80083ae:	e02b      	b.n	8008408 <mbedtls_gcm_setkey+0x82>

    if( cipher_info->block_size != 16 )
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	d002      	beq.n	80083be <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 80083b8:	f06f 0313 	mvn.w	r3, #19
 80083bc:	e024      	b.n	8008408 <mbedtls_gcm_setkey+0x82>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe fb39 	bl	8006a38 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6979      	ldr	r1, [r7, #20]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe fb50 	bl	8006a70 <mbedtls_cipher_setup>
 80083d0:	6138      	str	r0, [r7, #16]
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <mbedtls_gcm_setkey+0x56>
        return( ret );
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	e015      	b.n	8008408 <mbedtls_gcm_setkey+0x82>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	683a      	ldr	r2, [r7, #0]
 80083e0:	2301      	movs	r3, #1
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	f7fe fb70 	bl	8006ac8 <mbedtls_cipher_setkey>
 80083e8:	6138      	str	r0, [r7, #16]
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <mbedtls_gcm_setkey+0x6e>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	e009      	b.n	8008408 <mbedtls_gcm_setkey+0x82>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fe4c 	bl	8008092 <gcm_gen_table>
 80083fa:	6138      	str	r0, [r7, #16]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <mbedtls_gcm_setkey+0x80>
        return( ret );
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	e000      	b.n	8008408 <mbedtls_gcm_setkey+0x82>

    return( 0 );
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 8008410:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008414:	b099      	sub	sp, #100	@ 0x64
 8008416:	af00      	add	r7, sp, #0
 8008418:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800841a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800841c:	637a      	str	r2, [r7, #52]	@ 0x34
    int i = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	65fb      	str	r3, [r7, #92]	@ 0x5c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 8008422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008424:	330f      	adds	r3, #15
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    zh = ctx->HH[lo];
 8008430:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008434:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008436:	3318      	adds	r3, #24
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	4413      	add	r3, r2
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    zl = ctx->HL[lo];
 8008444:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008448:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800844a:	3308      	adds	r3, #8
 800844c:	00db      	lsls	r3, r3, #3
 800844e:	4413      	add	r3, r2
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    for( i = 15; i >= 0; i-- )
 8008458:	230f      	movs	r3, #15
 800845a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800845c:	e0e6      	b.n	800862c <gcm_mult+0x21c>
    {
        lo = x[i] & 0xf;
 800845e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008462:	4413      	add	r3, r2
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        hi = x[i] >> 4;
 800846e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	4413      	add	r3, r2
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	091b      	lsrs	r3, r3, #4
 8008478:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        if( i != 15 )
 800847c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800847e:	2b0f      	cmp	r3, #15
 8008480:	d068      	beq.n	8008554 <gcm_mult+0x144>
        {
            rem = (unsigned char) zl & 0xf;
 8008482:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            zl = ( zh << 60 ) | ( zl >> 4 );
 800848e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008492:	f04f 0400 	mov.w	r4, #0
 8008496:	f04f 0500 	mov.w	r5, #0
 800849a:	0715      	lsls	r5, r2, #28
 800849c:	2400      	movs	r4, #0
 800849e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80084a2:	f04f 0000 	mov.w	r0, #0
 80084a6:	f04f 0100 	mov.w	r1, #0
 80084aa:	0910      	lsrs	r0, r2, #4
 80084ac:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 80084b0:	0919      	lsrs	r1, r3, #4
 80084b2:	ea44 0300 	orr.w	r3, r4, r0
 80084b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084b8:	ea45 0301 	orr.w	r3, r5, r1
 80084bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084be:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80084c2:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
            zh = ( zh >> 4 );
 80084c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80084ca:	f04f 0000 	mov.w	r0, #0
 80084ce:	f04f 0100 	mov.w	r1, #0
 80084d2:	0910      	lsrs	r0, r2, #4
 80084d4:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 80084d8:	0919      	lsrs	r1, r3, #4
 80084da:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 80084de:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80084e2:	4ab6      	ldr	r2, [pc, #728]	@ (80087bc <gcm_mult+0x3ac>)
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	4413      	add	r3, r2
 80084e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ec:	f04f 0000 	mov.w	r0, #0
 80084f0:	f04f 0100 	mov.w	r1, #0
 80084f4:	0411      	lsls	r1, r2, #16
 80084f6:	2000      	movs	r0, #0
 80084f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80084fc:	ea82 0400 	eor.w	r4, r2, r0
 8008500:	623c      	str	r4, [r7, #32]
 8008502:	404b      	eors	r3, r1
 8008504:	627b      	str	r3, [r7, #36]	@ 0x24
 8008506:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800850a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
            zh ^= ctx->HH[lo];
 800850e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008512:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008514:	3318      	adds	r3, #24
 8008516:	00db      	lsls	r3, r3, #3
 8008518:	4413      	add	r3, r2
 800851a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800851e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008522:	ea82 0400 	eor.w	r4, r2, r0
 8008526:	61bc      	str	r4, [r7, #24]
 8008528:	404b      	eors	r3, r1
 800852a:	61fb      	str	r3, [r7, #28]
 800852c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8008530:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
            zl ^= ctx->HL[lo];
 8008534:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008538:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800853a:	3308      	adds	r3, #8
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	4413      	add	r3, r2
 8008540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008544:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008548:	ea82 0800 	eor.w	r8, r2, r0
 800854c:	ea83 0901 	eor.w	r9, r3, r1
 8008550:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48

        }

        rem = (unsigned char) zl & 0xf;
 8008554:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        zl = ( zh << 60 ) | ( zl >> 4 );
 8008560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008564:	f04f 0400 	mov.w	r4, #0
 8008568:	f04f 0500 	mov.w	r5, #0
 800856c:	0715      	lsls	r5, r2, #28
 800856e:	2400      	movs	r4, #0
 8008570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008574:	f04f 0000 	mov.w	r0, #0
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	0910      	lsrs	r0, r2, #4
 800857e:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8008582:	0919      	lsrs	r1, r3, #4
 8008584:	ea44 0300 	orr.w	r3, r4, r0
 8008588:	613b      	str	r3, [r7, #16]
 800858a:	ea45 0301 	orr.w	r3, r5, r1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008594:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
        zh = ( zh >> 4 );
 8008598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800859c:	f04f 0000 	mov.w	r0, #0
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	0910      	lsrs	r0, r2, #4
 80085a6:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 80085aa:	0919      	lsrs	r1, r3, #4
 80085ac:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 80085b0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80085b4:	4a81      	ldr	r2, [pc, #516]	@ (80087bc <gcm_mult+0x3ac>)
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	4413      	add	r3, r2
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	f04f 0000 	mov.w	r0, #0
 80085c2:	f04f 0100 	mov.w	r1, #0
 80085c6:	0411      	lsls	r1, r2, #16
 80085c8:	2000      	movs	r0, #0
 80085ca:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085ce:	ea82 0400 	eor.w	r4, r2, r0
 80085d2:	60bc      	str	r4, [r7, #8]
 80085d4:	404b      	eors	r3, r1
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80085dc:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
        zh ^= ctx->HH[hi];
 80085e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80085e6:	3318      	adds	r3, #24
 80085e8:	00db      	lsls	r3, r3, #3
 80085ea:	4413      	add	r3, r2
 80085ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80085f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80085f4:	ea82 0400 	eor.w	r4, r2, r0
 80085f8:	603c      	str	r4, [r7, #0]
 80085fa:	404b      	eors	r3, r1
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008602:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
        zl ^= ctx->HL[hi];
 8008606:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800860a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800860c:	3308      	adds	r3, #8
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008616:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800861a:	ea82 0a00 	eor.w	sl, r2, r0
 800861e:	ea83 0b01 	eor.w	fp, r3, r1
 8008622:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
    for( i = 15; i >= 0; i-- )
 8008626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008628:	3b01      	subs	r3, #1
 800862a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800862c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800862e:	2b00      	cmp	r3, #0
 8008630:	f6bf af15 	bge.w	800845e <gcm_mult+0x4e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 8008634:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	0e0a      	lsrs	r2, r1, #24
 8008642:	2300      	movs	r3, #0
 8008644:	b2d2      	uxtb	r2, r2
 8008646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	0c0a      	lsrs	r2, r1, #16
 8008658:	2300      	movs	r3, #0
 800865a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800865c:	3101      	adds	r1, #1
 800865e:	b2d3      	uxtb	r3, r2
 8008660:	700b      	strb	r3, [r1, #0]
 8008662:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	0a0a      	lsrs	r2, r1, #8
 8008670:	2300      	movs	r3, #0
 8008672:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008674:	3102      	adds	r1, #2
 8008676:	b2d3      	uxtb	r3, r2
 8008678:	700b      	strb	r3, [r1, #0]
 800867a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800867e:	f04f 0200 	mov.w	r2, #0
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	000a      	movs	r2, r1
 8008688:	2300      	movs	r3, #0
 800868a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800868c:	3103      	adds	r1, #3
 800868e:	b2d3      	uxtb	r3, r2
 8008690:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zh, output, 4 );
 8008692:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	f04f 0300 	mov.w	r3, #0
 800869e:	0e02      	lsrs	r2, r0, #24
 80086a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80086a4:	0e0b      	lsrs	r3, r1, #24
 80086a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80086a8:	3104      	adds	r1, #4
 80086aa:	b2d3      	uxtb	r3, r2
 80086ac:	700b      	strb	r3, [r1, #0]
 80086ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	0c02      	lsrs	r2, r0, #16
 80086bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80086c0:	0c0b      	lsrs	r3, r1, #16
 80086c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80086c4:	3105      	adds	r1, #5
 80086c6:	b2d3      	uxtb	r3, r2
 80086c8:	700b      	strb	r3, [r1, #0]
 80086ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80086ce:	f04f 0200 	mov.w	r2, #0
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	0a02      	lsrs	r2, r0, #8
 80086d8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80086dc:	0a0b      	lsrs	r3, r1, #8
 80086de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80086e0:	3106      	adds	r1, #6
 80086e2:	b2d3      	uxtb	r3, r2
 80086e4:	700b      	strb	r3, [r1, #0]
 80086e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e8:	3307      	adds	r3, #7
 80086ea:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 80086ee:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 80086f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80086f4:	f04f 0200 	mov.w	r2, #0
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	0e0a      	lsrs	r2, r1, #24
 80086fe:	2300      	movs	r3, #0
 8008700:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008702:	3108      	adds	r1, #8
 8008704:	b2d3      	uxtb	r3, r2
 8008706:	700b      	strb	r3, [r1, #0]
 8008708:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800870c:	f04f 0200 	mov.w	r2, #0
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	0c0a      	lsrs	r2, r1, #16
 8008716:	2300      	movs	r3, #0
 8008718:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800871a:	3109      	adds	r1, #9
 800871c:	b2d3      	uxtb	r3, r2
 800871e:	700b      	strb	r3, [r1, #0]
 8008720:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008724:	f04f 0200 	mov.w	r2, #0
 8008728:	f04f 0300 	mov.w	r3, #0
 800872c:	0a0a      	lsrs	r2, r1, #8
 800872e:	2300      	movs	r3, #0
 8008730:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008732:	310a      	adds	r1, #10
 8008734:	b2d3      	uxtb	r3, r2
 8008736:	700b      	strb	r3, [r1, #0]
 8008738:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800873c:	f04f 0200 	mov.w	r2, #0
 8008740:	f04f 0300 	mov.w	r3, #0
 8008744:	000a      	movs	r2, r1
 8008746:	2300      	movs	r3, #0
 8008748:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800874a:	310b      	adds	r1, #11
 800874c:	b2d3      	uxtb	r3, r2
 800874e:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zl, output, 12 );
 8008750:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008754:	f04f 0200 	mov.w	r2, #0
 8008758:	f04f 0300 	mov.w	r3, #0
 800875c:	0e02      	lsrs	r2, r0, #24
 800875e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008762:	0e0b      	lsrs	r3, r1, #24
 8008764:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008766:	310c      	adds	r1, #12
 8008768:	b2d3      	uxtb	r3, r2
 800876a:	700b      	strb	r3, [r1, #0]
 800876c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	0c02      	lsrs	r2, r0, #16
 800877a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800877e:	0c0b      	lsrs	r3, r1, #16
 8008780:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008782:	310d      	adds	r1, #13
 8008784:	b2d3      	uxtb	r3, r2
 8008786:	700b      	strb	r3, [r1, #0]
 8008788:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800878c:	f04f 0200 	mov.w	r2, #0
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	0a02      	lsrs	r2, r0, #8
 8008796:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800879a:	0a0b      	lsrs	r3, r1, #8
 800879c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800879e:	310e      	adds	r1, #14
 80087a0:	b2d3      	uxtb	r3, r2
 80087a2:	700b      	strb	r3, [r1, #0]
 80087a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a6:	330f      	adds	r3, #15
 80087a8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80087ac:	701a      	strb	r2, [r3, #0]
}
 80087ae:	bf00      	nop
 80087b0:	3764      	adds	r7, #100	@ 0x64
 80087b2:	46bd      	mov	sp, r7
 80087b4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	0800f848 	.word	0x0800f848

080087c0 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 80087c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087c4:	b090      	sub	sp, #64	@ 0x40
 80087c6:	af02      	add	r7, sp, #8
 80087c8:	60f8      	str	r0, [r7, #12]
 80087ca:	60b9      	str	r1, [r7, #8]
 80087cc:	607a      	str	r2, [r7, #4]
 80087ce:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	617b      	str	r3, [r7, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d019      	beq.n	800880e <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2200      	movs	r2, #0
 80087de:	469a      	mov	sl, r3
 80087e0:	4693      	mov	fp, r2
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	ea4f 725b 	mov.w	r2, fp, lsr #29
 80087ee:	2300      	movs	r3, #0
    if( iv_len == 0 ||
 80087f0:	4313      	orrs	r3, r2
 80087f2:	d10c      	bne.n	800880e <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) add_len ) >> 61 != 0 )
 80087f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087f6:	2200      	movs	r2, #0
 80087f8:	4698      	mov	r8, r3
 80087fa:	4691      	mov	r9, r2
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	f04f 0300 	mov.w	r3, #0
 8008804:	ea4f 7259 	mov.w	r2, r9, lsr #29
 8008808:	2300      	movs	r3, #0
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 800880a:	4313      	orrs	r3, r2
 800880c:	d002      	beq.n	8008814 <mbedtls_gcm_starts+0x54>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800880e:	f06f 0313 	mvn.w	r3, #19
 8008812:	e107      	b.n	8008a24 <mbedtls_gcm_starts+0x264>
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800881a:	2210      	movs	r2, #16
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f004 f86c 	bl	800c8fc <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800882a:	2210      	movs	r2, #16
 800882c:	2100      	movs	r1, #0
 800882e:	4618      	mov	r0, r3
 8008830:	f004 f864 	bl	800c8fc <memset>

    ctx->mode = mode;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    ctx->len = 0;
 800883c:	68f9      	ldr	r1, [r7, #12]
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
    ctx->add_len = 0;
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	f04f 0300 	mov.w	r3, #0
 8008854:	e9c1 2352 	strd	r2, r3, [r1, #328]	@ 0x148

    if( iv_len == 12 )
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b0c      	cmp	r3, #12
 800885c:	d10c      	bne.n	8008878 <mbedtls_gcm_starts+0xb8>
    {
        memcpy( ctx->y, iv, iv_len );
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4618      	mov	r0, r3
 800886a:	f004 f88b 	bl	800c984 <memcpy>
        ctx->y[15] = 1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 216f 	strb.w	r2, [r3, #367]	@ 0x16f
 8008876:	e07f      	b.n	8008978 <mbedtls_gcm_starts+0x1b8>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 8008878:	f107 0318 	add.w	r3, r7, #24
 800887c:	2210      	movs	r2, #16
 800887e:	2100      	movs	r1, #0
 8008880:	4618      	mov	r0, r3
 8008882:	f004 f83b 	bl	800c8fc <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	0e1b      	lsrs	r3, r3, #24
 800888c:	b2db      	uxtb	r3, r3
 800888e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	0c1b      	lsrs	r3, r3, #16
 8008898:	b2db      	uxtb	r3, r3
 800889a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	0a1b      	lsrs	r3, r3, #8
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	00db      	lsls	r3, r3, #3
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        p = iv;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	633b      	str	r3, [r7, #48]	@ 0x30
        while( iv_len > 0 )
 80088ba:	e033      	b.n	8008924 <mbedtls_gcm_starts+0x164>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	2b10      	cmp	r3, #16
 80088c0:	bf28      	it	cs
 80088c2:	2310      	movcs	r3, #16
 80088c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            for( i = 0; i < use_len; i++ )
 80088c6:	2300      	movs	r3, #0
 80088c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ca:	e015      	b.n	80088f8 <mbedtls_gcm_starts+0x138>
                ctx->y[i] ^= p[i];
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80088d6:	781a      	ldrb	r2, [r3, #0]
 80088d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088dc:	440b      	add	r3, r1
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	4053      	eors	r3, r2
 80088e2:	b2d9      	uxtb	r1, r3
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80088ee:	460a      	mov	r2, r1
 80088f0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 80088f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f4:	3301      	adds	r3, #1
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d3e5      	bcc.n	80088cc <mbedtls_gcm_starts+0x10c>

            gcm_mult( ctx, ctx->y, ctx->y );
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800890c:	461a      	mov	r2, r3
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f7ff fd7e 	bl	8008410 <gcm_mult>

            iv_len -= use_len;
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	603b      	str	r3, [r7, #0]
            p += use_len;
 800891c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008920:	4413      	add	r3, r2
 8008922:	633b      	str	r3, [r7, #48]	@ 0x30
        while( iv_len > 0 )
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1c8      	bne.n	80088bc <mbedtls_gcm_starts+0xfc>
        }

        for( i = 0; i < 16; i++ )
 800892a:	2300      	movs	r3, #0
 800892c:	637b      	str	r3, [r7, #52]	@ 0x34
 800892e:	e016      	b.n	800895e <mbedtls_gcm_starts+0x19e>
            ctx->y[i] ^= work_buf[i];
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008934:	4413      	add	r3, r2
 8008936:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800893a:	781a      	ldrb	r2, [r3, #0]
 800893c:	f107 0118 	add.w	r1, r7, #24
 8008940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008942:	440b      	add	r3, r1
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4053      	eors	r3, r2
 8008948:	b2d9      	uxtb	r1, r3
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800894e:	4413      	add	r3, r2
 8008950:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008954:	460a      	mov	r2, r1
 8008956:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8008958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800895a:	3301      	adds	r3, #1
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008960:	2b0f      	cmp	r3, #15
 8008962:	d9e5      	bls.n	8008930 <mbedtls_gcm_starts+0x170>

        gcm_mult( ctx, ctx->y, ctx->y );
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008970:	461a      	mov	r2, r3
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fd4c 	bl	8008410 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8008978:	68f8      	ldr	r0, [r7, #12]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 8008986:	f107 0314 	add.w	r3, r7, #20
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	4613      	mov	r3, r2
 800898e:	2210      	movs	r2, #16
 8008990:	f7fe f8f4 	bl	8006b7c <mbedtls_cipher_update>
 8008994:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	2b00      	cmp	r3, #0
 800899a:	d001      	beq.n	80089a0 <mbedtls_gcm_starts+0x1e0>
                             &olen ) ) != 0 )
    {
        return( ret );
 800899c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899e:	e041      	b.n	8008a24 <mbedtls_gcm_starts+0x264>
    }

    ctx->add_len = add_len;
 80089a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089a2:	2200      	movs	r2, #0
 80089a4:	461c      	mov	r4, r3
 80089a6:	4615      	mov	r5, r2
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	e9c3 4552 	strd	r4, r5, [r3, #328]	@ 0x148
    p = add;
 80089ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089b0:	633b      	str	r3, [r7, #48]	@ 0x30
    while( add_len > 0 )
 80089b2:	e033      	b.n	8008a1c <mbedtls_gcm_starts+0x25c>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 80089b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b6:	2b10      	cmp	r3, #16
 80089b8:	bf28      	it	cs
 80089ba:	2310      	movcs	r3, #16
 80089bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        for( i = 0; i < use_len; i++ )
 80089be:	2300      	movs	r3, #0
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089c2:	e015      	b.n	80089f0 <mbedtls_gcm_starts+0x230>
            ctx->buf[i] ^= p[i];
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089d4:	440b      	add	r3, r1
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	4053      	eors	r3, r2
 80089da:	b2d9      	uxtb	r1, r3
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80089e6:	460a      	mov	r2, r1
 80089e8:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 80089ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ec:	3301      	adds	r3, #1
 80089ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80089f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3e5      	bcc.n	80089c4 <mbedtls_gcm_starts+0x204>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008a04:	461a      	mov	r2, r3
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff fd02 	bl	8008410 <gcm_mult>

        add_len -= use_len;
 8008a0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	65fb      	str	r3, [r7, #92]	@ 0x5c
        p += use_len;
 8008a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a18:	4413      	add	r3, r2
 8008a1a:	633b      	str	r3, [r7, #48]	@ 0x30
    while( add_len > 0 )
 8008a1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1c8      	bne.n	80089b4 <mbedtls_gcm_starts+0x1f4>
    }

    return( 0 );
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3738      	adds	r7, #56	@ 0x38
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008a2e <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8008a2e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a32:	b096      	sub	sp, #88	@ 0x58
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a38:	6239      	str	r1, [r7, #32]
 8008a3a:	61fa      	str	r2, [r7, #28]
 8008a3c:	61bb      	str	r3, [r7, #24]
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t use_len, olen = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	62bb      	str	r3, [r7, #40]	@ 0x28

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d909      	bls.n	8008a62 <mbedtls_gcm_update+0x34>
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	69fb      	ldr	r3, [r7, #28]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	461a      	mov	r2, r3
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d902      	bls.n	8008a62 <mbedtls_gcm_update+0x34>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8008a5c:	f06f 0313 	mvn.w	r3, #19
 8008a60:	e0d8      	b.n	8008c14 <mbedtls_gcm_update+0x1e6>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8008a68:	6a39      	ldr	r1, [r7, #32]
 8008a6a:	2000      	movs	r0, #0
 8008a6c:	6139      	str	r1, [r7, #16]
 8008a6e:	6178      	str	r0, [r7, #20]
 8008a70:	6939      	ldr	r1, [r7, #16]
 8008a72:	eb12 0801 	adds.w	r8, r2, r1
 8008a76:	6979      	ldr	r1, [r7, #20]
 8008a78:	eb43 0901 	adc.w	r9, r3, r1
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7e:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8008a82:	4590      	cmp	r8, r2
 8008a84:	eb79 0303 	sbcs.w	r3, r9, r3
 8008a88:	d313      	bcc.n	8008ab2 <mbedtls_gcm_update+0x84>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8008a90:	6a39      	ldr	r1, [r7, #32]
 8008a92:	2000      	movs	r0, #0
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8008a9c:	4641      	mov	r1, r8
 8008a9e:	1854      	adds	r4, r2, r1
 8008aa0:	4649      	mov	r1, r9
 8008aa2:	eb43 0101 	adc.w	r1, r3, r1
 8008aa6:	460d      	mov	r5, r1
    if( ctx->len + length < ctx->len ||
 8008aa8:	f114 0f1f 	cmn.w	r4, #31
 8008aac:	f175 030f 	sbcs.w	r3, r5, #15
 8008ab0:	d302      	bcc.n	8008ab8 <mbedtls_gcm_update+0x8a>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8008ab2:	f06f 0313 	mvn.w	r3, #19
 8008ab6:	e0ad      	b.n	8008c14 <mbedtls_gcm_update+0x1e6>
    }

    ctx->len += length;
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aba:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8008abe:	6a39      	ldr	r1, [r7, #32]
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	468a      	mov	sl, r1
 8008ac4:	4683      	mov	fp, r0
 8008ac6:	eb12 010a 	adds.w	r1, r2, sl
 8008aca:	6039      	str	r1, [r7, #0]
 8008acc:	eb43 030b 	adc.w	r3, r3, fp
 8008ad0:	607b      	str	r3, [r7, #4]
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ad8:	e9c3 1250 	strd	r1, r2, [r3, #320]	@ 0x140

    p = input;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	64bb      	str	r3, [r7, #72]	@ 0x48
    while( length > 0 )
 8008ae0:	e093      	b.n	8008c0a <mbedtls_gcm_update+0x1dc>
    {
        use_len = ( length < 16 ) ? length : 16;
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	2b10      	cmp	r3, #16
 8008ae6:	bf28      	it	cs
 8008ae8:	2310      	movcs	r3, #16
 8008aea:	643b      	str	r3, [r7, #64]	@ 0x40

        for( i = 16; i > 12; i-- )
 8008aec:	2310      	movs	r3, #16
 8008aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008af0:	e014      	b.n	8008b1c <mbedtls_gcm_update+0xee>
            if( ++ctx->y[i - 1] != 0 )
 8008af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008af4:	3b01      	subs	r3, #1
 8008af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008af8:	441a      	add	r2, r3
 8008afa:	f892 2160 	ldrb.w	r2, [r2, #352]	@ 0x160
 8008afe:	3201      	adds	r2, #1
 8008b00:	b2d1      	uxtb	r1, r2
 8008b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b04:	441a      	add	r2, r3
 8008b06:	f882 1160 	strb.w	r1, [r2, #352]	@ 0x160
 8008b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <mbedtls_gcm_update+0xf6>
        for( i = 16; i > 12; i-- )
 8008b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1e:	2b0c      	cmp	r3, #12
 8008b20:	d8e7      	bhi.n	8008af2 <mbedtls_gcm_update+0xc4>
 8008b22:	e000      	b.n	8008b26 <mbedtls_gcm_update+0xf8>
                break;
 8008b24:	bf00      	nop

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8008b26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2a:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8008b2e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008b32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	2210      	movs	r2, #16
 8008b3c:	f7fe f81e 	bl	8006b7c <mbedtls_cipher_update>
 8008b40:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <mbedtls_gcm_update+0x11e>
                                   &olen ) ) != 0 )
        {
            return( ret );
 8008b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b4a:	e063      	b.n	8008c14 <mbedtls_gcm_update+0x1e6>
        }

        for( i = 0; i < use_len; i++ )
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b50:	e041      	b.n	8008bd6 <mbedtls_gcm_update+0x1a8>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d112      	bne.n	8008b82 <mbedtls_gcm_update+0x154>
                ctx->buf[i] ^= p[i];
 8008b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6c:	440b      	add	r3, r1
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	4053      	eors	r3, r2
 8008b72:	b2d9      	uxtb	r1, r3
 8008b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008b7e:	460a      	mov	r2, r1
 8008b80:	701a      	strb	r2, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 8008b82:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008b86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b88:	4413      	add	r3, r2
 8008b8a:	7819      	ldrb	r1, [r3, #0]
 8008b8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b90:	4413      	add	r3, r2
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8008b96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b98:	4403      	add	r3, r0
 8008b9a:	404a      	eors	r2, r1
 8008b9c:	b2d2      	uxtb	r2, r2
 8008b9e:	701a      	strb	r2, [r3, #0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d112      	bne.n	8008bd0 <mbedtls_gcm_update+0x1a2>
                ctx->buf[i] ^= out_p[i];
 8008baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008bb4:	781a      	ldrb	r2, [r3, #0]
 8008bb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bba:	440b      	add	r3, r1
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	4053      	eors	r3, r2
 8008bc0:	b2d9      	uxtb	r1, r3
 8008bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008bcc:	460a      	mov	r2, r1
 8008bce:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 8008bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008bd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d3b9      	bcc.n	8008b52 <mbedtls_gcm_update+0x124>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8008bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be0:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008bea:	461a      	mov	r2, r3
 8008bec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bee:	f7ff fc0f 	bl	8008410 <gcm_mult>

        length -= use_len;
 8008bf2:	6a3a      	ldr	r2, [r7, #32]
 8008bf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	623b      	str	r3, [r7, #32]
        p += use_len;
 8008bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bfe:	4413      	add	r3, r2
 8008c00:	64bb      	str	r3, [r7, #72]	@ 0x48
        out_p += use_len;
 8008c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c06:	4413      	add	r3, r2
 8008c08:	647b      	str	r3, [r7, #68]	@ 0x44
    while( length > 0 )
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f47f af68 	bne.w	8008ae2 <mbedtls_gcm_update+0xb4>
    }

    return( 0 );
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3750      	adds	r7, #80	@ 0x50
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c1e <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b08e      	sub	sp, #56	@ 0x38
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	607a      	str	r2, [r7, #4]
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	f04f 0300 	mov.w	r3, #0
 8008c38:	00cb      	lsls	r3, r1, #3
 8008c3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008c3e:	00c2      	lsls	r2, r0, #3
 8008c40:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    orig_add_len = ctx->add_len * 8;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 8008c4a:	f04f 0200 	mov.w	r2, #0
 8008c4e:	f04f 0300 	mov.w	r3, #0
 8008c52:	00cb      	lsls	r3, r1, #3
 8008c54:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8008c58:	00c2      	lsls	r2, r0, #3
 8008c5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( tag_len > 16 || tag_len < 4 )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d802      	bhi.n	8008c6a <mbedtls_gcm_finish+0x4c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d802      	bhi.n	8008c70 <mbedtls_gcm_finish+0x52>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8008c6a:	f06f 0313 	mvn.w	r3, #19
 8008c6e:	e0f7      	b.n	8008e60 <mbedtls_gcm_finish+0x242>

    memcpy( tag, ctx->base_ectr, tag_len );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	68b8      	ldr	r0, [r7, #8]
 8008c7c:	f003 fe82 	bl	800c984 <memcpy>

    if( orig_len || orig_add_len )
 8008c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c84:	4313      	orrs	r3, r2
 8008c86:	d104      	bne.n	8008c92 <mbedtls_gcm_finish+0x74>
 8008c88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	f000 80e6 	beq.w	8008e5e <mbedtls_gcm_finish+0x240>
    {
        memset( work_buf, 0x00, 16 );
 8008c92:	f107 0310 	add.w	r3, r7, #16
 8008c96:	2210      	movs	r2, #16
 8008c98:	2100      	movs	r1, #0
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f003 fe2e 	bl	800c8fc <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8008ca0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	0e0a      	lsrs	r2, r1, #24
 8008cae:	2300      	movs	r3, #0
 8008cb0:	b2d3      	uxtb	r3, r2
 8008cb2:	743b      	strb	r3, [r7, #16]
 8008cb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	0c0a      	lsrs	r2, r1, #16
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	b2d3      	uxtb	r3, r2
 8008cc6:	747b      	strb	r3, [r7, #17]
 8008cc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	0a0a      	lsrs	r2, r1, #8
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	b2d3      	uxtb	r3, r2
 8008cda:	74bb      	strb	r3, [r7, #18]
 8008cdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008ce0:	f04f 0200 	mov.w	r2, #0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	000a      	movs	r2, r1
 8008cea:	2300      	movs	r3, #0
 8008cec:	b2d3      	uxtb	r3, r2
 8008cee:	74fb      	strb	r3, [r7, #19]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8008cf0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	0e02      	lsrs	r2, r0, #24
 8008cfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008d02:	0e0b      	lsrs	r3, r1, #24
 8008d04:	b2d3      	uxtb	r3, r2
 8008d06:	753b      	strb	r3, [r7, #20]
 8008d08:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d0c:	f04f 0200 	mov.w	r2, #0
 8008d10:	f04f 0300 	mov.w	r3, #0
 8008d14:	0c02      	lsrs	r2, r0, #16
 8008d16:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008d1a:	0c0b      	lsrs	r3, r1, #16
 8008d1c:	b2d3      	uxtb	r3, r2
 8008d1e:	757b      	strb	r3, [r7, #21]
 8008d20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008d24:	f04f 0200 	mov.w	r2, #0
 8008d28:	f04f 0300 	mov.w	r3, #0
 8008d2c:	0a02      	lsrs	r2, r0, #8
 8008d2e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008d32:	0a0b      	lsrs	r3, r1, #8
 8008d34:	b2d3      	uxtb	r3, r2
 8008d36:	75bb      	strb	r3, [r7, #22]
 8008d38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d3c:	75fb      	strb	r3, [r7, #23]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8008d3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d42:	f04f 0200 	mov.w	r2, #0
 8008d46:	f04f 0300 	mov.w	r3, #0
 8008d4a:	0e0a      	lsrs	r2, r1, #24
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	b2d3      	uxtb	r3, r2
 8008d50:	763b      	strb	r3, [r7, #24]
 8008d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	0c0a      	lsrs	r2, r1, #16
 8008d60:	2300      	movs	r3, #0
 8008d62:	b2d3      	uxtb	r3, r2
 8008d64:	767b      	strb	r3, [r7, #25]
 8008d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	0a0a      	lsrs	r2, r1, #8
 8008d74:	2300      	movs	r3, #0
 8008d76:	b2d3      	uxtb	r3, r2
 8008d78:	76bb      	strb	r3, [r7, #26]
 8008d7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d7e:	f04f 0200 	mov.w	r2, #0
 8008d82:	f04f 0300 	mov.w	r3, #0
 8008d86:	000a      	movs	r2, r1
 8008d88:	2300      	movs	r3, #0
 8008d8a:	b2d3      	uxtb	r3, r2
 8008d8c:	76fb      	strb	r3, [r7, #27]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8008d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008d92:	f04f 0200 	mov.w	r2, #0
 8008d96:	f04f 0300 	mov.w	r3, #0
 8008d9a:	0e02      	lsrs	r2, r0, #24
 8008d9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008da0:	0e0b      	lsrs	r3, r1, #24
 8008da2:	b2d3      	uxtb	r3, r2
 8008da4:	773b      	strb	r3, [r7, #28]
 8008da6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008daa:	f04f 0200 	mov.w	r2, #0
 8008dae:	f04f 0300 	mov.w	r3, #0
 8008db2:	0c02      	lsrs	r2, r0, #16
 8008db4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008db8:	0c0b      	lsrs	r3, r1, #16
 8008dba:	b2d3      	uxtb	r3, r2
 8008dbc:	777b      	strb	r3, [r7, #29]
 8008dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008dc2:	f04f 0200 	mov.w	r2, #0
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	0a02      	lsrs	r2, r0, #8
 8008dcc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008dd0:	0a0b      	lsrs	r3, r1, #8
 8008dd2:	b2d3      	uxtb	r3, r2
 8008dd4:	77bb      	strb	r3, [r7, #30]
 8008dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008dda:	77fb      	strb	r3, [r7, #31]

        for( i = 0; i < 16; i++ )
 8008ddc:	2300      	movs	r3, #0
 8008dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de0:	e016      	b.n	8008e10 <mbedtls_gcm_finish+0x1f2>
            ctx->buf[i] ^= work_buf[i];
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	f107 0110 	add.w	r1, r7, #16
 8008df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df4:	440b      	add	r3, r1
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	4053      	eors	r3, r2
 8008dfa:	b2d9      	uxtb	r1, r3
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008e06:	460a      	mov	r2, r1
 8008e08:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8008e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e12:	2b0f      	cmp	r3, #15
 8008e14:	d9e5      	bls.n	8008de2 <mbedtls_gcm_finish+0x1c4>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008e22:	461a      	mov	r2, r3
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f7ff faf3 	bl	8008410 <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2e:	e012      	b.n	8008e56 <mbedtls_gcm_finish+0x238>
            tag[i] ^= ctx->buf[i];
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e34:	4413      	add	r3, r2
 8008e36:	7819      	ldrb	r1, [r3, #0]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	68b8      	ldr	r0, [r7, #8]
 8008e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e48:	4403      	add	r3, r0
 8008e4a:	404a      	eors	r2, r1
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 8008e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e52:	3301      	adds	r3, #1
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d3e8      	bcc.n	8008e30 <mbedtls_gcm_finish+0x212>
    }

    return( 0 );
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3738      	adds	r7, #56	@ 0x38
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b088      	sub	sp, #32
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	603b      	str	r3, [r7, #0]
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 8008e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	68b9      	ldr	r1, [r7, #8]
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7ff fc9b 	bl	80087c0 <mbedtls_gcm_starts>
 8008e8a:	6178      	str	r0, [r7, #20]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <mbedtls_gcm_crypt_and_tag+0x2e>
        return( ret );
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	e017      	b.n	8008ec6 <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fdc6 	bl	8008a2e <mbedtls_gcm_update>
 8008ea2:	6178      	str	r0, [r7, #20]
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <mbedtls_gcm_crypt_and_tag+0x46>
        return( ret );
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	e00b      	b.n	8008ec6 <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8008eae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008eb0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff feb3 	bl	8008c1e <mbedtls_gcm_finish>
 8008eb8:	6178      	str	r0, [r7, #20]
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <mbedtls_gcm_crypt_and_tag+0x5c>
        return( ret );
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	e000      	b.n	8008ec6 <mbedtls_gcm_crypt_and_tag+0x5e>

    return( 0 );
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b094      	sub	sp, #80	@ 0x50
 8008ed2:	af08      	add	r7, sp, #32
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	607a      	str	r2, [r7, #4]
 8008eda:	603b      	str	r3, [r7, #0]
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8008edc:	f107 0314 	add.w	r3, r7, #20
 8008ee0:	9306      	str	r3, [sp, #24]
 8008ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ee4:	9305      	str	r3, [sp, #20]
 8008ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008eec:	9303      	str	r3, [sp, #12]
 8008eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ef0:	9302      	str	r3, [sp, #8]
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	2100      	movs	r1, #0
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f7ff ffb1 	bl	8008e68 <mbedtls_gcm_crypt_and_tag>
 8008f06:	6278      	str	r0, [r7, #36]	@ 0x24
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <mbedtls_gcm_auth_decrypt+0x44>
                                   iv, iv_len, add, add_len,
                                   input, output, tag_len, check_tag ) ) != 0 )
    {
        return( ret );
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	e025      	b.n	8008f5e <mbedtls_gcm_auth_decrypt+0x90>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 8008f12:	2300      	movs	r3, #0
 8008f14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f16:	2300      	movs	r3, #0
 8008f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f1a:	e011      	b.n	8008f40 <mbedtls_gcm_auth_decrypt+0x72>
        diff |= tag[i] ^ check_tag[i];
 8008f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f20:	4413      	add	r3, r2
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	f107 0114 	add.w	r1, r7, #20
 8008f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f2a:	440b      	add	r3, r1
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	4053      	eors	r3, r2
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	4313      	orrs	r3, r2
 8008f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 8008f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d3e9      	bcc.n	8008f1c <mbedtls_gcm_auth_decrypt+0x4e>

    if( diff != 0 )
 8008f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d006      	beq.n	8008f5c <mbedtls_gcm_auth_decrypt+0x8e>
    {
        mbedtls_platform_zeroize( output, length );
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008f52:	f000 f81d 	bl	8008f90 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 8008f56:	f06f 0311 	mvn.w	r3, #17
 8008f5a:	e000      	b.n	8008f5e <mbedtls_gcm_auth_decrypt+0x90>
    }

    return( 0 );
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3730      	adds	r7, #48	@ 0x30
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d009      	beq.n	8008f88 <mbedtls_gcm_free+0x22>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7fd fd5e 	bl	8006a38 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8008f7c:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f805 	bl	8008f90 <mbedtls_platform_zeroize>
 8008f86:	e000      	b.n	8008f8a <mbedtls_gcm_free+0x24>
        return;
 8008f88:	bf00      	nop
}
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 8008f9a:	4b05      	ldr	r3, [pc, #20]	@ (8008fb0 <mbedtls_platform_zeroize+0x20>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	4798      	blx	r3
}
 8008fa6:	bf00      	nop
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000014 	.word	0x20000014

08008fb4 <mul64>:

    return( lo + ( me << 16 ) + ( (uint64_t) hi << 32 ) );
}
#else
static inline uint64_t mul64( uint32_t a, uint32_t b )
{
 8008fb4:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
    return( (uint64_t) a * b );
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	4688      	mov	r8, r1
 8008fc6:	4681      	mov	r9, r0
 8008fc8:	6839      	ldr	r1, [r7, #0]
 8008fca:	2000      	movs	r0, #0
 8008fcc:	460c      	mov	r4, r1
 8008fce:	4605      	mov	r5, r0
 8008fd0:	fb04 f009 	mul.w	r0, r4, r9
 8008fd4:	fb08 f105 	mul.w	r1, r8, r5
 8008fd8:	4401      	add	r1, r0
 8008fda:	fba8 2304 	umull	r2, r3, r8, r4
 8008fde:	4419      	add	r1, r3
 8008fe0:	460b      	mov	r3, r1
}
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8008fee:	4770      	bx	lr

08008ff0 <poly1305_process>:
 */
static void poly1305_process( mbedtls_poly1305_context *ctx,
                              size_t nblocks,
                              const unsigned char *input,
                              uint32_t needs_padding )
{
 8008ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ff4:	b0f4      	sub	sp, #464	@ 0x1d0
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8008ffc:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 8009000:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8009004:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    size_t i;

    r0 = ctx->r[0];
 800900e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    r1 = ctx->r[1];
 8009018:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    r2 = ctx->r[2];
 8009022:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    r3 = ctx->r[3];
 800902c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    rs1 = r1 + ( r1 >> 2U );
 8009036:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800903a:	089a      	lsrs	r2, r3, #2
 800903c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8009040:	4413      	add	r3, r2
 8009042:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    rs2 = r2 + ( r2 >> 2U );
 8009046:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800904a:	089a      	lsrs	r2, r3, #2
 800904c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8009050:	4413      	add	r3, r2
 8009052:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    rs3 = r3 + ( r3 >> 2U );
 8009056:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800905a:	089a      	lsrs	r2, r3, #2
 800905c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8009060:	4413      	add	r3, r2
 8009062:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

    acc0 = ctx->acc[0];
 8009066:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    acc1 = ctx->acc[1];
 8009070:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009076:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    acc2 = ctx->acc[2];
 800907a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800907e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009080:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    acc3 = ctx->acc[3];
 8009084:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    acc4 = ctx->acc[4];
 800908e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009094:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

    /* Process full blocks */
    for( i = 0U; i < nblocks; i++ )
 8009098:	2300      	movs	r3, #0
 800909a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800909e:	e3b5      	b.n	800980c <poly1305_process+0x81c>
    {
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = BYTES_TO_U32_LE( input, offset + 0  );
 80090a0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80090a4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80090a8:	4413      	add	r3, r2
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	4619      	mov	r1, r3
 80090ae:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80090b2:	1c5a      	adds	r2, r3, #1
 80090b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80090b8:	4413      	add	r3, r2
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	4319      	orrs	r1, r3
 80090c0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80090c4:	1c9a      	adds	r2, r3, #2
 80090c6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80090ca:	4413      	add	r3, r2
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	041b      	lsls	r3, r3, #16
 80090d0:	4319      	orrs	r1, r3
 80090d2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80090d6:	1cda      	adds	r2, r3, #3
 80090d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80090dc:	4413      	add	r3, r2
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	061b      	lsls	r3, r3, #24
 80090e2:	430b      	orrs	r3, r1
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80090ea:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80090ee:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80090f2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1   = BYTES_TO_U32_LE( input, offset + 4  );
 80090f6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80090fa:	1d1a      	adds	r2, r3, #4
 80090fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009100:	4413      	add	r3, r2
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800910a:	1d5a      	adds	r2, r3, #5
 800910c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009110:	4413      	add	r3, r2
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	4319      	orrs	r1, r3
 8009118:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800911c:	1d9a      	adds	r2, r3, #6
 800911e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009122:	4413      	add	r3, r2
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	041b      	lsls	r3, r3, #16
 8009128:	4319      	orrs	r1, r3
 800912a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800912e:	1dda      	adds	r2, r3, #7
 8009130:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009134:	4413      	add	r3, r2
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	061b      	lsls	r3, r3, #24
 800913a:	430b      	orrs	r3, r1
 800913c:	2200      	movs	r2, #0
 800913e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009142:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009146:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800914a:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2   = BYTES_TO_U32_LE( input, offset + 8  );
 800914e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009152:	f103 0208 	add.w	r2, r3, #8
 8009156:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800915a:	4413      	add	r3, r2
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	4619      	mov	r1, r3
 8009160:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009164:	f103 0209 	add.w	r2, r3, #9
 8009168:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800916c:	4413      	add	r3, r2
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	4319      	orrs	r1, r3
 8009174:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8009178:	f103 020a 	add.w	r2, r3, #10
 800917c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009180:	4413      	add	r3, r2
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	041b      	lsls	r3, r3, #16
 8009186:	4319      	orrs	r1, r3
 8009188:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800918c:	f103 020b 	add.w	r2, r3, #11
 8009190:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8009194:	4413      	add	r3, r2
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	061b      	lsls	r3, r3, #24
 800919a:	430b      	orrs	r3, r1
 800919c:	2200      	movs	r2, #0
 800919e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80091a2:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80091a6:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 80091aa:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3   = BYTES_TO_U32_LE( input, offset + 12 );
 80091ae:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80091b2:	f103 020c 	add.w	r2, r3, #12
 80091b6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80091ba:	4413      	add	r3, r2
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	4619      	mov	r1, r3
 80091c0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80091c4:	f103 020d 	add.w	r2, r3, #13
 80091c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80091cc:	4413      	add	r3, r2
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	021b      	lsls	r3, r3, #8
 80091d2:	4319      	orrs	r1, r3
 80091d4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80091d8:	f103 020e 	add.w	r2, r3, #14
 80091dc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80091e0:	4413      	add	r3, r2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	041b      	lsls	r3, r3, #16
 80091e6:	4319      	orrs	r1, r3
 80091e8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80091ec:	f103 020f 	add.w	r2, r3, #15
 80091f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80091f4:	4413      	add	r3, r2
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	061b      	lsls	r3, r3, #24
 80091fa:	430b      	orrs	r3, r1
 80091fc:	2200      	movs	r2, #0
 80091fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009202:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009206:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800920a:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 800920e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8009212:	2200      	movs	r2, #0
 8009214:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8009218:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800921c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8009220:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8009224:	4621      	mov	r1, r4
 8009226:	1851      	adds	r1, r2, r1
 8009228:	67b9      	str	r1, [r7, #120]	@ 0x78
 800922a:	4629      	mov	r1, r5
 800922c:	414b      	adcs	r3, r1
 800922e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009230:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8009234:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1  += (uint64_t) acc1 + ( d0 >> 32U );
 8009238:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800923c:	2200      	movs	r2, #0
 800923e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8009242:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8009246:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800924a:	f04f 0000 	mov.w	r0, #0
 800924e:	f04f 0100 	mov.w	r1, #0
 8009252:	0018      	movs	r0, r3
 8009254:	2100      	movs	r1, #0
 8009256:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800925a:	4623      	mov	r3, r4
 800925c:	181b      	adds	r3, r3, r0
 800925e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8009262:	462b      	mov	r3, r5
 8009264:	414b      	adcs	r3, r1
 8009266:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800926a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800926e:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8009272:	4621      	mov	r1, r4
 8009274:	1851      	adds	r1, r2, r1
 8009276:	6739      	str	r1, [r7, #112]	@ 0x70
 8009278:	4629      	mov	r1, r5
 800927a:	414b      	adcs	r3, r1
 800927c:	677b      	str	r3, [r7, #116]	@ 0x74
 800927e:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8009282:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2  += (uint64_t) acc2 + ( d1 >> 32U );
 8009286:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800928a:	2200      	movs	r2, #0
 800928c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8009290:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8009294:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8009298:	f04f 0000 	mov.w	r0, #0
 800929c:	f04f 0100 	mov.w	r1, #0
 80092a0:	0018      	movs	r0, r3
 80092a2:	2100      	movs	r1, #0
 80092a4:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 80092a8:	4623      	mov	r3, r4
 80092aa:	181b      	adds	r3, r3, r0
 80092ac:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80092b0:	462b      	mov	r3, r5
 80092b2:	414b      	adcs	r3, r1
 80092b4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80092b8:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 80092bc:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80092c0:	4621      	mov	r1, r4
 80092c2:	1851      	adds	r1, r2, r1
 80092c4:	66b9      	str	r1, [r7, #104]	@ 0x68
 80092c6:	4629      	mov	r1, r5
 80092c8:	414b      	adcs	r3, r1
 80092ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80092cc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80092d0:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3  += (uint64_t) acc3 + ( d2 >> 32U );
 80092d4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80092d8:	2200      	movs	r2, #0
 80092da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80092de:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 80092e2:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 80092e6:	f04f 0000 	mov.w	r0, #0
 80092ea:	f04f 0100 	mov.w	r1, #0
 80092ee:	0018      	movs	r0, r3
 80092f0:	2100      	movs	r1, #0
 80092f2:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 80092f6:	4623      	mov	r3, r4
 80092f8:	181b      	adds	r3, r3, r0
 80092fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80092fe:	462b      	mov	r3, r5
 8009300:	414b      	adcs	r3, r1
 8009302:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8009306:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800930a:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 800930e:	4621      	mov	r1, r4
 8009310:	1851      	adds	r1, r2, r1
 8009312:	6639      	str	r1, [r7, #96]	@ 0x60
 8009314:	4629      	mov	r1, r5
 8009316:	414b      	adcs	r3, r1
 8009318:	667b      	str	r3, [r7, #100]	@ 0x64
 800931a:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800931e:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc0 = (uint32_t) d0;
 8009322:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009326:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        acc1 = (uint32_t) d1;
 800932a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800932e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        acc2 = (uint32_t) d2;
 8009332:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8009336:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        acc3 = (uint32_t) d3;
 800933a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800933e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        acc4 += (uint32_t) ( d3 >> 32U ) + needs_padding;
 8009342:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8009346:	f04f 0000 	mov.w	r0, #0
 800934a:	f04f 0100 	mov.w	r1, #0
 800934e:	0018      	movs	r0, r3
 8009350:	2100      	movs	r1, #0
 8009352:	4602      	mov	r2, r0
 8009354:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8009358:	441a      	add	r2, r3
 800935a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800935e:	4413      	add	r3, r2
 8009360:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        /* Compute: acc *= r */
        d0 = mul64( acc0, r0  ) +
 8009364:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8009368:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 800936c:	f7ff fe22 	bl	8008fb4 <mul64>
 8009370:	4604      	mov	r4, r0
 8009372:	460d      	mov	r5, r1
             mul64( acc1, rs3 ) +
 8009374:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8009378:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 800937c:	f7ff fe1a 	bl	8008fb4 <mul64>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 8009384:	18a1      	adds	r1, r4, r2
 8009386:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 800938a:	eb45 0303 	adc.w	r3, r5, r3
 800938e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
             mul64( acc2, rs2 ) +
 8009392:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8009396:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 800939a:	f7ff fe0b 	bl	8008fb4 <mul64>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
             mul64( acc1, rs3 ) +
 80093a2:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 80093a6:	4621      	mov	r1, r4
 80093a8:	1889      	adds	r1, r1, r2
 80093aa:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 80093ae:	4629      	mov	r1, r5
 80093b0:	eb41 0303 	adc.w	r3, r1, r3
 80093b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
             mul64( acc3, rs1 );
 80093b8:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 80093bc:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 80093c0:	f7ff fdf8 	bl	8008fb4 <mul64>
 80093c4:	4602      	mov	r2, r0
 80093c6:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 80093c8:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 80093cc:	4621      	mov	r1, r4
 80093ce:	1889      	adds	r1, r1, r2
 80093d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80093d2:	4629      	mov	r1, r5
 80093d4:	eb41 0303 	adc.w	r3, r1, r3
 80093d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093da:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80093de:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1 = mul64( acc0, r1  ) +
 80093e2:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80093e6:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 80093ea:	f7ff fde3 	bl	8008fb4 <mul64>
 80093ee:	4604      	mov	r4, r0
 80093f0:	460d      	mov	r5, r1
             mul64( acc1, r0  ) +
 80093f2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 80093f6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 80093fa:	f7ff fddb 	bl	8008fb4 <mul64>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 8009402:	18a1      	adds	r1, r4, r2
 8009404:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 8009408:	eb45 0303 	adc.w	r3, r5, r3
 800940c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
             mul64( acc2, rs3 ) +
 8009410:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8009414:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8009418:	f7ff fdcc 	bl	8008fb4 <mul64>
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
             mul64( acc1, r0  ) +
 8009420:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 8009424:	4621      	mov	r1, r4
 8009426:	1889      	adds	r1, r1, r2
 8009428:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 800942c:	4629      	mov	r1, r5
 800942e:	eb41 0303 	adc.w	r3, r1, r3
 8009432:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
             mul64( acc3, rs2 ) +
 8009436:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 800943a:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 800943e:	f7ff fdb9 	bl	8008fb4 <mul64>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
             mul64( acc2, rs3 ) +
 8009446:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 800944a:	4621      	mov	r1, r4
 800944c:	1889      	adds	r1, r1, r2
 800944e:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8009452:	4629      	mov	r1, r5
 8009454:	eb41 0303 	adc.w	r3, r1, r3
 8009458:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
             mul64( acc4, rs1 );
 800945c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8009460:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8009464:	f7ff fda6 	bl	8008fb4 <mul64>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 800946c:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8009470:	4621      	mov	r1, r4
 8009472:	1889      	adds	r1, r1, r2
 8009474:	6539      	str	r1, [r7, #80]	@ 0x50
 8009476:	4629      	mov	r1, r5
 8009478:	eb41 0303 	adc.w	r3, r1, r3
 800947c:	657b      	str	r3, [r7, #84]	@ 0x54
 800947e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8009482:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2 = mul64( acc0, r2  ) +
 8009486:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 800948a:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 800948e:	f7ff fd91 	bl	8008fb4 <mul64>
 8009492:	4604      	mov	r4, r0
 8009494:	460d      	mov	r5, r1
             mul64( acc1, r1  ) +
 8009496:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 800949a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 800949e:	f7ff fd89 	bl	8008fb4 <mul64>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 80094a6:	18a1      	adds	r1, r4, r2
 80094a8:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 80094ac:	eb45 0303 	adc.w	r3, r5, r3
 80094b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
             mul64( acc2, r0  ) +
 80094b4:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 80094b8:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 80094bc:	f7ff fd7a 	bl	8008fb4 <mul64>
 80094c0:	4602      	mov	r2, r0
 80094c2:	460b      	mov	r3, r1
             mul64( acc1, r1  ) +
 80094c4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80094c8:	4621      	mov	r1, r4
 80094ca:	1889      	adds	r1, r1, r2
 80094cc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80094d0:	4629      	mov	r1, r5
 80094d2:	eb41 0303 	adc.w	r3, r1, r3
 80094d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
             mul64( acc3, rs3 ) +
 80094da:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 80094de:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 80094e2:	f7ff fd67 	bl	8008fb4 <mul64>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
             mul64( acc2, r0  ) +
 80094ea:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80094ee:	4621      	mov	r1, r4
 80094f0:	1889      	adds	r1, r1, r2
 80094f2:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 80094f6:	4629      	mov	r1, r5
 80094f8:	eb41 0303 	adc.w	r3, r1, r3
 80094fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
             mul64( acc4, rs2 );
 8009500:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8009504:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8009508:	f7ff fd54 	bl	8008fb4 <mul64>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 8009510:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8009514:	4621      	mov	r1, r4
 8009516:	1889      	adds	r1, r1, r2
 8009518:	64b9      	str	r1, [r7, #72]	@ 0x48
 800951a:	4629      	mov	r1, r5
 800951c:	eb41 0303 	adc.w	r3, r1, r3
 8009520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009522:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8009526:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3 = mul64( acc0, r3  ) +
 800952a:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 800952e:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8009532:	f7ff fd3f 	bl	8008fb4 <mul64>
 8009536:	4604      	mov	r4, r0
 8009538:	460d      	mov	r5, r1
             mul64( acc1, r2  ) +
 800953a:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 800953e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8009542:	f7ff fd37 	bl	8008fb4 <mul64>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 800954a:	18a1      	adds	r1, r4, r2
 800954c:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 8009550:	eb45 0303 	adc.w	r3, r5, r3
 8009554:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
             mul64( acc2, r1  ) +
 8009558:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 800955c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8009560:	f7ff fd28 	bl	8008fb4 <mul64>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
             mul64( acc1, r2  ) +
 8009568:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800956c:	4621      	mov	r1, r4
 800956e:	1889      	adds	r1, r1, r2
 8009570:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8009574:	4629      	mov	r1, r5
 8009576:	eb41 0303 	adc.w	r3, r1, r3
 800957a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
             mul64( acc3, r0  ) +
 800957e:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8009582:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8009586:	f7ff fd15 	bl	8008fb4 <mul64>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
             mul64( acc2, r1  ) +
 800958e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8009592:	4621      	mov	r1, r4
 8009594:	eb11 0a02 	adds.w	sl, r1, r2
 8009598:	4629      	mov	r1, r5
 800959a:	eb41 0b03 	adc.w	fp, r1, r3
             mul64( acc4, rs3 );
 800959e:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 80095a2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80095a6:	f7ff fd05 	bl	8008fb4 <mul64>
 80095aa:	4602      	mov	r2, r0
 80095ac:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 80095ae:	eb1a 0102 	adds.w	r1, sl, r2
 80095b2:	6439      	str	r1, [r7, #64]	@ 0x40
 80095b4:	eb4b 0303 	adc.w	r3, fp, r3
 80095b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80095be:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc4 *= r0;
 80095c2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80095c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80095ca:	fb02 f303 	mul.w	r3, r2, r3
 80095ce:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += ( d0 >> 32 );
 80095d2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80095d6:	f04f 0000 	mov.w	r0, #0
 80095da:	f04f 0100 	mov.w	r1, #0
 80095de:	0018      	movs	r0, r3
 80095e0:	2100      	movs	r1, #0
 80095e2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80095e6:	1814      	adds	r4, r2, r0
 80095e8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80095ea:	414b      	adcs	r3, r1
 80095ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80095f2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2 += ( d1 >> 32 );
 80095f6:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80095fa:	f04f 0000 	mov.w	r0, #0
 80095fe:	f04f 0100 	mov.w	r1, #0
 8009602:	0018      	movs	r0, r3
 8009604:	2100      	movs	r1, #0
 8009606:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800960a:	1814      	adds	r4, r2, r0
 800960c:	633c      	str	r4, [r7, #48]	@ 0x30
 800960e:	414b      	adcs	r3, r1
 8009610:	637b      	str	r3, [r7, #52]	@ 0x34
 8009612:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009616:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3 += ( d2 >> 32 );
 800961a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800961e:	f04f 0000 	mov.w	r0, #0
 8009622:	f04f 0100 	mov.w	r1, #0
 8009626:	0018      	movs	r0, r3
 8009628:	2100      	movs	r1, #0
 800962a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800962e:	1814      	adds	r4, r2, r0
 8009630:	62bc      	str	r4, [r7, #40]	@ 0x28
 8009632:	414b      	adcs	r3, r1
 8009634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009636:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800963a:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc0 = (uint32_t) d0;
 800963e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009642:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        acc1 = (uint32_t) d1;
 8009646:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800964a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        acc2 = (uint32_t) d2;
 800964e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8009652:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        acc3 = (uint32_t) d3;
 8009656:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800965a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        acc4 = (uint32_t) ( d3 >> 32 ) + acc4;
 800965e:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8009662:	f04f 0000 	mov.w	r0, #0
 8009666:	f04f 0100 	mov.w	r1, #0
 800966a:	0018      	movs	r0, r3
 800966c:	2100      	movs	r1, #0
 800966e:	4602      	mov	r2, r0
 8009670:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8009674:	4413      	add	r3, r2
 8009676:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        d0 = (uint64_t) acc0 + ( acc4 >> 2 ) + ( acc4 & 0xFFFFFFFCU );
 800967a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800967e:	2200      	movs	r2, #0
 8009680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009684:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009688:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 800968c:	089b      	lsrs	r3, r3, #2
 800968e:	2200      	movs	r2, #0
 8009690:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009694:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009698:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800969c:	4623      	mov	r3, r4
 800969e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80096a2:	4602      	mov	r2, r0
 80096a4:	eb13 0802 	adds.w	r8, r3, r2
 80096a8:	462b      	mov	r3, r5
 80096aa:	460a      	mov	r2, r1
 80096ac:	eb43 0902 	adc.w	r9, r3, r2
 80096b0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096ba:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80096be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80096c2:	f023 0303 	bic.w	r3, r3, #3
 80096c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096ca:	2300      	movs	r3, #0
 80096cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80096d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096d4:	460b      	mov	r3, r1
 80096d6:	eb18 0303 	adds.w	r3, r8, r3
 80096da:	623b      	str	r3, [r7, #32]
 80096dc:	4613      	mov	r3, r2
 80096de:	eb49 0303 	adc.w	r3, r9, r3
 80096e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80096e4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80096e8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc4 &= 3U;
 80096ec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        acc0 = (uint32_t) d0;
 80096f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80096fc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        d0 = (uint64_t) acc1 + ( d0 >> 32U );
 8009700:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8009704:	2200      	movs	r2, #0
 8009706:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800970a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800970e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8009712:	f04f 0000 	mov.w	r0, #0
 8009716:	f04f 0100 	mov.w	r1, #0
 800971a:	0018      	movs	r0, r3
 800971c:	2100      	movs	r1, #0
 800971e:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8009722:	4623      	mov	r3, r4
 8009724:	181b      	adds	r3, r3, r0
 8009726:	61bb      	str	r3, [r7, #24]
 8009728:	462b      	mov	r3, r5
 800972a:	414b      	adcs	r3, r1
 800972c:	61fb      	str	r3, [r7, #28]
 800972e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009732:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc1 = (uint32_t) d0;
 8009736:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800973a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        d0 = (uint64_t) acc2 + ( d0 >> 32U );
 800973e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8009742:	2200      	movs	r2, #0
 8009744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009748:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800974c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8009750:	f04f 0000 	mov.w	r0, #0
 8009754:	f04f 0100 	mov.w	r1, #0
 8009758:	0018      	movs	r0, r3
 800975a:	2100      	movs	r1, #0
 800975c:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8009760:	4623      	mov	r3, r4
 8009762:	181b      	adds	r3, r3, r0
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	462b      	mov	r3, r5
 8009768:	414b      	adcs	r3, r1
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009770:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc2 = (uint32_t) d0;
 8009774:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009778:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        d0 = (uint64_t) acc3 + ( d0 >> 32U );
 800977c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8009780:	2200      	movs	r2, #0
 8009782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009786:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800978a:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800978e:	f04f 0000 	mov.w	r0, #0
 8009792:	f04f 0100 	mov.w	r1, #0
 8009796:	0018      	movs	r0, r3
 8009798:	2100      	movs	r1, #0
 800979a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 800979e:	4623      	mov	r3, r4
 80097a0:	181b      	adds	r3, r3, r0
 80097a2:	60bb      	str	r3, [r7, #8]
 80097a4:	462b      	mov	r3, r5
 80097a6:	414b      	adcs	r3, r1
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80097ae:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc3 = (uint32_t) d0;
 80097b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80097b6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        d0 = (uint64_t) acc4 + ( d0 >> 32U );
 80097ba:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80097be:	2200      	movs	r2, #0
 80097c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097c4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80097c8:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80097cc:	f04f 0000 	mov.w	r0, #0
 80097d0:	f04f 0100 	mov.w	r1, #0
 80097d4:	0018      	movs	r0, r3
 80097d6:	2100      	movs	r1, #0
 80097d8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80097dc:	4623      	mov	r3, r4
 80097de:	181b      	adds	r3, r3, r0
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	462b      	mov	r3, r5
 80097e4:	414b      	adcs	r3, r1
 80097e6:	607b      	str	r3, [r7, #4]
 80097e8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80097ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc4 = (uint32_t) d0;
 80097f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80097f4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 80097f8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80097fc:	3310      	adds	r3, #16
 80097fe:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    for( i = 0U; i < nblocks; i++ )
 8009802:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8009806:	3301      	adds	r3, #1
 8009808:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800980c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8009810:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8009814:	429a      	cmp	r2, r3
 8009816:	f4ff ac43 	bcc.w	80090a0 <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 800981a:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800981e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8009822:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 8009824:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009828:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800982c:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->acc[2] = acc2;
 800982e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009832:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8009836:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->acc[3] = acc3;
 8009838:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800983c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8009840:	62da      	str	r2, [r3, #44]	@ 0x2c
    ctx->acc[4] = acc4;
 8009842:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8009846:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800984a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800984c:	bf00      	nop
 800984e:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 8009852:	46bd      	mov	sp, r7
 8009854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009858 <mbedtls_poly1305_init>:
    mac[14] = (unsigned char)( acc3 >> 16 );
    mac[15] = (unsigned char)( acc3 >> 24 );
}

void mbedtls_poly1305_init( mbedtls_poly1305_context *ctx )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
    POLY1305_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 8009860:	2148      	movs	r1, #72	@ 0x48
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7ff fb94 	bl	8008f90 <mbedtls_platform_zeroize>
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <mbedtls_poly1305_free>:

void mbedtls_poly1305_free( mbedtls_poly1305_context *ctx )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <mbedtls_poly1305_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 800987e:	2148      	movs	r1, #72	@ 0x48
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fb85 	bl	8008f90 <mbedtls_platform_zeroize>
 8009886:	e000      	b.n	800988a <mbedtls_poly1305_free+0x1a>
        return;
 8009888:	bf00      	nop
}
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update( mbedtls_poly1305_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ( remaining > 0U ) && ( ctx->queue_len > 0U ) )
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d03e      	beq.n	8009928 <mbedtls_poly1305_update+0x98>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d03a      	beq.n	8009928 <mbedtls_poly1305_update+0x98>
    {
        queue_free_len = ( POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098b6:	f1c3 0310 	rsb	r3, r3, #16
 80098ba:	617b      	str	r3, [r7, #20]

        if( ilen < queue_free_len )
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d213      	bcs.n	80098ec <mbedtls_poly1305_update+0x5c>
        {
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy( &ctx->queue[ctx->queue_len],
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c8:	3330      	adds	r3, #48	@ 0x30
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	4413      	add	r3, r2
 80098ce:	3304      	adds	r3, #4
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	68b9      	ldr	r1, [r7, #8]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f003 f855 	bl	800c984 <memcpy>
                    input,
                    ilen );

            ctx->queue_len += ilen;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	441a      	add	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	645a      	str	r2, [r3, #68]	@ 0x44

            remaining = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e01d      	b.n	8009928 <mbedtls_poly1305_update+0x98>
        }
        else
        {
            /* Enough data to produce a complete block */
            memcpy( &ctx->queue[ctx->queue_len],
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f0:	3330      	adds	r3, #48	@ 0x30
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	4413      	add	r3, r2
 80098f6:	3304      	adds	r3, #4
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f003 f841 	bl	800c984 <memcpy>
                    input,
                    queue_free_len );

            ctx->queue_len = 0U;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2200      	movs	r2, #0
 8009906:	645a      	str	r2, [r3, #68]	@ 0x44

            poly1305_process( ctx, 1U, ctx->queue, 1U ); /* add padding bit */
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800990e:	2301      	movs	r3, #1
 8009910:	2101      	movs	r1, #1
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fb6c 	bl	8008ff0 <poly1305_process>

            offset    += queue_free_len;
 8009918:	69fa      	ldr	r2, [r7, #28]
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	4413      	add	r3, r2
 800991e:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	61bb      	str	r3, [r7, #24]
        }
    }

    if( remaining >= POLY1305_BLOCK_SIZE_BYTES )
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	2b0f      	cmp	r3, #15
 800992c:	d913      	bls.n	8009956 <mbedtls_poly1305_update+0xc6>
    {
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	091b      	lsrs	r3, r3, #4
 8009932:	613b      	str	r3, [r7, #16]

        poly1305_process( ctx, nblocks, &input[offset], 1U );
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	441a      	add	r2, r3
 800993a:	2301      	movs	r3, #1
 800993c:	6939      	ldr	r1, [r7, #16]
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7ff fb56 	bl	8008ff0 <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	4413      	add	r3, r2
 800994c:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	f003 030f 	and.w	r3, r3, #15
 8009954:	61bb      	str	r3, [r7, #24]
    }

    if( remaining > 0U )
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00c      	beq.n	8009976 <mbedtls_poly1305_update+0xe6>
    {
        /* Store partial block */
        ctx->queue_len = remaining;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	69ba      	ldr	r2, [r7, #24]
 8009960:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy( ctx->queue, &input[offset], remaining );
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	4619      	mov	r1, r3
 8009972:	f003 f807 	bl	800c984 <memcpy>
    }

    return( 0 );
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3720      	adds	r7, #32
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <mbedtls_sha512_init>:
    (b)[(i) + 7] = (unsigned char) ( (n)       );       \
}
#endif /* PUT_UINT64_BE */

void mbedtls_sha512_init( mbedtls_sha512_context *ctx )
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
    SHA512_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha512_context ) );
 8009988:	22d8      	movs	r2, #216	@ 0xd8
 800998a:	2100      	movs	r1, #0
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f002 ffb5 	bl	800c8fc <memset>
}
 8009992:	bf00      	nop
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <mbedtls_sha512_free>:

void mbedtls_sha512_free( mbedtls_sha512_context *ctx )
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d004      	beq.n	80099b2 <mbedtls_sha512_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_sha512_context ) );
 80099a8:	21d8      	movs	r1, #216	@ 0xd8
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff faf0 	bl	8008f90 <mbedtls_platform_zeroize>
 80099b0:	e000      	b.n	80099b4 <mbedtls_sha512_free+0x1a>
        return;
 80099b2:	bf00      	nop
}
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	0000      	movs	r0, r0
 80099bc:	0000      	movs	r0, r0
	...

080099c0 <mbedtls_sha512_starts_ret>:

/*
 * SHA-512 context setup
 */
int mbedtls_sha512_starts_ret( mbedtls_sha512_context *ctx, int is384 )
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );

    ctx->total[0] = 0;
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	f04f 0300 	mov.w	r3, #0
 80099d4:	e9c1 2300 	strd	r2, r3, [r1]
    ctx->total[1] = 0;
 80099d8:	6879      	ldr	r1, [r7, #4]
 80099da:	f04f 0200 	mov.w	r2, #0
 80099de:	f04f 0300 	mov.w	r3, #0
 80099e2:	e9c1 2302 	strd	r2, r3, [r1, #8]

    if( is384 == 0 )
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d130      	bne.n	8009a4e <mbedtls_sha512_starts_ret+0x8e>
    {
        /* SHA-512 */
        ctx->state[0] = UL64(0x6A09E667F3BCC908);
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	a336      	add	r3, pc, #216	@ (adr r3, 8009ac8 <mbedtls_sha512_starts_ret+0x108>)
 80099f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f4:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0xBB67AE8584CAA73B);
 80099f8:	6879      	ldr	r1, [r7, #4]
 80099fa:	a335      	add	r3, pc, #212	@ (adr r3, 8009ad0 <mbedtls_sha512_starts_ret+0x110>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x3C6EF372FE94F82B);
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	a334      	add	r3, pc, #208	@ (adr r3, 8009ad8 <mbedtls_sha512_starts_ret+0x118>)
 8009a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0c:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0xA54FF53A5F1D36F1);
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	a333      	add	r3, pc, #204	@ (adr r3, 8009ae0 <mbedtls_sha512_starts_ret+0x120>)
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x510E527FADE682D1);
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	a332      	add	r3, pc, #200	@ (adr r3, 8009ae8 <mbedtls_sha512_starts_ret+0x128>)
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x9B05688C2B3E6C1F);
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	a331      	add	r3, pc, #196	@ (adr r3, 8009af0 <mbedtls_sha512_starts_ret+0x130>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0x1F83D9ABFB41BD6B);
 8009a34:	6879      	ldr	r1, [r7, #4]
 8009a36:	a330      	add	r3, pc, #192	@ (adr r3, 8009af8 <mbedtls_sha512_starts_ret+0x138>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x5BE0CD19137E2179);
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	a32f      	add	r3, pc, #188	@ (adr r3, 8009b00 <mbedtls_sha512_starts_ret+0x140>)
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 8009a4c:	e02f      	b.n	8009aae <mbedtls_sha512_starts_ret+0xee>
    }
    else
    {
        /* SHA-384 */
        ctx->state[0] = UL64(0xCBBB9D5DC1059ED8);
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	a32d      	add	r3, pc, #180	@ (adr r3, 8009b08 <mbedtls_sha512_starts_ret+0x148>)
 8009a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a56:	e9c1 2304 	strd	r2, r3, [r1, #16]
        ctx->state[1] = UL64(0x629A292A367CD507);
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	a32c      	add	r3, pc, #176	@ (adr r3, 8009b10 <mbedtls_sha512_starts_ret+0x150>)
 8009a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a62:	e9c1 2306 	strd	r2, r3, [r1, #24]
        ctx->state[2] = UL64(0x9159015A3070DD17);
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	a32b      	add	r3, pc, #172	@ (adr r3, 8009b18 <mbedtls_sha512_starts_ret+0x158>)
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	e9c1 2308 	strd	r2, r3, [r1, #32]
        ctx->state[3] = UL64(0x152FECD8F70E5939);
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	a32a      	add	r3, pc, #168	@ (adr r3, 8009b20 <mbedtls_sha512_starts_ret+0x160>)
 8009a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        ctx->state[4] = UL64(0x67332667FFC00B31);
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	a329      	add	r3, pc, #164	@ (adr r3, 8009b28 <mbedtls_sha512_starts_ret+0x168>)
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
        ctx->state[5] = UL64(0x8EB44A8768581511);
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	a328      	add	r3, pc, #160	@ (adr r3, 8009b30 <mbedtls_sha512_starts_ret+0x170>)
 8009a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a92:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
        ctx->state[6] = UL64(0xDB0C2E0D64F98FA7);
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	a327      	add	r3, pc, #156	@ (adr r3, 8009b38 <mbedtls_sha512_starts_ret+0x178>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
        ctx->state[7] = UL64(0x47B5481DBEFA4FA4);
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	a326      	add	r3, pc, #152	@ (adr r3, 8009b40 <mbedtls_sha512_starts_ret+0x180>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    }

    ctx->is384 = is384;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	683a      	ldr	r2, [r7, #0]
 8009ab2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    return( 0 );
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	f3af 8000 	nop.w
 8009ac8:	f3bcc908 	.word	0xf3bcc908
 8009acc:	6a09e667 	.word	0x6a09e667
 8009ad0:	84caa73b 	.word	0x84caa73b
 8009ad4:	bb67ae85 	.word	0xbb67ae85
 8009ad8:	fe94f82b 	.word	0xfe94f82b
 8009adc:	3c6ef372 	.word	0x3c6ef372
 8009ae0:	5f1d36f1 	.word	0x5f1d36f1
 8009ae4:	a54ff53a 	.word	0xa54ff53a
 8009ae8:	ade682d1 	.word	0xade682d1
 8009aec:	510e527f 	.word	0x510e527f
 8009af0:	2b3e6c1f 	.word	0x2b3e6c1f
 8009af4:	9b05688c 	.word	0x9b05688c
 8009af8:	fb41bd6b 	.word	0xfb41bd6b
 8009afc:	1f83d9ab 	.word	0x1f83d9ab
 8009b00:	137e2179 	.word	0x137e2179
 8009b04:	5be0cd19 	.word	0x5be0cd19
 8009b08:	c1059ed8 	.word	0xc1059ed8
 8009b0c:	cbbb9d5d 	.word	0xcbbb9d5d
 8009b10:	367cd507 	.word	0x367cd507
 8009b14:	629a292a 	.word	0x629a292a
 8009b18:	3070dd17 	.word	0x3070dd17
 8009b1c:	9159015a 	.word	0x9159015a
 8009b20:	f70e5939 	.word	0xf70e5939
 8009b24:	152fecd8 	.word	0x152fecd8
 8009b28:	ffc00b31 	.word	0xffc00b31
 8009b2c:	67332667 	.word	0x67332667
 8009b30:	68581511 	.word	0x68581511
 8009b34:	8eb44a87 	.word	0x8eb44a87
 8009b38:	64f98fa7 	.word	0x64f98fa7
 8009b3c:	db0c2e0d 	.word	0xdb0c2e0d
 8009b40:	befa4fa4 	.word	0xbefa4fa4
 8009b44:	47b5481d 	.word	0x47b5481d

08009b48 <mbedtls_internal_sha512_process>:
    UL64(0x5FCB6FAB3AD6FAEC),  UL64(0x6C44198C4A475817)
};

int mbedtls_internal_sha512_process( mbedtls_sha512_context *ctx,
                                     const unsigned char data[128] )
{
 8009b48:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009b4c:	f5ad 6d1e 	sub.w	sp, sp, #2528	@ 0x9e0
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009b56:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8009b5a:	6018      	str	r0, [r3, #0]
 8009b5c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009b60:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009b64:	6019      	str	r1, [r3, #0]
        temp1 = (h) + S3(e) + F1((e),(f),(g)) + (K) + (x);      \
        temp2 = S2(a) + F0((a),(b),(c));                        \
        (d) += temp1; (h) = temp1 + temp2;                      \
    } while( 0 )

    for( i = 0; i < 16; i++ )
 8009b66:	2300      	movs	r3, #0
 8009b68:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8009b6c:	e11f      	b.n	8009dae <mbedtls_internal_sha512_process+0x266>
    {
        GET_UINT64_BE( W[i], data, i << 3 );
 8009b6e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	461a      	mov	r2, r3
 8009b76:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009b7a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4413      	add	r3, r2
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 8009b8c:	f8c7 26d4 	str.w	r2, [r7, #1748]	@ 0x6d4
 8009b90:	f04f 0000 	mov.w	r0, #0
 8009b94:	f04f 0100 	mov.w	r1, #0
 8009b98:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	@ 0x6d0
 8009b9c:	0619      	lsls	r1, r3, #24
 8009b9e:	2000      	movs	r0, #0
 8009ba0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009ba4:	00db      	lsls	r3, r3, #3
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009bac:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 8009bbe:	f8c7 26cc 	str.w	r2, [r7, #1740]	@ 0x6cc
 8009bc2:	f04f 0200 	mov.w	r2, #0
 8009bc6:	f04f 0300 	mov.w	r3, #0
 8009bca:	f8d7 66c8 	ldr.w	r6, [r7, #1736]	@ 0x6c8
 8009bce:	0433      	lsls	r3, r6, #16
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	ea40 0602 	orr.w	r6, r0, r2
 8009bd6:	f8c7 66e8 	str.w	r6, [r7, #1768]	@ 0x6e8
 8009bda:	430b      	orrs	r3, r1
 8009bdc:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 8009be0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	1c9a      	adds	r2, r3, #2
 8009be8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009bec:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8c7 36c0 	str.w	r3, [r7, #1728]	@ 0x6c0
 8009bfe:	f8c7 26c4 	str.w	r2, [r7, #1732]	@ 0x6c4
 8009c02:	f04f 0200 	mov.w	r2, #0
 8009c06:	f04f 0300 	mov.w	r3, #0
 8009c0a:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 8009c0e:	020b      	lsls	r3, r1, #8
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 8009c16:	4311      	orrs	r1, r2
 8009c18:	f8c7 16e0 	str.w	r1, [r7, #1760]	@ 0x6e0
 8009c1c:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 8009c20:	430b      	orrs	r3, r1
 8009c22:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 8009c26:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	1cda      	adds	r2, r3, #3
 8009c2e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009c32:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4413      	add	r3, r2
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8c7 36b8 	str.w	r3, [r7, #1720]	@ 0x6b8
 8009c44:	f8c7 26bc 	str.w	r2, [r7, #1724]	@ 0x6bc
 8009c48:	f04f 0200 	mov.w	r2, #0
 8009c4c:	f04f 0300 	mov.w	r3, #0
 8009c50:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 8009c54:	000b      	movs	r3, r1
 8009c56:	2200      	movs	r2, #0
 8009c58:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 8009c5c:	4311      	orrs	r1, r2
 8009c5e:	f8c7 16d8 	str.w	r1, [r7, #1752]	@ 0x6d8
 8009c62:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 8009c66:	430b      	orrs	r3, r1
 8009c68:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 8009c6c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009c70:	00db      	lsls	r3, r3, #3
 8009c72:	1d1a      	adds	r2, r3, #4
 8009c74:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009c78:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4413      	add	r3, r2
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8c7 36b0 	str.w	r3, [r7, #1712]	@ 0x6b0
 8009c8a:	f8c7 26b4 	str.w	r2, [r7, #1716]	@ 0x6b4
 8009c8e:	f507 63d6 	add.w	r3, r7, #1712	@ 0x6b0
 8009c92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8009c96:	460b      	mov	r3, r1
 8009c98:	0a1b      	lsrs	r3, r3, #8
 8009c9a:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	061b      	lsls	r3, r3, #24
 8009ca2:	f8c7 36a8 	str.w	r3, [r7, #1704]	@ 0x6a8
 8009ca6:	f8d7 36d8 	ldr.w	r3, [r7, #1752]	@ 0x6d8
 8009caa:	f507 62d5 	add.w	r2, r7, #1704	@ 0x6a8
 8009cae:	e9d2 0100 	ldrd	r0, r1, [r2]
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	ea43 0a02 	orr.w	sl, r3, r2
 8009cb8:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	@ 0x6dc
 8009cbc:	460a      	mov	r2, r1
 8009cbe:	ea43 0b02 	orr.w	fp, r3, r2
 8009cc2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009cc6:	00db      	lsls	r3, r3, #3
 8009cc8:	1d5a      	adds	r2, r3, #5
 8009cca:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009cce:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c7 36f8 	str.w	r3, [r7, #1784]	@ 0x6f8
 8009ce0:	f8c7 26fc 	str.w	r2, [r7, #1788]	@ 0x6fc
 8009ce4:	f04f 0200 	mov.w	r2, #0
 8009ce8:	f04f 0300 	mov.w	r3, #0
 8009cec:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 8009cf0:	040b      	lsls	r3, r1, #16
 8009cf2:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8009cf6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8009cfa:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8009cfe:	040a      	lsls	r2, r1, #16
 8009d00:	ea4a 0802 	orr.w	r8, sl, r2
 8009d04:	ea4b 0903 	orr.w	r9, fp, r3
 8009d08:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	1d9a      	adds	r2, r3, #6
 8009d10:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009d14:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2200      	movs	r2, #0
 8009d22:	f8c7 36f0 	str.w	r3, [r7, #1776]	@ 0x6f0
 8009d26:	f8c7 26f4 	str.w	r2, [r7, #1780]	@ 0x6f4
 8009d2a:	f04f 0200 	mov.w	r2, #0
 8009d2e:	f04f 0300 	mov.w	r3, #0
 8009d32:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 8009d36:	020b      	lsls	r3, r1, #8
 8009d38:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8009d3c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8009d40:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8009d44:	020a      	lsls	r2, r1, #8
 8009d46:	ea48 0402 	orr.w	r4, r8, r2
 8009d4a:	ea49 0503 	orr.w	r5, r9, r3
 8009d4e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	1dda      	adds	r2, r3, #7
 8009d56:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009d5a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4413      	add	r3, r2
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2200      	movs	r2, #0
 8009d68:	f8c7 36a0 	str.w	r3, [r7, #1696]	@ 0x6a0
 8009d6c:	f8c7 26a4 	str.w	r2, [r7, #1700]	@ 0x6a4
 8009d70:	f507 63d4 	add.w	r3, r7, #1696	@ 0x6a0
 8009d74:	e9d3 1200 	ldrd	r1, r2, [r3]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4323      	orrs	r3, r4
 8009d7c:	f8c7 3698 	str.w	r3, [r7, #1688]	@ 0x698
 8009d80:	4613      	mov	r3, r2
 8009d82:	432b      	orrs	r3, r5
 8009d84:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8009d88:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009d8c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009d90:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009d94:	00db      	lsls	r3, r3, #3
 8009d96:	4413      	add	r3, r2
 8009d98:	f507 62d3 	add.w	r2, r7, #1688	@ 0x698
 8009d9c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8009da0:	e9c3 1200 	strd	r1, r2, [r3]
    for( i = 0; i < 16; i++ )
 8009da4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009da8:	3301      	adds	r3, #1
 8009daa:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8009dae:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009db2:	2b0f      	cmp	r3, #15
 8009db4:	f77f aedb 	ble.w	8009b6e <mbedtls_internal_sha512_process+0x26>
    }

    for( ; i < 80; i++ )
 8009db8:	e10e      	b.n	8009fd8 <mbedtls_internal_sha512_process+0x490>
    {
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8009dba:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009dbe:	1e99      	subs	r1, r3, #2
 8009dc0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009dc4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009dc8:	00cb      	lsls	r3, r1, #3
 8009dca:	4413      	add	r3, r2
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	0358      	lsls	r0, r3, #13
 8009dd2:	0cd1      	lsrs	r1, r2, #19
 8009dd4:	4301      	orrs	r1, r0
 8009dd6:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 8009dda:	0351      	lsls	r1, r2, #13
 8009ddc:	0cdb      	lsrs	r3, r3, #19
 8009dde:	430b      	orrs	r3, r1
 8009de0:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 8009de4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009de8:	1e99      	subs	r1, r3, #2
 8009dea:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009dee:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009df2:	00cb      	lsls	r3, r1, #3
 8009df4:	4413      	add	r3, r2
 8009df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfa:	0f50      	lsrs	r0, r2, #29
 8009dfc:	00d9      	lsls	r1, r3, #3
 8009dfe:	4301      	orrs	r1, r0
 8009e00:	f8c7 168c 	str.w	r1, [r7, #1676]	@ 0x68c
 8009e04:	0f59      	lsrs	r1, r3, #29
 8009e06:	00d3      	lsls	r3, r2, #3
 8009e08:	430b      	orrs	r3, r1
 8009e0a:	f8c7 3688 	str.w	r3, [r7, #1672]	@ 0x688
 8009e0e:	f507 63d2 	add.w	r3, r7, #1680	@ 0x690
 8009e12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009e16:	4623      	mov	r3, r4
 8009e18:	f507 62d1 	add.w	r2, r7, #1672	@ 0x688
 8009e1c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8009e20:	4602      	mov	r2, r0
 8009e22:	4053      	eors	r3, r2
 8009e24:	f8c7 3680 	str.w	r3, [r7, #1664]	@ 0x680
 8009e28:	462b      	mov	r3, r5
 8009e2a:	460a      	mov	r2, r1
 8009e2c:	4053      	eors	r3, r2
 8009e2e:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 8009e32:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009e36:	1e99      	subs	r1, r3, #2
 8009e38:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009e3c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009e40:	00cb      	lsls	r3, r1, #3
 8009e42:	4413      	add	r3, r2
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	f04f 0000 	mov.w	r0, #0
 8009e4c:	f04f 0100 	mov.w	r1, #0
 8009e50:	0990      	lsrs	r0, r2, #6
 8009e52:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8009e56:	0999      	lsrs	r1, r3, #6
 8009e58:	f507 63d0 	add.w	r3, r7, #1664	@ 0x680
 8009e5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009e60:	4623      	mov	r3, r4
 8009e62:	4043      	eors	r3, r0
 8009e64:	f8c7 3678 	str.w	r3, [r7, #1656]	@ 0x678
 8009e68:	462b      	mov	r3, r5
 8009e6a:	404b      	eors	r3, r1
 8009e6c:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 8009e70:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009e74:	1fd9      	subs	r1, r3, #7
 8009e76:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009e7a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009e7e:	00cb      	lsls	r3, r1, #3
 8009e80:	4413      	add	r3, r2
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f507 61cf 	add.w	r1, r7, #1656	@ 0x678
 8009e8a:	e9d1 4500 	ldrd	r4, r5, [r1]
 8009e8e:	4621      	mov	r1, r4
 8009e90:	1889      	adds	r1, r1, r2
 8009e92:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 8009e96:	4629      	mov	r1, r5
 8009e98:	eb41 0303 	adc.w	r3, r1, r3
 8009e9c:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
               S0(W[i - 15]) + W[i - 16];
 8009ea0:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009ea4:	f1a3 010f 	sub.w	r1, r3, #15
 8009ea8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009eac:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009eb0:	00cb      	lsls	r3, r1, #3
 8009eb2:	4413      	add	r3, r2
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	07d8      	lsls	r0, r3, #31
 8009eba:	0851      	lsrs	r1, r2, #1
 8009ebc:	4301      	orrs	r1, r0
 8009ebe:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 8009ec2:	07d1      	lsls	r1, r2, #31
 8009ec4:	085b      	lsrs	r3, r3, #1
 8009ec6:	430b      	orrs	r3, r1
 8009ec8:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 8009ecc:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009ed0:	f1a3 010f 	sub.w	r1, r3, #15
 8009ed4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009ed8:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009edc:	00cb      	lsls	r3, r1, #3
 8009ede:	4413      	add	r3, r2
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	0618      	lsls	r0, r3, #24
 8009ee6:	0a11      	lsrs	r1, r2, #8
 8009ee8:	4301      	orrs	r1, r0
 8009eea:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 8009eee:	0611      	lsls	r1, r2, #24
 8009ef0:	0a1b      	lsrs	r3, r3, #8
 8009ef2:	430b      	orrs	r3, r1
 8009ef4:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 8009ef8:	f507 63cd 	add.w	r3, r7, #1640	@ 0x668
 8009efc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f00:	4623      	mov	r3, r4
 8009f02:	f507 62cc 	add.w	r2, r7, #1632	@ 0x660
 8009f06:	e9d2 0100 	ldrd	r0, r1, [r2]
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	4053      	eors	r3, r2
 8009f0e:	f8c7 3658 	str.w	r3, [r7, #1624]	@ 0x658
 8009f12:	462b      	mov	r3, r5
 8009f14:	460a      	mov	r2, r1
 8009f16:	4053      	eors	r3, r2
 8009f18:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 8009f1c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009f20:	f1a3 010f 	sub.w	r1, r3, #15
 8009f24:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009f28:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009f2c:	00cb      	lsls	r3, r1, #3
 8009f2e:	4413      	add	r3, r2
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	f04f 0000 	mov.w	r0, #0
 8009f38:	f04f 0100 	mov.w	r1, #0
 8009f3c:	09d0      	lsrs	r0, r2, #7
 8009f3e:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8009f42:	09d9      	lsrs	r1, r3, #7
 8009f44:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8009f48:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f4c:	4623      	mov	r3, r4
 8009f4e:	4043      	eors	r3, r0
 8009f50:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
 8009f54:	462b      	mov	r3, r5
 8009f56:	404b      	eors	r3, r1
 8009f58:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8009f5c:	f507 63ce 	add.w	r3, r7, #1648	@ 0x670
 8009f60:	e9d3 4500 	ldrd	r4, r5, [r3]
 8009f64:	4623      	mov	r3, r4
 8009f66:	f507 62ca 	add.w	r2, r7, #1616	@ 0x650
 8009f6a:	e9d2 0100 	ldrd	r0, r1, [r2]
 8009f6e:	4602      	mov	r2, r0
 8009f70:	189b      	adds	r3, r3, r2
 8009f72:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 8009f76:	462b      	mov	r3, r5
 8009f78:	460a      	mov	r2, r1
 8009f7a:	4153      	adcs	r3, r2
 8009f7c:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
               S0(W[i - 15]) + W[i - 16];
 8009f80:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009f84:	f1a3 0110 	sub.w	r1, r3, #16
 8009f88:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009f8c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009f90:	00cb      	lsls	r3, r1, #3
 8009f92:	4413      	add	r3, r2
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	f507 61c9 	add.w	r1, r7, #1608	@ 0x648
 8009f9c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	1889      	adds	r1, r1, r2
 8009fa4:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 8009fa8:	4629      	mov	r1, r5
 8009faa:	eb41 0303 	adc.w	r3, r1, r3
 8009fae:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
        W[i] = S1(W[i -  2]) + W[i -  7] +
 8009fb2:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009fb6:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8009fba:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009fbe:	00db      	lsls	r3, r3, #3
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f507 62c8 	add.w	r2, r7, #1600	@ 0x640
 8009fc6:	e9d2 1200 	ldrd	r1, r2, [r2]
 8009fca:	e9c3 1200 	strd	r1, r2, [r3]
    for( ; i < 80; i++ )
 8009fce:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8009fd8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8009fdc:	2b4f      	cmp	r3, #79	@ 0x4f
 8009fde:	f77f aeec 	ble.w	8009dba <mbedtls_internal_sha512_process+0x272>
    }

    A = ctx->state[0];
 8009fe2:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009fe6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009ff0:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 8009ff4:	e9c1 2300 	strd	r2, r3, [r1]
    B = ctx->state[1];
 8009ff8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8009ffc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a006:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 800a00a:	e9c1 2300 	strd	r2, r3, [r1]
    C = ctx->state[2];
 800a00e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a012:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a01c:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 800a020:	e9c1 2300 	strd	r2, r3, [r1]
    D = ctx->state[3];
 800a024:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a028:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800a032:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 800a036:	e9c1 2300 	strd	r2, r3, [r1]
    E = ctx->state[4];
 800a03a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a03e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800a048:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 800a04c:	e9c1 2300 	strd	r2, r3, [r1]
    F = ctx->state[5];
 800a050:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a054:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a05e:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 800a062:	e9c1 2300 	strd	r2, r3, [r1]
    G = ctx->state[6];
 800a066:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a06a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800a074:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 800a078:	e9c1 2300 	strd	r2, r3, [r1]
    H = ctx->state[7];
 800a07c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a080:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800a08a:	f607 1198 	addw	r1, r7, #2456	@ 0x998
 800a08e:	e9c1 2300 	strd	r2, r3, [r1]
    i = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc

    do
    {
        P( A, B, C, D, E, F, G, H, W[i], K[i] ); i++;
 800a098:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800a09c:	049a      	lsls	r2, r3, #18
 800a09e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800a0a2:	0b9b      	lsrs	r3, r3, #14
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
 800a0aa:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800a0ae:	049a      	lsls	r2, r3, #18
 800a0b0:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800a0b4:	0b9b      	lsrs	r3, r3, #14
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 800a0bc:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800a0c0:	039a      	lsls	r2, r3, #14
 800a0c2:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800a0c6:	0c9b      	lsrs	r3, r3, #18
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	f8c7 3630 	str.w	r3, [r7, #1584]	@ 0x630
 800a0ce:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800a0d2:	039a      	lsls	r2, r3, #14
 800a0d4:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800a0d8:	0c9b      	lsrs	r3, r3, #18
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 800a0e0:	f507 63c7 	add.w	r3, r7, #1592	@ 0x638
 800a0e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a0e8:	4623      	mov	r3, r4
 800a0ea:	f507 62c6 	add.w	r2, r7, #1584	@ 0x630
 800a0ee:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	4053      	eors	r3, r2
 800a0f6:	f8c7 3628 	str.w	r3, [r7, #1576]	@ 0x628
 800a0fa:	462b      	mov	r3, r5
 800a0fc:	460a      	mov	r2, r1
 800a0fe:	4053      	eors	r3, r2
 800a100:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 800a104:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800a108:	0a5a      	lsrs	r2, r3, #9
 800a10a:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800a10e:	05db      	lsls	r3, r3, #23
 800a110:	4313      	orrs	r3, r2
 800a112:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 800a116:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800a11a:	0a5a      	lsrs	r2, r3, #9
 800a11c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800a120:	05db      	lsls	r3, r3, #23
 800a122:	4313      	orrs	r3, r2
 800a124:	f8c7 3620 	str.w	r3, [r7, #1568]	@ 0x620
 800a128:	f507 63c5 	add.w	r3, r7, #1576	@ 0x628
 800a12c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a130:	4623      	mov	r3, r4
 800a132:	f507 62c4 	add.w	r2, r7, #1568	@ 0x620
 800a136:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a13a:	4602      	mov	r2, r0
 800a13c:	4053      	eors	r3, r2
 800a13e:	f8c7 3618 	str.w	r3, [r7, #1560]	@ 0x618
 800a142:	462b      	mov	r3, r5
 800a144:	460a      	mov	r2, r1
 800a146:	4053      	eors	r3, r2
 800a148:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 800a14c:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f507 61c3 	add.w	r1, r7, #1560	@ 0x618
 800a158:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a15c:	4621      	mov	r1, r4
 800a15e:	1889      	adds	r1, r1, r2
 800a160:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 800a164:	4629      	mov	r1, r5
 800a166:	eb41 0303 	adc.w	r3, r1, r3
 800a16a:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 800a16e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800a172:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a176:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	ea80 0402 	eor.w	r4, r0, r2
 800a182:	f8c7 4608 	str.w	r4, [r7, #1544]	@ 0x608
 800a186:	404b      	eors	r3, r1
 800a188:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 800a18c:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	f507 61c1 	add.w	r1, r7, #1544	@ 0x608
 800a198:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a19c:	4621      	mov	r1, r4
 800a19e:	4011      	ands	r1, r2
 800a1a0:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	400b      	ands	r3, r1
 800a1a8:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 800a1ac:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800a1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b4:	f507 61c0 	add.w	r1, r7, #1536	@ 0x600
 800a1b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a1bc:	4621      	mov	r1, r4
 800a1be:	4051      	eors	r1, r2
 800a1c0:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	404b      	eors	r3, r1
 800a1c8:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 800a1cc:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800a1d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a1d4:	4623      	mov	r3, r4
 800a1d6:	f507 62bf 	add.w	r2, r7, #1528	@ 0x5f8
 800a1da:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a1de:	4602      	mov	r2, r0
 800a1e0:	189b      	adds	r3, r3, r2
 800a1e2:	f8c7 35f0 	str.w	r3, [r7, #1520]	@ 0x5f0
 800a1e6:	462b      	mov	r3, r5
 800a1e8:	460a      	mov	r2, r1
 800a1ea:	4153      	adcs	r3, r2
 800a1ec:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 800a1f0:	4afc      	ldr	r2, [pc, #1008]	@ (800a5e4 <mbedtls_internal_sha512_process+0xa9c>)
 800a1f2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a1f6:	00db      	lsls	r3, r3, #3
 800a1f8:	4413      	add	r3, r2
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f507 61be 	add.w	r1, r7, #1520	@ 0x5f0
 800a202:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a206:	4621      	mov	r1, r4
 800a208:	1889      	adds	r1, r1, r2
 800a20a:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 800a20e:	4629      	mov	r1, r5
 800a210:	eb41 0303 	adc.w	r3, r1, r3
 800a214:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 800a218:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a21c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a220:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a224:	00db      	lsls	r3, r3, #3
 800a226:	4413      	add	r3, r2
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	f507 61bd 	add.w	r1, r7, #1512	@ 0x5e8
 800a230:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a234:	4621      	mov	r1, r4
 800a236:	1889      	adds	r1, r1, r2
 800a238:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800a23c:	4629      	mov	r1, r5
 800a23e:	eb41 0303 	adc.w	r3, r1, r3
 800a242:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a246:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 800a24a:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800a24e:	e9c2 3400 	strd	r3, r4, [r2]
 800a252:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800a256:	011a      	lsls	r2, r3, #4
 800a258:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800a25c:	0f1b      	lsrs	r3, r3, #28
 800a25e:	4313      	orrs	r3, r2
 800a260:	f8c7 35e0 	str.w	r3, [r7, #1504]	@ 0x5e0
 800a264:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800a268:	011a      	lsls	r2, r3, #4
 800a26a:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800a26e:	0f1b      	lsrs	r3, r3, #28
 800a270:	4313      	orrs	r3, r2
 800a272:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 800a276:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800a27a:	089a      	lsrs	r2, r3, #2
 800a27c:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800a280:	079b      	lsls	r3, r3, #30
 800a282:	4313      	orrs	r3, r2
 800a284:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 800a288:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800a28c:	089a      	lsrs	r2, r3, #2
 800a28e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800a292:	079b      	lsls	r3, r3, #30
 800a294:	4313      	orrs	r3, r2
 800a296:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
 800a29a:	f507 63bc 	add.w	r3, r7, #1504	@ 0x5e0
 800a29e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	f507 62bb 	add.w	r2, r7, #1496	@ 0x5d8
 800a2a8:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	4053      	eors	r3, r2
 800a2b0:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
 800a2b4:	462b      	mov	r3, r5
 800a2b6:	460a      	mov	r2, r1
 800a2b8:	4053      	eors	r3, r2
 800a2ba:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 800a2be:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800a2c2:	09da      	lsrs	r2, r3, #7
 800a2c4:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800a2c8:	065b      	lsls	r3, r3, #25
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 800a2d0:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800a2d4:	09da      	lsrs	r2, r3, #7
 800a2d6:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800a2da:	065b      	lsls	r3, r3, #25
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
 800a2e2:	f507 63ba 	add.w	r3, r7, #1488	@ 0x5d0
 800a2e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a2ea:	4623      	mov	r3, r4
 800a2ec:	f507 62b9 	add.w	r2, r7, #1480	@ 0x5c8
 800a2f0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	4053      	eors	r3, r2
 800a2f8:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
 800a2fc:	462b      	mov	r3, r5
 800a2fe:	460a      	mov	r2, r1
 800a300:	4053      	eors	r3, r2
 800a302:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 800a306:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800a30a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a30e:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	ea00 0402 	and.w	r4, r0, r2
 800a31a:	f8c7 45b8 	str.w	r4, [r7, #1464]	@ 0x5b8
 800a31e:	400b      	ands	r3, r1
 800a320:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 800a324:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800a328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a32c:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800a330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a334:	ea40 0402 	orr.w	r4, r0, r2
 800a338:	f8c7 45b0 	str.w	r4, [r7, #1456]	@ 0x5b0
 800a33c:	430b      	orrs	r3, r1
 800a33e:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 800a342:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800a346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a34a:	f507 61b6 	add.w	r1, r7, #1456	@ 0x5b0
 800a34e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a352:	4621      	mov	r1, r4
 800a354:	4011      	ands	r1, r2
 800a356:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 800a35a:	4629      	mov	r1, r5
 800a35c:	400b      	ands	r3, r1
 800a35e:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 800a362:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800a366:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a36a:	4623      	mov	r3, r4
 800a36c:	f507 62b5 	add.w	r2, r7, #1448	@ 0x5a8
 800a370:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a374:	4602      	mov	r2, r0
 800a376:	4313      	orrs	r3, r2
 800a378:	f8c7 35a0 	str.w	r3, [r7, #1440]	@ 0x5a0
 800a37c:	462b      	mov	r3, r5
 800a37e:	460a      	mov	r2, r1
 800a380:	4313      	orrs	r3, r2
 800a382:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 800a386:	f507 63b8 	add.w	r3, r7, #1472	@ 0x5c0
 800a38a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a38e:	4623      	mov	r3, r4
 800a390:	f507 62b4 	add.w	r2, r7, #1440	@ 0x5a0
 800a394:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a398:	4602      	mov	r2, r0
 800a39a:	189b      	adds	r3, r3, r2
 800a39c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a3a0:	462b      	mov	r3, r5
 800a3a2:	460a      	mov	r2, r1
 800a3a4:	4153      	adcs	r3, r2
 800a3a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a3aa:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 800a3ae:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800a3b2:	e9c2 3400 	strd	r3, r4, [r2]
 800a3b6:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800a3ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3be:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800a3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c6:	1884      	adds	r4, r0, r2
 800a3c8:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 800a3cc:	eb41 0303 	adc.w	r3, r1, r3
 800a3d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a3d4:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	@ 0xe8
 800a3d8:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 800a3dc:	e9c2 3400 	strd	r3, r4, [r2]
 800a3e0:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800a3e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a3e8:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	1884      	adds	r4, r0, r2
 800a3f2:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 800a3f6:	eb41 0303 	adc.w	r3, r1, r3
 800a3fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3fe:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 800a402:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 800a406:	e9c2 3400 	strd	r3, r4, [r2]
 800a40a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a40e:	3301      	adds	r3, #1
 800a410:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( H, A, B, C, D, E, F, G, W[i], K[i] ); i++;
 800a414:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800a418:	049a      	lsls	r2, r3, #18
 800a41a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800a41e:	0b9b      	lsrs	r3, r3, #14
 800a420:	4313      	orrs	r3, r2
 800a422:	f8c7 3598 	str.w	r3, [r7, #1432]	@ 0x598
 800a426:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800a42a:	049a      	lsls	r2, r3, #18
 800a42c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800a430:	0b9b      	lsrs	r3, r3, #14
 800a432:	4313      	orrs	r3, r2
 800a434:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 800a438:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800a43c:	039a      	lsls	r2, r3, #14
 800a43e:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800a442:	0c9b      	lsrs	r3, r3, #18
 800a444:	4313      	orrs	r3, r2
 800a446:	f8c7 3590 	str.w	r3, [r7, #1424]	@ 0x590
 800a44a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800a44e:	039a      	lsls	r2, r3, #14
 800a450:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800a454:	0c9b      	lsrs	r3, r3, #18
 800a456:	4313      	orrs	r3, r2
 800a458:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 800a45c:	f507 63b3 	add.w	r3, r7, #1432	@ 0x598
 800a460:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a464:	4623      	mov	r3, r4
 800a466:	f507 62b2 	add.w	r2, r7, #1424	@ 0x590
 800a46a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a46e:	4602      	mov	r2, r0
 800a470:	4053      	eors	r3, r2
 800a472:	f8c7 3588 	str.w	r3, [r7, #1416]	@ 0x588
 800a476:	462b      	mov	r3, r5
 800a478:	460a      	mov	r2, r1
 800a47a:	4053      	eors	r3, r2
 800a47c:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 800a480:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800a484:	0a5a      	lsrs	r2, r3, #9
 800a486:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800a48a:	05db      	lsls	r3, r3, #23
 800a48c:	4313      	orrs	r3, r2
 800a48e:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 800a492:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800a496:	0a5a      	lsrs	r2, r3, #9
 800a498:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800a49c:	05db      	lsls	r3, r3, #23
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	f8c7 3580 	str.w	r3, [r7, #1408]	@ 0x580
 800a4a4:	f507 63b1 	add.w	r3, r7, #1416	@ 0x588
 800a4a8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	f507 62b0 	add.w	r2, r7, #1408	@ 0x580
 800a4b2:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	4053      	eors	r3, r2
 800a4ba:	f8c7 3578 	str.w	r3, [r7, #1400]	@ 0x578
 800a4be:	462b      	mov	r3, r5
 800a4c0:	460a      	mov	r2, r1
 800a4c2:	4053      	eors	r3, r2
 800a4c4:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 800a4c8:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f507 61af 	add.w	r1, r7, #1400	@ 0x578
 800a4d4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a4d8:	4621      	mov	r1, r4
 800a4da:	1889      	adds	r1, r1, r2
 800a4dc:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	eb41 0303 	adc.w	r3, r1, r3
 800a4e6:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 800a4ea:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800a4ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a4f2:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	ea80 0402 	eor.w	r4, r0, r2
 800a4fe:	f8c7 4568 	str.w	r4, [r7, #1384]	@ 0x568
 800a502:	404b      	eors	r3, r1
 800a504:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 800a508:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800a514:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a518:	4621      	mov	r1, r4
 800a51a:	4011      	ands	r1, r2
 800a51c:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 800a520:	4629      	mov	r1, r5
 800a522:	400b      	ands	r3, r1
 800a524:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 800a528:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 800a534:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a538:	4621      	mov	r1, r4
 800a53a:	4051      	eors	r1, r2
 800a53c:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 800a540:	4629      	mov	r1, r5
 800a542:	404b      	eors	r3, r1
 800a544:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 800a548:	f507 63ae 	add.w	r3, r7, #1392	@ 0x570
 800a54c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a550:	4623      	mov	r3, r4
 800a552:	f507 62ab 	add.w	r2, r7, #1368	@ 0x558
 800a556:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a55a:	4602      	mov	r2, r0
 800a55c:	189b      	adds	r3, r3, r2
 800a55e:	f8c7 3550 	str.w	r3, [r7, #1360]	@ 0x550
 800a562:	462b      	mov	r3, r5
 800a564:	460a      	mov	r2, r1
 800a566:	4153      	adcs	r3, r2
 800a568:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 800a56c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5e4 <mbedtls_internal_sha512_process+0xa9c>)
 800a56e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a572:	00db      	lsls	r3, r3, #3
 800a574:	4413      	add	r3, r2
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	f507 61aa 	add.w	r1, r7, #1360	@ 0x550
 800a57e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a582:	4621      	mov	r1, r4
 800a584:	1889      	adds	r1, r1, r2
 800a586:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 800a58a:	4629      	mov	r1, r5
 800a58c:	eb41 0303 	adc.w	r3, r1, r3
 800a590:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 800a594:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a598:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a59c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	4413      	add	r3, r2
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f507 61a9 	add.w	r1, r7, #1352	@ 0x548
 800a5ac:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	1889      	adds	r1, r1, r2
 800a5b4:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	eb41 0303 	adc.w	r3, r1, r3
 800a5be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a5c2:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	@ 0xd8
 800a5c6:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800a5ca:	e9c2 3400 	strd	r3, r4, [r2]
 800a5ce:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800a5d2:	011a      	lsls	r2, r3, #4
 800a5d4:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800a5d8:	0f1b      	lsrs	r3, r3, #28
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	f8c7 3540 	str.w	r3, [r7, #1344]	@ 0x540
 800a5e0:	e002      	b.n	800a5e8 <mbedtls_internal_sha512_process+0xaa0>
 800a5e2:	bf00      	nop
 800a5e4:	0800f8c8 	.word	0x0800f8c8
 800a5e8:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800a5ec:	011a      	lsls	r2, r3, #4
 800a5ee:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800a5f2:	0f1b      	lsrs	r3, r3, #28
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 800a5fa:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800a5fe:	089a      	lsrs	r2, r3, #2
 800a600:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800a604:	079b      	lsls	r3, r3, #30
 800a606:	4313      	orrs	r3, r2
 800a608:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 800a60c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800a610:	089a      	lsrs	r2, r3, #2
 800a612:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800a616:	079b      	lsls	r3, r3, #30
 800a618:	4313      	orrs	r3, r2
 800a61a:	f8c7 3538 	str.w	r3, [r7, #1336]	@ 0x538
 800a61e:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 800a622:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a626:	4623      	mov	r3, r4
 800a628:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 800a62c:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a630:	4602      	mov	r2, r0
 800a632:	4053      	eors	r3, r2
 800a634:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 800a638:	462b      	mov	r3, r5
 800a63a:	460a      	mov	r2, r1
 800a63c:	4053      	eors	r3, r2
 800a63e:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 800a642:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800a646:	09da      	lsrs	r2, r3, #7
 800a648:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800a64c:	065b      	lsls	r3, r3, #25
 800a64e:	4313      	orrs	r3, r2
 800a650:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 800a654:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800a658:	09da      	lsrs	r2, r3, #7
 800a65a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800a65e:	065b      	lsls	r3, r3, #25
 800a660:	4313      	orrs	r3, r2
 800a662:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800a666:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800a66a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a66e:	4623      	mov	r3, r4
 800a670:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 800a674:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a678:	4602      	mov	r2, r0
 800a67a:	4053      	eors	r3, r2
 800a67c:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 800a680:	462b      	mov	r3, r5
 800a682:	460a      	mov	r2, r1
 800a684:	4053      	eors	r3, r2
 800a686:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 800a68a:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800a68e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a692:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	ea00 0402 	and.w	r4, r0, r2
 800a69e:	f8c7 4518 	str.w	r4, [r7, #1304]	@ 0x518
 800a6a2:	400b      	ands	r3, r1
 800a6a4:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 800a6a8:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800a6ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a6b0:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800a6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b8:	ea40 0402 	orr.w	r4, r0, r2
 800a6bc:	f8c7 4510 	str.w	r4, [r7, #1296]	@ 0x510
 800a6c0:	430b      	orrs	r3, r1
 800a6c2:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 800a6c6:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 800a6d2:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4011      	ands	r1, r2
 800a6da:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 800a6de:	4629      	mov	r1, r5
 800a6e0:	400b      	ands	r3, r1
 800a6e2:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 800a6e6:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 800a6ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a6ee:	4623      	mov	r3, r4
 800a6f0:	f507 62a1 	add.w	r2, r7, #1288	@ 0x508
 800a6f4:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 800a700:	462b      	mov	r3, r5
 800a702:	460a      	mov	r2, r1
 800a704:	4313      	orrs	r3, r2
 800a706:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 800a70a:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 800a70e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a712:	4623      	mov	r3, r4
 800a714:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 800a718:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a71c:	4602      	mov	r2, r0
 800a71e:	189b      	adds	r3, r3, r2
 800a720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a724:	462b      	mov	r3, r5
 800a726:	460a      	mov	r2, r1
 800a728:	4153      	adcs	r3, r2
 800a72a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a72e:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 800a732:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800a736:	e9c2 3400 	strd	r3, r4, [r2]
 800a73a:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800a73e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a742:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	1884      	adds	r4, r0, r2
 800a74c:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 800a750:	eb41 0303 	adc.w	r3, r1, r3
 800a754:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a758:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 800a75c:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 800a760:	e9c2 3400 	strd	r3, r4, [r2]
 800a764:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800a768:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a76c:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	1884      	adds	r4, r0, r2
 800a776:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 800a77a:	eb41 0303 	adc.w	r3, r1, r3
 800a77e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a782:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 800a786:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 800a78a:	e9c2 3400 	strd	r3, r4, [r2]
 800a78e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a792:	3301      	adds	r3, #1
 800a794:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( G, H, A, B, C, D, E, F, W[i], K[i] ); i++;
 800a798:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800a79c:	049a      	lsls	r2, r3, #18
 800a79e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800a7a2:	0b9b      	lsrs	r3, r3, #14
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
 800a7aa:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800a7ae:	049a      	lsls	r2, r3, #18
 800a7b0:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800a7b4:	0b9b      	lsrs	r3, r3, #14
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 800a7bc:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800a7c0:	039a      	lsls	r2, r3, #14
 800a7c2:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800a7c6:	0c9b      	lsrs	r3, r3, #18
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 800a7ce:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800a7d2:	039a      	lsls	r2, r3, #14
 800a7d4:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800a7d8:	0c9b      	lsrs	r3, r3, #18
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 800a7e0:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800a7e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a7e8:	4623      	mov	r3, r4
 800a7ea:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 800a7ee:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4053      	eors	r3, r2
 800a7f6:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 800a7fa:	462b      	mov	r3, r5
 800a7fc:	460a      	mov	r2, r1
 800a7fe:	4053      	eors	r3, r2
 800a800:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 800a804:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800a808:	0a5a      	lsrs	r2, r3, #9
 800a80a:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800a80e:	05db      	lsls	r3, r3, #23
 800a810:	4313      	orrs	r3, r2
 800a812:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 800a816:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800a81a:	0a5a      	lsrs	r2, r3, #9
 800a81c:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800a820:	05db      	lsls	r3, r3, #23
 800a822:	4313      	orrs	r3, r2
 800a824:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 800a828:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800a82c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a830:	4623      	mov	r3, r4
 800a832:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 800a836:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a83a:	4602      	mov	r2, r0
 800a83c:	4053      	eors	r3, r2
 800a83e:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 800a842:	462b      	mov	r3, r5
 800a844:	460a      	mov	r2, r1
 800a846:	4053      	eors	r3, r2
 800a848:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 800a84c:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a854:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 800a858:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a85c:	4621      	mov	r1, r4
 800a85e:	1889      	adds	r1, r1, r2
 800a860:	f8c7 14d0 	str.w	r1, [r7, #1232]	@ 0x4d0
 800a864:	4629      	mov	r1, r5
 800a866:	eb41 0303 	adc.w	r3, r1, r3
 800a86a:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 800a86e:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800a872:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a876:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800a87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a87e:	ea80 0402 	eor.w	r4, r0, r2
 800a882:	f8c7 44c8 	str.w	r4, [r7, #1224]	@ 0x4c8
 800a886:	404b      	eors	r3, r1
 800a888:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 800a88c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f507 6199 	add.w	r1, r7, #1224	@ 0x4c8
 800a898:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a89c:	4621      	mov	r1, r4
 800a89e:	4011      	ands	r1, r2
 800a8a0:	f8c7 14c0 	str.w	r1, [r7, #1216]	@ 0x4c0
 800a8a4:	4629      	mov	r1, r5
 800a8a6:	400b      	ands	r3, r1
 800a8a8:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 800a8ac:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	f507 6198 	add.w	r1, r7, #1216	@ 0x4c0
 800a8b8:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a8bc:	4621      	mov	r1, r4
 800a8be:	4051      	eors	r1, r2
 800a8c0:	f8c7 14b8 	str.w	r1, [r7, #1208]	@ 0x4b8
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	404b      	eors	r3, r1
 800a8c8:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 800a8cc:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800a8d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800a8da:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a8de:	4602      	mov	r2, r0
 800a8e0:	189b      	adds	r3, r3, r2
 800a8e2:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
 800a8e6:	462b      	mov	r3, r5
 800a8e8:	460a      	mov	r2, r1
 800a8ea:	4153      	adcs	r3, r2
 800a8ec:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 800a8f0:	4afc      	ldr	r2, [pc, #1008]	@ (800ace4 <mbedtls_internal_sha512_process+0x119c>)
 800a8f2:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a8f6:	00db      	lsls	r3, r3, #3
 800a8f8:	4413      	add	r3, r2
 800a8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fe:	f507 6196 	add.w	r1, r7, #1200	@ 0x4b0
 800a902:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a906:	4621      	mov	r1, r4
 800a908:	1889      	adds	r1, r1, r2
 800a90a:	f8c7 14a8 	str.w	r1, [r7, #1192]	@ 0x4a8
 800a90e:	4629      	mov	r1, r5
 800a910:	eb41 0303 	adc.w	r3, r1, r3
 800a914:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 800a918:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800a91c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800a920:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	4413      	add	r3, r2
 800a928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92c:	f507 6195 	add.w	r1, r7, #1192	@ 0x4a8
 800a930:	e9d1 4500 	ldrd	r4, r5, [r1]
 800a934:	4621      	mov	r1, r4
 800a936:	1889      	adds	r1, r1, r2
 800a938:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800a93c:	4629      	mov	r1, r5
 800a93e:	eb41 0303 	adc.w	r3, r1, r3
 800a942:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a946:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800a94a:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800a94e:	e9c2 3400 	strd	r3, r4, [r2]
 800a952:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800a956:	011a      	lsls	r2, r3, #4
 800a958:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800a95c:	0f1b      	lsrs	r3, r3, #28
 800a95e:	4313      	orrs	r3, r2
 800a960:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
 800a964:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800a968:	011a      	lsls	r2, r3, #4
 800a96a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800a96e:	0f1b      	lsrs	r3, r3, #28
 800a970:	4313      	orrs	r3, r2
 800a972:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 800a976:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800a97a:	089a      	lsrs	r2, r3, #2
 800a97c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800a980:	079b      	lsls	r3, r3, #30
 800a982:	4313      	orrs	r3, r2
 800a984:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 800a988:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800a98c:	089a      	lsrs	r2, r3, #2
 800a98e:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800a992:	079b      	lsls	r3, r3, #30
 800a994:	4313      	orrs	r3, r2
 800a996:	f8c7 3498 	str.w	r3, [r7, #1176]	@ 0x498
 800a99a:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800a99e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a9a2:	4623      	mov	r3, r4
 800a9a4:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 800a9a8:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	4053      	eors	r3, r2
 800a9b0:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	460a      	mov	r2, r1
 800a9b8:	4053      	eors	r3, r2
 800a9ba:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 800a9be:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800a9c2:	09da      	lsrs	r2, r3, #7
 800a9c4:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800a9c8:	065b      	lsls	r3, r3, #25
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 800a9d0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800a9d4:	09da      	lsrs	r2, r3, #7
 800a9d6:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800a9da:	065b      	lsls	r3, r3, #25
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	f8c7 3488 	str.w	r3, [r7, #1160]	@ 0x488
 800a9e2:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800a9e6:	e9d3 4500 	ldrd	r4, r5, [r3]
 800a9ea:	4623      	mov	r3, r4
 800a9ec:	f507 6291 	add.w	r2, r7, #1160	@ 0x488
 800a9f0:	e9d2 0100 	ldrd	r0, r1, [r2]
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	4053      	eors	r3, r2
 800a9f8:	f8c7 3480 	str.w	r3, [r7, #1152]	@ 0x480
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	460a      	mov	r2, r1
 800aa00:	4053      	eors	r3, r2
 800aa02:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 800aa06:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800aa0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa0e:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa16:	ea00 0402 	and.w	r4, r0, r2
 800aa1a:	f8c7 4478 	str.w	r4, [r7, #1144]	@ 0x478
 800aa1e:	400b      	ands	r3, r1
 800aa20:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 800aa24:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800aa28:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa2c:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	ea40 0402 	orr.w	r4, r0, r2
 800aa38:	f8c7 4470 	str.w	r4, [r7, #1136]	@ 0x470
 800aa3c:	430b      	orrs	r3, r1
 800aa3e:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 800aa42:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800aa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4a:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 800aa4e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800aa52:	4621      	mov	r1, r4
 800aa54:	4011      	ands	r1, r2
 800aa56:	f8c7 1468 	str.w	r1, [r7, #1128]	@ 0x468
 800aa5a:	4629      	mov	r1, r5
 800aa5c:	400b      	ands	r3, r1
 800aa5e:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 800aa62:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800aa66:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aa6a:	4623      	mov	r3, r4
 800aa6c:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 800aa70:	e9d2 0100 	ldrd	r0, r1, [r2]
 800aa74:	4602      	mov	r2, r0
 800aa76:	4313      	orrs	r3, r2
 800aa78:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	460a      	mov	r2, r1
 800aa80:	4313      	orrs	r3, r2
 800aa82:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 800aa86:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800aa8a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aa8e:	4623      	mov	r3, r4
 800aa90:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 800aa94:	e9d2 0100 	ldrd	r0, r1, [r2]
 800aa98:	4602      	mov	r2, r0
 800aa9a:	189b      	adds	r3, r3, r2
 800aa9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aaa0:	462b      	mov	r3, r5
 800aaa2:	460a      	mov	r2, r1
 800aaa4:	4153      	adcs	r3, r2
 800aaa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aaaa:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 800aaae:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800aab2:	e9c2 3400 	strd	r3, r4, [r2]
 800aab6:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800aaba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aabe:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	1884      	adds	r4, r0, r2
 800aac8:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 800aacc:	eb41 0303 	adc.w	r3, r1, r3
 800aad0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aad4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 800aad8:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 800aadc:	e9c2 3400 	strd	r3, r4, [r2]
 800aae0:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800aae4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aae8:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	1884      	adds	r4, r0, r2
 800aaf2:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 800aaf6:	eb41 0303 	adc.w	r3, r1, r3
 800aafa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800aafe:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 800ab02:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 800ab06:	e9c2 3400 	strd	r3, r4, [r2]
 800ab0a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800ab0e:	3301      	adds	r3, #1
 800ab10:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( F, G, H, A, B, C, D, E, W[i], K[i] ); i++;
 800ab14:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800ab18:	049a      	lsls	r2, r3, #18
 800ab1a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800ab1e:	0b9b      	lsrs	r3, r3, #14
 800ab20:	4313      	orrs	r3, r2
 800ab22:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 800ab26:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800ab2a:	049a      	lsls	r2, r3, #18
 800ab2c:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800ab30:	0b9b      	lsrs	r3, r3, #14
 800ab32:	4313      	orrs	r3, r2
 800ab34:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 800ab38:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800ab3c:	039a      	lsls	r2, r3, #14
 800ab3e:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800ab42:	0c9b      	lsrs	r3, r3, #18
 800ab44:	4313      	orrs	r3, r2
 800ab46:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
 800ab4a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800ab4e:	039a      	lsls	r2, r3, #14
 800ab50:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800ab54:	0c9b      	lsrs	r3, r3, #18
 800ab56:	4313      	orrs	r3, r2
 800ab58:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 800ab5c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800ab60:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ab64:	4623      	mov	r3, r4
 800ab66:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 800ab6a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ab6e:	4602      	mov	r2, r0
 800ab70:	4053      	eors	r3, r2
 800ab72:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 800ab76:	462b      	mov	r3, r5
 800ab78:	460a      	mov	r2, r1
 800ab7a:	4053      	eors	r3, r2
 800ab7c:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 800ab80:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800ab84:	0a5a      	lsrs	r2, r3, #9
 800ab86:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800ab8a:	05db      	lsls	r3, r3, #23
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 800ab92:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800ab96:	0a5a      	lsrs	r2, r3, #9
 800ab98:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800ab9c:	05db      	lsls	r3, r3, #23
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
 800aba4:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800aba8:	e9d3 4500 	ldrd	r4, r5, [r3]
 800abac:	4623      	mov	r3, r4
 800abae:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 800abb2:	e9d2 0100 	ldrd	r0, r1, [r2]
 800abb6:	4602      	mov	r2, r0
 800abb8:	4053      	eors	r3, r2
 800abba:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 800abbe:	462b      	mov	r3, r5
 800abc0:	460a      	mov	r2, r1
 800abc2:	4053      	eors	r3, r2
 800abc4:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 800abc8:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800abcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd0:	f507 6187 	add.w	r1, r7, #1080	@ 0x438
 800abd4:	e9d1 4500 	ldrd	r4, r5, [r1]
 800abd8:	4621      	mov	r1, r4
 800abda:	1889      	adds	r1, r1, r2
 800abdc:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 800abe0:	4629      	mov	r1, r5
 800abe2:	eb41 0303 	adc.w	r3, r1, r3
 800abe6:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 800abea:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800abee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800abf2:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	ea80 0402 	eor.w	r4, r0, r2
 800abfe:	f8c7 4428 	str.w	r4, [r7, #1064]	@ 0x428
 800ac02:	404b      	eors	r3, r1
 800ac04:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800ac08:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f507 6185 	add.w	r1, r7, #1064	@ 0x428
 800ac14:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ac18:	4621      	mov	r1, r4
 800ac1a:	4011      	ands	r1, r2
 800ac1c:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 800ac20:	4629      	mov	r1, r5
 800ac22:	400b      	ands	r3, r1
 800ac24:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 800ac28:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800ac2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac30:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 800ac34:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ac38:	4621      	mov	r1, r4
 800ac3a:	4051      	eors	r1, r2
 800ac3c:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 800ac40:	4629      	mov	r1, r5
 800ac42:	404b      	eors	r3, r1
 800ac44:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800ac48:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 800ac4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ac50:	4623      	mov	r3, r4
 800ac52:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 800ac56:	e9d2 0100 	ldrd	r0, r1, [r2]
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	189b      	adds	r3, r3, r2
 800ac5e:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
 800ac62:	462b      	mov	r3, r5
 800ac64:	460a      	mov	r2, r1
 800ac66:	4153      	adcs	r3, r2
 800ac68:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 800ac6c:	4a1d      	ldr	r2, [pc, #116]	@ (800ace4 <mbedtls_internal_sha512_process+0x119c>)
 800ac6e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	4413      	add	r3, r2
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 800ac7e:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ac82:	4621      	mov	r1, r4
 800ac84:	1889      	adds	r1, r1, r2
 800ac86:	f8c7 1408 	str.w	r1, [r7, #1032]	@ 0x408
 800ac8a:	4629      	mov	r1, r5
 800ac8c:	eb41 0303 	adc.w	r3, r1, r3
 800ac90:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 800ac94:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800ac98:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800ac9c:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	4413      	add	r3, r2
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	f507 6181 	add.w	r1, r7, #1032	@ 0x408
 800acac:	e9d1 4500 	ldrd	r4, r5, [r1]
 800acb0:	4621      	mov	r1, r4
 800acb2:	1889      	adds	r1, r1, r2
 800acb4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800acb8:	4629      	mov	r1, r5
 800acba:	eb41 0303 	adc.w	r3, r1, r3
 800acbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800acc2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 800acc6:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800acca:	e9c2 3400 	strd	r3, r4, [r2]
 800acce:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800acd2:	011a      	lsls	r2, r3, #4
 800acd4:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800acd8:	0f1b      	lsrs	r3, r3, #28
 800acda:	4313      	orrs	r3, r2
 800acdc:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 800ace0:	e002      	b.n	800ace8 <mbedtls_internal_sha512_process+0x11a0>
 800ace2:	bf00      	nop
 800ace4:	0800f8c8 	.word	0x0800f8c8
 800ace8:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800acec:	011a      	lsls	r2, r3, #4
 800acee:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800acf2:	0f1b      	lsrs	r3, r3, #28
 800acf4:	4313      	orrs	r3, r2
 800acf6:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 800acfa:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800acfe:	089a      	lsrs	r2, r3, #2
 800ad00:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800ad04:	079b      	lsls	r3, r3, #30
 800ad06:	4313      	orrs	r3, r2
 800ad08:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 800ad0c:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800ad10:	089a      	lsrs	r2, r3, #2
 800ad12:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800ad16:	079b      	lsls	r3, r3, #30
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8
 800ad1e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800ad22:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ad26:	4623      	mov	r3, r4
 800ad28:	e9d7 01fe 	ldrd	r0, r1, [r7, #1016]	@ 0x3f8
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	4053      	eors	r3, r2
 800ad30:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 800ad34:	462b      	mov	r3, r5
 800ad36:	460a      	mov	r2, r1
 800ad38:	4053      	eors	r3, r2
 800ad3a:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 800ad3e:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800ad42:	09da      	lsrs	r2, r3, #7
 800ad44:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800ad48:	065b      	lsls	r3, r3, #25
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800ad50:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800ad54:	09da      	lsrs	r2, r3, #7
 800ad56:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800ad5a:	065b      	lsls	r3, r3, #25
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	f8c7 33e8 	str.w	r3, [r7, #1000]	@ 0x3e8
 800ad62:	e9d7 45fc 	ldrd	r4, r5, [r7, #1008]	@ 0x3f0
 800ad66:	4623      	mov	r3, r4
 800ad68:	e9d7 01fa 	ldrd	r0, r1, [r7, #1000]	@ 0x3e8
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	4053      	eors	r3, r2
 800ad70:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 800ad74:	462b      	mov	r3, r5
 800ad76:	460a      	mov	r2, r1
 800ad78:	4053      	eors	r3, r2
 800ad7a:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 800ad7e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800ad82:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ad86:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8e:	ea00 0402 	and.w	r4, r0, r2
 800ad92:	f8c7 43d8 	str.w	r4, [r7, #984]	@ 0x3d8
 800ad96:	400b      	ands	r3, r1
 800ad98:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 800ad9c:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800ada0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ada4:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800ada8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adac:	ea40 0402 	orr.w	r4, r0, r2
 800adb0:	f8c7 43d0 	str.w	r4, [r7, #976]	@ 0x3d0
 800adb4:	430b      	orrs	r3, r1
 800adb6:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 800adba:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800adbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc2:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	@ 0x3d0
 800adc6:	4621      	mov	r1, r4
 800adc8:	4011      	ands	r1, r2
 800adca:	f8c7 13c8 	str.w	r1, [r7, #968]	@ 0x3c8
 800adce:	4629      	mov	r1, r5
 800add0:	400b      	ands	r3, r1
 800add2:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800add6:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	@ 0x3d8
 800adda:	4623      	mov	r3, r4
 800addc:	e9d7 01f2 	ldrd	r0, r1, [r7, #968]	@ 0x3c8
 800ade0:	4602      	mov	r2, r0
 800ade2:	4313      	orrs	r3, r2
 800ade4:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 800ade8:	462b      	mov	r3, r5
 800adea:	460a      	mov	r2, r1
 800adec:	4313      	orrs	r3, r2
 800adee:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 800adf2:	e9d7 45f8 	ldrd	r4, r5, [r7, #992]	@ 0x3e0
 800adf6:	4623      	mov	r3, r4
 800adf8:	e9d7 01f0 	ldrd	r0, r1, [r7, #960]	@ 0x3c0
 800adfc:	4602      	mov	r2, r0
 800adfe:	189b      	adds	r3, r3, r2
 800ae00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ae04:	462b      	mov	r3, r5
 800ae06:	460a      	mov	r2, r1
 800ae08:	4153      	adcs	r3, r2
 800ae0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae0e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800ae12:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800ae16:	e9c2 3400 	strd	r3, r4, [r2]
 800ae1a:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800ae1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae22:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	1884      	adds	r4, r0, r2
 800ae2c:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800ae30:	eb41 0303 	adc.w	r3, r1, r3
 800ae34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ae38:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800ae3c:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800ae40:	e9c2 3400 	strd	r3, r4, [r2]
 800ae44:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800ae48:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ae4c:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800ae50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae54:	1884      	adds	r4, r0, r2
 800ae56:	f8c7 4080 	str.w	r4, [r7, #128]	@ 0x80
 800ae5a:	eb41 0303 	adc.w	r3, r1, r3
 800ae5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ae62:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800ae66:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 800ae6a:	e9c2 3400 	strd	r3, r4, [r2]
 800ae6e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800ae72:	3301      	adds	r3, #1
 800ae74:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( E, F, G, H, A, B, C, D, W[i], K[i] ); i++;
 800ae78:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ae7c:	049a      	lsls	r2, r3, #18
 800ae7e:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ae82:	0b9b      	lsrs	r3, r3, #14
 800ae84:	4313      	orrs	r3, r2
 800ae86:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 800ae8a:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800ae8e:	049a      	lsls	r2, r3, #18
 800ae90:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800ae94:	0b9b      	lsrs	r3, r3, #14
 800ae96:	4313      	orrs	r3, r2
 800ae98:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 800ae9c:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800aea0:	039a      	lsls	r2, r3, #14
 800aea2:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800aea6:	0c9b      	lsrs	r3, r3, #18
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 800aeae:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800aeb2:	039a      	lsls	r2, r3, #14
 800aeb4:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800aeb8:	0c9b      	lsrs	r3, r3, #18
 800aeba:	4313      	orrs	r3, r2
 800aebc:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 800aec0:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	@ 0x3b8
 800aec4:	4623      	mov	r3, r4
 800aec6:	e9d7 01ec 	ldrd	r0, r1, [r7, #944]	@ 0x3b0
 800aeca:	4602      	mov	r2, r0
 800aecc:	4053      	eors	r3, r2
 800aece:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 800aed2:	462b      	mov	r3, r5
 800aed4:	460a      	mov	r2, r1
 800aed6:	4053      	eors	r3, r2
 800aed8:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800aedc:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800aee0:	0a5a      	lsrs	r2, r3, #9
 800aee2:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800aee6:	05db      	lsls	r3, r3, #23
 800aee8:	4313      	orrs	r3, r2
 800aeea:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 800aeee:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 800aef2:	0a5a      	lsrs	r2, r3, #9
 800aef4:	f8d7 39d0 	ldr.w	r3, [r7, #2512]	@ 0x9d0
 800aef8:	05db      	lsls	r3, r3, #23
 800aefa:	4313      	orrs	r3, r2
 800aefc:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 800af00:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	@ 0x3a8
 800af04:	4623      	mov	r3, r4
 800af06:	e9d7 01e8 	ldrd	r0, r1, [r7, #928]	@ 0x3a0
 800af0a:	4602      	mov	r2, r0
 800af0c:	4053      	eors	r3, r2
 800af0e:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 800af12:	462b      	mov	r3, r5
 800af14:	460a      	mov	r2, r1
 800af16:	4053      	eors	r3, r2
 800af18:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 800af1c:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	@ 0x398
 800af28:	4621      	mov	r1, r4
 800af2a:	1889      	adds	r1, r1, r2
 800af2c:	f8c7 1390 	str.w	r1, [r7, #912]	@ 0x390
 800af30:	4629      	mov	r1, r5
 800af32:	eb41 0303 	adc.w	r3, r1, r3
 800af36:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 800af3a:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800af3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af42:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	ea80 0402 	eor.w	r4, r0, r2
 800af4e:	f8c7 4388 	str.w	r4, [r7, #904]	@ 0x388
 800af52:	404b      	eors	r3, r1
 800af54:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 800af58:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	@ 0x388
 800af64:	4621      	mov	r1, r4
 800af66:	4011      	ands	r1, r2
 800af68:	f8c7 1380 	str.w	r1, [r7, #896]	@ 0x380
 800af6c:	4629      	mov	r1, r5
 800af6e:	400b      	ands	r3, r1
 800af70:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800af74:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	@ 0x380
 800af80:	4621      	mov	r1, r4
 800af82:	4051      	eors	r1, r2
 800af84:	f8c7 1378 	str.w	r1, [r7, #888]	@ 0x378
 800af88:	4629      	mov	r1, r5
 800af8a:	404b      	eors	r3, r1
 800af8c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800af90:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	@ 0x390
 800af94:	4623      	mov	r3, r4
 800af96:	e9d7 01de 	ldrd	r0, r1, [r7, #888]	@ 0x378
 800af9a:	4602      	mov	r2, r0
 800af9c:	189b      	adds	r3, r3, r2
 800af9e:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
 800afa2:	462b      	mov	r3, r5
 800afa4:	460a      	mov	r2, r1
 800afa6:	4153      	adcs	r3, r2
 800afa8:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 800afac:	4af7      	ldr	r2, [pc, #988]	@ (800b38c <mbedtls_internal_sha512_process+0x1844>)
 800afae:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800afb2:	00db      	lsls	r3, r3, #3
 800afb4:	4413      	add	r3, r2
 800afb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afba:	e9d7 45dc 	ldrd	r4, r5, [r7, #880]	@ 0x370
 800afbe:	4621      	mov	r1, r4
 800afc0:	1889      	adds	r1, r1, r2
 800afc2:	f8c7 1368 	str.w	r1, [r7, #872]	@ 0x368
 800afc6:	4629      	mov	r1, r5
 800afc8:	eb41 0303 	adc.w	r3, r1, r3
 800afcc:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 800afd0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800afd4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800afd8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	4413      	add	r3, r2
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	@ 0x368
 800afe8:	4621      	mov	r1, r4
 800afea:	1889      	adds	r1, r1, r2
 800afec:	67b9      	str	r1, [r7, #120]	@ 0x78
 800afee:	4629      	mov	r1, r5
 800aff0:	eb41 0303 	adc.w	r3, r1, r3
 800aff4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aff6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800affa:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800affe:	e9c2 3400 	strd	r3, r4, [r2]
 800b002:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b006:	011a      	lsls	r2, r3, #4
 800b008:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b00c:	0f1b      	lsrs	r3, r3, #28
 800b00e:	4313      	orrs	r3, r2
 800b010:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 800b014:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b018:	011a      	lsls	r2, r3, #4
 800b01a:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b01e:	0f1b      	lsrs	r3, r3, #28
 800b020:	4313      	orrs	r3, r2
 800b022:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800b026:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b02a:	089a      	lsrs	r2, r3, #2
 800b02c:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b030:	079b      	lsls	r3, r3, #30
 800b032:	4313      	orrs	r3, r2
 800b034:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 800b038:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b03c:	089a      	lsrs	r2, r3, #2
 800b03e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b042:	079b      	lsls	r3, r3, #30
 800b044:	4313      	orrs	r3, r2
 800b046:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 800b04a:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	@ 0x360
 800b04e:	4623      	mov	r3, r4
 800b050:	e9d7 01d6 	ldrd	r0, r1, [r7, #856]	@ 0x358
 800b054:	4602      	mov	r2, r0
 800b056:	4053      	eors	r3, r2
 800b058:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 800b05c:	462b      	mov	r3, r5
 800b05e:	460a      	mov	r2, r1
 800b060:	4053      	eors	r3, r2
 800b062:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800b066:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b06a:	09da      	lsrs	r2, r3, #7
 800b06c:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b070:	065b      	lsls	r3, r3, #25
 800b072:	4313      	orrs	r3, r2
 800b074:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 800b078:	f8d7 39b4 	ldr.w	r3, [r7, #2484]	@ 0x9b4
 800b07c:	09da      	lsrs	r2, r3, #7
 800b07e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	@ 0x9b0
 800b082:	065b      	lsls	r3, r3, #25
 800b084:	4313      	orrs	r3, r2
 800b086:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 800b08a:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	@ 0x350
 800b08e:	4623      	mov	r3, r4
 800b090:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 800b094:	4602      	mov	r2, r0
 800b096:	4053      	eors	r3, r2
 800b098:	f8c7 3340 	str.w	r3, [r7, #832]	@ 0x340
 800b09c:	462b      	mov	r3, r5
 800b09e:	460a      	mov	r2, r1
 800b0a0:	4053      	eors	r3, r2
 800b0a2:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800b0a6:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b0aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0ae:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	ea00 0402 	and.w	r4, r0, r2
 800b0ba:	f8c7 4338 	str.w	r4, [r7, #824]	@ 0x338
 800b0be:	400b      	ands	r3, r1
 800b0c0:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800b0c4:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b0c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b0cc:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	ea40 0402 	orr.w	r4, r0, r2
 800b0d8:	f8c7 4330 	str.w	r4, [r7, #816]	@ 0x330
 800b0dc:	430b      	orrs	r3, r1
 800b0de:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800b0e2:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ea:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	@ 0x330
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	4011      	ands	r1, r2
 800b0f2:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	400b      	ands	r3, r1
 800b0fa:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 800b0fe:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	@ 0x338
 800b102:	4623      	mov	r3, r4
 800b104:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 800b108:	4602      	mov	r2, r0
 800b10a:	4313      	orrs	r3, r2
 800b10c:	f8c7 3320 	str.w	r3, [r7, #800]	@ 0x320
 800b110:	462b      	mov	r3, r5
 800b112:	460a      	mov	r2, r1
 800b114:	4313      	orrs	r3, r2
 800b116:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 800b11a:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	@ 0x340
 800b11e:	4623      	mov	r3, r4
 800b120:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 800b124:	4602      	mov	r2, r0
 800b126:	189b      	adds	r3, r3, r2
 800b128:	673b      	str	r3, [r7, #112]	@ 0x70
 800b12a:	462b      	mov	r3, r5
 800b12c:	460a      	mov	r2, r1
 800b12e:	4153      	adcs	r3, r2
 800b130:	677b      	str	r3, [r7, #116]	@ 0x74
 800b132:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800b136:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800b13a:	e9c2 3400 	strd	r3, r4, [r2]
 800b13e:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b142:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b146:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	1884      	adds	r4, r0, r2
 800b150:	66bc      	str	r4, [r7, #104]	@ 0x68
 800b152:	eb41 0303 	adc.w	r3, r1, r3
 800b156:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b158:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 800b15c:	f607 1298 	addw	r2, r7, #2456	@ 0x998
 800b160:	e9c2 3400 	strd	r3, r4, [r2]
 800b164:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b168:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b16c:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	1884      	adds	r4, r0, r2
 800b176:	663c      	str	r4, [r7, #96]	@ 0x60
 800b178:	eb41 0303 	adc.w	r3, r1, r3
 800b17c:	667b      	str	r3, [r7, #100]	@ 0x64
 800b17e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800b182:	f607 12b8 	addw	r2, r7, #2488	@ 0x9b8
 800b186:	e9c2 3400 	strd	r3, r4, [r2]
 800b18a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b18e:	3301      	adds	r3, #1
 800b190:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( D, E, F, G, H, A, B, C, W[i], K[i] ); i++;
 800b194:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800b198:	049a      	lsls	r2, r3, #18
 800b19a:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800b19e:	0b9b      	lsrs	r3, r3, #14
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 800b1a6:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800b1aa:	049a      	lsls	r2, r3, #18
 800b1ac:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800b1b0:	0b9b      	lsrs	r3, r3, #14
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 800b1b8:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800b1bc:	039a      	lsls	r2, r3, #14
 800b1be:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800b1c2:	0c9b      	lsrs	r3, r3, #18
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 800b1ca:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800b1ce:	039a      	lsls	r2, r3, #14
 800b1d0:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800b1d4:	0c9b      	lsrs	r3, r3, #18
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 800b1dc:	e9d7 45c6 	ldrd	r4, r5, [r7, #792]	@ 0x318
 800b1e0:	4623      	mov	r3, r4
 800b1e2:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	4053      	eors	r3, r2
 800b1ea:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 800b1ee:	462b      	mov	r3, r5
 800b1f0:	460a      	mov	r2, r1
 800b1f2:	4053      	eors	r3, r2
 800b1f4:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 800b1f8:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800b1fc:	0a5a      	lsrs	r2, r3, #9
 800b1fe:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800b202:	05db      	lsls	r3, r3, #23
 800b204:	4313      	orrs	r3, r2
 800b206:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 800b20a:	f8d7 399c 	ldr.w	r3, [r7, #2460]	@ 0x99c
 800b20e:	0a5a      	lsrs	r2, r3, #9
 800b210:	f8d7 3998 	ldr.w	r3, [r7, #2456]	@ 0x998
 800b214:	05db      	lsls	r3, r3, #23
 800b216:	4313      	orrs	r3, r2
 800b218:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 800b21c:	e9d7 45c2 	ldrd	r4, r5, [r7, #776]	@ 0x308
 800b220:	4623      	mov	r3, r4
 800b222:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	@ 0x300
 800b226:	4602      	mov	r2, r0
 800b228:	4053      	eors	r3, r2
 800b22a:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 800b22e:	462b      	mov	r3, r5
 800b230:	460a      	mov	r2, r1
 800b232:	4053      	eors	r3, r2
 800b234:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 800b238:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	@ 0x2f8
 800b244:	4621      	mov	r1, r4
 800b246:	1889      	adds	r1, r1, r2
 800b248:	f8c7 12f0 	str.w	r1, [r7, #752]	@ 0x2f0
 800b24c:	4629      	mov	r1, r5
 800b24e:	eb41 0303 	adc.w	r3, r1, r3
 800b252:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800b256:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b25a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b25e:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800b262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b266:	ea80 0402 	eor.w	r4, r0, r2
 800b26a:	f8c7 42e8 	str.w	r4, [r7, #744]	@ 0x2e8
 800b26e:	404b      	eors	r3, r1
 800b270:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 800b274:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	e9d7 45ba 	ldrd	r4, r5, [r7, #744]	@ 0x2e8
 800b280:	4621      	mov	r1, r4
 800b282:	4011      	ands	r1, r2
 800b284:	f8c7 12e0 	str.w	r1, [r7, #736]	@ 0x2e0
 800b288:	4629      	mov	r1, r5
 800b28a:	400b      	ands	r3, r1
 800b28c:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 800b290:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	@ 0x2e0
 800b29c:	4621      	mov	r1, r4
 800b29e:	4051      	eors	r1, r2
 800b2a0:	f8c7 12d8 	str.w	r1, [r7, #728]	@ 0x2d8
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	404b      	eors	r3, r1
 800b2a8:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 800b2ac:	e9d7 45bc 	ldrd	r4, r5, [r7, #752]	@ 0x2f0
 800b2b0:	4623      	mov	r3, r4
 800b2b2:	e9d7 01b6 	ldrd	r0, r1, [r7, #728]	@ 0x2d8
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	189b      	adds	r3, r3, r2
 800b2ba:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 800b2be:	462b      	mov	r3, r5
 800b2c0:	460a      	mov	r2, r1
 800b2c2:	4153      	adcs	r3, r2
 800b2c4:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800b2c8:	4a30      	ldr	r2, [pc, #192]	@ (800b38c <mbedtls_internal_sha512_process+0x1844>)
 800b2ca:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4413      	add	r3, r2
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	@ 0x2d0
 800b2da:	4621      	mov	r1, r4
 800b2dc:	1889      	adds	r1, r1, r2
 800b2de:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	eb41 0303 	adc.w	r3, r1, r3
 800b2e8:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 800b2ec:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800b2f0:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800b2f4:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b2f8:	00db      	lsls	r3, r3, #3
 800b2fa:	4413      	add	r3, r2
 800b2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b300:	e9d7 45b2 	ldrd	r4, r5, [r7, #712]	@ 0x2c8
 800b304:	4621      	mov	r1, r4
 800b306:	1889      	adds	r1, r1, r2
 800b308:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b30a:	4629      	mov	r1, r5
 800b30c:	eb41 0303 	adc.w	r3, r1, r3
 800b310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b312:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800b316:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800b31a:	e9c2 3400 	strd	r3, r4, [r2]
 800b31e:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800b322:	011a      	lsls	r2, r3, #4
 800b324:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800b328:	0f1b      	lsrs	r3, r3, #28
 800b32a:	4313      	orrs	r3, r2
 800b32c:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0
 800b330:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800b334:	011a      	lsls	r2, r3, #4
 800b336:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800b33a:	0f1b      	lsrs	r3, r3, #28
 800b33c:	4313      	orrs	r3, r2
 800b33e:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 800b342:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800b346:	089a      	lsrs	r2, r3, #2
 800b348:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800b34c:	079b      	lsls	r3, r3, #30
 800b34e:	4313      	orrs	r3, r2
 800b350:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800b354:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800b358:	089a      	lsrs	r2, r3, #2
 800b35a:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800b35e:	079b      	lsls	r3, r3, #30
 800b360:	4313      	orrs	r3, r2
 800b362:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800b366:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	@ 0x2c0
 800b36a:	4623      	mov	r3, r4
 800b36c:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 800b370:	4602      	mov	r2, r0
 800b372:	4053      	eors	r3, r2
 800b374:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800b378:	462b      	mov	r3, r5
 800b37a:	460a      	mov	r2, r1
 800b37c:	4053      	eors	r3, r2
 800b37e:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800b382:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800b386:	09da      	lsrs	r2, r3, #7
 800b388:	e002      	b.n	800b390 <mbedtls_internal_sha512_process+0x1848>
 800b38a:	bf00      	nop
 800b38c:	0800f8c8 	.word	0x0800f8c8
 800b390:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800b394:	065b      	lsls	r3, r3, #25
 800b396:	4313      	orrs	r3, r2
 800b398:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 800b39c:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	@ 0x9bc
 800b3a0:	09da      	lsrs	r2, r3, #7
 800b3a2:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	@ 0x9b8
 800b3a6:	065b      	lsls	r3, r3, #25
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 800b3ae:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	@ 0x2b0
 800b3b2:	4623      	mov	r3, r4
 800b3b4:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	4053      	eors	r3, r2
 800b3bc:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 800b3c0:	462b      	mov	r3, r5
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	4053      	eors	r3, r2
 800b3c6:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 800b3ca:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b3ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3d2:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	ea00 0402 	and.w	r4, r0, r2
 800b3de:	f8c7 4298 	str.w	r4, [r7, #664]	@ 0x298
 800b3e2:	400b      	ands	r3, r1
 800b3e4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 800b3e8:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b3ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3f0:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	ea40 0402 	orr.w	r4, r0, r2
 800b3fc:	f8c7 4290 	str.w	r4, [r7, #656]	@ 0x290
 800b400:	430b      	orrs	r3, r1
 800b402:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 800b406:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	e9d7 45a4 	ldrd	r4, r5, [r7, #656]	@ 0x290
 800b412:	4621      	mov	r1, r4
 800b414:	4011      	ands	r1, r2
 800b416:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 800b41a:	4629      	mov	r1, r5
 800b41c:	400b      	ands	r3, r1
 800b41e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 800b422:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	@ 0x298
 800b426:	4623      	mov	r3, r4
 800b428:	e9d7 01a2 	ldrd	r0, r1, [r7, #648]	@ 0x288
 800b42c:	4602      	mov	r2, r0
 800b42e:	4313      	orrs	r3, r2
 800b430:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800b434:	462b      	mov	r3, r5
 800b436:	460a      	mov	r2, r1
 800b438:	4313      	orrs	r3, r2
 800b43a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800b43e:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 800b442:	4623      	mov	r3, r4
 800b444:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 800b448:	4602      	mov	r2, r0
 800b44a:	189b      	adds	r3, r3, r2
 800b44c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b44e:	462b      	mov	r3, r5
 800b450:	460a      	mov	r2, r1
 800b452:	4153      	adcs	r3, r2
 800b454:	657b      	str	r3, [r7, #84]	@ 0x54
 800b456:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 800b45a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800b45e:	e9c2 3400 	strd	r3, r4, [r2]
 800b462:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b46a:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	1884      	adds	r4, r0, r2
 800b474:	64bc      	str	r4, [r7, #72]	@ 0x48
 800b476:	eb41 0303 	adc.w	r3, r1, r3
 800b47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b47c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800b480:	f507 621a 	add.w	r2, r7, #2464	@ 0x9a0
 800b484:	e9c2 3400 	strd	r3, r4, [r2]
 800b488:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b48c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b490:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	1884      	adds	r4, r0, r2
 800b49a:	643c      	str	r4, [r7, #64]	@ 0x40
 800b49c:	eb41 0303 	adc.w	r3, r1, r3
 800b4a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4a2:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800b4a6:	f507 621c 	add.w	r2, r7, #2496	@ 0x9c0
 800b4aa:	e9c2 3400 	strd	r3, r4, [r2]
 800b4ae:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( C, D, E, F, G, H, A, B, W[i], K[i] ); i++;
 800b4b8:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b4bc:	049a      	lsls	r2, r3, #18
 800b4be:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b4c2:	0b9b      	lsrs	r3, r3, #14
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 800b4ca:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b4ce:	049a      	lsls	r2, r3, #18
 800b4d0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b4d4:	0b9b      	lsrs	r3, r3, #14
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b4dc:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b4e0:	039a      	lsls	r2, r3, #14
 800b4e2:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b4e6:	0c9b      	lsrs	r3, r3, #18
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800b4ee:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b4f2:	039a      	lsls	r2, r3, #14
 800b4f4:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b4f8:	0c9b      	lsrs	r3, r3, #18
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 800b500:	e9d7 459e 	ldrd	r4, r5, [r7, #632]	@ 0x278
 800b504:	4623      	mov	r3, r4
 800b506:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	@ 0x270
 800b50a:	4602      	mov	r2, r0
 800b50c:	4053      	eors	r3, r2
 800b50e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800b512:	462b      	mov	r3, r5
 800b514:	460a      	mov	r2, r1
 800b516:	4053      	eors	r3, r2
 800b518:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800b51c:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b520:	0a5a      	lsrs	r2, r3, #9
 800b522:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b526:	05db      	lsls	r3, r3, #23
 800b528:	4313      	orrs	r3, r2
 800b52a:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 800b52e:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	@ 0x9a4
 800b532:	0a5a      	lsrs	r2, r3, #9
 800b534:	f8d7 39a0 	ldr.w	r3, [r7, #2464]	@ 0x9a0
 800b538:	05db      	lsls	r3, r3, #23
 800b53a:	4313      	orrs	r3, r2
 800b53c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 800b540:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 800b544:	4623      	mov	r3, r4
 800b546:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	@ 0x260
 800b54a:	4602      	mov	r2, r0
 800b54c:	4053      	eors	r3, r2
 800b54e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 800b552:	462b      	mov	r3, r5
 800b554:	460a      	mov	r2, r1
 800b556:	4053      	eors	r3, r2
 800b558:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800b55c:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	@ 0x258
 800b568:	4621      	mov	r1, r4
 800b56a:	1889      	adds	r1, r1, r2
 800b56c:	f8c7 1250 	str.w	r1, [r7, #592]	@ 0x250
 800b570:	4629      	mov	r1, r5
 800b572:	eb41 0303 	adc.w	r3, r1, r3
 800b576:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800b57a:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b57e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b582:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	ea80 0402 	eor.w	r4, r0, r2
 800b58e:	f8c7 4248 	str.w	r4, [r7, #584]	@ 0x248
 800b592:	404b      	eors	r3, r1
 800b594:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800b598:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a0:	e9d7 4592 	ldrd	r4, r5, [r7, #584]	@ 0x248
 800b5a4:	4621      	mov	r1, r4
 800b5a6:	4011      	ands	r1, r2
 800b5a8:	f8c7 1240 	str.w	r1, [r7, #576]	@ 0x240
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	400b      	ands	r3, r1
 800b5b0:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800b5b4:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	@ 0x240
 800b5c0:	4621      	mov	r1, r4
 800b5c2:	4051      	eors	r1, r2
 800b5c4:	f8c7 1238 	str.w	r1, [r7, #568]	@ 0x238
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	404b      	eors	r3, r1
 800b5cc:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800b5d0:	e9d7 4594 	ldrd	r4, r5, [r7, #592]	@ 0x250
 800b5d4:	4623      	mov	r3, r4
 800b5d6:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 800b5da:	4602      	mov	r2, r0
 800b5dc:	189b      	adds	r3, r3, r2
 800b5de:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 800b5e2:	462b      	mov	r3, r5
 800b5e4:	460a      	mov	r2, r1
 800b5e6:	4153      	adcs	r3, r2
 800b5e8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800b5ec:	4af7      	ldr	r2, [pc, #988]	@ (800b9cc <mbedtls_internal_sha512_process+0x1e84>)
 800b5ee:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b5f2:	00db      	lsls	r3, r3, #3
 800b5f4:	4413      	add	r3, r2
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	e9d7 458c 	ldrd	r4, r5, [r7, #560]	@ 0x230
 800b5fe:	4621      	mov	r1, r4
 800b600:	1889      	adds	r1, r1, r2
 800b602:	f8c7 1228 	str.w	r1, [r7, #552]	@ 0x228
 800b606:	4629      	mov	r1, r5
 800b608:	eb41 0303 	adc.w	r3, r1, r3
 800b60c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800b610:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800b614:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800b618:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b61c:	00db      	lsls	r3, r3, #3
 800b61e:	4413      	add	r3, r2
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	e9d7 458a 	ldrd	r4, r5, [r7, #552]	@ 0x228
 800b628:	4621      	mov	r1, r4
 800b62a:	1889      	adds	r1, r1, r2
 800b62c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b62e:	4629      	mov	r1, r5
 800b630:	eb41 0303 	adc.w	r3, r1, r3
 800b634:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b636:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800b63a:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800b63e:	e9c2 3400 	strd	r3, r4, [r2]
 800b642:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b646:	011a      	lsls	r2, r3, #4
 800b648:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b64c:	0f1b      	lsrs	r3, r3, #28
 800b64e:	4313      	orrs	r3, r2
 800b650:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 800b654:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b658:	011a      	lsls	r2, r3, #4
 800b65a:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b65e:	0f1b      	lsrs	r3, r3, #28
 800b660:	4313      	orrs	r3, r2
 800b662:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 800b666:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b66a:	089a      	lsrs	r2, r3, #2
 800b66c:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b670:	079b      	lsls	r3, r3, #30
 800b672:	4313      	orrs	r3, r2
 800b674:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800b678:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b67c:	089a      	lsrs	r2, r3, #2
 800b67e:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b682:	079b      	lsls	r3, r3, #30
 800b684:	4313      	orrs	r3, r2
 800b686:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800b68a:	e9d7 4588 	ldrd	r4, r5, [r7, #544]	@ 0x220
 800b68e:	4623      	mov	r3, r4
 800b690:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 800b694:	4602      	mov	r2, r0
 800b696:	4053      	eors	r3, r2
 800b698:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800b69c:	462b      	mov	r3, r5
 800b69e:	460a      	mov	r2, r1
 800b6a0:	4053      	eors	r3, r2
 800b6a2:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 800b6a6:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b6aa:	09da      	lsrs	r2, r3, #7
 800b6ac:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b6b0:	065b      	lsls	r3, r3, #25
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 800b6b8:	f8d7 39c4 	ldr.w	r3, [r7, #2500]	@ 0x9c4
 800b6bc:	09da      	lsrs	r2, r3, #7
 800b6be:	f8d7 39c0 	ldr.w	r3, [r7, #2496]	@ 0x9c0
 800b6c2:	065b      	lsls	r3, r3, #25
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 800b6ca:	e9d7 4584 	ldrd	r4, r5, [r7, #528]	@ 0x210
 800b6ce:	4623      	mov	r3, r4
 800b6d0:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	4053      	eors	r3, r2
 800b6d8:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 800b6dc:	462b      	mov	r3, r5
 800b6de:	460a      	mov	r2, r1
 800b6e0:	4053      	eors	r3, r2
 800b6e2:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 800b6e6:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b6ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b6ee:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	ea00 0402 	and.w	r4, r0, r2
 800b6fa:	f8c7 41f8 	str.w	r4, [r7, #504]	@ 0x1f8
 800b6fe:	400b      	ands	r3, r1
 800b700:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 800b704:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800b708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b70c:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800b710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b714:	ea40 0402 	orr.w	r4, r0, r2
 800b718:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 800b71c:	430b      	orrs	r3, r1
 800b71e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 800b722:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 800b72e:	4621      	mov	r1, r4
 800b730:	4011      	ands	r1, r2
 800b732:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 800b736:	4629      	mov	r1, r5
 800b738:	400b      	ands	r3, r1
 800b73a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 800b73e:	e9d7 457e 	ldrd	r4, r5, [r7, #504]	@ 0x1f8
 800b742:	4623      	mov	r3, r4
 800b744:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 800b748:	4602      	mov	r2, r0
 800b74a:	4313      	orrs	r3, r2
 800b74c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800b750:	462b      	mov	r3, r5
 800b752:	460a      	mov	r2, r1
 800b754:	4313      	orrs	r3, r2
 800b756:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800b75a:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	@ 0x200
 800b75e:	4623      	mov	r3, r4
 800b760:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	@ 0x1e0
 800b764:	4602      	mov	r2, r0
 800b766:	189b      	adds	r3, r3, r2
 800b768:	633b      	str	r3, [r7, #48]	@ 0x30
 800b76a:	462b      	mov	r3, r5
 800b76c:	460a      	mov	r2, r1
 800b76e:	4153      	adcs	r3, r2
 800b770:	637b      	str	r3, [r7, #52]	@ 0x34
 800b772:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b776:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800b77a:	e9c2 3400 	strd	r3, r4, [r2]
 800b77e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b782:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b786:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	1884      	adds	r4, r0, r2
 800b790:	62bc      	str	r4, [r7, #40]	@ 0x28
 800b792:	eb41 0303 	adc.w	r3, r1, r3
 800b796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b798:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b79c:	f607 12a8 	addw	r2, r7, #2472	@ 0x9a8
 800b7a0:	e9c2 3400 	strd	r3, r4, [r2]
 800b7a4:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800b7a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7ac:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	1884      	adds	r4, r0, r2
 800b7b6:	623c      	str	r4, [r7, #32]
 800b7b8:	eb41 0303 	adc.w	r3, r1, r3
 800b7bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7be:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800b7c2:	f607 12c8 	addw	r2, r7, #2504	@ 0x9c8
 800b7c6:	e9c2 3400 	strd	r3, r4, [r2]
 800b7ca:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b7ce:	3301      	adds	r3, #1
 800b7d0:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
        P( B, C, D, E, F, G, H, A, W[i], K[i] ); i++;
 800b7d4:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b7d8:	049a      	lsls	r2, r3, #18
 800b7da:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b7de:	0b9b      	lsrs	r3, r3, #14
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800b7e6:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b7ea:	049a      	lsls	r2, r3, #18
 800b7ec:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b7f0:	0b9b      	lsrs	r3, r3, #14
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800b7f8:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b7fc:	039a      	lsls	r2, r3, #14
 800b7fe:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b802:	0c9b      	lsrs	r3, r3, #18
 800b804:	4313      	orrs	r3, r2
 800b806:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800b80a:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b80e:	039a      	lsls	r2, r3, #14
 800b810:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b814:	0c9b      	lsrs	r3, r3, #18
 800b816:	4313      	orrs	r3, r2
 800b818:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800b81c:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	@ 0x1d8
 800b820:	4623      	mov	r3, r4
 800b822:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 800b826:	4602      	mov	r2, r0
 800b828:	4053      	eors	r3, r2
 800b82a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800b82e:	462b      	mov	r3, r5
 800b830:	460a      	mov	r2, r1
 800b832:	4053      	eors	r3, r2
 800b834:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800b838:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b83c:	0a5a      	lsrs	r2, r3, #9
 800b83e:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b842:	05db      	lsls	r3, r3, #23
 800b844:	4313      	orrs	r3, r2
 800b846:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800b84a:	f8d7 39ac 	ldr.w	r3, [r7, #2476]	@ 0x9ac
 800b84e:	0a5a      	lsrs	r2, r3, #9
 800b850:	f8d7 39a8 	ldr.w	r3, [r7, #2472]	@ 0x9a8
 800b854:	05db      	lsls	r3, r3, #23
 800b856:	4313      	orrs	r3, r2
 800b858:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800b85c:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	@ 0x1c8
 800b860:	4623      	mov	r3, r4
 800b862:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 800b866:	4602      	mov	r2, r0
 800b868:	4053      	eors	r3, r2
 800b86a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800b86e:	462b      	mov	r3, r5
 800b870:	460a      	mov	r2, r1
 800b872:	4053      	eors	r3, r2
 800b874:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800b878:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800b87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b880:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	@ 0x1b8
 800b884:	4621      	mov	r1, r4
 800b886:	1889      	adds	r1, r1, r2
 800b888:	f8c7 11b0 	str.w	r1, [r7, #432]	@ 0x1b0
 800b88c:	4629      	mov	r1, r5
 800b88e:	eb41 0303 	adc.w	r3, r1, r3
 800b892:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800b896:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800b89a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b89e:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a6:	ea80 0402 	eor.w	r4, r0, r2
 800b8aa:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 800b8ae:	404b      	eors	r3, r1
 800b8b0:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800b8b4:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 800b8c0:	4621      	mov	r1, r4
 800b8c2:	4011      	ands	r1, r2
 800b8c4:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	400b      	ands	r3, r1
 800b8cc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800b8d0:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	@ 0x1a0
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4051      	eors	r1, r2
 800b8e0:	f8c7 1198 	str.w	r1, [r7, #408]	@ 0x198
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	404b      	eors	r3, r1
 800b8e8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800b8ec:	e9d7 456c 	ldrd	r4, r5, [r7, #432]	@ 0x1b0
 800b8f0:	4623      	mov	r3, r4
 800b8f2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	189b      	adds	r3, r3, r2
 800b8fa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800b8fe:	462b      	mov	r3, r5
 800b900:	460a      	mov	r2, r1
 800b902:	4153      	adcs	r3, r2
 800b904:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800b908:	4a30      	ldr	r2, [pc, #192]	@ (800b9cc <mbedtls_internal_sha512_process+0x1e84>)
 800b90a:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	4413      	add	r3, r2
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 800b91a:	4621      	mov	r1, r4
 800b91c:	1889      	adds	r1, r1, r2
 800b91e:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 800b922:	4629      	mov	r1, r5
 800b924:	eb41 0303 	adc.w	r3, r1, r3
 800b928:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800b92c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800b930:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 800b934:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	4413      	add	r3, r2
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	@ 0x188
 800b944:	4621      	mov	r1, r4
 800b946:	1889      	adds	r1, r1, r2
 800b948:	61b9      	str	r1, [r7, #24]
 800b94a:	4629      	mov	r1, r5
 800b94c:	eb41 0303 	adc.w	r3, r1, r3
 800b950:	61fb      	str	r3, [r7, #28]
 800b952:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800b956:	f507 6219 	add.w	r2, r7, #2448	@ 0x990
 800b95a:	e9c2 3400 	strd	r3, r4, [r2]
 800b95e:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b962:	011a      	lsls	r2, r3, #4
 800b964:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b968:	0f1b      	lsrs	r3, r3, #28
 800b96a:	4313      	orrs	r3, r2
 800b96c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800b970:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b974:	011a      	lsls	r2, r3, #4
 800b976:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b97a:	0f1b      	lsrs	r3, r3, #28
 800b97c:	4313      	orrs	r3, r2
 800b97e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800b982:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b986:	089a      	lsrs	r2, r3, #2
 800b988:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b98c:	079b      	lsls	r3, r3, #30
 800b98e:	4313      	orrs	r3, r2
 800b990:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800b994:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b998:	089a      	lsrs	r2, r3, #2
 800b99a:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b99e:	079b      	lsls	r3, r3, #30
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800b9a6:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	@ 0x180
 800b9aa:	4623      	mov	r3, r4
 800b9ac:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	4053      	eors	r3, r2
 800b9b4:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800b9b8:	462b      	mov	r3, r5
 800b9ba:	460a      	mov	r2, r1
 800b9bc:	4053      	eors	r3, r2
 800b9be:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800b9c2:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b9c6:	09da      	lsrs	r2, r3, #7
 800b9c8:	e002      	b.n	800b9d0 <mbedtls_internal_sha512_process+0x1e88>
 800b9ca:	bf00      	nop
 800b9cc:	0800f8c8 	.word	0x0800f8c8
 800b9d0:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b9d4:	065b      	lsls	r3, r3, #25
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800b9dc:	f8d7 39cc 	ldr.w	r3, [r7, #2508]	@ 0x9cc
 800b9e0:	09da      	lsrs	r2, r3, #7
 800b9e2:	f8d7 39c8 	ldr.w	r3, [r7, #2504]	@ 0x9c8
 800b9e6:	065b      	lsls	r3, r3, #25
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800b9ee:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	@ 0x170
 800b9f2:	4623      	mov	r3, r4
 800b9f4:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	4053      	eors	r3, r2
 800b9fc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800ba00:	462b      	mov	r3, r5
 800ba02:	460a      	mov	r2, r1
 800ba04:	4053      	eors	r3, r2
 800ba06:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800ba0a:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800ba0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba12:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1a:	ea00 0402 	and.w	r4, r0, r2
 800ba1e:	f8c7 4158 	str.w	r4, [r7, #344]	@ 0x158
 800ba22:	400b      	ands	r3, r1
 800ba24:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800ba28:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800ba2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba30:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	ea40 0402 	orr.w	r4, r0, r2
 800ba3c:	f8c7 4150 	str.w	r4, [r7, #336]	@ 0x150
 800ba40:	430b      	orrs	r3, r1
 800ba42:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800ba46:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 800ba52:	4621      	mov	r1, r4
 800ba54:	4011      	ands	r1, r2
 800ba56:	f8c7 1148 	str.w	r1, [r7, #328]	@ 0x148
 800ba5a:	4629      	mov	r1, r5
 800ba5c:	400b      	ands	r3, r1
 800ba5e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800ba62:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800ba66:	4623      	mov	r3, r4
 800ba68:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800ba74:	462b      	mov	r3, r5
 800ba76:	460a      	mov	r2, r1
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800ba7e:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 800ba82:	4623      	mov	r3, r4
 800ba84:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800ba88:	4602      	mov	r2, r0
 800ba8a:	189b      	adds	r3, r3, r2
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	462b      	mov	r3, r5
 800ba90:	460a      	mov	r2, r1
 800ba92:	4153      	adcs	r3, r2
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ba9a:	f607 1288 	addw	r2, r7, #2440	@ 0x988
 800ba9e:	e9c2 3400 	strd	r3, r4, [r2]
 800baa2:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800baa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800baaa:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800baae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab2:	1884      	adds	r4, r0, r2
 800bab4:	60bc      	str	r4, [r7, #8]
 800bab6:	eb41 0303 	adc.w	r3, r1, r3
 800baba:	60fb      	str	r3, [r7, #12]
 800babc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800bac0:	f507 621b 	add.w	r2, r7, #2480	@ 0x9b0
 800bac4:	e9c2 3400 	strd	r3, r4, [r2]
 800bac8:	f507 6319 	add.w	r3, r7, #2448	@ 0x990
 800bacc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bad0:	f607 1388 	addw	r3, r7, #2440	@ 0x988
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	1884      	adds	r4, r0, r2
 800bada:	603c      	str	r4, [r7, #0]
 800badc:	eb41 0303 	adc.w	r3, r1, r3
 800bae0:	607b      	str	r3, [r7, #4]
 800bae2:	e9d7 3400 	ldrd	r3, r4, [r7]
 800bae6:	f507 621d 	add.w	r2, r7, #2512	@ 0x9d0
 800baea:	e9c2 3400 	strd	r3, r4, [r2]
 800baee:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800baf2:	3301      	adds	r3, #1
 800baf4:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
    }
    while( i < 80 );
 800baf8:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 800bafc:	2b4f      	cmp	r3, #79	@ 0x4f
 800bafe:	f77e aacb 	ble.w	800a098 <mbedtls_internal_sha512_process+0x550>

    ctx->state[0] += A;
 800bb02:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bb06:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bb10:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 800bb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb18:	1884      	adds	r4, r0, r2
 800bb1a:	f8c7 4138 	str.w	r4, [r7, #312]	@ 0x138
 800bb1e:	eb41 0303 	adc.w	r3, r1, r3
 800bb22:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800bb26:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bb2a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800bb34:	e9c3 1204 	strd	r1, r2, [r3, #16]
    ctx->state[1] += B;
 800bb38:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bb3c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800bb46:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	1884      	adds	r4, r0, r2
 800bb50:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 800bb54:	eb41 0303 	adc.w	r3, r1, r3
 800bb58:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800bb5c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bb60:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 800bb6a:	e9c3 1206 	strd	r1, r2, [r3, #24]
    ctx->state[2] += C;
 800bb6e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bb72:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800bb7c:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 800bb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb84:	1884      	adds	r4, r0, r2
 800bb86:	f8c7 4128 	str.w	r4, [r7, #296]	@ 0x128
 800bb8a:	eb41 0303 	adc.w	r3, r1, r3
 800bb8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800bb92:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bb96:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800bba0:	e9c3 1208 	strd	r1, r2, [r3, #32]
    ctx->state[3] += D;
 800bba4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bba8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800bbb2:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	1884      	adds	r4, r0, r2
 800bbbc:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 800bbc0:	eb41 0303 	adc.w	r3, r1, r3
 800bbc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800bbc8:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bbcc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800bbd6:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
    ctx->state[4] += E;
 800bbda:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bbde:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800bbe8:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	1884      	adds	r4, r0, r2
 800bbf2:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 800bbf6:	eb41 0303 	adc.w	r3, r1, r3
 800bbfa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800bbfe:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bc02:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800bc0c:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
    ctx->state[5] += F;
 800bc10:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bc14:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800bc1e:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800bc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc26:	1884      	adds	r4, r0, r2
 800bc28:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 800bc2c:	eb41 0303 	adc.w	r3, r1, r3
 800bc30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800bc34:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bc38:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800bc42:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
    ctx->state[6] += G;
 800bc46:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bc4a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800bc54:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800bc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5c:	1884      	adds	r4, r0, r2
 800bc5e:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 800bc62:	eb41 0303 	adc.w	r3, r1, r3
 800bc66:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800bc6a:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bc6e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800bc78:	e9c3 1210 	strd	r1, r2, [r3, #64]	@ 0x40
    ctx->state[7] += H;
 800bc7c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bc80:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800bc8a:	f607 1398 	addw	r3, r7, #2456	@ 0x998
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	1884      	adds	r4, r0, r2
 800bc94:	f8c7 4100 	str.w	r4, [r7, #256]	@ 0x100
 800bc98:	eb41 0303 	adc.w	r3, r1, r3
 800bc9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bca0:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 800bca4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800bcae:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48

    return( 0 );
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f507 671e 	add.w	r7, r7, #2528	@ 0x9e0
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop

0800bcc4 <mbedtls_sha512_update_ret>:
 * SHA-512 process buffer
 */
int mbedtls_sha512_update_ret( mbedtls_sha512_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
 800bcc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcc8:	b08a      	sub	sp, #40	@ 0x28
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6178      	str	r0, [r7, #20]
 800bcce:	6139      	str	r1, [r7, #16]
 800bcd0:	60fa      	str	r2, [r7, #12]
    unsigned int left;

    SHA512_VALIDATE_RET( ctx != NULL );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d101      	bne.n	800bcdc <mbedtls_sha512_update_ret+0x18>
        return( 0 );
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e079      	b.n	800bdd0 <mbedtls_sha512_update_ret+0x10c>

    left = (unsigned int) (ctx->total[0] & 0x7F);
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	4613      	mov	r3, r2
 800bce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bce8:	627b      	str	r3, [r7, #36]	@ 0x24
    fill = 128 - left;
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800bcf0:	623b      	str	r3, [r7, #32]

    ctx->total[0] += (uint64_t) ilen;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	4688      	mov	r8, r1
 800bcfe:	4681      	mov	r9, r0
 800bd00:	eb12 0108 	adds.w	r1, r2, r8
 800bd04:	6039      	str	r1, [r7, #0]
 800bd06:	eb43 0309 	adc.w	r3, r3, r9
 800bd0a:	607b      	str	r3, [r7, #4]
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bd12:	e9c3 1200 	strd	r1, r2, [r3]

    if( ctx->total[0] < (uint64_t) ilen )
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	68f9      	ldr	r1, [r7, #12]
 800bd1e:	2000      	movs	r0, #0
 800bd20:	460c      	mov	r4, r1
 800bd22:	4605      	mov	r5, r0
 800bd24:	42a2      	cmp	r2, r4
 800bd26:	41ab      	sbcs	r3, r5
 800bd28:	d209      	bcs.n	800bd3e <mbedtls_sha512_update_ret+0x7a>
        ctx->total[1]++;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bd30:	f112 0a01 	adds.w	sl, r2, #1
 800bd34:	f143 0b00 	adc.w	fp, r3, #0
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	e9c3 ab02 	strd	sl, fp, [r3, #8]

    if( left && ilen >= fill )
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d034      	beq.n	800bdae <mbedtls_sha512_update_ret+0xea>
 800bd44:	68fa      	ldr	r2, [r7, #12]
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d330      	bcc.n	800bdae <mbedtls_sha512_update_ret+0xea>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd54:	4413      	add	r3, r2
 800bd56:	6a3a      	ldr	r2, [r7, #32]
 800bd58:	6939      	ldr	r1, [r7, #16]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fe12 	bl	800c984 <memcpy>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	3350      	adds	r3, #80	@ 0x50
 800bd64:	4619      	mov	r1, r3
 800bd66:	6978      	ldr	r0, [r7, #20]
 800bd68:	f7fd feee 	bl	8009b48 <mbedtls_internal_sha512_process>
 800bd6c:	61f8      	str	r0, [r7, #28]
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d001      	beq.n	800bd78 <mbedtls_sha512_update_ret+0xb4>
            return( ret );
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	e02b      	b.n	800bdd0 <mbedtls_sha512_update_ret+0x10c>

        input += fill;
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	6a3b      	ldr	r3, [r7, #32]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	613b      	str	r3, [r7, #16]
        ilen  -= fill;
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	6a3b      	ldr	r3, [r7, #32]
 800bd84:	1ad3      	subs	r3, r2, r3
 800bd86:	60fb      	str	r3, [r7, #12]
        left = 0;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    while( ilen >= 128 )
 800bd8c:	e00f      	b.n	800bdae <mbedtls_sha512_update_ret+0xea>
    {
        if( ( ret = mbedtls_internal_sha512_process( ctx, input ) ) != 0 )
 800bd8e:	6939      	ldr	r1, [r7, #16]
 800bd90:	6978      	ldr	r0, [r7, #20]
 800bd92:	f7fd fed9 	bl	8009b48 <mbedtls_internal_sha512_process>
 800bd96:	61f8      	str	r0, [r7, #28]
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <mbedtls_sha512_update_ret+0xde>
            return( ret );
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	e016      	b.n	800bdd0 <mbedtls_sha512_update_ret+0x10c>

        input += 128;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	3380      	adds	r3, #128	@ 0x80
 800bda6:	613b      	str	r3, [r7, #16]
        ilen  -= 128;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	3b80      	subs	r3, #128	@ 0x80
 800bdac:	60fb      	str	r3, [r7, #12]
    while( ilen >= 128 )
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdb2:	d8ec      	bhi.n	800bd8e <mbedtls_sha512_update_ret+0xca>
    }

    if( ilen > 0 )
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d009      	beq.n	800bdce <mbedtls_sha512_update_ret+0x10a>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800bdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc2:	4413      	add	r3, r2
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	6939      	ldr	r1, [r7, #16]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 fddb 	bl	800c984 <memcpy>

    return( 0 );
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3728      	adds	r7, #40	@ 0x28
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bdda <mbedtls_sha512_finish_ret>:
/*
 * SHA-512 final digest
 */
int mbedtls_sha512_finish_ret( mbedtls_sha512_context *ctx,
                               unsigned char output[64] )
{
 800bdda:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bdde:	b088      	sub	sp, #32
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 16 bytes remain for the length
     */
    used = ctx->total[0] & 0x7F;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	4613      	mov	r3, r2
 800bdee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdf2:	61fb      	str	r3, [r7, #28]

    ctx->buffer[used++] = 0x80;
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	61fa      	str	r2, [r7, #28]
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	2280      	movs	r2, #128	@ 0x80
 800be00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    if( used <= 112 )
 800be04:	69fb      	ldr	r3, [r7, #28]
 800be06:	2b70      	cmp	r3, #112	@ 0x70
 800be08:	d80c      	bhi.n	800be24 <mbedtls_sha512_finish_ret+0x4a>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 112 - used );
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	18d0      	adds	r0, r2, r3
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	f1c3 0370 	rsb	r3, r3, #112	@ 0x70
 800be1a:	461a      	mov	r2, r3
 800be1c:	2100      	movs	r1, #0
 800be1e:	f000 fd6d 	bl	800c8fc <memset>
 800be22:	e01f      	b.n	800be64 <mbedtls_sha512_finish_ret+0x8a>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 128 - used );
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	18d0      	adds	r0, r2, r3
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800be34:	461a      	mov	r2, r3
 800be36:	2100      	movs	r1, #0
 800be38:	f000 fd60 	bl	800c8fc <memset>

        if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3350      	adds	r3, #80	@ 0x50
 800be40:	4619      	mov	r1, r3
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7fd fe80 	bl	8009b48 <mbedtls_internal_sha512_process>
 800be48:	61b8      	str	r0, [r7, #24]
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d002      	beq.n	800be56 <mbedtls_sha512_finish_ret+0x7c>
            return( ret );
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	f000 bc3c 	b.w	800c6ce <mbedtls_sha512_finish_ret+0x8f4>

        memset( ctx->buffer, 0, 112 );
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	3350      	adds	r3, #80	@ 0x50
 800be5a:	2270      	movs	r2, #112	@ 0x70
 800be5c:	2100      	movs	r1, #0
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fd4c 	bl	800c8fc <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 61 )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	f04f 0000 	mov.w	r0, #0
 800be6e:	f04f 0100 	mov.w	r1, #0
 800be72:	0f58      	lsrs	r0, r3, #29
 800be74:	2100      	movs	r1, #0
         | ( ctx->total[1] <<  3 );
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800be7c:	f04f 0200 	mov.w	r2, #0
 800be80:	f04f 0300 	mov.w	r3, #0
 800be84:	00eb      	lsls	r3, r5, #3
 800be86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800be8a:	00e2      	lsls	r2, r4, #3
    high = ( ctx->total[0] >> 61 )
 800be8c:	ea40 0802 	orr.w	r8, r0, r2
 800be90:	ea41 0903 	orr.w	r9, r1, r3
 800be94:	e9c7 8904 	strd	r8, r9, [r7, #16]
    low  = ( ctx->total[0] <<  3 );
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be9e:	f04f 0200 	mov.w	r2, #0
 800bea2:	f04f 0300 	mov.w	r3, #0
 800bea6:	00cb      	lsls	r3, r1, #3
 800bea8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800beac:	00c2      	lsls	r2, r0, #3
 800beae:	e9c7 2302 	strd	r2, r3, [r7, #8]

    PUT_UINT64_BE( high, ctx->buffer, 112 );
 800beb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800beb6:	f04f 0200 	mov.w	r2, #0
 800beba:	f04f 0300 	mov.w	r3, #0
 800bebe:	0e0a      	lsrs	r2, r1, #24
 800bec0:	2300      	movs	r3, #0
 800bec2:	b2d2      	uxtb	r2, r2
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
 800beca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bece:	f04f 0200 	mov.w	r2, #0
 800bed2:	f04f 0300 	mov.w	r3, #0
 800bed6:	0c0a      	lsrs	r2, r1, #16
 800bed8:	2300      	movs	r3, #0
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f883 20c1 	strb.w	r2, [r3, #193]	@ 0xc1
 800bee2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bee6:	f04f 0200 	mov.w	r2, #0
 800beea:	f04f 0300 	mov.w	r3, #0
 800beee:	0a0a      	lsrs	r2, r1, #8
 800bef0:	2300      	movs	r3, #0
 800bef2:	b2d2      	uxtb	r2, r2
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2
 800befa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800befe:	f04f 0200 	mov.w	r2, #0
 800bf02:	f04f 0300 	mov.w	r3, #0
 800bf06:	000a      	movs	r2, r1
 800bf08:	2300      	movs	r3, #0
 800bf0a:	b2d2      	uxtb	r2, r2
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f883 20c3 	strb.w	r2, [r3, #195]	@ 0xc3
 800bf12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bf16:	f04f 0200 	mov.w	r2, #0
 800bf1a:	f04f 0300 	mov.w	r3, #0
 800bf1e:	0e02      	lsrs	r2, r0, #24
 800bf20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bf24:	0e0b      	lsrs	r3, r1, #24
 800bf26:	b2d2      	uxtb	r2, r2
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4
 800bf2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	f04f 0300 	mov.w	r3, #0
 800bf3a:	0c02      	lsrs	r2, r0, #16
 800bf3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bf40:	0c0b      	lsrs	r3, r1, #16
 800bf42:	b2d2      	uxtb	r2, r2
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5
 800bf4a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bf4e:	f04f 0200 	mov.w	r2, #0
 800bf52:	f04f 0300 	mov.w	r3, #0
 800bf56:	0a02      	lsrs	r2, r0, #8
 800bf58:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bf5c:	0a0b      	lsrs	r3, r1, #8
 800bf5e:	b2d2      	uxtb	r2, r2
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f883 20c6 	strb.w	r2, [r3, #198]	@ 0xc6
 800bf66:	7c3a      	ldrb	r2, [r7, #16]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f883 20c7 	strb.w	r2, [r3, #199]	@ 0xc7
    PUT_UINT64_BE( low,  ctx->buffer, 120 );
 800bf6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf72:	f04f 0200 	mov.w	r2, #0
 800bf76:	f04f 0300 	mov.w	r3, #0
 800bf7a:	0e0a      	lsrs	r2, r1, #24
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	b2d2      	uxtb	r2, r2
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f883 20c8 	strb.w	r2, [r3, #200]	@ 0xc8
 800bf86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bf8a:	f04f 0200 	mov.w	r2, #0
 800bf8e:	f04f 0300 	mov.w	r3, #0
 800bf92:	0c0a      	lsrs	r2, r1, #16
 800bf94:	2300      	movs	r3, #0
 800bf96:	b2d2      	uxtb	r2, r2
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f883 20c9 	strb.w	r2, [r3, #201]	@ 0xc9
 800bf9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bfa2:	f04f 0200 	mov.w	r2, #0
 800bfa6:	f04f 0300 	mov.w	r3, #0
 800bfaa:	0a0a      	lsrs	r2, r1, #8
 800bfac:	2300      	movs	r3, #0
 800bfae:	b2d2      	uxtb	r2, r2
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f883 20ca 	strb.w	r2, [r3, #202]	@ 0xca
 800bfb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bfba:	f04f 0200 	mov.w	r2, #0
 800bfbe:	f04f 0300 	mov.w	r3, #0
 800bfc2:	000a      	movs	r2, r1
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	b2d2      	uxtb	r2, r2
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f883 20cb 	strb.w	r2, [r3, #203]	@ 0xcb
 800bfce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bfd2:	f04f 0200 	mov.w	r2, #0
 800bfd6:	f04f 0300 	mov.w	r3, #0
 800bfda:	0e02      	lsrs	r2, r0, #24
 800bfdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800bfe0:	0e0b      	lsrs	r3, r1, #24
 800bfe2:	b2d2      	uxtb	r2, r2
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
 800bfea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bfee:	f04f 0200 	mov.w	r2, #0
 800bff2:	f04f 0300 	mov.w	r3, #0
 800bff6:	0c02      	lsrs	r2, r0, #16
 800bff8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bffc:	0c0b      	lsrs	r3, r1, #16
 800bffe:	b2d2      	uxtb	r2, r2
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
 800c006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c00a:	f04f 0200 	mov.w	r2, #0
 800c00e:	f04f 0300 	mov.w	r3, #0
 800c012:	0a02      	lsrs	r2, r0, #8
 800c014:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c018:	0a0b      	lsrs	r3, r1, #8
 800c01a:	b2d2      	uxtb	r2, r2
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f883 20ce 	strb.w	r2, [r3, #206]	@ 0xce
 800c022:	7a3a      	ldrb	r2, [r7, #8]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f883 20cf 	strb.w	r2, [r3, #207]	@ 0xcf

    if( ( ret = mbedtls_internal_sha512_process( ctx, ctx->buffer ) ) != 0 )
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	3350      	adds	r3, #80	@ 0x50
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f7fd fd89 	bl	8009b48 <mbedtls_internal_sha512_process>
 800c036:	61b8      	str	r0, [r7, #24]
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d001      	beq.n	800c042 <mbedtls_sha512_finish_ret+0x268>
        return( ret );
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	e345      	b.n	800c6ce <mbedtls_sha512_finish_ret+0x8f4>

    /*
     * Output final state
     */
    PUT_UINT64_BE( ctx->state[0], output,  0 );
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c048:	f04f 0200 	mov.w	r2, #0
 800c04c:	f04f 0300 	mov.w	r3, #0
 800c050:	0e0a      	lsrs	r2, r1, #24
 800c052:	2300      	movs	r3, #0
 800c054:	b2d2      	uxtb	r2, r2
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	701a      	strb	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c060:	f04f 0200 	mov.w	r2, #0
 800c064:	f04f 0300 	mov.w	r3, #0
 800c068:	0c0a      	lsrs	r2, r1, #16
 800c06a:	2300      	movs	r3, #0
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	3101      	adds	r1, #1
 800c070:	b2d3      	uxtb	r3, r2
 800c072:	700b      	strb	r3, [r1, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c07a:	f04f 0200 	mov.w	r2, #0
 800c07e:	f04f 0300 	mov.w	r3, #0
 800c082:	0a0a      	lsrs	r2, r1, #8
 800c084:	2300      	movs	r3, #0
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	3102      	adds	r1, #2
 800c08a:	b2d3      	uxtb	r3, r2
 800c08c:	700b      	strb	r3, [r1, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c094:	f04f 0200 	mov.w	r2, #0
 800c098:	f04f 0300 	mov.w	r3, #0
 800c09c:	000a      	movs	r2, r1
 800c09e:	2300      	movs	r3, #0
 800c0a0:	6839      	ldr	r1, [r7, #0]
 800c0a2:	3103      	adds	r1, #3
 800c0a4:	b2d3      	uxtb	r3, r2
 800c0a6:	700b      	strb	r3, [r1, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c0ae:	f04f 0200 	mov.w	r2, #0
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	0e02      	lsrs	r2, r0, #24
 800c0b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c0bc:	0e0b      	lsrs	r3, r1, #24
 800c0be:	6839      	ldr	r1, [r7, #0]
 800c0c0:	3104      	adds	r1, #4
 800c0c2:	b2d3      	uxtb	r3, r2
 800c0c4:	700b      	strb	r3, [r1, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c0cc:	f04f 0200 	mov.w	r2, #0
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	0c02      	lsrs	r2, r0, #16
 800c0d6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c0da:	0c0b      	lsrs	r3, r1, #16
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	3105      	adds	r1, #5
 800c0e0:	b2d3      	uxtb	r3, r2
 800c0e2:	700b      	strb	r3, [r1, #0]
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800c0ea:	f04f 0200 	mov.w	r2, #0
 800c0ee:	f04f 0300 	mov.w	r3, #0
 800c0f2:	0a02      	lsrs	r2, r0, #8
 800c0f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c0f8:	0a0b      	lsrs	r3, r1, #8
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	3106      	adds	r1, #6
 800c0fe:	b2d3      	uxtb	r3, r2
 800c100:	700b      	strb	r3, [r1, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	3107      	adds	r1, #7
 800c10c:	b2d3      	uxtb	r3, r2
 800c10e:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[1], output,  8 );
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c116:	f04f 0200 	mov.w	r2, #0
 800c11a:	f04f 0300 	mov.w	r3, #0
 800c11e:	0e0a      	lsrs	r2, r1, #24
 800c120:	2300      	movs	r3, #0
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	3108      	adds	r1, #8
 800c126:	b2d3      	uxtb	r3, r2
 800c128:	700b      	strb	r3, [r1, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c130:	f04f 0200 	mov.w	r2, #0
 800c134:	f04f 0300 	mov.w	r3, #0
 800c138:	0c0a      	lsrs	r2, r1, #16
 800c13a:	2300      	movs	r3, #0
 800c13c:	6839      	ldr	r1, [r7, #0]
 800c13e:	3109      	adds	r1, #9
 800c140:	b2d3      	uxtb	r3, r2
 800c142:	700b      	strb	r3, [r1, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c14a:	f04f 0200 	mov.w	r2, #0
 800c14e:	f04f 0300 	mov.w	r3, #0
 800c152:	0a0a      	lsrs	r2, r1, #8
 800c154:	2300      	movs	r3, #0
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	310a      	adds	r1, #10
 800c15a:	b2d3      	uxtb	r3, r2
 800c15c:	700b      	strb	r3, [r1, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c164:	f04f 0200 	mov.w	r2, #0
 800c168:	f04f 0300 	mov.w	r3, #0
 800c16c:	000a      	movs	r2, r1
 800c16e:	2300      	movs	r3, #0
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	310b      	adds	r1, #11
 800c174:	b2d3      	uxtb	r3, r2
 800c176:	700b      	strb	r3, [r1, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c17e:	f04f 0200 	mov.w	r2, #0
 800c182:	f04f 0300 	mov.w	r3, #0
 800c186:	0e02      	lsrs	r2, r0, #24
 800c188:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c18c:	0e0b      	lsrs	r3, r1, #24
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	310c      	adds	r1, #12
 800c192:	b2d3      	uxtb	r3, r2
 800c194:	700b      	strb	r3, [r1, #0]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c19c:	f04f 0200 	mov.w	r2, #0
 800c1a0:	f04f 0300 	mov.w	r3, #0
 800c1a4:	0c02      	lsrs	r2, r0, #16
 800c1a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c1aa:	0c0b      	lsrs	r3, r1, #16
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	310d      	adds	r1, #13
 800c1b0:	b2d3      	uxtb	r3, r2
 800c1b2:	700b      	strb	r3, [r1, #0]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800c1ba:	f04f 0200 	mov.w	r2, #0
 800c1be:	f04f 0300 	mov.w	r3, #0
 800c1c2:	0a02      	lsrs	r2, r0, #8
 800c1c4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c1c8:	0a0b      	lsrs	r3, r1, #8
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	310e      	adds	r1, #14
 800c1ce:	b2d3      	uxtb	r3, r2
 800c1d0:	700b      	strb	r3, [r1, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	310f      	adds	r1, #15
 800c1dc:	b2d3      	uxtb	r3, r2
 800c1de:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[2], output, 16 );
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c1e6:	f04f 0200 	mov.w	r2, #0
 800c1ea:	f04f 0300 	mov.w	r3, #0
 800c1ee:	0e0a      	lsrs	r2, r1, #24
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	3110      	adds	r1, #16
 800c1f6:	b2d3      	uxtb	r3, r2
 800c1f8:	700b      	strb	r3, [r1, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c200:	f04f 0200 	mov.w	r2, #0
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	0c0a      	lsrs	r2, r1, #16
 800c20a:	2300      	movs	r3, #0
 800c20c:	6839      	ldr	r1, [r7, #0]
 800c20e:	3111      	adds	r1, #17
 800c210:	b2d3      	uxtb	r3, r2
 800c212:	700b      	strb	r3, [r1, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c21a:	f04f 0200 	mov.w	r2, #0
 800c21e:	f04f 0300 	mov.w	r3, #0
 800c222:	0a0a      	lsrs	r2, r1, #8
 800c224:	2300      	movs	r3, #0
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	3112      	adds	r1, #18
 800c22a:	b2d3      	uxtb	r3, r2
 800c22c:	700b      	strb	r3, [r1, #0]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c234:	f04f 0200 	mov.w	r2, #0
 800c238:	f04f 0300 	mov.w	r3, #0
 800c23c:	000a      	movs	r2, r1
 800c23e:	2300      	movs	r3, #0
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	3113      	adds	r1, #19
 800c244:	b2d3      	uxtb	r3, r2
 800c246:	700b      	strb	r3, [r1, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c24e:	f04f 0200 	mov.w	r2, #0
 800c252:	f04f 0300 	mov.w	r3, #0
 800c256:	0e02      	lsrs	r2, r0, #24
 800c258:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c25c:	0e0b      	lsrs	r3, r1, #24
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	3114      	adds	r1, #20
 800c262:	b2d3      	uxtb	r3, r2
 800c264:	700b      	strb	r3, [r1, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c26c:	f04f 0200 	mov.w	r2, #0
 800c270:	f04f 0300 	mov.w	r3, #0
 800c274:	0c02      	lsrs	r2, r0, #16
 800c276:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c27a:	0c0b      	lsrs	r3, r1, #16
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	3115      	adds	r1, #21
 800c280:	b2d3      	uxtb	r3, r2
 800c282:	700b      	strb	r3, [r1, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800c28a:	f04f 0200 	mov.w	r2, #0
 800c28e:	f04f 0300 	mov.w	r3, #0
 800c292:	0a02      	lsrs	r2, r0, #8
 800c294:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c298:	0a0b      	lsrs	r3, r1, #8
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	3116      	adds	r1, #22
 800c29e:	b2d3      	uxtb	r3, r2
 800c2a0:	700b      	strb	r3, [r1, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c2a8:	6839      	ldr	r1, [r7, #0]
 800c2aa:	3117      	adds	r1, #23
 800c2ac:	b2d3      	uxtb	r3, r2
 800c2ae:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[3], output, 24 );
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c2b6:	f04f 0200 	mov.w	r2, #0
 800c2ba:	f04f 0300 	mov.w	r3, #0
 800c2be:	0e0a      	lsrs	r2, r1, #24
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	3118      	adds	r1, #24
 800c2c6:	b2d3      	uxtb	r3, r2
 800c2c8:	700b      	strb	r3, [r1, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	0c0a      	lsrs	r2, r1, #16
 800c2da:	2300      	movs	r3, #0
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	3119      	adds	r1, #25
 800c2e0:	b2d3      	uxtb	r3, r2
 800c2e2:	700b      	strb	r3, [r1, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c2ea:	f04f 0200 	mov.w	r2, #0
 800c2ee:	f04f 0300 	mov.w	r3, #0
 800c2f2:	0a0a      	lsrs	r2, r1, #8
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	311a      	adds	r1, #26
 800c2fa:	b2d3      	uxtb	r3, r2
 800c2fc:	700b      	strb	r3, [r1, #0]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c304:	f04f 0200 	mov.w	r2, #0
 800c308:	f04f 0300 	mov.w	r3, #0
 800c30c:	000a      	movs	r2, r1
 800c30e:	2300      	movs	r3, #0
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	311b      	adds	r1, #27
 800c314:	b2d3      	uxtb	r3, r2
 800c316:	700b      	strb	r3, [r1, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c31e:	f04f 0200 	mov.w	r2, #0
 800c322:	f04f 0300 	mov.w	r3, #0
 800c326:	0e02      	lsrs	r2, r0, #24
 800c328:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c32c:	0e0b      	lsrs	r3, r1, #24
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	311c      	adds	r1, #28
 800c332:	b2d3      	uxtb	r3, r2
 800c334:	700b      	strb	r3, [r1, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c33c:	f04f 0200 	mov.w	r2, #0
 800c340:	f04f 0300 	mov.w	r3, #0
 800c344:	0c02      	lsrs	r2, r0, #16
 800c346:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c34a:	0c0b      	lsrs	r3, r1, #16
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	311d      	adds	r1, #29
 800c350:	b2d3      	uxtb	r3, r2
 800c352:	700b      	strb	r3, [r1, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800c35a:	f04f 0200 	mov.w	r2, #0
 800c35e:	f04f 0300 	mov.w	r3, #0
 800c362:	0a02      	lsrs	r2, r0, #8
 800c364:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c368:	0a0b      	lsrs	r3, r1, #8
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	311e      	adds	r1, #30
 800c36e:	b2d3      	uxtb	r3, r2
 800c370:	700b      	strb	r3, [r1, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800c378:	6839      	ldr	r1, [r7, #0]
 800c37a:	311f      	adds	r1, #31
 800c37c:	b2d3      	uxtb	r3, r2
 800c37e:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[4], output, 32 );
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c386:	f04f 0200 	mov.w	r2, #0
 800c38a:	f04f 0300 	mov.w	r3, #0
 800c38e:	0e0a      	lsrs	r2, r1, #24
 800c390:	2300      	movs	r3, #0
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	3120      	adds	r1, #32
 800c396:	b2d3      	uxtb	r3, r2
 800c398:	700b      	strb	r3, [r1, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c3a0:	f04f 0200 	mov.w	r2, #0
 800c3a4:	f04f 0300 	mov.w	r3, #0
 800c3a8:	0c0a      	lsrs	r2, r1, #16
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	3121      	adds	r1, #33	@ 0x21
 800c3b0:	b2d3      	uxtb	r3, r2
 800c3b2:	700b      	strb	r3, [r1, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c3ba:	f04f 0200 	mov.w	r2, #0
 800c3be:	f04f 0300 	mov.w	r3, #0
 800c3c2:	0a0a      	lsrs	r2, r1, #8
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	3122      	adds	r1, #34	@ 0x22
 800c3ca:	b2d3      	uxtb	r3, r2
 800c3cc:	700b      	strb	r3, [r1, #0]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c3d4:	f04f 0200 	mov.w	r2, #0
 800c3d8:	f04f 0300 	mov.w	r3, #0
 800c3dc:	000a      	movs	r2, r1
 800c3de:	2300      	movs	r3, #0
 800c3e0:	6839      	ldr	r1, [r7, #0]
 800c3e2:	3123      	adds	r1, #35	@ 0x23
 800c3e4:	b2d3      	uxtb	r3, r2
 800c3e6:	700b      	strb	r3, [r1, #0]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c3ee:	f04f 0200 	mov.w	r2, #0
 800c3f2:	f04f 0300 	mov.w	r3, #0
 800c3f6:	0e02      	lsrs	r2, r0, #24
 800c3f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c3fc:	0e0b      	lsrs	r3, r1, #24
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	3124      	adds	r1, #36	@ 0x24
 800c402:	b2d3      	uxtb	r3, r2
 800c404:	700b      	strb	r3, [r1, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c40c:	f04f 0200 	mov.w	r2, #0
 800c410:	f04f 0300 	mov.w	r3, #0
 800c414:	0c02      	lsrs	r2, r0, #16
 800c416:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c41a:	0c0b      	lsrs	r3, r1, #16
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	3125      	adds	r1, #37	@ 0x25
 800c420:	b2d3      	uxtb	r3, r2
 800c422:	700b      	strb	r3, [r1, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800c42a:	f04f 0200 	mov.w	r2, #0
 800c42e:	f04f 0300 	mov.w	r3, #0
 800c432:	0a02      	lsrs	r2, r0, #8
 800c434:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c438:	0a0b      	lsrs	r3, r1, #8
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	3126      	adds	r1, #38	@ 0x26
 800c43e:	b2d3      	uxtb	r3, r2
 800c440:	700b      	strb	r3, [r1, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	3127      	adds	r1, #39	@ 0x27
 800c44c:	b2d3      	uxtb	r3, r2
 800c44e:	700b      	strb	r3, [r1, #0]
    PUT_UINT64_BE( ctx->state[5], output, 40 );
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c456:	f04f 0200 	mov.w	r2, #0
 800c45a:	f04f 0300 	mov.w	r3, #0
 800c45e:	0e0a      	lsrs	r2, r1, #24
 800c460:	2300      	movs	r3, #0
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	3128      	adds	r1, #40	@ 0x28
 800c466:	b2d3      	uxtb	r3, r2
 800c468:	700b      	strb	r3, [r1, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c470:	f04f 0200 	mov.w	r2, #0
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	0c0a      	lsrs	r2, r1, #16
 800c47a:	2300      	movs	r3, #0
 800c47c:	6839      	ldr	r1, [r7, #0]
 800c47e:	3129      	adds	r1, #41	@ 0x29
 800c480:	b2d3      	uxtb	r3, r2
 800c482:	700b      	strb	r3, [r1, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c48a:	f04f 0200 	mov.w	r2, #0
 800c48e:	f04f 0300 	mov.w	r3, #0
 800c492:	0a0a      	lsrs	r2, r1, #8
 800c494:	2300      	movs	r3, #0
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	312a      	adds	r1, #42	@ 0x2a
 800c49a:	b2d3      	uxtb	r3, r2
 800c49c:	700b      	strb	r3, [r1, #0]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c4a4:	f04f 0200 	mov.w	r2, #0
 800c4a8:	f04f 0300 	mov.w	r3, #0
 800c4ac:	000a      	movs	r2, r1
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	312b      	adds	r1, #43	@ 0x2b
 800c4b4:	b2d3      	uxtb	r3, r2
 800c4b6:	700b      	strb	r3, [r1, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c4be:	f04f 0200 	mov.w	r2, #0
 800c4c2:	f04f 0300 	mov.w	r3, #0
 800c4c6:	0e02      	lsrs	r2, r0, #24
 800c4c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c4cc:	0e0b      	lsrs	r3, r1, #24
 800c4ce:	6839      	ldr	r1, [r7, #0]
 800c4d0:	312c      	adds	r1, #44	@ 0x2c
 800c4d2:	b2d3      	uxtb	r3, r2
 800c4d4:	700b      	strb	r3, [r1, #0]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c4dc:	f04f 0200 	mov.w	r2, #0
 800c4e0:	f04f 0300 	mov.w	r3, #0
 800c4e4:	0c02      	lsrs	r2, r0, #16
 800c4e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c4ea:	0c0b      	lsrs	r3, r1, #16
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	312d      	adds	r1, #45	@ 0x2d
 800c4f0:	b2d3      	uxtb	r3, r2
 800c4f2:	700b      	strb	r3, [r1, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800c4fa:	f04f 0200 	mov.w	r2, #0
 800c4fe:	f04f 0300 	mov.w	r3, #0
 800c502:	0a02      	lsrs	r2, r0, #8
 800c504:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c508:	0a0b      	lsrs	r3, r1, #8
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	312e      	adds	r1, #46	@ 0x2e
 800c50e:	b2d3      	uxtb	r3, r2
 800c510:	700b      	strb	r3, [r1, #0]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800c518:	6839      	ldr	r1, [r7, #0]
 800c51a:	312f      	adds	r1, #47	@ 0x2f
 800c51c:	b2d3      	uxtb	r3, r2
 800c51e:	700b      	strb	r3, [r1, #0]

    if( ctx->is384 == 0 )
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800c526:	2b00      	cmp	r3, #0
 800c528:	f040 80d0 	bne.w	800c6cc <mbedtls_sha512_finish_ret+0x8f2>
    {
        PUT_UINT64_BE( ctx->state[6], output, 48 );
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c532:	f04f 0200 	mov.w	r2, #0
 800c536:	f04f 0300 	mov.w	r3, #0
 800c53a:	0e0a      	lsrs	r2, r1, #24
 800c53c:	2300      	movs	r3, #0
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	3130      	adds	r1, #48	@ 0x30
 800c542:	b2d3      	uxtb	r3, r2
 800c544:	700b      	strb	r3, [r1, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c54c:	f04f 0200 	mov.w	r2, #0
 800c550:	f04f 0300 	mov.w	r3, #0
 800c554:	0c0a      	lsrs	r2, r1, #16
 800c556:	2300      	movs	r3, #0
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	3131      	adds	r1, #49	@ 0x31
 800c55c:	b2d3      	uxtb	r3, r2
 800c55e:	700b      	strb	r3, [r1, #0]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	f04f 0300 	mov.w	r3, #0
 800c56e:	0a0a      	lsrs	r2, r1, #8
 800c570:	2300      	movs	r3, #0
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	3132      	adds	r1, #50	@ 0x32
 800c576:	b2d3      	uxtb	r3, r2
 800c578:	700b      	strb	r3, [r1, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c580:	f04f 0200 	mov.w	r2, #0
 800c584:	f04f 0300 	mov.w	r3, #0
 800c588:	000a      	movs	r2, r1
 800c58a:	2300      	movs	r3, #0
 800c58c:	6839      	ldr	r1, [r7, #0]
 800c58e:	3133      	adds	r1, #51	@ 0x33
 800c590:	b2d3      	uxtb	r3, r2
 800c592:	700b      	strb	r3, [r1, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c59a:	f04f 0200 	mov.w	r2, #0
 800c59e:	f04f 0300 	mov.w	r3, #0
 800c5a2:	0e02      	lsrs	r2, r0, #24
 800c5a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c5a8:	0e0b      	lsrs	r3, r1, #24
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	3134      	adds	r1, #52	@ 0x34
 800c5ae:	b2d3      	uxtb	r3, r2
 800c5b0:	700b      	strb	r3, [r1, #0]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	f04f 0300 	mov.w	r3, #0
 800c5c0:	0c02      	lsrs	r2, r0, #16
 800c5c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c5c6:	0c0b      	lsrs	r3, r1, #16
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	3135      	adds	r1, #53	@ 0x35
 800c5cc:	b2d3      	uxtb	r3, r2
 800c5ce:	700b      	strb	r3, [r1, #0]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800c5d6:	f04f 0200 	mov.w	r2, #0
 800c5da:	f04f 0300 	mov.w	r3, #0
 800c5de:	0a02      	lsrs	r2, r0, #8
 800c5e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c5e4:	0a0b      	lsrs	r3, r1, #8
 800c5e6:	6839      	ldr	r1, [r7, #0]
 800c5e8:	3136      	adds	r1, #54	@ 0x36
 800c5ea:	b2d3      	uxtb	r3, r2
 800c5ec:	700b      	strb	r3, [r1, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	3137      	adds	r1, #55	@ 0x37
 800c5f8:	b2d3      	uxtb	r3, r2
 800c5fa:	700b      	strb	r3, [r1, #0]
        PUT_UINT64_BE( ctx->state[7], output, 56 );
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c602:	f04f 0200 	mov.w	r2, #0
 800c606:	f04f 0300 	mov.w	r3, #0
 800c60a:	0e0a      	lsrs	r2, r1, #24
 800c60c:	2300      	movs	r3, #0
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	3138      	adds	r1, #56	@ 0x38
 800c612:	b2d3      	uxtb	r3, r2
 800c614:	700b      	strb	r3, [r1, #0]
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	f04f 0300 	mov.w	r3, #0
 800c624:	0c0a      	lsrs	r2, r1, #16
 800c626:	2300      	movs	r3, #0
 800c628:	6839      	ldr	r1, [r7, #0]
 800c62a:	3139      	adds	r1, #57	@ 0x39
 800c62c:	b2d3      	uxtb	r3, r2
 800c62e:	700b      	strb	r3, [r1, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c636:	f04f 0200 	mov.w	r2, #0
 800c63a:	f04f 0300 	mov.w	r3, #0
 800c63e:	0a0a      	lsrs	r2, r1, #8
 800c640:	2300      	movs	r3, #0
 800c642:	6839      	ldr	r1, [r7, #0]
 800c644:	313a      	adds	r1, #58	@ 0x3a
 800c646:	b2d3      	uxtb	r3, r2
 800c648:	700b      	strb	r3, [r1, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c650:	f04f 0200 	mov.w	r2, #0
 800c654:	f04f 0300 	mov.w	r3, #0
 800c658:	000a      	movs	r2, r1
 800c65a:	2300      	movs	r3, #0
 800c65c:	6839      	ldr	r1, [r7, #0]
 800c65e:	313b      	adds	r1, #59	@ 0x3b
 800c660:	b2d3      	uxtb	r3, r2
 800c662:	700b      	strb	r3, [r1, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c66a:	f04f 0200 	mov.w	r2, #0
 800c66e:	f04f 0300 	mov.w	r3, #0
 800c672:	0e02      	lsrs	r2, r0, #24
 800c674:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c678:	0e0b      	lsrs	r3, r1, #24
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	313c      	adds	r1, #60	@ 0x3c
 800c67e:	b2d3      	uxtb	r3, r2
 800c680:	700b      	strb	r3, [r1, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c688:	f04f 0200 	mov.w	r2, #0
 800c68c:	f04f 0300 	mov.w	r3, #0
 800c690:	0c02      	lsrs	r2, r0, #16
 800c692:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800c696:	0c0b      	lsrs	r3, r1, #16
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	313d      	adds	r1, #61	@ 0x3d
 800c69c:	b2d3      	uxtb	r3, r2
 800c69e:	700b      	strb	r3, [r1, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800c6a6:	f04f 0200 	mov.w	r2, #0
 800c6aa:	f04f 0300 	mov.w	r3, #0
 800c6ae:	0a02      	lsrs	r2, r0, #8
 800c6b0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c6b4:	0a0b      	lsrs	r3, r1, #8
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	313e      	adds	r1, #62	@ 0x3e
 800c6ba:	b2d3      	uxtb	r3, r2
 800c6bc:	700b      	strb	r3, [r1, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	313f      	adds	r1, #63	@ 0x3f
 800c6c8:	b2d3      	uxtb	r3, r2
 800c6ca:	700b      	strb	r3, [r1, #0]
    }

    return( 0 );
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800c6d8 <mbedtls_sha512_ret>:
 */
int mbedtls_sha512_ret( const unsigned char *input,
                    size_t ilen,
                    unsigned char output[64],
                    int is384 )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b0bc      	sub	sp, #240	@ 0xf0
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]

    SHA512_VALIDATE_RET( is384 == 0 || is384 == 1 );
    SHA512_VALIDATE_RET( ilen == 0 || input != NULL );
    SHA512_VALIDATE_RET( (unsigned char *)output != NULL );

    mbedtls_sha512_init( &ctx );
 800c6e6:	f107 0310 	add.w	r3, r7, #16
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd f948 	bl	8009980 <mbedtls_sha512_init>

    if( ( ret = mbedtls_sha512_starts_ret( &ctx, is384 ) ) != 0 )
 800c6f0:	f107 0310 	add.w	r3, r7, #16
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7fd f962 	bl	80099c0 <mbedtls_sha512_starts_ret>
 800c6fc:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 800c700:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c704:	2b00      	cmp	r3, #0
 800c706:	d118      	bne.n	800c73a <mbedtls_sha512_ret+0x62>
        goto exit;

    if( ( ret = mbedtls_sha512_update_ret( &ctx, input, ilen ) ) != 0 )
 800c708:	f107 0310 	add.w	r3, r7, #16
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	68f9      	ldr	r1, [r7, #12]
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff fad7 	bl	800bcc4 <mbedtls_sha512_update_ret>
 800c716:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 800c71a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10d      	bne.n	800c73e <mbedtls_sha512_ret+0x66>
        goto exit;

    if( ( ret = mbedtls_sha512_finish_ret( &ctx, output ) ) != 0 )
 800c722:	f107 0310 	add.w	r3, r7, #16
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	4618      	mov	r0, r3
 800c72a:	f7ff fb56 	bl	800bdda <mbedtls_sha512_finish_ret>
 800c72e:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
 800c732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c736:	2b00      	cmp	r3, #0
        goto exit;

exit:
 800c738:	e002      	b.n	800c740 <mbedtls_sha512_ret+0x68>
        goto exit;
 800c73a:	bf00      	nop
 800c73c:	e000      	b.n	800c740 <mbedtls_sha512_ret+0x68>
        goto exit;
 800c73e:	bf00      	nop
    mbedtls_sha512_free( &ctx );
 800c740:	f107 0310 	add.w	r3, r7, #16
 800c744:	4618      	mov	r0, r3
 800c746:	f7fd f928 	bl	800999a <mbedtls_sha512_free>

    return( ret );
 800c74a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
}
 800c74e:	4618      	mov	r0, r3
 800c750:	37f0      	adds	r7, #240	@ 0xf0
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
	...

0800c758 <calloc>:
 800c758:	4b02      	ldr	r3, [pc, #8]	@ (800c764 <calloc+0xc>)
 800c75a:	460a      	mov	r2, r1
 800c75c:	4601      	mov	r1, r0
 800c75e:	6818      	ldr	r0, [r3, #0]
 800c760:	f000 b802 	b.w	800c768 <_calloc_r>
 800c764:	20000018 	.word	0x20000018

0800c768 <_calloc_r>:
 800c768:	b570      	push	{r4, r5, r6, lr}
 800c76a:	fba1 5402 	umull	r5, r4, r1, r2
 800c76e:	b93c      	cbnz	r4, 800c780 <_calloc_r+0x18>
 800c770:	4629      	mov	r1, r5
 800c772:	f000 f837 	bl	800c7e4 <_malloc_r>
 800c776:	4606      	mov	r6, r0
 800c778:	b928      	cbnz	r0, 800c786 <_calloc_r+0x1e>
 800c77a:	2600      	movs	r6, #0
 800c77c:	4630      	mov	r0, r6
 800c77e:	bd70      	pop	{r4, r5, r6, pc}
 800c780:	220c      	movs	r2, #12
 800c782:	6002      	str	r2, [r0, #0]
 800c784:	e7f9      	b.n	800c77a <_calloc_r+0x12>
 800c786:	462a      	mov	r2, r5
 800c788:	4621      	mov	r1, r4
 800c78a:	f000 f8b7 	bl	800c8fc <memset>
 800c78e:	e7f5      	b.n	800c77c <_calloc_r+0x14>

0800c790 <free>:
 800c790:	4b02      	ldr	r3, [pc, #8]	@ (800c79c <free+0xc>)
 800c792:	4601      	mov	r1, r0
 800c794:	6818      	ldr	r0, [r3, #0]
 800c796:	f000 b903 	b.w	800c9a0 <_free_r>
 800c79a:	bf00      	nop
 800c79c:	20000018 	.word	0x20000018

0800c7a0 <sbrk_aligned>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	4e0f      	ldr	r6, [pc, #60]	@ (800c7e0 <sbrk_aligned+0x40>)
 800c7a4:	460c      	mov	r4, r1
 800c7a6:	6831      	ldr	r1, [r6, #0]
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	b911      	cbnz	r1, 800c7b2 <sbrk_aligned+0x12>
 800c7ac:	f000 f8ae 	bl	800c90c <_sbrk_r>
 800c7b0:	6030      	str	r0, [r6, #0]
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	f000 f8a9 	bl	800c90c <_sbrk_r>
 800c7ba:	1c43      	adds	r3, r0, #1
 800c7bc:	d103      	bne.n	800c7c6 <sbrk_aligned+0x26>
 800c7be:	f04f 34ff 	mov.w	r4, #4294967295
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}
 800c7c6:	1cc4      	adds	r4, r0, #3
 800c7c8:	f024 0403 	bic.w	r4, r4, #3
 800c7cc:	42a0      	cmp	r0, r4
 800c7ce:	d0f8      	beq.n	800c7c2 <sbrk_aligned+0x22>
 800c7d0:	1a21      	subs	r1, r4, r0
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	f000 f89a 	bl	800c90c <_sbrk_r>
 800c7d8:	3001      	adds	r0, #1
 800c7da:	d1f2      	bne.n	800c7c2 <sbrk_aligned+0x22>
 800c7dc:	e7ef      	b.n	800c7be <sbrk_aligned+0x1e>
 800c7de:	bf00      	nop
 800c7e0:	20000128 	.word	0x20000128

0800c7e4 <_malloc_r>:
 800c7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7e8:	1ccd      	adds	r5, r1, #3
 800c7ea:	f025 0503 	bic.w	r5, r5, #3
 800c7ee:	3508      	adds	r5, #8
 800c7f0:	2d0c      	cmp	r5, #12
 800c7f2:	bf38      	it	cc
 800c7f4:	250c      	movcc	r5, #12
 800c7f6:	2d00      	cmp	r5, #0
 800c7f8:	4606      	mov	r6, r0
 800c7fa:	db01      	blt.n	800c800 <_malloc_r+0x1c>
 800c7fc:	42a9      	cmp	r1, r5
 800c7fe:	d904      	bls.n	800c80a <_malloc_r+0x26>
 800c800:	230c      	movs	r3, #12
 800c802:	6033      	str	r3, [r6, #0]
 800c804:	2000      	movs	r0, #0
 800c806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c80a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c8e0 <_malloc_r+0xfc>
 800c80e:	f000 f869 	bl	800c8e4 <__malloc_lock>
 800c812:	f8d8 3000 	ldr.w	r3, [r8]
 800c816:	461c      	mov	r4, r3
 800c818:	bb44      	cbnz	r4, 800c86c <_malloc_r+0x88>
 800c81a:	4629      	mov	r1, r5
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7ff ffbf 	bl	800c7a0 <sbrk_aligned>
 800c822:	1c43      	adds	r3, r0, #1
 800c824:	4604      	mov	r4, r0
 800c826:	d158      	bne.n	800c8da <_malloc_r+0xf6>
 800c828:	f8d8 4000 	ldr.w	r4, [r8]
 800c82c:	4627      	mov	r7, r4
 800c82e:	2f00      	cmp	r7, #0
 800c830:	d143      	bne.n	800c8ba <_malloc_r+0xd6>
 800c832:	2c00      	cmp	r4, #0
 800c834:	d04b      	beq.n	800c8ce <_malloc_r+0xea>
 800c836:	6823      	ldr	r3, [r4, #0]
 800c838:	4639      	mov	r1, r7
 800c83a:	4630      	mov	r0, r6
 800c83c:	eb04 0903 	add.w	r9, r4, r3
 800c840:	f000 f864 	bl	800c90c <_sbrk_r>
 800c844:	4581      	cmp	r9, r0
 800c846:	d142      	bne.n	800c8ce <_malloc_r+0xea>
 800c848:	6821      	ldr	r1, [r4, #0]
 800c84a:	1a6d      	subs	r5, r5, r1
 800c84c:	4629      	mov	r1, r5
 800c84e:	4630      	mov	r0, r6
 800c850:	f7ff ffa6 	bl	800c7a0 <sbrk_aligned>
 800c854:	3001      	adds	r0, #1
 800c856:	d03a      	beq.n	800c8ce <_malloc_r+0xea>
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	442b      	add	r3, r5
 800c85c:	6023      	str	r3, [r4, #0]
 800c85e:	f8d8 3000 	ldr.w	r3, [r8]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	bb62      	cbnz	r2, 800c8c0 <_malloc_r+0xdc>
 800c866:	f8c8 7000 	str.w	r7, [r8]
 800c86a:	e00f      	b.n	800c88c <_malloc_r+0xa8>
 800c86c:	6822      	ldr	r2, [r4, #0]
 800c86e:	1b52      	subs	r2, r2, r5
 800c870:	d420      	bmi.n	800c8b4 <_malloc_r+0xd0>
 800c872:	2a0b      	cmp	r2, #11
 800c874:	d917      	bls.n	800c8a6 <_malloc_r+0xc2>
 800c876:	1961      	adds	r1, r4, r5
 800c878:	42a3      	cmp	r3, r4
 800c87a:	6025      	str	r5, [r4, #0]
 800c87c:	bf18      	it	ne
 800c87e:	6059      	strne	r1, [r3, #4]
 800c880:	6863      	ldr	r3, [r4, #4]
 800c882:	bf08      	it	eq
 800c884:	f8c8 1000 	streq.w	r1, [r8]
 800c888:	5162      	str	r2, [r4, r5]
 800c88a:	604b      	str	r3, [r1, #4]
 800c88c:	4630      	mov	r0, r6
 800c88e:	f000 f82f 	bl	800c8f0 <__malloc_unlock>
 800c892:	f104 000b 	add.w	r0, r4, #11
 800c896:	1d23      	adds	r3, r4, #4
 800c898:	f020 0007 	bic.w	r0, r0, #7
 800c89c:	1ac2      	subs	r2, r0, r3
 800c89e:	bf1c      	itt	ne
 800c8a0:	1a1b      	subne	r3, r3, r0
 800c8a2:	50a3      	strne	r3, [r4, r2]
 800c8a4:	e7af      	b.n	800c806 <_malloc_r+0x22>
 800c8a6:	6862      	ldr	r2, [r4, #4]
 800c8a8:	42a3      	cmp	r3, r4
 800c8aa:	bf0c      	ite	eq
 800c8ac:	f8c8 2000 	streq.w	r2, [r8]
 800c8b0:	605a      	strne	r2, [r3, #4]
 800c8b2:	e7eb      	b.n	800c88c <_malloc_r+0xa8>
 800c8b4:	4623      	mov	r3, r4
 800c8b6:	6864      	ldr	r4, [r4, #4]
 800c8b8:	e7ae      	b.n	800c818 <_malloc_r+0x34>
 800c8ba:	463c      	mov	r4, r7
 800c8bc:	687f      	ldr	r7, [r7, #4]
 800c8be:	e7b6      	b.n	800c82e <_malloc_r+0x4a>
 800c8c0:	461a      	mov	r2, r3
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	42a3      	cmp	r3, r4
 800c8c6:	d1fb      	bne.n	800c8c0 <_malloc_r+0xdc>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	6053      	str	r3, [r2, #4]
 800c8cc:	e7de      	b.n	800c88c <_malloc_r+0xa8>
 800c8ce:	230c      	movs	r3, #12
 800c8d0:	6033      	str	r3, [r6, #0]
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f000 f80c 	bl	800c8f0 <__malloc_unlock>
 800c8d8:	e794      	b.n	800c804 <_malloc_r+0x20>
 800c8da:	6005      	str	r5, [r0, #0]
 800c8dc:	e7d6      	b.n	800c88c <_malloc_r+0xa8>
 800c8de:	bf00      	nop
 800c8e0:	2000012c 	.word	0x2000012c

0800c8e4 <__malloc_lock>:
 800c8e4:	4801      	ldr	r0, [pc, #4]	@ (800c8ec <__malloc_lock+0x8>)
 800c8e6:	f000 b84b 	b.w	800c980 <__retarget_lock_acquire_recursive>
 800c8ea:	bf00      	nop
 800c8ec:	2000026c 	.word	0x2000026c

0800c8f0 <__malloc_unlock>:
 800c8f0:	4801      	ldr	r0, [pc, #4]	@ (800c8f8 <__malloc_unlock+0x8>)
 800c8f2:	f000 b846 	b.w	800c982 <__retarget_lock_release_recursive>
 800c8f6:	bf00      	nop
 800c8f8:	2000026c 	.word	0x2000026c

0800c8fc <memset>:
 800c8fc:	4402      	add	r2, r0
 800c8fe:	4603      	mov	r3, r0
 800c900:	4293      	cmp	r3, r2
 800c902:	d100      	bne.n	800c906 <memset+0xa>
 800c904:	4770      	bx	lr
 800c906:	f803 1b01 	strb.w	r1, [r3], #1
 800c90a:	e7f9      	b.n	800c900 <memset+0x4>

0800c90c <_sbrk_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4d06      	ldr	r5, [pc, #24]	@ (800c928 <_sbrk_r+0x1c>)
 800c910:	2300      	movs	r3, #0
 800c912:	4604      	mov	r4, r0
 800c914:	4608      	mov	r0, r1
 800c916:	602b      	str	r3, [r5, #0]
 800c918:	f7f4 f95c 	bl	8000bd4 <_sbrk>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	d102      	bne.n	800c926 <_sbrk_r+0x1a>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b103      	cbz	r3, 800c926 <_sbrk_r+0x1a>
 800c924:	6023      	str	r3, [r4, #0]
 800c926:	bd38      	pop	{r3, r4, r5, pc}
 800c928:	20000268 	.word	0x20000268

0800c92c <__errno>:
 800c92c:	4b01      	ldr	r3, [pc, #4]	@ (800c934 <__errno+0x8>)
 800c92e:	6818      	ldr	r0, [r3, #0]
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20000018 	.word	0x20000018

0800c938 <__libc_init_array>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	4d0d      	ldr	r5, [pc, #52]	@ (800c970 <__libc_init_array+0x38>)
 800c93c:	4c0d      	ldr	r4, [pc, #52]	@ (800c974 <__libc_init_array+0x3c>)
 800c93e:	1b64      	subs	r4, r4, r5
 800c940:	10a4      	asrs	r4, r4, #2
 800c942:	2600      	movs	r6, #0
 800c944:	42a6      	cmp	r6, r4
 800c946:	d109      	bne.n	800c95c <__libc_init_array+0x24>
 800c948:	4d0b      	ldr	r5, [pc, #44]	@ (800c978 <__libc_init_array+0x40>)
 800c94a:	4c0c      	ldr	r4, [pc, #48]	@ (800c97c <__libc_init_array+0x44>)
 800c94c:	f000 f872 	bl	800ca34 <_init>
 800c950:	1b64      	subs	r4, r4, r5
 800c952:	10a4      	asrs	r4, r4, #2
 800c954:	2600      	movs	r6, #0
 800c956:	42a6      	cmp	r6, r4
 800c958:	d105      	bne.n	800c966 <__libc_init_array+0x2e>
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c960:	4798      	blx	r3
 800c962:	3601      	adds	r6, #1
 800c964:	e7ee      	b.n	800c944 <__libc_init_array+0xc>
 800c966:	f855 3b04 	ldr.w	r3, [r5], #4
 800c96a:	4798      	blx	r3
 800c96c:	3601      	adds	r6, #1
 800c96e:	e7f2      	b.n	800c956 <__libc_init_array+0x1e>
 800c970:	0800fb50 	.word	0x0800fb50
 800c974:	0800fb50 	.word	0x0800fb50
 800c978:	0800fb50 	.word	0x0800fb50
 800c97c:	0800fb54 	.word	0x0800fb54

0800c980 <__retarget_lock_acquire_recursive>:
 800c980:	4770      	bx	lr

0800c982 <__retarget_lock_release_recursive>:
 800c982:	4770      	bx	lr

0800c984 <memcpy>:
 800c984:	440a      	add	r2, r1
 800c986:	4291      	cmp	r1, r2
 800c988:	f100 33ff 	add.w	r3, r0, #4294967295
 800c98c:	d100      	bne.n	800c990 <memcpy+0xc>
 800c98e:	4770      	bx	lr
 800c990:	b510      	push	{r4, lr}
 800c992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c99a:	4291      	cmp	r1, r2
 800c99c:	d1f9      	bne.n	800c992 <memcpy+0xe>
 800c99e:	bd10      	pop	{r4, pc}

0800c9a0 <_free_r>:
 800c9a0:	b538      	push	{r3, r4, r5, lr}
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	2900      	cmp	r1, #0
 800c9a6:	d041      	beq.n	800ca2c <_free_r+0x8c>
 800c9a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ac:	1f0c      	subs	r4, r1, #4
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	bfb8      	it	lt
 800c9b2:	18e4      	addlt	r4, r4, r3
 800c9b4:	f7ff ff96 	bl	800c8e4 <__malloc_lock>
 800c9b8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca30 <_free_r+0x90>)
 800c9ba:	6813      	ldr	r3, [r2, #0]
 800c9bc:	b933      	cbnz	r3, 800c9cc <_free_r+0x2c>
 800c9be:	6063      	str	r3, [r4, #4]
 800c9c0:	6014      	str	r4, [r2, #0]
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9c8:	f7ff bf92 	b.w	800c8f0 <__malloc_unlock>
 800c9cc:	42a3      	cmp	r3, r4
 800c9ce:	d908      	bls.n	800c9e2 <_free_r+0x42>
 800c9d0:	6820      	ldr	r0, [r4, #0]
 800c9d2:	1821      	adds	r1, r4, r0
 800c9d4:	428b      	cmp	r3, r1
 800c9d6:	bf01      	itttt	eq
 800c9d8:	6819      	ldreq	r1, [r3, #0]
 800c9da:	685b      	ldreq	r3, [r3, #4]
 800c9dc:	1809      	addeq	r1, r1, r0
 800c9de:	6021      	streq	r1, [r4, #0]
 800c9e0:	e7ed      	b.n	800c9be <_free_r+0x1e>
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	b10b      	cbz	r3, 800c9ec <_free_r+0x4c>
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	d9fa      	bls.n	800c9e2 <_free_r+0x42>
 800c9ec:	6811      	ldr	r1, [r2, #0]
 800c9ee:	1850      	adds	r0, r2, r1
 800c9f0:	42a0      	cmp	r0, r4
 800c9f2:	d10b      	bne.n	800ca0c <_free_r+0x6c>
 800c9f4:	6820      	ldr	r0, [r4, #0]
 800c9f6:	4401      	add	r1, r0
 800c9f8:	1850      	adds	r0, r2, r1
 800c9fa:	4283      	cmp	r3, r0
 800c9fc:	6011      	str	r1, [r2, #0]
 800c9fe:	d1e0      	bne.n	800c9c2 <_free_r+0x22>
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	6053      	str	r3, [r2, #4]
 800ca06:	4408      	add	r0, r1
 800ca08:	6010      	str	r0, [r2, #0]
 800ca0a:	e7da      	b.n	800c9c2 <_free_r+0x22>
 800ca0c:	d902      	bls.n	800ca14 <_free_r+0x74>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	602b      	str	r3, [r5, #0]
 800ca12:	e7d6      	b.n	800c9c2 <_free_r+0x22>
 800ca14:	6820      	ldr	r0, [r4, #0]
 800ca16:	1821      	adds	r1, r4, r0
 800ca18:	428b      	cmp	r3, r1
 800ca1a:	bf04      	itt	eq
 800ca1c:	6819      	ldreq	r1, [r3, #0]
 800ca1e:	685b      	ldreq	r3, [r3, #4]
 800ca20:	6063      	str	r3, [r4, #4]
 800ca22:	bf04      	itt	eq
 800ca24:	1809      	addeq	r1, r1, r0
 800ca26:	6021      	streq	r1, [r4, #0]
 800ca28:	6054      	str	r4, [r2, #4]
 800ca2a:	e7ca      	b.n	800c9c2 <_free_r+0x22>
 800ca2c:	bd38      	pop	{r3, r4, r5, pc}
 800ca2e:	bf00      	nop
 800ca30:	2000012c 	.word	0x2000012c

0800ca34 <_init>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	bf00      	nop
 800ca38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca3a:	bc08      	pop	{r3}
 800ca3c:	469e      	mov	lr, r3
 800ca3e:	4770      	bx	lr

0800ca40 <_fini>:
 800ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca42:	bf00      	nop
 800ca44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca46:	bc08      	pop	{r3}
 800ca48:	469e      	mov	lr, r3
 800ca4a:	4770      	bx	lr
