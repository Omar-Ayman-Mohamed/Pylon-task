
Pylon_task_submission_clean_ver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e94  08009af0  08009af0  0000aaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c984  0800c984  0000e070  2**0
                  CONTENTS
  4 .ARM          00000008  0800c984  0800c984  0000d984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c98c  0800c98c  0000e070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c98c  0800c98c  0000d98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c990  0800c990  0000d990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800c994  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  0800ca04  0000e070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800ca04  0000e27c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a58  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000324a  00000000  00000000  0001faf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00022d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000baa  00000000  00000000  00023c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a26  00000000  00000000  00024822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015de3  00000000  00000000  0003d248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffd2  00000000  00000000  0005302b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2ffd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  000e3040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000e7658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ad8 	.word	0x08009ad8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08009ad8 	.word	0x08009ad8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <padding_data_for_AES_encryption>:
/**
 * function to pad data for AES-CBC encryption , as this format deals with data blocks of 16 bytes
 * if the data is shorter , we will need padding
 * this padding is inspired by PKCS#7 , but i padded the values with zero's instead
 * */
void padding_data_for_AES_encryption(unsigned char*original_text,size_t original_text_length,unsigned char * output){
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
    memcpy(output, original_text, original_text_length);
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	68f9      	ldr	r1, [r7, #12]
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f008 fe48 	bl	8009226 <memcpy>
    memset(output + original_text_length, 0x00, 128 - original_text_length);  //padding
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	18d0      	adds	r0, r2, r3
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80005a2:	461a      	mov	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f008 fdb3 	bl	8009110 <memset>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <aes_gcm_encrypt>:
mbedtls_aes_free(&aes);
}

int aes_gcm_encrypt(unsigned char * input, size_t input_len,
		 unsigned char * output, unsigned char * tag)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b0f1      	sub	sp, #452	@ 0x1c4
 80005b8:	af08      	add	r7, sp, #32
 80005ba:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 80005be:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 80005c2:	6020      	str	r0, [r4, #0]
 80005c4:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80005c8:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 80005cc:	6001      	str	r1, [r0, #0]
 80005ce:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80005d2:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80005d6:	600a      	str	r2, [r1, #0]
 80005d8:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80005dc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80005e0:	6013      	str	r3, [r2, #0]
    mbedtls_gcm_context gcm;
    mbedtls_gcm_init(&gcm);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4618      	mov	r0, r3
 80005e8:	f006 fe8e 	bl	8007308 <mbedtls_gcm_init>
    mbedtls_gcm_setkey(&gcm, MBEDTLS_CIPHER_ID_AES, GCM_key, AES_GCM_KEY_SIZE * 8);
 80005ec:	f107 0010 	add.w	r0, r7, #16
 80005f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <aes_gcm_encrypt+0xb0>)
 80005f6:	2102      	movs	r1, #2
 80005f8:	f007 f80e 	bl	8007618 <mbedtls_gcm_setkey>
    int ret = mbedtls_gcm_crypt_and_tag(&gcm, MBEDTLS_GCM_ENCRYPT, input_len, GCM_iv, AES_GCM_IV_SIZE,
 80005fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000668 <aes_gcm_encrypt+0xb4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8000604:	f5a2 72cc 	sub.w	r2, r2, #408	@ 0x198
 8000608:	f107 0010 	add.w	r0, r7, #16
 800060c:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8000610:	f5a1 71d0 	sub.w	r1, r1, #416	@ 0x1a0
 8000614:	6809      	ldr	r1, [r1, #0]
 8000616:	9106      	str	r1, [sp, #24]
 8000618:	2110      	movs	r1, #16
 800061a:	9105      	str	r1, [sp, #20]
 800061c:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8000620:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8000624:	6809      	ldr	r1, [r1, #0]
 8000626:	9104      	str	r1, [sp, #16]
 8000628:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800062c:	f5a1 71ca 	sub.w	r1, r1, #404	@ 0x194
 8000630:	6809      	ldr	r1, [r1, #0]
 8000632:	9103      	str	r1, [sp, #12]
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <aes_gcm_encrypt+0xb8>)
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	230c      	movs	r3, #12
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <aes_gcm_encrypt+0xbc>)
 8000640:	6812      	ldr	r2, [r2, #0]
 8000642:	2101      	movs	r1, #1
 8000644:	f007 fd5a 	bl	80080fc <mbedtls_gcm_crypt_and_tag>
 8000648:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
                              aad, aad_len, input, output, TAG_SIZE, tag);
    mbedtls_gcm_free(&gcm);
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4618      	mov	r0, r3
 8000652:	f007 fdd2 	bl	80081fa <mbedtls_gcm_free>
    return ret;
 8000656:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 800065a:	4618      	mov	r0, r3
 800065c:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8000660:	46bd      	mov	sp, r7
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	08009ca8 	.word	0x08009ca8
 8000668:	20000000 	.word	0x20000000
 800066c:	08009c9c 	.word	0x08009c9c
 8000670:	08009cc8 	.word	0x08009cc8

08000674 <aes_gcm_decrypt>:
int aes_gcm_decrypt(unsigned char *input, size_t input_len,
		unsigned char *output, unsigned char *tag)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b0ef      	sub	sp, #444	@ 0x1bc
 8000678:	af06      	add	r7, sp, #24
 800067a:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 800067e:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 8000682:	6020      	str	r0, [r4, #0]
 8000684:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8000688:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 800068c:	6001      	str	r1, [r0, #0]
 800068e:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8000692:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8000696:	600a      	str	r2, [r1, #0]
 8000698:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800069c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80006a0:	6013      	str	r3, [r2, #0]
    mbedtls_gcm_context gcm;
    mbedtls_gcm_init(&gcm);
 80006a2:	f107 0310 	add.w	r3, r7, #16
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fe2e 	bl	8007308 <mbedtls_gcm_init>
    mbedtls_gcm_setkey(&gcm, MBEDTLS_CIPHER_ID_AES, GCM_key, AES_GCM_KEY_SIZE * 8);
 80006ac:	f107 0010 	add.w	r0, r7, #16
 80006b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000720 <aes_gcm_decrypt+0xac>)
 80006b6:	2102      	movs	r1, #2
 80006b8:	f006 ffae 	bl	8007618 <mbedtls_gcm_setkey>
    int ret = mbedtls_gcm_auth_decrypt(&gcm, input_len, GCM_iv, AES_GCM_IV_SIZE, aad, aad_len,
 80006bc:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <aes_gcm_decrypt+0xb0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80006c4:	f5a2 71cc 	sub.w	r1, r2, #408	@ 0x198
 80006c8:	f107 0010 	add.w	r0, r7, #16
 80006cc:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80006d0:	f5a2 72ce 	sub.w	r2, r2, #412	@ 0x19c
 80006d4:	6812      	ldr	r2, [r2, #0]
 80006d6:	9205      	str	r2, [sp, #20]
 80006d8:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80006dc:	f5a2 72ca 	sub.w	r2, r2, #404	@ 0x194
 80006e0:	6812      	ldr	r2, [r2, #0]
 80006e2:	9204      	str	r2, [sp, #16]
 80006e4:	2210      	movs	r2, #16
 80006e6:	9203      	str	r2, [sp, #12]
 80006e8:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 80006ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80006f0:	6812      	ldr	r2, [r2, #0]
 80006f2:	9202      	str	r2, [sp, #8]
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <aes_gcm_decrypt+0xb4>)
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	230c      	movs	r3, #12
 80006fc:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <aes_gcm_decrypt+0xb8>)
 80006fe:	6809      	ldr	r1, [r1, #0]
 8000700:	f007 fd2f 	bl	8008162 <mbedtls_gcm_auth_decrypt>
 8000704:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
                                    tag, TAG_SIZE, input, output);
    mbedtls_gcm_free(&gcm);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4618      	mov	r0, r3
 800070e:	f007 fd74 	bl	80081fa <mbedtls_gcm_free>
    return ret;
 8000712:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
}
 8000716:	4618      	mov	r0, r3
 8000718:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800071c:	46bd      	mov	sp, r7
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	08009ca8 	.word	0x08009ca8
 8000724:	20000000 	.word	0x20000000
 8000728:	08009c9c 	.word	0x08009c9c
 800072c:	08009cc8 	.word	0x08009cc8

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b5b0      	push	{r4, r5, r7, lr}
 8000732:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  unsigned char plaintext[] = "This is a secret message";
 8000738:	4b23      	ldr	r3, [pc, #140]	@ (80007c8 <main+0x98>)
 800073a:	f507 7405 	add.w	r4, r7, #532	@ 0x214
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	c403      	stmia	r4!, {r0, r1}
 800074a:	7022      	strb	r2, [r4, #0]
	    unsigned char ciphertext[128];
	    unsigned char decrypted[128];
	    unsigned char padded_plaintext[128];
	    unsigned char Recieved_encrypted_data[128];
	    unsigned char Tag[TAG_SIZE];
	    size_t plaintext_len = strlen((char *)plaintext);
 800074c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fd45 	bl	80001e0 <strlen>
 8000756:	f8c7 0234 	str.w	r0, [r7, #564]	@ 0x234
	    size_t padded_len = ((plaintext_len + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE) * AES_BLOCK_SIZE; // Pad to block size
 800075a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800075e:	330f      	adds	r3, #15
 8000760:	f023 030f 	bic.w	r3, r3, #15
 8000764:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
	    padding_data_for_AES_encryption(plaintext,plaintext_len,padded_plaintext);
 8000768:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 800076c:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8000770:	f8d7 1234 	ldr.w	r1, [r7, #564]	@ 0x234
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff03 	bl	8000580 <padding_data_for_AES_encryption>
	  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fae9 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f827 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f8dd 	bl	8000940 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000786:	f000 f883 	bl	8000890 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800078a:	f000 f8af 	bl	80008ec <MX_USART1_UART_Init>
  MX_MBEDTLS_Init();
 800078e:	f002 fb33 	bl	8002df8 <MX_MBEDTLS_Init>
  /* USER CODE BEGIN 2 */
  aes_gcm_encrypt(plaintext,plaintext_len,ciphertext,Tag);
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8000798:	f507 7005 	add.w	r0, r7, #532	@ 0x214
 800079c:	f8d7 1234 	ldr.w	r1, [r7, #564]	@ 0x234
 80007a0:	f7ff ff08 	bl	80005b4 <aes_gcm_encrypt>
  aes_gcm_decrypt(ciphertext,plaintext_len,decrypted,Tag);
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80007aa:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 80007ae:	f8d7 1234 	ldr.w	r1, [r7, #564]	@ 0x234
 80007b2:	f7ff ff5f 	bl	8000674 <aes_gcm_decrypt>
  }
  remove_pkcs7_padding(decrypted,padded_len);
 // size_t unpadded_len = padded_len - decrypted[padded_len - 1];
 // decrypted[unpadded_len] = '\0'; // Null-terminate the decrypted string */

  printf("Decrypted text: %s\n", decrypted);
 80007b6:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80007ba:	4619      	mov	r1, r3
 80007bc:	4803      	ldr	r0, [pc, #12]	@ (80007cc <main+0x9c>)
 80007be:	f008 fbbd 	bl	8008f3c <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c2:	bf00      	nop
 80007c4:	e7fd      	b.n	80007c2 <main+0x92>
 80007c6:	bf00      	nop
 80007c8:	08009b04 	.word	0x08009b04
 80007cc:	08009af0 	.word	0x08009af0

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	@ 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	@ 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f008 fc96 	bl	8009110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <SystemClock_Config+0xb8>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fc:	4a22      	ldr	r2, [pc, #136]	@ (8000888 <SystemClock_Config+0xb8>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	@ 0x40
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <SystemClock_Config+0xb8>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <SystemClock_Config+0xbc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800081c:	4a1b      	ldr	r2, [pc, #108]	@ (800088c <SystemClock_Config+0xbc>)
 800081e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <SystemClock_Config+0xbc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000830:	2302      	movs	r3, #2
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000834:	2301      	movs	r3, #1
 8000836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2310      	movs	r3, #16
 800083a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff61 	bl	800170c <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000850:	f000 f89e 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f9c4 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800087a:	f000 f889 	bl	8000990 <Error_Handler>
  }
}
 800087e:	bf00      	nop
 8000880:	3750      	adds	r7, #80	@ 0x50
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40007000 	.word	0x40007000

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <MX_I2C1_Init+0x50>)
 8000896:	4a13      	ldr	r2, [pc, #76]	@ (80008e4 <MX_I2C1_Init+0x54>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_I2C1_Init+0x50>)
 800089c:	4a12      	ldr	r2, [pc, #72]	@ (80008e8 <MX_I2C1_Init+0x58>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	@ (80008e0 <MX_I2C1_Init+0x50>)
 80008ce:	f000 fdd9 	bl	8001484 <HAL_I2C_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008d8:	f000 f85a 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	40005400 	.word	0x40005400
 80008e8:	000186a0 	.word	0x000186a0

080008ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f0:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	@ (800093c <MX_USART1_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USART1_UART_Init+0x4c>)
 8000924:	f001 fb4a 	bl	8001fbc <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f82f 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000e0 	.word	0x200000e0
 800093c:	40011000 	.word	0x40011000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <MX_GPIO_Init+0x4c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <MX_GPIO_Init+0x4c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <MX_GPIO_Init+0x4c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_GPIO_Init+0x4c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <MX_GPIO_Init+0x4c>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_GPIO_Init+0x4c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <HAL_I2C_MspInit+0x84>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12b      	bne.n	8000a66 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a2a:	23c0      	movs	r3, #192	@ 0xc0
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2e:	2312      	movs	r3, #18
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	@ (8000a78 <HAL_I2C_MspInit+0x8c>)
 8000a46:	f000 fb99 	bl	800117c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_I2C_MspInit+0x88>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a66:	bf00      	nop
 8000a68:	3728      	adds	r7, #40	@ 0x28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	@ 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <HAL_UART_MspInit+0x94>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d134      	bne.n	8000b08 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a14      	ldr	r2, [pc, #80]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_UART_MspInit+0x98>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ad6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <HAL_UART_MspInit+0x9c>)
 8000af4:	f000 fb42 	bl	800117c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2025      	movs	r0, #37	@ 0x25
 8000afe:	f000 fa74 	bl	8000fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b02:	2025      	movs	r0, #37	@ 0x25
 8000b04:	f000 fa8d 	bl	8001022 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b08:	bf00      	nop
 8000b0a:	3728      	adds	r7, #40	@ 0x28
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40011000 	.word	0x40011000
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40020000 	.word	0x40020000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f93f 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <USART1_IRQHandler+0x10>)
 8000b82:	f001 fa6b 	bl	800205c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000e0 	.word	0x200000e0

08000b90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
  }

  return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf1      	blt.n	8000bdc <_write+0x12>
  }
  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f008 fa96 	bl	80091cc <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20010000 	.word	0x20010000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000128 	.word	0x20000128
 8000cd4:	20000280 	.word	0x20000280

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	@ (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d00:	f7ff ffea 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d04:	480c      	ldr	r0, [pc, #48]	@ (8000d38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d06:	490d      	ldr	r1, [pc, #52]	@ (8000d3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d08:	4a0d      	ldr	r2, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d0c:	e002      	b.n	8000d14 <LoopCopyDataInit>

08000d0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d12:	3304      	adds	r3, #4

08000d14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d18:	d3f9      	bcc.n	8000d0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d20:	e001      	b.n	8000d26 <LoopFillZerobss>

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d24:	3204      	adds	r2, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f008 fa55 	bl	80091d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fcff 	bl	8000730 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	0800c994 	.word	0x0800c994
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	2000027c 	.word	0x2000027c

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f92b 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe0a 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f943 	bl	800103e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f90b 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	@ (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000004 	.word	0x20000004
 8000dec:	2000000c 	.word	0x2000000c
 8000df0:	20000008 	.word	0x20000008

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	@ (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	2000000c 	.word	0x2000000c
 8000e18:	2000012c 	.word	0x2000012c

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	@ (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000012c 	.word	0x2000012c

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	@ (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4907      	ldr	r1, [pc, #28]	@ (8000ed0 <__NVIC_EnableIRQ+0x38>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000e100 	.word	0xe000e100

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff29 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffc:	f7ff ff3e 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8001000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	6978      	ldr	r0, [r7, #20]
 8001008:	f7ff ff8e 	bl	8000f28 <NVIC_EncodePriority>
 800100c:	4602      	mov	r2, r0
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff5d 	bl	8000ed4 <__NVIC_SetPriority>
}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff31 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ffa2 	bl	8000f90 <SysTick_Config>
 800104c:	4603      	mov	r3, r0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001062:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff feda 	bl	8000e1c <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b02      	cmp	r3, #2
 8001074:	d008      	beq.n	8001088 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2280      	movs	r2, #128	@ 0x80
 800107a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e052      	b.n	800112e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0216 	bic.w	r2, r2, #22
 8001096:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	695a      	ldr	r2, [r3, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d103      	bne.n	80010b8 <HAL_DMA_Abort+0x62>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d007      	beq.n	80010c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0208 	bic.w	r2, r2, #8
 80010c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0201 	bic.w	r2, r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d8:	e013      	b.n	8001102 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010da:	f7ff fe9f 	bl	8000e1c <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b05      	cmp	r3, #5
 80010e6:	d90c      	bls.n	8001102 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2220      	movs	r2, #32
 80010ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2203      	movs	r2, #3
 80010f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e015      	b.n	800112e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1e4      	bne.n	80010da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001114:	223f      	movs	r2, #63	@ 0x3f
 8001116:	409a      	lsls	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d004      	beq.n	8001154 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e00c      	b.n	800116e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2205      	movs	r2, #5
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	e159      	b.n	800144c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001198:	2201      	movs	r2, #1
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	f040 8148 	bne.w	8001446 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d005      	beq.n	80011ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d130      	bne.n	8001230 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	091b      	lsrs	r3, r3, #4
 800121a:	f003 0201 	and.w	r2, r3, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b03      	cmp	r3, #3
 800123a:	d017      	beq.n	800126c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d123      	bne.n	80012c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	08da      	lsrs	r2, r3, #3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3208      	adds	r2, #8
 80012ba:	69b9      	ldr	r1, [r7, #24]
 80012bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80a2 	beq.w	8001446 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b57      	ldr	r3, [pc, #348]	@ (8001464 <HAL_GPIO_Init+0x2e8>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	4a56      	ldr	r2, [pc, #344]	@ (8001464 <HAL_GPIO_Init+0x2e8>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001310:	6453      	str	r3, [r2, #68]	@ 0x44
 8001312:	4b54      	ldr	r3, [pc, #336]	@ (8001464 <HAL_GPIO_Init+0x2e8>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800131e:	4a52      	ldr	r2, [pc, #328]	@ (8001468 <HAL_GPIO_Init+0x2ec>)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a49      	ldr	r2, [pc, #292]	@ (800146c <HAL_GPIO_Init+0x2f0>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d019      	beq.n	800137e <HAL_GPIO_Init+0x202>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a48      	ldr	r2, [pc, #288]	@ (8001470 <HAL_GPIO_Init+0x2f4>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d013      	beq.n	800137a <HAL_GPIO_Init+0x1fe>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a47      	ldr	r2, [pc, #284]	@ (8001474 <HAL_GPIO_Init+0x2f8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d00d      	beq.n	8001376 <HAL_GPIO_Init+0x1fa>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a46      	ldr	r2, [pc, #280]	@ (8001478 <HAL_GPIO_Init+0x2fc>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d007      	beq.n	8001372 <HAL_GPIO_Init+0x1f6>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a45      	ldr	r2, [pc, #276]	@ (800147c <HAL_GPIO_Init+0x300>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d101      	bne.n	800136e <HAL_GPIO_Init+0x1f2>
 800136a:	2304      	movs	r3, #4
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x204>
 800136e:	2307      	movs	r3, #7
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x204>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x204>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x204>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x204>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	@ (8001468 <HAL_GPIO_Init+0x2ec>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139e:	4b38      	ldr	r3, [pc, #224]	@ (8001480 <HAL_GPIO_Init+0x304>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001480 <HAL_GPIO_Init+0x304>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_GPIO_Init+0x304>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ec:	4a24      	ldr	r2, [pc, #144]	@ (8001480 <HAL_GPIO_Init+0x304>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013f2:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <HAL_GPIO_Init+0x304>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001416:	4a1a      	ldr	r2, [pc, #104]	@ (8001480 <HAL_GPIO_Init+0x304>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <HAL_GPIO_Init+0x304>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001440:	4a0f      	ldr	r2, [pc, #60]	@ (8001480 <HAL_GPIO_Init+0x304>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f aea2 	bls.w	8001198 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40013c00 	.word	0x40013c00

08001484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d101      	bne.n	8001496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e12b      	b.n	80016ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff fa9e 	bl	80009ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0201 	bic.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014e8:	f000 fd40 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
 80014ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4a81      	ldr	r2, [pc, #516]	@ (80016f8 <HAL_I2C_Init+0x274>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d807      	bhi.n	8001508 <HAL_I2C_Init+0x84>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4a80      	ldr	r2, [pc, #512]	@ (80016fc <HAL_I2C_Init+0x278>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	bf94      	ite	ls
 8001500:	2301      	movls	r3, #1
 8001502:	2300      	movhi	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	e006      	b.n	8001516 <HAL_I2C_Init+0x92>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a7d      	ldr	r2, [pc, #500]	@ (8001700 <HAL_I2C_Init+0x27c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	bf94      	ite	ls
 8001510:	2301      	movls	r3, #1
 8001512:	2300      	movhi	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e0e7      	b.n	80016ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4a78      	ldr	r2, [pc, #480]	@ (8001704 <HAL_I2C_Init+0x280>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	0c9b      	lsrs	r3, r3, #18
 8001528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	4a6a      	ldr	r2, [pc, #424]	@ (80016f8 <HAL_I2C_Init+0x274>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d802      	bhi.n	8001558 <HAL_I2C_Init+0xd4>
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	e009      	b.n	800156c <HAL_I2C_Init+0xe8>
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	4a69      	ldr	r2, [pc, #420]	@ (8001708 <HAL_I2C_Init+0x284>)
 8001564:	fba2 2303 	umull	r2, r3, r2, r3
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	3301      	adds	r3, #1
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800157e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	495c      	ldr	r1, [pc, #368]	@ (80016f8 <HAL_I2C_Init+0x274>)
 8001588:	428b      	cmp	r3, r1
 800158a:	d819      	bhi.n	80015c0 <HAL_I2C_Init+0x13c>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e59      	subs	r1, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fbb1 f3f3 	udiv	r3, r1, r3
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015a0:	400b      	ands	r3, r1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00a      	beq.n	80015bc <HAL_I2C_Init+0x138>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1e59      	subs	r1, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b4:	3301      	adds	r3, #1
 80015b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ba:	e051      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015bc:	2304      	movs	r3, #4
 80015be:	e04f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_I2C_Init+0x168>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	1e58      	subs	r0, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6859      	ldr	r1, [r3, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	440b      	add	r3, r1
 80015d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	e012      	b.n	8001612 <HAL_I2C_Init+0x18e>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	1e58      	subs	r0, r3, #1
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6859      	ldr	r1, [r3, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	0099      	lsls	r1, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001602:	3301      	adds	r3, #1
 8001604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_Init+0x196>
 8001616:	2301      	movs	r3, #1
 8001618:	e022      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10e      	bne.n	8001640 <HAL_I2C_Init+0x1bc>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1e58      	subs	r0, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6859      	ldr	r1, [r3, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	440b      	add	r3, r1
 8001630:	fbb0 f3f3 	udiv	r3, r0, r3
 8001634:	3301      	adds	r3, #1
 8001636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800163e:	e00f      	b.n	8001660 <HAL_I2C_Init+0x1dc>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	6809      	ldr	r1, [r1, #0]
 8001664:	4313      	orrs	r3, r2
 8001666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69da      	ldr	r2, [r3, #28]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800168e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6911      	ldr	r1, [r2, #16]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68d2      	ldr	r2, [r2, #12]
 800169a:	4311      	orrs	r1, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695a      	ldr	r2, [r3, #20]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0201 	orr.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	000186a0 	.word	0x000186a0
 80016fc:	001e847f 	.word	0x001e847f
 8001700:	003d08ff 	.word	0x003d08ff
 8001704:	431bde83 	.word	0x431bde83
 8001708:	10624dd3 	.word	0x10624dd3

0800170c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e267      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d075      	beq.n	8001816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800172a:	4b88      	ldr	r3, [pc, #544]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00c      	beq.n	8001750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001736:	4b85      	ldr	r3, [pc, #532]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800173e:	2b08      	cmp	r3, #8
 8001740:	d112      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b82      	ldr	r3, [pc, #520]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800174e:	d10b      	bne.n	8001768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	4b7e      	ldr	r3, [pc, #504]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05b      	beq.n	8001814 <HAL_RCC_OscConfig+0x108>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d157      	bne.n	8001814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e242      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x74>
 8001772:	4b76      	ldr	r3, [pc, #472]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a75      	ldr	r2, [pc, #468]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	e01d      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x98>
 800178a:	4b70      	ldr	r3, [pc, #448]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a6f      	ldr	r2, [pc, #444]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	4b6d      	ldr	r3, [pc, #436]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a6c      	ldr	r2, [pc, #432]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800179c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e00b      	b.n	80017bc <HAL_RCC_OscConfig+0xb0>
 80017a4:	4b69      	ldr	r3, [pc, #420]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a68      	ldr	r2, [pc, #416]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b66      	ldr	r3, [pc, #408]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb2a 	bl	8000e1c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fb26 	bl	8000e1c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	@ 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e207      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0xc0>
 80017ea:	e014      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb16 	bl	8000e1c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f4:	f7ff fb12 	bl	8000e1c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b64      	cmp	r3, #100	@ 0x64
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e1f3      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	4b51      	ldr	r3, [pc, #324]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0xe8>
 8001812:	e000      	b.n	8001816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d063      	beq.n	80018ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001822:	4b4a      	ldr	r3, [pc, #296]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00b      	beq.n	8001846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800182e:	4b47      	ldr	r3, [pc, #284]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001836:	2b08      	cmp	r3, #8
 8001838:	d11c      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b44      	ldr	r3, [pc, #272]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d116      	bne.n	8001874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4b41      	ldr	r3, [pc, #260]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d001      	beq.n	800185e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1c7      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b3b      	ldr	r3, [pc, #236]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4937      	ldr	r1, [pc, #220]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	e03a      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d020      	beq.n	80018be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800187c:	4b34      	ldr	r3, [pc, #208]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff facb 	bl	8000e1c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001888:	e008      	b.n	800189c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188a:	f7ff fac7 	bl	8000e1c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	2b02      	cmp	r3, #2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e1a8      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0f0      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a8:	4b28      	ldr	r3, [pc, #160]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4925      	ldr	r1, [pc, #148]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e015      	b.n	80018ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_RCC_OscConfig+0x244>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff faaa 	bl	8000e1c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018cc:	f7ff faa6 	bl	8000e1c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e187      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d036      	beq.n	8001964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d016      	beq.n	800192c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018fe:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001904:	f7ff fa8a 	bl	8000e1c <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800190c:	f7ff fa86 	bl	8000e1c <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e167      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <HAL_RCC_OscConfig+0x240>)
 8001920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x200>
 800192a:	e01b      	b.n	8001964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_OscConfig+0x248>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fa73 	bl	8000e1c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	e00e      	b.n	8001958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fa6f 	bl	8000e1c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d907      	bls.n	8001958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e150      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b88      	ldr	r3, [pc, #544]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1ea      	bne.n	800193a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 8097 	beq.w	8001aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b81      	ldr	r3, [pc, #516]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	4a7c      	ldr	r2, [pc, #496]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	@ 0x40
 8001992:	4b7a      	ldr	r3, [pc, #488]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b77      	ldr	r3, [pc, #476]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d118      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a73      	ldr	r2, [pc, #460]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fa2f 	bl	8000e1c <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff fa2b 	bl	8000e1c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e10c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001b80 <HAL_RCC_OscConfig+0x474>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2ea>
 80019e8:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ec:	4a63      	ldr	r2, [pc, #396]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f4:	e01c      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x30c>
 80019fe:	4b5f      	ldr	r3, [pc, #380]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a02:	4a5e      	ldr	r2, [pc, #376]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_OscConfig+0x324>
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a1c:	4a57      	ldr	r2, [pc, #348]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a24:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a28:	4a54      	ldr	r2, [pc, #336]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a2a:	f023 0304 	bic.w	r3, r3, #4
 8001a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d015      	beq.n	8001a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a38:	f7ff f9f0 	bl	8000e1c <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a40:	f7ff f9ec 	bl	8000e1c <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0cb      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a56:	4b49      	ldr	r3, [pc, #292]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ee      	beq.n	8001a40 <HAL_RCC_OscConfig+0x334>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a64:	f7ff f9da 	bl	8000e1c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f9d6 	bl	8000e1c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0b5      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a82:	4b3e      	ldr	r3, [pc, #248]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1ee      	bne.n	8001a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a38      	ldr	r2, [pc, #224]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a1 	beq.w	8001bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aaa:	4b34      	ldr	r3, [pc, #208]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d05c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d141      	bne.n	8001b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b31      	ldr	r3, [pc, #196]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f9aa 	bl	8000e1c <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff f9a6 	bl	8000e1c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e087      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b27      	ldr	r3, [pc, #156]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af8:	019b      	lsls	r3, r3, #6
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	491b      	ldr	r1, [pc, #108]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b1b      	ldr	r3, [pc, #108]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f97f 	bl	8000e1c <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f97b 	bl	8000e1c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e05c      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x416>
 8001b40:	e054      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <HAL_RCC_OscConfig+0x478>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f968 	bl	8000e1c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f964 	bl	8000e1c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e045      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_RCC_OscConfig+0x470>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x444>
 8001b6e:	e03d      	b.n	8001bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e038      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40007000 	.word	0x40007000
 8001b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4ec>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d028      	beq.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d121      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d11a      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bb2:	68fa      	ldr	r2, [r7, #12]
 8001bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bce:	085b      	lsrs	r3, r3, #1
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800

08001bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0cc      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b68      	ldr	r3, [pc, #416]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d90c      	bls.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b65      	ldr	r3, [pc, #404]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c26:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d001      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0b8      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d020      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	4a58      	ldr	r2, [pc, #352]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c68:	4b53      	ldr	r3, [pc, #332]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b50      	ldr	r3, [pc, #320]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	494d      	ldr	r1, [pc, #308]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d044      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d107      	bne.n	8001caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d119      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e07f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d003      	beq.n	8001cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e06f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e067      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4934      	ldr	r1, [pc, #208]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7ff f896 	bl	8000e1c <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7ff f892 	bl	8000e1c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e04f      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d20c      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b20      	ldr	r3, [pc, #128]	@ (8001db4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e032      	b.n	8001daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490e      	ldr	r1, [pc, #56]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d82:	f000 f821 	bl	8001dc8 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490a      	ldr	r1, [pc, #40]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	4a09      	ldr	r2, [pc, #36]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fff6 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	08009cd4 	.word	0x08009cd4
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	20000008 	.word	0x20000008

08001dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dcc:	b090      	sub	sp, #64	@ 0x40
 8001dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de0:	4b59      	ldr	r3, [pc, #356]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d00d      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x40>
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	f200 80a1 	bhi.w	8001f34 <HAL_RCC_GetSysClockFreq+0x16c>
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x34>
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d003      	beq.n	8001e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dfa:	e09b      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e00:	e09b      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e02:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e06:	e098      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e08:	4b4f      	ldr	r3, [pc, #316]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e12:	4b4d      	ldr	r3, [pc, #308]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d028      	beq.n	8001e70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	099b      	lsrs	r3, r3, #6
 8001e24:	2200      	movs	r2, #0
 8001e26:	623b      	str	r3, [r7, #32]
 8001e28:	627a      	str	r2, [r7, #36]	@ 0x24
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e30:	2100      	movs	r1, #0
 8001e32:	4b47      	ldr	r3, [pc, #284]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e34:	fb03 f201 	mul.w	r2, r3, r1
 8001e38:	2300      	movs	r3, #0
 8001e3a:	fb00 f303 	mul.w	r3, r0, r3
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a43      	ldr	r2, [pc, #268]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e42:	fba0 1202 	umull	r1, r2, r0, r2
 8001e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e48:	460a      	mov	r2, r1
 8001e4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e4e:	4413      	add	r3, r2
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e54:	2200      	movs	r2, #0
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	61fa      	str	r2, [r7, #28]
 8001e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e62:	f7fe fa15 	bl	8000290 <__aeabi_uldivmod>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e6e:	e053      	b.n	8001f18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e70:	4b35      	ldr	r3, [pc, #212]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	099b      	lsrs	r3, r3, #6
 8001e76:	2200      	movs	r2, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	617a      	str	r2, [r7, #20]
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e82:	f04f 0b00 	mov.w	fp, #0
 8001e86:	4652      	mov	r2, sl
 8001e88:	465b      	mov	r3, fp
 8001e8a:	f04f 0000 	mov.w	r0, #0
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	0159      	lsls	r1, r3, #5
 8001e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e98:	0150      	lsls	r0, r2, #5
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	ebb2 080a 	subs.w	r8, r2, sl
 8001ea2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001eb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001eba:	ebb2 0408 	subs.w	r4, r2, r8
 8001ebe:	eb63 0509 	sbc.w	r5, r3, r9
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	00eb      	lsls	r3, r5, #3
 8001ecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed0:	00e2      	lsls	r2, r4, #3
 8001ed2:	4614      	mov	r4, r2
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	eb14 030a 	adds.w	r3, r4, sl
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	eb45 030b 	adc.w	r3, r5, fp
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eee:	4629      	mov	r1, r5
 8001ef0:	028b      	lsls	r3, r1, #10
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef8:	4621      	mov	r1, r4
 8001efa:	028a      	lsls	r2, r1, #10
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f02:	2200      	movs	r2, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	60fa      	str	r2, [r7, #12]
 8001f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f0c:	f7fe f9c0 	bl	8000290 <__aeabi_uldivmod>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4613      	mov	r3, r2
 8001f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	0c1b      	lsrs	r3, r3, #16
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	3301      	adds	r3, #1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001f28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f32:	e002      	b.n	8001f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f34:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8001f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3740      	adds	r7, #64	@ 0x40
 8001f40:	46bd      	mov	sp, r7
 8001f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	00f42400 	.word	0x00f42400
 8001f50:	017d7840 	.word	0x017d7840

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f70:	f7ff fff0 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	0a9b      	lsrs	r3, r3, #10
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	4903      	ldr	r1, [pc, #12]	@ (8001f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f82:	5ccb      	ldrb	r3, [r1, r3]
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	08009ce4 	.word	0x08009ce4

08001f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f98:	f7ff ffdc 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0b5b      	lsrs	r3, r3, #13
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	4903      	ldr	r1, [pc, #12]	@ (8001fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001faa:	5ccb      	ldrb	r3, [r1, r3]
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08009ce4 	.word	0x08009ce4

08001fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e042      	b.n	8002054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d106      	bne.n	8001fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fd4a 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2224      	movs	r2, #36	@ 0x24
 8001fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fc85 	bl	8002910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	695a      	ldr	r2, [r3, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0ba      	sub	sp, #232	@ 0xe8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002088:	2300      	movs	r3, #0
 800208a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800208e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800209a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10f      	bne.n	80020c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d009      	beq.n	80020c2 <HAL_UART_IRQHandler+0x66>
 80020ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fb69 	bl	8002792 <UART_Receive_IT>
      return;
 80020c0:	e25b      	b.n	800257a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80020c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 80de 	beq.w	8002288 <HAL_UART_IRQHandler+0x22c>
 80020cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d106      	bne.n	80020e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020dc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80d1 	beq.w	8002288 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_UART_IRQHandler+0xae>
 80020f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800210a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00b      	beq.n	800212e <HAL_UART_IRQHandler+0xd2>
 8002116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f043 0202 	orr.w	r2, r3, #2
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800212e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00b      	beq.n	8002152 <HAL_UART_IRQHandler+0xf6>
 800213a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d005      	beq.n	8002152 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d011      	beq.n	8002182 <HAL_UART_IRQHandler+0x126>
 800215e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800216a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f043 0208 	orr.w	r2, r3, #8
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 81f2 	beq.w	8002570 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800218c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d008      	beq.n	80021aa <HAL_UART_IRQHandler+0x14e>
 8002198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 faf4 	bl	8002792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	2b40      	cmp	r3, #64	@ 0x40
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d103      	bne.n	80021d6 <HAL_UART_IRQHandler+0x17a>
 80021ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d04f      	beq.n	8002276 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f9fc 	bl	80025d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e6:	2b40      	cmp	r3, #64	@ 0x40
 80021e8:	d141      	bne.n	800226e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3314      	adds	r3, #20
 80021f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80021f8:	e853 3f00 	ldrex	r3, [r3]
 80021fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002200:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002208:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3314      	adds	r3, #20
 8002212:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002216:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800221a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002222:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002226:	e841 2300 	strex	r3, r2, [r1]
 800222a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800222e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1d9      	bne.n	80021ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d013      	beq.n	8002266 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002242:	4a7e      	ldr	r2, [pc, #504]	@ (800243c <HAL_UART_IRQHandler+0x3e0>)
 8002244:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ff73 	bl	8001136 <HAL_DMA_Abort_IT>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d016      	beq.n	8002284 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002260:	4610      	mov	r0, r2
 8002262:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002264:	e00e      	b.n	8002284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f99e 	bl	80025a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800226c:	e00a      	b.n	8002284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f99a 	bl	80025a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002274:	e006      	b.n	8002284 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f996 	bl	80025a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002282:	e175      	b.n	8002570 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002284:	bf00      	nop
    return;
 8002286:	e173      	b.n	8002570 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	2b01      	cmp	r3, #1
 800228e:	f040 814f 	bne.w	8002530 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8148 	beq.w	8002530 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80022a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 8141 	beq.w	8002530 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ce:	2b40      	cmp	r3, #64	@ 0x40
 80022d0:	f040 80b6 	bne.w	8002440 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80022e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 8145 	beq.w	8002574 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80022ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80022f2:	429a      	cmp	r2, r3
 80022f4:	f080 813e 	bcs.w	8002574 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80022fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800230a:	f000 8088 	beq.w	800241e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	330c      	adds	r3, #12
 8002314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800231c:	e853 3f00 	ldrex	r3, [r3]
 8002320:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002324:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800232c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	330c      	adds	r3, #12
 8002336:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800233a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800233e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002342:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002346:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800234a:	e841 2300 	strex	r3, r2, [r1]
 800234e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1d9      	bne.n	800230e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3314      	adds	r3, #20
 8002360:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002362:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002364:	e853 3f00 	ldrex	r3, [r3]
 8002368:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800236a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	3314      	adds	r3, #20
 800237a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800237e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002382:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002384:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002386:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800238a:	e841 2300 	strex	r3, r2, [r1]
 800238e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002390:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1e1      	bne.n	800235a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	3314      	adds	r3, #20
 800239c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800239e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023a0:	e853 3f00 	ldrex	r3, [r3]
 80023a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80023a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3314      	adds	r3, #20
 80023b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80023ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80023c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023c2:	e841 2300 	strex	r3, r2, [r1]
 80023c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80023c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1e3      	bne.n	8002396 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2220      	movs	r2, #32
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	330c      	adds	r3, #12
 80023e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023e6:	e853 3f00 	ldrex	r3, [r3]
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80023ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ee:	f023 0310 	bic.w	r3, r3, #16
 80023f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	330c      	adds	r3, #12
 80023fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002400:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002402:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002404:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002406:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002408:	e841 2300 	strex	r3, r2, [r1]
 800240c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800240e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e3      	bne.n	80023dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fe1c 	bl	8001056 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800242c:	b29b      	uxth	r3, r3
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	4619      	mov	r1, r3
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f8c1 	bl	80025bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800243a:	e09b      	b.n	8002574 <HAL_UART_IRQHandler+0x518>
 800243c:	0800269b 	.word	0x0800269b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002448:	b29b      	uxth	r3, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002454:	b29b      	uxth	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 808e 	beq.w	8002578 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800245c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8089 	beq.w	8002578 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002470:	e853 3f00 	ldrex	r3, [r3]
 8002474:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002478:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800247c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800248a:	647a      	str	r2, [r7, #68]	@ 0x44
 800248c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002492:	e841 2300 	strex	r3, r2, [r1]
 8002496:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e3      	bne.n	8002466 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3314      	adds	r3, #20
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	e853 3f00 	ldrex	r3, [r3]
 80024ac:	623b      	str	r3, [r7, #32]
   return(result);
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f023 0301 	bic.w	r3, r3, #1
 80024b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3314      	adds	r3, #20
 80024be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80024c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ca:	e841 2300 	strex	r3, r2, [r1]
 80024ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80024d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1e3      	bne.n	800249e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	330c      	adds	r3, #12
 80024ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	e853 3f00 	ldrex	r3, [r3]
 80024f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0310 	bic.w	r3, r3, #16
 80024fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	330c      	adds	r3, #12
 8002504:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002508:	61fa      	str	r2, [r7, #28]
 800250a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250c:	69b9      	ldr	r1, [r7, #24]
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	e841 2300 	strex	r3, r2, [r1]
 8002514:	617b      	str	r3, [r7, #20]
   return(result);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e3      	bne.n	80024e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002522:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002526:	4619      	mov	r1, r3
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f847 	bl	80025bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800252e:	e023      	b.n	8002578 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_UART_IRQHandler+0x4f4>
 800253c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f8ba 	bl	80026c2 <UART_Transmit_IT>
    return;
 800254e:	e014      	b.n	800257a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00e      	beq.n	800257a <HAL_UART_IRQHandler+0x51e>
 800255c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f8fa 	bl	8002762 <UART_EndTransmit_IT>
    return;
 800256e:	e004      	b.n	800257a <HAL_UART_IRQHandler+0x51e>
    return;
 8002570:	bf00      	nop
 8002572:	e002      	b.n	800257a <HAL_UART_IRQHandler+0x51e>
      return;
 8002574:	bf00      	nop
 8002576:	e000      	b.n	800257a <HAL_UART_IRQHandler+0x51e>
      return;
 8002578:	bf00      	nop
  }
}
 800257a:	37e8      	adds	r7, #232	@ 0xe8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b095      	sub	sp, #84	@ 0x54
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e6:	e853 3f00 	ldrex	r3, [r3]
 80025ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	330c      	adds	r3, #12
 80025fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80025fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002600:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002602:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002604:	e841 2300 	strex	r3, r2, [r1]
 8002608:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800260a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e5      	bne.n	80025dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3314      	adds	r3, #20
 8002616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	e853 3f00 	ldrex	r3, [r3]
 800261e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3314      	adds	r3, #20
 800262e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002630:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002632:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002634:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002638:	e841 2300 	strex	r3, r2, [r1]
 800263c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e5      	bne.n	8002610 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002648:	2b01      	cmp	r3, #1
 800264a:	d119      	bne.n	8002680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	330c      	adds	r3, #12
 8002652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	60bb      	str	r3, [r7, #8]
   return(result);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f023 0310 	bic.w	r3, r3, #16
 8002662:	647b      	str	r3, [r7, #68]	@ 0x44
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	330c      	adds	r3, #12
 800266a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800266c:	61ba      	str	r2, [r7, #24]
 800266e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	613b      	str	r3, [r7, #16]
   return(result);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e5      	bne.n	800264c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800268e:	bf00      	nop
 8002690:	3754      	adds	r7, #84	@ 0x54
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7ff ff77 	bl	80025a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b21      	cmp	r3, #33	@ 0x21
 80026d4:	d13e      	bne.n	8002754 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026de:	d114      	bne.n	800270a <UART_Transmit_IT+0x48>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d110      	bne.n	800270a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a1b      	ldr	r3, [r3, #32]
 8002702:	1c9a      	adds	r2, r3, #2
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	621a      	str	r2, [r3, #32]
 8002708:	e008      	b.n	800271c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6211      	str	r1, [r2, #32]
 8002714:	781a      	ldrb	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29b      	uxth	r3, r3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4619      	mov	r1, r3
 800272a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800273e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800274e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fefc 	bl	8002580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b08c      	sub	sp, #48	@ 0x30
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b22      	cmp	r3, #34	@ 0x22
 80027a4:	f040 80ae 	bne.w	8002904 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b0:	d117      	bne.n	80027e2 <UART_Receive_IT+0x50>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d113      	bne.n	80027e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027da:	1c9a      	adds	r2, r3, #2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	629a      	str	r2, [r3, #40]	@ 0x28
 80027e0:	e026      	b.n	8002830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f4:	d007      	beq.n	8002806 <UART_Receive_IT+0x74>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <UART_Receive_IT+0x82>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e008      	b.n	8002826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002820:	b2da      	uxtb	r2, r3
 8002822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4619      	mov	r1, r3
 800283e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002840:	2b00      	cmp	r3, #0
 8002842:	d15d      	bne.n	8002900 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0220 	bic.w	r2, r2, #32
 8002852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0201 	bic.w	r2, r2, #1
 8002872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002886:	2b01      	cmp	r3, #1
 8002888:	d135      	bne.n	80028f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	330c      	adds	r3, #12
 8002896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	e853 3f00 	ldrex	r3, [r3]
 800289e:	613b      	str	r3, [r7, #16]
   return(result);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f023 0310 	bic.w	r3, r3, #16
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	330c      	adds	r3, #12
 80028ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b0:	623a      	str	r2, [r7, #32]
 80028b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b4:	69f9      	ldr	r1, [r7, #28]
 80028b6:	6a3a      	ldr	r2, [r7, #32]
 80028b8:	e841 2300 	strex	r3, r2, [r1]
 80028bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1e5      	bne.n	8002890 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0310 	and.w	r3, r3, #16
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d10a      	bne.n	80028e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ec:	4619      	mov	r1, r3
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff fe64 	bl	80025bc <HAL_UARTEx_RxEventCallback>
 80028f4:	e002      	b.n	80028fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fe4c 	bl	8002594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e002      	b.n	8002906 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002900:	2300      	movs	r3, #0
 8002902:	e000      	b.n	8002906 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002904:	2302      	movs	r3, #2
  }
}
 8002906:	4618      	mov	r0, r3
 8002908:	3730      	adds	r7, #48	@ 0x30
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b0c0      	sub	sp, #256	@ 0x100
 8002916:	af00      	add	r7, sp, #0
 8002918:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	ea40 0301 	orr.w	r3, r0, r1
 8002938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	431a      	orrs	r2, r3
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	431a      	orrs	r2, r3
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002968:	f021 010c 	bic.w	r1, r1, #12
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002976:	430b      	orrs	r3, r1
 8002978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	6999      	ldr	r1, [r3, #24]
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	ea40 0301 	orr.w	r3, r0, r1
 8002996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b8f      	ldr	r3, [pc, #572]	@ (8002bdc <UART_SetConfig+0x2cc>)
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d005      	beq.n	80029b0 <UART_SetConfig+0xa0>
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b8d      	ldr	r3, [pc, #564]	@ (8002be0 <UART_SetConfig+0x2d0>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d104      	bne.n	80029ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b0:	f7ff faf0 	bl	8001f94 <HAL_RCC_GetPCLK2Freq>
 80029b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029b8:	e003      	b.n	80029c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ba:	f7ff fad7 	bl	8001f6c <HAL_RCC_GetPCLK1Freq>
 80029be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029cc:	f040 810c 	bne.w	8002be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029e2:	4622      	mov	r2, r4
 80029e4:	462b      	mov	r3, r5
 80029e6:	1891      	adds	r1, r2, r2
 80029e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029ea:	415b      	adcs	r3, r3
 80029ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029f2:	4621      	mov	r1, r4
 80029f4:	eb12 0801 	adds.w	r8, r2, r1
 80029f8:	4629      	mov	r1, r5
 80029fa:	eb43 0901 	adc.w	r9, r3, r1
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a12:	4690      	mov	r8, r2
 8002a14:	4699      	mov	r9, r3
 8002a16:	4623      	mov	r3, r4
 8002a18:	eb18 0303 	adds.w	r3, r8, r3
 8002a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a20:	462b      	mov	r3, r5
 8002a22:	eb49 0303 	adc.w	r3, r9, r3
 8002a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a3e:	460b      	mov	r3, r1
 8002a40:	18db      	adds	r3, r3, r3
 8002a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a44:	4613      	mov	r3, r2
 8002a46:	eb42 0303 	adc.w	r3, r2, r3
 8002a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a54:	f7fd fc1c 	bl	8000290 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	011c      	lsls	r4, r3, #4
 8002a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a78:	4642      	mov	r2, r8
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	1891      	adds	r1, r2, r2
 8002a7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a80:	415b      	adcs	r3, r3
 8002a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a88:	4641      	mov	r1, r8
 8002a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a8e:	4649      	mov	r1, r9
 8002a90:	eb43 0b01 	adc.w	fp, r3, r1
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa8:	4692      	mov	sl, r2
 8002aaa:	469b      	mov	fp, r3
 8002aac:	4643      	mov	r3, r8
 8002aae:	eb1a 0303 	adds.w	r3, sl, r3
 8002ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8002abc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002acc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	18db      	adds	r3, r3, r3
 8002ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ada:	4613      	mov	r3, r2
 8002adc:	eb42 0303 	adc.w	r3, r2, r3
 8002ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002aea:	f7fd fbd1 	bl	8000290 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002af6:	fba3 2301 	umull	r2, r3, r3, r1
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2264      	movs	r2, #100	@ 0x64
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	1acb      	subs	r3, r1, r3
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b0a:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b18:	441c      	add	r4, r3
 8002b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	464b      	mov	r3, r9
 8002b30:	1891      	adds	r1, r2, r2
 8002b32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b34:	415b      	adcs	r3, r3
 8002b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	1851      	adds	r1, r2, r1
 8002b40:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b42:	4649      	mov	r1, r9
 8002b44:	414b      	adcs	r3, r1
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b54:	4659      	mov	r1, fp
 8002b56:	00cb      	lsls	r3, r1, #3
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b5e:	4651      	mov	r1, sl
 8002b60:	00ca      	lsls	r2, r1, #3
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	4642      	mov	r2, r8
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b70:	464b      	mov	r3, r9
 8002b72:	460a      	mov	r2, r1
 8002b74:	eb42 0303 	adc.w	r3, r2, r3
 8002b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b90:	460b      	mov	r3, r1
 8002b92:	18db      	adds	r3, r3, r3
 8002b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b96:	4613      	mov	r3, r2
 8002b98:	eb42 0303 	adc.w	r3, r2, r3
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ba6:	f7fd fb73 	bl	8000290 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	2164      	movs	r1, #100	@ 0x64
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	3332      	adds	r3, #50	@ 0x32
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	f003 0207 	and.w	r2, r3, #7
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4422      	add	r2, r4
 8002bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bd8:	e106      	b.n	8002de8 <UART_SetConfig+0x4d8>
 8002bda:	bf00      	nop
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bfa:	4642      	mov	r2, r8
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	1891      	adds	r1, r2, r2
 8002c00:	6239      	str	r1, [r7, #32]
 8002c02:	415b      	adcs	r3, r3
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	1854      	adds	r4, r2, r1
 8002c0e:	4649      	mov	r1, r9
 8002c10:	eb43 0501 	adc.w	r5, r3, r1
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	00eb      	lsls	r3, r5, #3
 8002c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c22:	00e2      	lsls	r2, r4, #3
 8002c24:	4614      	mov	r4, r2
 8002c26:	461d      	mov	r5, r3
 8002c28:	4643      	mov	r3, r8
 8002c2a:	18e3      	adds	r3, r4, r3
 8002c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c30:	464b      	mov	r3, r9
 8002c32:	eb45 0303 	adc.w	r3, r5, r3
 8002c36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c56:	4629      	mov	r1, r5
 8002c58:	008b      	lsls	r3, r1, #2
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c60:	4621      	mov	r1, r4
 8002c62:	008a      	lsls	r2, r1, #2
 8002c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c68:	f7fd fb12 	bl	8000290 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4b60      	ldr	r3, [pc, #384]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002c72:	fba3 2302 	umull	r2, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	011c      	lsls	r4, r3, #4
 8002c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	1891      	adds	r1, r2, r2
 8002c92:	61b9      	str	r1, [r7, #24]
 8002c94:	415b      	adcs	r3, r3
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	1851      	adds	r1, r2, r1
 8002ca0:	6139      	str	r1, [r7, #16]
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	414b      	adcs	r3, r1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	00cb      	lsls	r3, r1, #3
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	00ca      	lsls	r2, r1, #3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4642      	mov	r2, r8
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cd0:	464b      	mov	r3, r9
 8002cd2:	460a      	mov	r2, r1
 8002cd4:	eb42 0303 	adc.w	r3, r2, r3
 8002cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ce6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	008b      	lsls	r3, r1, #2
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cfe:	4641      	mov	r1, r8
 8002d00:	008a      	lsls	r2, r1, #2
 8002d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d06:	f7fd fac3 	bl	8000290 <__aeabi_uldivmod>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002d12:	fba3 2301 	umull	r2, r3, r3, r1
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2264      	movs	r2, #100	@ 0x64
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	1acb      	subs	r3, r1, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	@ 0x32
 8002d24:	4a33      	ldr	r2, [pc, #204]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d30:	441c      	add	r4, r3
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d36:	2200      	movs	r2, #0
 8002d38:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d50:	4641      	mov	r1, r8
 8002d52:	1851      	adds	r1, r2, r1
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	4649      	mov	r1, r9
 8002d58:	414b      	adcs	r3, r1
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d68:	4659      	mov	r1, fp
 8002d6a:	00cb      	lsls	r3, r1, #3
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d72:	4651      	mov	r1, sl
 8002d74:	00ca      	lsls	r2, r1, #3
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d82:	464b      	mov	r3, r9
 8002d84:	460a      	mov	r2, r1
 8002d86:	eb42 0303 	adc.w	r3, r2, r3
 8002d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d96:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002da4:	4649      	mov	r1, r9
 8002da6:	008b      	lsls	r3, r1, #2
 8002da8:	4641      	mov	r1, r8
 8002daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dae:	4641      	mov	r1, r8
 8002db0:	008a      	lsls	r2, r1, #2
 8002db2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002db6:	f7fd fa6b 	bl	8000290 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2164      	movs	r1, #100	@ 0x64
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	3332      	adds	r3, #50	@ 0x32
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4422      	add	r2, r4
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	bf00      	nop
 8002dea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dee:	46bd      	mov	sp, r7
 8002df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df4:	51eb851f 	.word	0x51eb851f

08002df8 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <mbedtls_aes_init>:
#define AES_FT3(idx) FT3[idx]

#endif /* MBEDTLS_AES_FEWER_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8002e0e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8002e12:	2100      	movs	r1, #0
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f006 f97b 	bl	8009110 <memset>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <mbedtls_aes_free>:

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <mbedtls_aes_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_aes_context ) );
 8002e30:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f005 f9f5 	bl	8008224 <mbedtls_platform_zeroize>
 8002e3a:	e000      	b.n	8002e3e <mbedtls_aes_free+0x1c>
        return;
 8002e3c:	bf00      	nop
}
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <mbedtls_aes_xts_init>:

#if defined(MBEDTLS_CIPHER_MODE_XTS)
void mbedtls_aes_xts_init( mbedtls_aes_xts_context *ctx )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
    AES_VALIDATE( ctx != NULL );

    mbedtls_aes_init( &ctx->crypt );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff ffd9 	bl	8002e06 <mbedtls_aes_init>
    mbedtls_aes_init( &ctx->tweak );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ffd3 	bl	8002e06 <mbedtls_aes_init>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <mbedtls_aes_xts_free>:

void mbedtls_aes_xts_free( mbedtls_aes_xts_context *ctx )
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <mbedtls_aes_xts_free+0x24>
        return;

    mbedtls_aes_free( &ctx->crypt );
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ffd2 	bl	8002e22 <mbedtls_aes_free>
    mbedtls_aes_free( &ctx->tweak );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ffcc 	bl	8002e22 <mbedtls_aes_free>
 8002e8a:	e000      	b.n	8002e8e <mbedtls_aes_xts_free+0x26>
        return;
 8002e8c:	bf00      	nop
}
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
    uint32_t *RK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    switch( keybits )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ea6:	d012      	beq.n	8002ece <mbedtls_aes_setkey_enc+0x3a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eae:	d812      	bhi.n	8002ed6 <mbedtls_aes_setkey_enc+0x42>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b80      	cmp	r3, #128	@ 0x80
 8002eb4:	d003      	beq.n	8002ebe <mbedtls_aes_setkey_enc+0x2a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8002eba:	d004      	beq.n	8002ec6 <mbedtls_aes_setkey_enc+0x32>
 8002ebc:	e00b      	b.n	8002ed6 <mbedtls_aes_setkey_enc+0x42>
    {
        case 128: ctx->nr = 10; break;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	220a      	movs	r2, #10
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e00a      	b.n	8002edc <mbedtls_aes_setkey_enc+0x48>
        case 192: ctx->nr = 12; break;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	220c      	movs	r2, #12
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e006      	b.n	8002edc <mbedtls_aes_setkey_enc+0x48>
        case 256: ctx->nr = 14; break;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	220e      	movs	r2, #14
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e002      	b.n	8002edc <mbedtls_aes_setkey_enc+0x48>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8002ed6:	f06f 031f 	mvn.w	r3, #31
 8002eda:	e1a7      	b.n	800322c <mbedtls_aes_setkey_enc+0x398>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	3308      	adds	r3, #8
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e027      	b.n	8002f3e <mbedtls_aes_setkey_enc+0xaa>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	3301      	adds	r3, #1
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	021b      	lsls	r3, r3, #8
 8002f08:	ea41 0203 	orr.w	r2, r1, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	440b      	add	r3, r1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	ea42 0103 	orr.w	r1, r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	3303      	adds	r3, #3
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	061a      	lsls	r2, r3, #24
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	4403      	add	r3, r0
 8002f34:	430a      	orrs	r2, r1
 8002f36:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d3d2      	bcc.n	8002eee <mbedtls_aes_setkey_enc+0x5a>
    }

    switch( ctx->nr )
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b0e      	cmp	r3, #14
 8002f4e:	f000 80ca 	beq.w	80030e6 <mbedtls_aes_setkey_enc+0x252>
 8002f52:	2b0e      	cmp	r3, #14
 8002f54:	f300 8169 	bgt.w	800322a <mbedtls_aes_setkey_enc+0x396>
 8002f58:	2b0a      	cmp	r3, #10
 8002f5a:	d002      	beq.n	8002f62 <mbedtls_aes_setkey_enc+0xce>
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d057      	beq.n	8003010 <mbedtls_aes_setkey_enc+0x17c>
 8002f60:	e163      	b.n	800322a <mbedtls_aes_setkey_enc+0x396>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e04f      	b.n	8003008 <mbedtls_aes_setkey_enc+0x174>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	495f      	ldr	r1, [pc, #380]	@ (80030ec <mbedtls_aes_setkey_enc+0x258>)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f74:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	320c      	adds	r2, #12
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	0a12      	lsrs	r2, r2, #8
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	495b      	ldr	r1, [pc, #364]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8002f82:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8002f84:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	4957      	ldr	r1, [pc, #348]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8002f96:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	330c      	adds	r3, #12
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	0e1b      	lsrs	r3, r3, #24
 8002fa0:	4953      	ldr	r1, [pc, #332]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8002fa6:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	330c      	adds	r3, #12
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4a4f      	ldr	r2, [pc, #316]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8002fbc:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8002fbe:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	3310      	adds	r3, #16
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	404a      	eors	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	3314      	adds	r3, #20
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3318      	adds	r3, #24
 8002fe4:	404a      	eors	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	330c      	adds	r3, #12
 8002fec:	6819      	ldr	r1, [r3, #0]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	331c      	adds	r3, #28
 8002ff8:	404a      	eors	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	3301      	adds	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	3310      	adds	r3, #16
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b09      	cmp	r3, #9
 800300c:	d9ac      	bls.n	8002f68 <mbedtls_aes_setkey_enc+0xd4>
            }
            break;
 800300e:	e10c      	b.n	800322a <mbedtls_aes_setkey_enc+0x396>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e063      	b.n	80030de <mbedtls_aes_setkey_enc+0x24a>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4934      	ldr	r1, [pc, #208]	@ (80030ec <mbedtls_aes_setkey_enc+0x258>)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003022:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	3214      	adds	r2, #20
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	0a12      	lsrs	r2, r2, #8
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	4930      	ldr	r1, [pc, #192]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8003030:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8003032:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	3314      	adds	r3, #20
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	b2db      	uxtb	r3, r3
 800303e:	492c      	ldr	r1, [pc, #176]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8003044:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	3314      	adds	r3, #20
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0e1b      	lsrs	r3, r3, #24
 800304e:	4928      	ldr	r1, [pc, #160]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8003054:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	3314      	adds	r3, #20
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	4a23      	ldr	r2, [pc, #140]	@ (80030f0 <mbedtls_aes_setkey_enc+0x25c>)
 8003062:	5cd3      	ldrb	r3, [r2, r3]
 8003064:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 800306a:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 800306c:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	3304      	adds	r3, #4
 8003072:	6819      	ldr	r1, [r3, #0]
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	3318      	adds	r3, #24
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	331c      	adds	r3, #28
 800307e:	404a      	eors	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	3308      	adds	r3, #8
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	331c      	adds	r3, #28
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3320      	adds	r3, #32
 8003092:	404a      	eors	r2, r1
 8003094:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	330c      	adds	r3, #12
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	3320      	adds	r3, #32
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3324      	adds	r3, #36	@ 0x24
 80030a6:	404a      	eors	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	3310      	adds	r3, #16
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	3324      	adds	r3, #36	@ 0x24
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	3328      	adds	r3, #40	@ 0x28
 80030ba:	404a      	eors	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	3314      	adds	r3, #20
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	3328      	adds	r3, #40	@ 0x28
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	332c      	adds	r3, #44	@ 0x2c
 80030ce:	404a      	eors	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3318      	adds	r3, #24
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b07      	cmp	r3, #7
 80030e2:	d998      	bls.n	8003016 <mbedtls_aes_setkey_enc+0x182>
            }
            break;
 80030e4:	e0a1      	b.n	800322a <mbedtls_aes_setkey_enc+0x396>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e099      	b.n	8003220 <mbedtls_aes_setkey_enc+0x38c>
 80030ec:	0800beec 	.word	0x0800beec
 80030f0:	08009cec 	.word	0x08009cec
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	494f      	ldr	r1, [pc, #316]	@ (8003238 <mbedtls_aes_setkey_enc+0x3a4>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003100:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	321c      	adds	r2, #28
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	0a12      	lsrs	r2, r2, #8
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	494b      	ldr	r1, [pc, #300]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 800310e:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8003110:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	331c      	adds	r3, #28
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4947      	ldr	r1, [pc, #284]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8003122:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	331c      	adds	r3, #28
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	0e1b      	lsrs	r3, r3, #24
 800312c:	4943      	ldr	r1, [pc, #268]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 800312e:	5ccb      	ldrb	r3, [r1, r3]
 8003130:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8003132:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	331c      	adds	r3, #28
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	4a3f      	ldr	r2, [pc, #252]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 8003140:	5cd3      	ldrb	r3, [r2, r3]
 8003142:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8003148:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 800314a:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	3304      	adds	r3, #4
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	3320      	adds	r3, #32
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	3324      	adds	r3, #36	@ 0x24
 800315c:	404a      	eors	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3308      	adds	r3, #8
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	3324      	adds	r3, #36	@ 0x24
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	3328      	adds	r3, #40	@ 0x28
 8003170:	404a      	eors	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	330c      	adds	r3, #12
 8003178:	6819      	ldr	r1, [r3, #0]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	3328      	adds	r3, #40	@ 0x28
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	332c      	adds	r3, #44	@ 0x2c
 8003184:	404a      	eors	r2, r1
 8003186:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3310      	adds	r3, #16
 800318c:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	322c      	adds	r2, #44	@ 0x2c
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	4929      	ldr	r1, [pc, #164]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 8003198:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 800319a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	332c      	adds	r3, #44	@ 0x2c
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	4925      	ldr	r1, [pc, #148]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 80031ac:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	332c      	adds	r3, #44	@ 0x2c
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	4920      	ldr	r1, [pc, #128]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 80031be:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	332c      	adds	r3, #44	@ 0x2c
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	0e1b      	lsrs	r3, r3, #24
 80031ca:	4a1c      	ldr	r2, [pc, #112]	@ (800323c <mbedtls_aes_setkey_enc+0x3a8>)
 80031cc:	5cd3      	ldrb	r3, [r2, r3]
 80031ce:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	3330      	adds	r3, #48	@ 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 80031d4:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 80031d6:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3314      	adds	r3, #20
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	3330      	adds	r3, #48	@ 0x30
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	3334      	adds	r3, #52	@ 0x34
 80031e8:	404a      	eors	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	3318      	adds	r3, #24
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	3334      	adds	r3, #52	@ 0x34
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	3338      	adds	r3, #56	@ 0x38
 80031fc:	404a      	eors	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	331c      	adds	r3, #28
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	3338      	adds	r3, #56	@ 0x38
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	333c      	adds	r3, #60	@ 0x3c
 8003210:	404a      	eors	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	3301      	adds	r3, #1
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3320      	adds	r3, #32
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b06      	cmp	r3, #6
 8003224:	f67f af66 	bls.w	80030f4 <mbedtls_aes_setkey_enc+0x260>
            }
            break;
 8003228:	bf00      	nop
    }

    return( 0 );
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	0800beec 	.word	0x0800beec
 800323c:	08009cec 	.word	0x08009cec

08003240 <mbedtls_aes_setkey_dec>:
 * AES key schedule (decryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_DEC_ALT)
int mbedtls_aes_setkey_dec( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0d0      	sub	sp, #320	@ 0x140
 8003244:	af00      	add	r7, sp, #0
 8003246:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800324a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800324e:	6018      	str	r0, [r3, #0]
 8003250:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003254:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003258:	6019      	str	r1, [r3, #0]
 800325a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800325e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003262:	601a      	str	r2, [r3, #0]
    uint32_t *SK;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    mbedtls_aes_init( &cty );
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fdcc 	bl	8002e06 <mbedtls_aes_init>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 800326e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003272:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3308      	adds	r3, #8
 800327a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800327e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003282:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800328c:	605a      	str	r2, [r3, #4]

    /* Also checks keybits */
    if( ( ret = mbedtls_aes_setkey_enc( &cty, key, keybits ) ) != 0 )
 800328e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003292:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8003296:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800329a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800329e:	f107 0014 	add.w	r0, r7, #20
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	f7ff fdf5 	bl	8002e94 <mbedtls_aes_setkey_enc>
 80032aa:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 80032ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 80dd 	bne.w	8003472 <mbedtls_aes_setkey_dec+0x232>
        goto exit;

    ctx->nr = cty.nr;
 80032b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032c6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	601a      	str	r2, [r3, #0]
                           (const unsigned char *) cty.rk, ctx->nr );
        goto exit;
    }
#endif

    SK = cty.rk + cty.nr * 4;
 80032ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	4413      	add	r3, r2
 80032e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

    *RK++ = *SK++;
 80032ea:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80032ee:	1d13      	adds	r3, r2, #4
 80032f0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80032f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80032f8:	1d19      	adds	r1, r3, #4
 80032fa:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003302:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003306:	1d13      	adds	r3, r2, #4
 8003308:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800330c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003310:	1d19      	adds	r1, r3, #4
 8003312:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 800331a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800331e:	1d13      	adds	r3, r2, #4
 8003320:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003324:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003328:	1d19      	adds	r1, r3, #4
 800332a:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003332:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003336:	1d13      	adds	r3, r2, #4
 8003338:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800333c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003340:	1d19      	adds	r1, r3, #4
 8003342:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003346:	6812      	ldr	r2, [r2, #0]
 8003348:	601a      	str	r2, [r3, #0]

    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 800334a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800334e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3b01      	subs	r3, #1
 8003358:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800335c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003360:	3b20      	subs	r3, #32
 8003362:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003366:	e04f      	b.n	8003408 <mbedtls_aes_setkey_dec+0x1c8>
    {
        for( j = 0; j < 4; j++, SK++ )
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800336e:	e03d      	b.n	80033ec <mbedtls_aes_setkey_dec+0x1ac>
        {
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 8003370:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	4a44      	ldr	r2, [pc, #272]	@ (800348c <mbedtls_aes_setkey_dec+0x24c>)
 800337a:	5cd3      	ldrb	r3, [r2, r3]
 800337c:	461a      	mov	r2, r3
 800337e:	4b44      	ldr	r3, [pc, #272]	@ (8003490 <mbedtls_aes_setkey_dec+0x250>)
 8003380:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 8003384:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	b2db      	uxtb	r3, r3
 800338e:	493f      	ldr	r1, [pc, #252]	@ (800348c <mbedtls_aes_setkey_dec+0x24c>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	4619      	mov	r1, r3
 8003394:	4b3f      	ldr	r3, [pc, #252]	@ (8003494 <mbedtls_aes_setkey_dec+0x254>)
 8003396:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 800339a:	405a      	eors	r2, r3
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 800339c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0c1b      	lsrs	r3, r3, #16
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	4939      	ldr	r1, [pc, #228]	@ (800348c <mbedtls_aes_setkey_dec+0x24c>)
 80033a8:	5ccb      	ldrb	r3, [r1, r3]
 80033aa:	4619      	mov	r1, r3
 80033ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003498 <mbedtls_aes_setkey_dec+0x258>)
 80033ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
                    AES_RT1( FSb[ ( *SK >>  8 ) & 0xFF ] ) ^
 80033b2:	ea82 0103 	eor.w	r1, r2, r3
                    AES_RT3( FSb[ ( *SK >> 24 ) & 0xFF ] );
 80033b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0e1b      	lsrs	r3, r3, #24
 80033be:	4a33      	ldr	r2, [pc, #204]	@ (800348c <mbedtls_aes_setkey_dec+0x24c>)
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b35      	ldr	r3, [pc, #212]	@ (800349c <mbedtls_aes_setkey_dec+0x25c>)
 80033c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80033ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80033ce:	1d18      	adds	r0, r3, #4
 80033d0:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
                    AES_RT2( FSb[ ( *SK >> 16 ) & 0xFF ] ) ^
 80033d4:	404a      	eors	r2, r1
            *RK++ = AES_RT0( FSb[ ( *SK       ) & 0xFF ] ) ^
 80033d6:	601a      	str	r2, [r3, #0]
        for( j = 0; j < 4; j++, SK++ )
 80033d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80033dc:	3301      	adds	r3, #1
 80033de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80033e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80033e6:	3304      	adds	r3, #4
 80033e8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80033ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	ddbd      	ble.n	8003370 <mbedtls_aes_setkey_dec+0x130>
    for( i = ctx->nr - 1, SK -= 8; i > 0; i--, SK -= 8 )
 80033f4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80033f8:	3b01      	subs	r3, #1
 80033fa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80033fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003402:	3b20      	subs	r3, #32
 8003404:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003408:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800340c:	2b00      	cmp	r3, #0
 800340e:	dcab      	bgt.n	8003368 <mbedtls_aes_setkey_dec+0x128>
        }
    }

    *RK++ = *SK++;
 8003410:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003414:	1d13      	adds	r3, r2, #4
 8003416:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800341a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800341e:	1d19      	adds	r1, r3, #4
 8003420:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003424:	6812      	ldr	r2, [r2, #0]
 8003426:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003428:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800342c:	1d13      	adds	r3, r2, #4
 800342e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003432:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003436:	1d19      	adds	r1, r3, #4
 8003438:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003440:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8003444:	1d13      	adds	r3, r2, #4
 8003446:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800344a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800344e:	1d19      	adds	r1, r3, #4
 8003450:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8003458:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800345c:	1d13      	adds	r3, r2, #4
 800345e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8003462:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003466:	1d19      	adds	r1, r3, #4
 8003468:	f8c7 1134 	str.w	r1, [r7, #308]	@ 0x134
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e000      	b.n	8003474 <mbedtls_aes_setkey_dec+0x234>
        goto exit;
 8003472:	bf00      	nop

exit:
    mbedtls_aes_free( &cty );
 8003474:	f107 0314 	add.w	r3, r7, #20
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fcd2 	bl	8002e22 <mbedtls_aes_free>

    return( ret );
 800347e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
}
 8003482:	4618      	mov	r0, r3
 8003484:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	08009cec 	.word	0x08009cec
 8003490:	0800aeec 	.word	0x0800aeec
 8003494:	0800b2ec 	.word	0x0800b2ec
 8003498:	0800b6ec 	.word	0x0800b6ec
 800349c:	0800baec 	.word	0x0800baec

080034a0 <mbedtls_aes_xts_decode_keys>:
                                        unsigned int keybits,
                                        const unsigned char **key1,
                                        unsigned int *key1bits,
                                        const unsigned char **key2,
                                        unsigned int *key2bits )
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
    const unsigned int half_keybits = keybits / 2;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	085b      	lsrs	r3, r3, #1
 80034b2:	617b      	str	r3, [r7, #20]
    const unsigned int half_keybytes = half_keybits / 8;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	08db      	lsrs	r3, r3, #3
 80034b8:	613b      	str	r3, [r7, #16]

    switch( keybits )
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c0:	d006      	beq.n	80034d0 <mbedtls_aes_xts_decode_keys+0x30>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c8:	d004      	beq.n	80034d4 <mbedtls_aes_xts_decode_keys+0x34>
    {
        case 256: break;
        case 512: break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 80034ca:	f06f 031f 	mvn.w	r3, #31
 80034ce:	e011      	b.n	80034f4 <mbedtls_aes_xts_decode_keys+0x54>
        case 256: break;
 80034d0:	bf00      	nop
 80034d2:	e000      	b.n	80034d6 <mbedtls_aes_xts_decode_keys+0x36>
        case 512: break;
 80034d4:	bf00      	nop
    }

    *key1bits = half_keybits;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	601a      	str	r2, [r3, #0]
    *key2bits = half_keybits;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	601a      	str	r2, [r3, #0]
    *key1 = &key[0];
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]
    *key2 = &key[half_keybytes];
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	441a      	add	r2, r3
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	601a      	str	r2, [r3, #0]

    return 0;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	371c      	adds	r7, #28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <mbedtls_aes_xts_setkey_enc>:

int mbedtls_aes_xts_setkey_enc( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	@ 0x30
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 800350c:	f107 0118 	add.w	r1, r7, #24
 8003510:	f107 0220 	add.w	r2, r7, #32
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	f107 031c 	add.w	r3, r7, #28
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	460b      	mov	r3, r1
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	68b8      	ldr	r0, [r7, #8]
 8003526:	f7ff ffbb 	bl	80034a0 <mbedtls_aes_xts_decode_keys>
 800352a:	6278      	str	r0, [r7, #36]	@ 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <mbedtls_aes_xts_setkey_enc+0x36>
        return( ret );
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	e014      	b.n	8003560 <mbedtls_aes_xts_setkey_enc+0x60>

    /* Set the tweak key. Always set tweak key for the encryption mode. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800353c:	69f9      	ldr	r1, [r7, #28]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fca7 	bl	8002e94 <mbedtls_aes_setkey_enc>
 8003546:	6278      	str	r0, [r7, #36]	@ 0x24
    if( ret != 0 )
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <mbedtls_aes_xts_setkey_enc+0x52>
        return( ret );
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	e006      	b.n	8003560 <mbedtls_aes_xts_setkey_enc+0x60>

    /* Set crypt key for encryption. */
    return mbedtls_aes_setkey_enc( &ctx->crypt, key1, key1bits );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a39      	ldr	r1, [r7, #32]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fc9b 	bl	8002e94 <mbedtls_aes_setkey_enc>
 800355e:	4603      	mov	r3, r0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3728      	adds	r7, #40	@ 0x28
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <mbedtls_aes_xts_setkey_dec>:

int mbedtls_aes_xts_setkey_dec( mbedtls_aes_xts_context *ctx,
                                const unsigned char *key,
                                unsigned int keybits)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08c      	sub	sp, #48	@ 0x30
 800356c:	af02      	add	r7, sp, #8
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
    unsigned int key1bits, key2bits;

    AES_VALIDATE_RET( ctx != NULL );
    AES_VALIDATE_RET( key != NULL );

    ret = mbedtls_aes_xts_decode_keys( key, keybits, &key1, &key1bits,
 8003574:	f107 0118 	add.w	r1, r7, #24
 8003578:	f107 0220 	add.w	r2, r7, #32
 800357c:	f107 0314 	add.w	r3, r7, #20
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	f107 031c 	add.w	r3, r7, #28
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	460b      	mov	r3, r1
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	68b8      	ldr	r0, [r7, #8]
 800358e:	f7ff ff87 	bl	80034a0 <mbedtls_aes_xts_decode_keys>
 8003592:	6278      	str	r0, [r7, #36]	@ 0x24
                                       &key2, &key2bits );
    if( ret != 0 )
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <mbedtls_aes_xts_setkey_dec+0x36>
        return( ret );
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	e014      	b.n	80035c8 <mbedtls_aes_xts_setkey_dec+0x60>

    /* Set the tweak key. Always set tweak key for encryption. */
    ret = mbedtls_aes_setkey_enc( &ctx->tweak, key2, key2bits );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80035a4:	69f9      	ldr	r1, [r7, #28]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fc73 	bl	8002e94 <mbedtls_aes_setkey_enc>
 80035ae:	6278      	str	r0, [r7, #36]	@ 0x24
    if( ret != 0 )
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <mbedtls_aes_xts_setkey_dec+0x52>
        return( ret );
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	e006      	b.n	80035c8 <mbedtls_aes_xts_setkey_dec+0x60>

    /* Set crypt key for decryption. */
    return mbedtls_aes_setkey_dec( &ctx->crypt, key1, key1bits );
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a39      	ldr	r1, [r7, #32]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fe3d 	bl	8003240 <mbedtls_aes_setkey_dec>
 80035c6:	4603      	mov	r3, r0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	@ 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b08f      	sub	sp, #60	@ 0x3c
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3301      	adds	r3, #1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3302      	adds	r3, #2
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3303      	adds	r3, #3
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	061b      	lsls	r3, r3, #24
 8003604:	4313      	orrs	r3, r2
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360a:	1d1a      	adds	r2, r3, #4
 800360c:	633a      	str	r2, [r7, #48]	@ 0x30
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003612:	4053      	eors	r3, r2
 8003614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3304      	adds	r3, #4
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	3305      	adds	r3, #5
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	431a      	orrs	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	3306      	adds	r3, #6
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	041b      	lsls	r3, r3, #16
 8003630:	431a      	orrs	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	3307      	adds	r3, #7
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	061b      	lsls	r3, r3, #24
 800363a:	4313      	orrs	r3, r2
 800363c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800363e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003640:	1d1a      	adds	r2, r3, #4
 8003642:	633a      	str	r2, [r7, #48]	@ 0x30
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003648:	4053      	eors	r3, r2
 800364a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	3308      	adds	r3, #8
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	3309      	adds	r3, #9
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	431a      	orrs	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	330a      	adds	r3, #10
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	431a      	orrs	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	330b      	adds	r3, #11
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	061b      	lsls	r3, r3, #24
 8003670:	4313      	orrs	r3, r2
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	1d1a      	adds	r2, r3, #4
 8003678:	633a      	str	r2, [r7, #48]	@ 0x30
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367e:	4053      	eors	r3, r2
 8003680:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	330c      	adds	r3, #12
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	330d      	adds	r3, #13
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	431a      	orrs	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	330e      	adds	r3, #14
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	431a      	orrs	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	330f      	adds	r3, #15
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4313      	orrs	r3, r2
 80036a8:	623b      	str	r3, [r7, #32]
 80036aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ac:	1d1a      	adds	r2, r3, #4
 80036ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a3a      	ldr	r2, [r7, #32]
 80036b4:	4053      	eors	r3, r2
 80036b6:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	105b      	asrs	r3, r3, #1
 80036be:	3b01      	subs	r3, #1
 80036c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c2:	e0fa      	b.n	80038ba <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80036c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	49ab      	ldr	r1, [pc, #684]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 80036d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036d6:	405a      	eors	r2, r3
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	0a1b      	lsrs	r3, r3, #8
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	49a9      	ldr	r1, [pc, #676]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 80036e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036e4:	405a      	eors	r2, r3
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	49a6      	ldr	r1, [pc, #664]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 80036ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036f2:	405a      	eors	r2, r3
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	0e1b      	lsrs	r3, r3, #24
 80036f8:	49a4      	ldr	r1, [pc, #656]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 80036fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036fe:	4053      	eors	r3, r2
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	1d1a      	adds	r2, r3, #4
 8003706:	633a      	str	r2, [r7, #48]	@ 0x30
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370c:	b2db      	uxtb	r3, r3
 800370e:	499c      	ldr	r1, [pc, #624]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003714:	405a      	eors	r2, r3
 8003716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4999      	ldr	r1, [pc, #612]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 800371e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003722:	405a      	eors	r2, r3
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	b2db      	uxtb	r3, r3
 800372a:	4997      	ldr	r1, [pc, #604]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 800372c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003730:	405a      	eors	r2, r3
 8003732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003734:	0e1b      	lsrs	r3, r3, #24
 8003736:	4995      	ldr	r1, [pc, #596]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003738:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800373c:	4053      	eors	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	1d1a      	adds	r2, r3, #4
 8003744:	633a      	str	r2, [r7, #48]	@ 0x30
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	b2db      	uxtb	r3, r3
 800374c:	498c      	ldr	r1, [pc, #560]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 800374e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003752:	405a      	eors	r2, r3
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	b2db      	uxtb	r3, r3
 800375a:	498a      	ldr	r1, [pc, #552]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 800375c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003760:	405a      	eors	r2, r3
 8003762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4987      	ldr	r1, [pc, #540]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 800376a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800376e:	405a      	eors	r2, r3
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	0e1b      	lsrs	r3, r3, #24
 8003774:	4985      	ldr	r1, [pc, #532]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003776:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800377a:	4053      	eors	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	633a      	str	r2, [r7, #48]	@ 0x30
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	497d      	ldr	r1, [pc, #500]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 800378c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003790:	405a      	eors	r2, r3
 8003792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003794:	0a1b      	lsrs	r3, r3, #8
 8003796:	b2db      	uxtb	r3, r3
 8003798:	497a      	ldr	r1, [pc, #488]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 800379a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800379e:	405a      	eors	r2, r3
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	0c1b      	lsrs	r3, r3, #16
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	4978      	ldr	r1, [pc, #480]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 80037a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ac:	405a      	eors	r2, r3
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	0e1b      	lsrs	r3, r3, #24
 80037b2:	4976      	ldr	r1, [pc, #472]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 80037b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037b8:	4053      	eors	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 80037bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037be:	1d1a      	adds	r2, r3, #4
 80037c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	496d      	ldr	r1, [pc, #436]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 80037ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ce:	405a      	eors	r2, r3
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	496b      	ldr	r1, [pc, #428]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 80037d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037dc:	405a      	eors	r2, r3
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	4968      	ldr	r1, [pc, #416]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 80037e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037ea:	405a      	eors	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	0e1b      	lsrs	r3, r3, #24
 80037f0:	4966      	ldr	r1, [pc, #408]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 80037f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037f6:	4053      	eors	r3, r2
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037fc:	1d1a      	adds	r2, r3, #4
 80037fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	495e      	ldr	r1, [pc, #376]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003808:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800380c:	405a      	eors	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	0a1b      	lsrs	r3, r3, #8
 8003812:	b2db      	uxtb	r3, r3
 8003814:	495b      	ldr	r1, [pc, #364]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800381a:	405a      	eors	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	0c1b      	lsrs	r3, r3, #16
 8003820:	b2db      	uxtb	r3, r3
 8003822:	4959      	ldr	r1, [pc, #356]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003824:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003828:	405a      	eors	r2, r3
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	0e1b      	lsrs	r3, r3, #24
 800382e:	4957      	ldr	r1, [pc, #348]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003830:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003834:	4053      	eors	r3, r2
 8003836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	633a      	str	r2, [r7, #48]	@ 0x30
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	494e      	ldr	r1, [pc, #312]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003846:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800384a:	405a      	eors	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	b2db      	uxtb	r3, r3
 8003852:	494c      	ldr	r1, [pc, #304]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003854:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003858:	405a      	eors	r2, r3
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4949      	ldr	r1, [pc, #292]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003862:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003866:	405a      	eors	r2, r3
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	0e1b      	lsrs	r3, r3, #24
 800386c:	4947      	ldr	r1, [pc, #284]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 800386e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003872:	4053      	eors	r3, r2
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
 8003876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003878:	1d1a      	adds	r2, r3, #4
 800387a:	633a      	str	r2, [r7, #48]	@ 0x30
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	b2db      	uxtb	r3, r3
 8003882:	493f      	ldr	r1, [pc, #252]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 8003884:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003888:	405a      	eors	r2, r3
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	0a1b      	lsrs	r3, r3, #8
 800388e:	b2db      	uxtb	r3, r3
 8003890:	493c      	ldr	r1, [pc, #240]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 8003892:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003896:	405a      	eors	r2, r3
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	b2db      	uxtb	r3, r3
 800389e:	493a      	ldr	r1, [pc, #232]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 80038a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038a4:	405a      	eors	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	0e1b      	lsrs	r3, r3, #24
 80038aa:	4938      	ldr	r1, [pc, #224]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 80038ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038b0:	4053      	eors	r3, r2
 80038b2:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	3b01      	subs	r3, #1
 80038b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f73f af01 	bgt.w	80036c4 <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	1d1a      	adds	r2, r3, #4
 80038c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	492c      	ldr	r1, [pc, #176]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 80038d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038d4:	405a      	eors	r2, r3
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4929      	ldr	r1, [pc, #164]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 80038de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038e2:	405a      	eors	r2, r3
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	0c1b      	lsrs	r3, r3, #16
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4927      	ldr	r1, [pc, #156]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 80038ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038f0:	405a      	eors	r2, r3
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	0e1b      	lsrs	r3, r3, #24
 80038f6:	4925      	ldr	r1, [pc, #148]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 80038f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038fc:	4053      	eors	r3, r2
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	1d1a      	adds	r2, r3, #4
 8003904:	633a      	str	r2, [r7, #48]	@ 0x30
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390a:	b2db      	uxtb	r3, r3
 800390c:	491c      	ldr	r1, [pc, #112]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 800390e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003912:	405a      	eors	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	b2db      	uxtb	r3, r3
 800391a:	491a      	ldr	r1, [pc, #104]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 800391c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003920:	405a      	eors	r2, r3
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4917      	ldr	r1, [pc, #92]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 800392a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800392e:	405a      	eors	r2, r3
 8003930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003932:	0e1b      	lsrs	r3, r3, #24
 8003934:	4915      	ldr	r1, [pc, #84]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800393a:	4053      	eors	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003940:	1d1a      	adds	r2, r3, #4
 8003942:	633a      	str	r2, [r7, #48]	@ 0x30
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	b2db      	uxtb	r3, r3
 800394a:	490d      	ldr	r1, [pc, #52]	@ (8003980 <mbedtls_internal_aes_encrypt+0x3b0>)
 800394c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003950:	405a      	eors	r2, r3
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	b2db      	uxtb	r3, r3
 8003958:	490a      	ldr	r1, [pc, #40]	@ (8003984 <mbedtls_internal_aes_encrypt+0x3b4>)
 800395a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800395e:	405a      	eors	r2, r3
 8003960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	b2db      	uxtb	r3, r3
 8003966:	4908      	ldr	r1, [pc, #32]	@ (8003988 <mbedtls_internal_aes_encrypt+0x3b8>)
 8003968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800396c:	405a      	eors	r2, r3
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	0e1b      	lsrs	r3, r3, #24
 8003972:	4906      	ldr	r1, [pc, #24]	@ (800398c <mbedtls_internal_aes_encrypt+0x3bc>)
 8003974:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003978:	4053      	eors	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	e007      	b.n	8003990 <mbedtls_internal_aes_encrypt+0x3c0>
 8003980:	08009dec 	.word	0x08009dec
 8003984:	0800a1ec 	.word	0x0800a1ec
 8003988:	0800a5ec 	.word	0x0800a5ec
 800398c:	0800a9ec 	.word	0x0800a9ec
 8003990:	1d1a      	adds	r2, r3, #4
 8003992:	633a      	str	r2, [r7, #48]	@ 0x30
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	4979      	ldr	r1, [pc, #484]	@ (8003b80 <mbedtls_internal_aes_encrypt+0x5b0>)
 800399c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a0:	405a      	eors	r2, r3
 80039a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4976      	ldr	r1, [pc, #472]	@ (8003b84 <mbedtls_internal_aes_encrypt+0x5b4>)
 80039aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ae:	405a      	eors	r2, r3
 80039b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b2:	0c1b      	lsrs	r3, r3, #16
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4974      	ldr	r1, [pc, #464]	@ (8003b88 <mbedtls_internal_aes_encrypt+0x5b8>)
 80039b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039bc:	405a      	eors	r2, r3
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	0e1b      	lsrs	r3, r3, #24
 80039c2:	4972      	ldr	r1, [pc, #456]	@ (8003b8c <mbedtls_internal_aes_encrypt+0x5bc>)
 80039c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039c8:	4053      	eors	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80039cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80039d2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	496d      	ldr	r1, [pc, #436]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80039da:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80039dc:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	496a      	ldr	r1, [pc, #424]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80039e6:	5ccb      	ldrb	r3, [r1, r3]
 80039e8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80039ea:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	0c1b      	lsrs	r3, r3, #16
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	4967      	ldr	r1, [pc, #412]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80039f8:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	0e1b      	lsrs	r3, r3, #24
 80039fe:	4964      	ldr	r1, [pc, #400]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003a04:	4053      	eors	r3, r2
 8003a06:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8003a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0a:	1d1a      	adds	r2, r3, #4
 8003a0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a0e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	495e      	ldr	r1, [pc, #376]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a16:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003a18:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	495b      	ldr	r1, [pc, #364]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8003a26:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	0c1b      	lsrs	r3, r3, #16
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4958      	ldr	r1, [pc, #352]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8003a34:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	0e1b      	lsrs	r3, r3, #24
 8003a3a:	4955      	ldr	r1, [pc, #340]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8003a40:	4053      	eors	r3, r2
 8003a42:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a46:	1d1a      	adds	r2, r3, #4
 8003a48:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a4a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	494f      	ldr	r1, [pc, #316]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a52:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8003a54:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	494c      	ldr	r1, [pc, #304]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8003a62:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	0c1b      	lsrs	r3, r3, #16
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	4949      	ldr	r1, [pc, #292]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003a70:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	0e1b      	lsrs	r3, r3, #24
 8003a76:	4946      	ldr	r1, [pc, #280]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a78:	5ccb      	ldrb	r3, [r1, r3]
 8003a7a:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8003a7c:	4053      	eors	r3, r2
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8003a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a86:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	4940      	ldr	r1, [pc, #256]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a8e:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8003a90:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	493d      	ldr	r1, [pc, #244]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8003a9e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	0c1b      	lsrs	r3, r3, #16
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	493a      	ldr	r1, [pc, #232]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003aa8:	5ccb      	ldrb	r3, [r1, r3]
 8003aaa:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003aac:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	0e1b      	lsrs	r3, r3, #24
 8003ab2:	4937      	ldr	r1, [pc, #220]	@ (8003b90 <mbedtls_internal_aes_encrypt+0x5c0>)
 8003ab4:	5ccb      	ldrb	r3, [r1, r3]
 8003ab6:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 8003ab8:	4053      	eors	r3, r2
 8003aba:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8003abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac6:	0a1a      	lsrs	r2, r3, #8
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad2:	0c1a      	lsrs	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ade:	0e1a      	lsrs	r2, r3, #24
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3303      	adds	r3, #3
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af4:	0a1a      	lsrs	r2, r3, #8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3305      	adds	r3, #5
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	0c1a      	lsrs	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3306      	adds	r3, #6
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	0e1a      	lsrs	r2, r3, #24
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3307      	adds	r3, #7
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	0a1a      	lsrs	r2, r3, #8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3309      	adds	r3, #9
 8003b28:	b2d2      	uxtb	r2, r2
 8003b2a:	701a      	strb	r2, [r3, #0]
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	0c1a      	lsrs	r2, r3, #16
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	330a      	adds	r3, #10
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3a:	0e1a      	lsrs	r2, r3, #24
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	330b      	adds	r3, #11
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	330c      	adds	r3, #12
 8003b48:	6a3a      	ldr	r2, [r7, #32]
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	0a1a      	lsrs	r2, r3, #8
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	330d      	adds	r3, #13
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	6a3b      	ldr	r3, [r7, #32]
 8003b5c:	0c1a      	lsrs	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	330e      	adds	r3, #14
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	0e1a      	lsrs	r2, r3, #24
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	330f      	adds	r3, #15
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	373c      	adds	r7, #60	@ 0x3c
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	08009dec 	.word	0x08009dec
 8003b84:	0800a1ec 	.word	0x0800a1ec
 8003b88:	0800a5ec 	.word	0x0800a5ec
 8003b8c:	0800a9ec 	.word	0x0800a9ec
 8003b90:	08009cec 	.word	0x08009cec

08003b94 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b08f      	sub	sp, #60	@ 0x3c
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	633b      	str	r3, [r7, #48]	@ 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	3303      	adds	r3, #3
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	1d1a      	adds	r2, r3, #4
 8003bd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bd6:	4053      	eors	r3, r2
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	3305      	adds	r3, #5
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	431a      	orrs	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3306      	adds	r3, #6
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	041b      	lsls	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	3307      	adds	r3, #7
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	061b      	lsls	r3, r3, #24
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c04:	1d1a      	adds	r2, r3, #4
 8003c06:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c0c:	4053      	eors	r3, r2
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	3308      	adds	r3, #8
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3309      	adds	r3, #9
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	431a      	orrs	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	330a      	adds	r3, #10
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	330b      	adds	r3, #11
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	061b      	lsls	r3, r3, #24
 8003c34:	4313      	orrs	r3, r2
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	1d1a      	adds	r2, r3, #4
 8003c3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c42:	4053      	eors	r3, r2
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	330d      	adds	r3, #13
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	431a      	orrs	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	330e      	adds	r3, #14
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	330f      	adds	r3, #15
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	623b      	str	r3, [r7, #32]
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	1d1a      	adds	r2, r3, #4
 8003c72:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6a3a      	ldr	r2, [r7, #32]
 8003c78:	4053      	eors	r3, r2
 8003c7a:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	105b      	asrs	r3, r3, #1
 8003c82:	3b01      	subs	r3, #1
 8003c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c86:	e0fa      	b.n	8003e7e <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	1d1a      	adds	r2, r3, #4
 8003c8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	49ab      	ldr	r1, [pc, #684]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003c96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c9a:	405a      	eors	r2, r3
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	49a9      	ldr	r1, [pc, #676]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ca4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ca8:	405a      	eors	r2, r3
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	0c1b      	lsrs	r3, r3, #16
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	49a6      	ldr	r1, [pc, #664]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003cb2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cb6:	405a      	eors	r2, r3
 8003cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cba:	0e1b      	lsrs	r3, r3, #24
 8003cbc:	49a4      	ldr	r1, [pc, #656]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003cbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cc2:	4053      	eors	r3, r2
 8003cc4:	61fb      	str	r3, [r7, #28]
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	499c      	ldr	r1, [pc, #624]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cd8:	405a      	eors	r2, r3
 8003cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	4999      	ldr	r1, [pc, #612]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ce2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ce6:	405a      	eors	r2, r3
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	4997      	ldr	r1, [pc, #604]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003cf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cf4:	405a      	eors	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	0e1b      	lsrs	r3, r3, #24
 8003cfa:	4995      	ldr	r1, [pc, #596]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003cfc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d00:	4053      	eors	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d06:	1d1a      	adds	r2, r3, #4
 8003d08:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	498c      	ldr	r1, [pc, #560]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d16:	405a      	eors	r2, r3
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	498a      	ldr	r1, [pc, #552]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d24:	405a      	eors	r2, r3
 8003d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d28:	0c1b      	lsrs	r3, r3, #16
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	4987      	ldr	r1, [pc, #540]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d32:	405a      	eors	r2, r3
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	0e1b      	lsrs	r3, r3, #24
 8003d38:	4985      	ldr	r1, [pc, #532]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d3e:	4053      	eors	r3, r2
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	1d1a      	adds	r2, r3, #4
 8003d46:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	497d      	ldr	r1, [pc, #500]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d54:	405a      	eors	r2, r3
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	497a      	ldr	r1, [pc, #488]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d62:	405a      	eors	r2, r3
 8003d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d66:	0c1b      	lsrs	r3, r3, #16
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	4978      	ldr	r1, [pc, #480]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d70:	405a      	eors	r2, r3
 8003d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d74:	0e1b      	lsrs	r3, r3, #24
 8003d76:	4976      	ldr	r1, [pc, #472]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003d78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d7c:	4053      	eors	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	496d      	ldr	r1, [pc, #436]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003d8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d92:	405a      	eors	r2, r3
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	496b      	ldr	r1, [pc, #428]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003da0:	405a      	eors	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	4968      	ldr	r1, [pc, #416]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003daa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dae:	405a      	eors	r2, r3
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	0e1b      	lsrs	r3, r3, #24
 8003db4:	4966      	ldr	r1, [pc, #408]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dba:	4053      	eors	r3, r2
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	1d1a      	adds	r2, r3, #4
 8003dc2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	495e      	ldr	r1, [pc, #376]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003dcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd0:	405a      	eors	r2, r3
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	0a1b      	lsrs	r3, r3, #8
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	495b      	ldr	r1, [pc, #364]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003dda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dde:	405a      	eors	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	0c1b      	lsrs	r3, r3, #16
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4959      	ldr	r1, [pc, #356]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003de8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dec:	405a      	eors	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	0e1b      	lsrs	r3, r3, #24
 8003df2:	4957      	ldr	r1, [pc, #348]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003df8:	4053      	eors	r3, r2
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	1d1a      	adds	r2, r3, #4
 8003e00:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	494e      	ldr	r1, [pc, #312]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e0a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e0e:	405a      	eors	r2, r3
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	494c      	ldr	r1, [pc, #304]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e1c:	405a      	eors	r2, r3
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4949      	ldr	r1, [pc, #292]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e26:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e2a:	405a      	eors	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	0e1b      	lsrs	r3, r3, #24
 8003e30:	4947      	ldr	r1, [pc, #284]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e36:	4053      	eors	r3, r2
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	1d1a      	adds	r2, r3, #4
 8003e3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	493f      	ldr	r1, [pc, #252]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e4c:	405a      	eors	r2, r3
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	493c      	ldr	r1, [pc, #240]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e5a:	405a      	eors	r2, r3
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	0c1b      	lsrs	r3, r3, #16
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	493a      	ldr	r1, [pc, #232]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003e64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e68:	405a      	eors	r2, r3
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	0e1b      	lsrs	r3, r3, #24
 8003e6e:	4938      	ldr	r1, [pc, #224]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003e70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e74:	4053      	eors	r3, r2
 8003e76:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8003e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f73f af01 	bgt.w	8003c88 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	492c      	ldr	r1, [pc, #176]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003e94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e98:	405a      	eors	r2, r3
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4929      	ldr	r1, [pc, #164]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ea6:	405a      	eors	r2, r3
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	4927      	ldr	r1, [pc, #156]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003eb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eb4:	405a      	eors	r2, r3
 8003eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb8:	0e1b      	lsrs	r3, r3, #24
 8003eba:	4925      	ldr	r1, [pc, #148]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003ebc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ec0:	4053      	eors	r3, r2
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	1d1a      	adds	r2, r3, #4
 8003ec8:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	491c      	ldr	r1, [pc, #112]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003ed2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed6:	405a      	eors	r2, r3
 8003ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	491a      	ldr	r1, [pc, #104]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003ee0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ee4:	405a      	eors	r2, r3
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	0c1b      	lsrs	r3, r3, #16
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	4917      	ldr	r1, [pc, #92]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003eee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ef2:	405a      	eors	r2, r3
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	0e1b      	lsrs	r3, r3, #24
 8003ef8:	4915      	ldr	r1, [pc, #84]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003efa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003efe:	4053      	eors	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	1d1a      	adds	r2, r3, #4
 8003f06:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	490d      	ldr	r1, [pc, #52]	@ (8003f44 <mbedtls_internal_aes_decrypt+0x3b0>)
 8003f10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f14:	405a      	eors	r2, r3
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	490a      	ldr	r1, [pc, #40]	@ (8003f48 <mbedtls_internal_aes_decrypt+0x3b4>)
 8003f1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f22:	405a      	eors	r2, r3
 8003f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f26:	0c1b      	lsrs	r3, r3, #16
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	4908      	ldr	r1, [pc, #32]	@ (8003f4c <mbedtls_internal_aes_decrypt+0x3b8>)
 8003f2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f30:	405a      	eors	r2, r3
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	0e1b      	lsrs	r3, r3, #24
 8003f36:	4906      	ldr	r1, [pc, #24]	@ (8003f50 <mbedtls_internal_aes_decrypt+0x3bc>)
 8003f38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f3c:	4053      	eors	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f42:	e007      	b.n	8003f54 <mbedtls_internal_aes_decrypt+0x3c0>
 8003f44:	0800aeec 	.word	0x0800aeec
 8003f48:	0800b2ec 	.word	0x0800b2ec
 8003f4c:	0800b6ec 	.word	0x0800b6ec
 8003f50:	0800baec 	.word	0x0800baec
 8003f54:	1d1a      	adds	r2, r3, #4
 8003f56:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4979      	ldr	r1, [pc, #484]	@ (8004144 <mbedtls_internal_aes_decrypt+0x5b0>)
 8003f60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f64:	405a      	eors	r2, r3
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	4976      	ldr	r1, [pc, #472]	@ (8004148 <mbedtls_internal_aes_decrypt+0x5b4>)
 8003f6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f72:	405a      	eors	r2, r3
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	0c1b      	lsrs	r3, r3, #16
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4974      	ldr	r1, [pc, #464]	@ (800414c <mbedtls_internal_aes_decrypt+0x5b8>)
 8003f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f80:	405a      	eors	r2, r3
 8003f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	4972      	ldr	r1, [pc, #456]	@ (8004150 <mbedtls_internal_aes_decrypt+0x5bc>)
 8003f88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f8c:	4053      	eors	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	1d1a      	adds	r2, r3, #4
 8003f94:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f96:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	496d      	ldr	r1, [pc, #436]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003f9e:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 8003fa0:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	0a1b      	lsrs	r3, r3, #8
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	496a      	ldr	r1, [pc, #424]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8003fae:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	0c1b      	lsrs	r3, r3, #16
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4967      	ldr	r1, [pc, #412]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003fb8:	5ccb      	ldrb	r3, [r1, r3]
 8003fba:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8003fbc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	0e1b      	lsrs	r3, r3, #24
 8003fc2:	4964      	ldr	r1, [pc, #400]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 8003fc8:	4053      	eors	r3, r2
 8003fca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    X1 = *RK++ ^ \
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	1d1a      	adds	r2, r3, #4
 8003fd0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fd2:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	495e      	ldr	r1, [pc, #376]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003fda:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8003fdc:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	495b      	ldr	r1, [pc, #364]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 8003fea:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	0c1b      	lsrs	r3, r3, #16
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	4958      	ldr	r1, [pc, #352]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8003ff4:	5ccb      	ldrb	r3, [r1, r3]
 8003ff6:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 8003ff8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	0e1b      	lsrs	r3, r3, #24
 8003ffe:	4955      	ldr	r1, [pc, #340]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8004004:	4053      	eors	r3, r2
 8004006:	62bb      	str	r3, [r7, #40]	@ 0x28

    X2 = *RK++ ^ \
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	633a      	str	r2, [r7, #48]	@ 0x30
 800400e:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	494f      	ldr	r1, [pc, #316]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004016:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8004018:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	b2db      	uxtb	r3, r3
 8004020:	494c      	ldr	r1, [pc, #304]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004022:	5ccb      	ldrb	r3, [r1, r3]
 8004024:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8004026:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	0c1b      	lsrs	r3, r3, #16
 800402c:	b2db      	uxtb	r3, r3
 800402e:	4949      	ldr	r1, [pc, #292]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8004034:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	0e1b      	lsrs	r3, r3, #24
 800403a:	4946      	ldr	r1, [pc, #280]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 800403c:	5ccb      	ldrb	r3, [r1, r3]
 800403e:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8004040:	4053      	eors	r3, r2
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24

    X3 = *RK++ ^ \
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	1d1a      	adds	r2, r3, #4
 8004048:	633a      	str	r2, [r7, #48]	@ 0x30
 800404a:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4940      	ldr	r1, [pc, #256]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004052:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8004054:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	b2db      	uxtb	r3, r3
 800405c:	493d      	ldr	r1, [pc, #244]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8004062:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	0c1b      	lsrs	r3, r3, #16
 8004068:	b2db      	uxtb	r3, r3
 800406a:	493a      	ldr	r1, [pc, #232]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8004070:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	0e1b      	lsrs	r3, r3, #24
 8004076:	4937      	ldr	r1, [pc, #220]	@ (8004154 <mbedtls_internal_aes_decrypt+0x5c0>)
 8004078:	5ccb      	ldrb	r3, [r1, r3]
 800407a:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 800407c:	4053      	eors	r3, r2
 800407e:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 8004080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004082:	b2da      	uxtb	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800408a:	0a1a      	lsrs	r2, r3, #8
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3301      	adds	r3, #1
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004096:	0c1a      	lsrs	r2, r3, #16
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3302      	adds	r3, #2
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a2:	0e1a      	lsrs	r2, r3, #24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3303      	adds	r3, #3
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3304      	adds	r3, #4
 80040b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b8:	0a1a      	lsrs	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3305      	adds	r3, #5
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	0c1a      	lsrs	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3306      	adds	r3, #6
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	0e1a      	lsrs	r2, r3, #24
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3307      	adds	r3, #7
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3308      	adds	r3, #8
 80040de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	0a1a      	lsrs	r2, r3, #8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3309      	adds	r3, #9
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f2:	0c1a      	lsrs	r2, r3, #16
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	330a      	adds	r3, #10
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fe:	0e1a      	lsrs	r2, r3, #24
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	330b      	adds	r3, #11
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	330c      	adds	r3, #12
 800410c:	6a3a      	ldr	r2, [r7, #32]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	0a1a      	lsrs	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	330d      	adds	r3, #13
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	0c1a      	lsrs	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	330e      	adds	r3, #14
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	0e1a      	lsrs	r2, r3, #24
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	330f      	adds	r3, #15
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	373c      	adds	r7, #60	@ 0x3c
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	0800aeec 	.word	0x0800aeec
 8004148:	0800b2ec 	.word	0x0800b2ec
 800414c:	0800b6ec 	.word	0x0800b6ec
 8004150:	0800baec 	.word	0x0800baec
 8004154:	0800adec 	.word	0x0800adec

08004158 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                           int mode,
                           const unsigned char input[16],
                           unsigned char output[16] )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
 8004164:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d106      	bne.n	800417a <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f7ff fa2d 	bl	80035d0 <mbedtls_internal_aes_encrypt>
 8004176:	4603      	mov	r3, r0
 8004178:	e005      	b.n	8004186 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff fd08 	bl	8003b94 <mbedtls_internal_aes_decrypt>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <mbedtls_aes_crypt_cbc>:
                    int mode,
                    size_t length,
                    unsigned char iv[16],
                    const unsigned char *input,
                    unsigned char *output )
{
 800418e:	b5b0      	push	{r4, r5, r7, lr}
 8004190:	b08a      	sub	sp, #40	@ 0x28
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
 800419a:	603b      	str	r3, [r7, #0]
                      mode == MBEDTLS_AES_DECRYPT );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    if( length % 16 )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <mbedtls_aes_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH );
 80041a6:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 80041aa:	e06d      	b.n	8004288 <mbedtls_aes_crypt_cbc+0xfa>
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_DECRYPT )
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d166      	bne.n	8004280 <mbedtls_aes_crypt_cbc+0xf2>
    {
        while( length > 0 )
 80041b2:	e036      	b.n	8004222 <mbedtls_aes_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 80041b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b6:	f107 0414 	add.w	r4, r7, #20
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_aes_crypt_ecb( ctx, mode, input, output );
 80041c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff ffc4 	bl	8004158 <mbedtls_aes_crypt_ecb>

            for( i = 0; i < 16; i++ )
 80041d0:	2300      	movs	r3, #0
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d4:	e010      	b.n	80041f8 <mbedtls_aes_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041da:	4413      	add	r3, r2
 80041dc:	7819      	ldrb	r1, [r3, #0]
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	781a      	ldrb	r2, [r3, #0]
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80041ea:	4403      	add	r3, r0
 80041ec:	404a      	eors	r2, r1
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 80041f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f4:	3301      	adds	r3, #1
 80041f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fa:	2b0f      	cmp	r3, #15
 80041fc:	ddeb      	ble.n	80041d6 <mbedtls_aes_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	461d      	mov	r5, r3
 8004202:	f107 0414 	add.w	r4, r7, #20
 8004206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004208:	6028      	str	r0, [r5, #0]
 800420a:	6069      	str	r1, [r5, #4]
 800420c:	60aa      	str	r2, [r5, #8]
 800420e:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8004210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004212:	3310      	adds	r3, #16
 8004214:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004218:	3310      	adds	r3, #16
 800421a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b10      	subs	r3, #16
 8004220:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1c5      	bne.n	80041b4 <mbedtls_aes_crypt_cbc+0x26>
 8004228:	e02d      	b.n	8004286 <mbedtls_aes_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	@ 0x24
 800422e:	e010      	b.n	8004252 <mbedtls_aes_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004234:	4413      	add	r3, r2
 8004236:	7819      	ldrb	r1, [r3, #0]
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	4413      	add	r3, r2
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004244:	4403      	add	r3, r0
 8004246:	404a      	eors	r2, r1
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	3301      	adds	r3, #1
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	2b0f      	cmp	r3, #15
 8004256:	ddeb      	ble.n	8004230 <mbedtls_aes_crypt_cbc+0xa2>

            mbedtls_aes_crypt_ecb( ctx, mode, output, output );
 8004258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800425a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff ff7a 	bl	8004158 <mbedtls_aes_crypt_ecb>
            memcpy( iv, output, 16 );
 8004264:	2210      	movs	r2, #16
 8004266:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004268:	6838      	ldr	r0, [r7, #0]
 800426a:	f004 ffdc 	bl	8009226 <memcpy>

            input  += 16;
 800426e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004270:	3310      	adds	r3, #16
 8004272:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8004274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004276:	3310      	adds	r3, #16
 8004278:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3b10      	subs	r3, #16
 800427e:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1d1      	bne.n	800422a <mbedtls_aes_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	@ 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bdb0      	pop	{r4, r5, r7, pc}

08004290 <mbedtls_gf128mul_x_ble>:
 * for machine endianess and hence works correctly on both big and little
 * endian machines.
 */
static void mbedtls_gf128mul_x_ble( unsigned char r[16],
                                    const unsigned char x[16] )
{
 8004290:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004294:	b0ce      	sub	sp, #312	@ 0x138
 8004296:	af00      	add	r7, sp, #0
 8004298:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 800429c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
    uint64_t a, b, ra, rb;

    GET_UINT64_LE( a, x, 0 );
 80042a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042a4:	3307      	adds	r3, #7
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2200      	movs	r2, #0
 80042ac:	469a      	mov	sl, r3
 80042ae:	4693      	mov	fp, r2
 80042b0:	f04f 0000 	mov.w	r0, #0
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	ea4f 610a 	mov.w	r1, sl, lsl #24
 80042bc:	2000      	movs	r0, #0
 80042be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042c2:	3306      	adds	r3, #6
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80042ce:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	f8d7 6108 	ldr.w	r6, [r7, #264]	@ 0x108
 80042de:	0433      	lsls	r3, r6, #16
 80042e0:	2200      	movs	r2, #0
 80042e2:	ea40 0402 	orr.w	r4, r0, r2
 80042e6:	ea41 0503 	orr.w	r5, r1, r3
 80042ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042ee:	3305      	adds	r3, #5
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80042fa:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 800430a:	020b      	lsls	r3, r1, #8
 800430c:	2200      	movs	r2, #0
 800430e:	ea44 0802 	orr.w	r8, r4, r2
 8004312:	ea45 0903 	orr.w	r9, r5, r3
 8004316:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800431a:	3304      	adds	r3, #4
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004326:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8004336:	000b      	movs	r3, r1
 8004338:	2200      	movs	r2, #0
 800433a:	ea48 0102 	orr.w	r1, r8, r2
 800433e:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8004342:	ea49 0303 	orr.w	r3, r9, r3
 8004346:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800434a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800434e:	3303      	adds	r3, #3
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800435a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800435e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004362:	460b      	mov	r3, r1
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800436a:	460b      	mov	r3, r1
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004372:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8004376:	4623      	mov	r3, r4
 8004378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800437c:	4602      	mov	r2, r0
 800437e:	4313      	orrs	r3, r2
 8004380:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004384:	462b      	mov	r3, r5
 8004386:	460a      	mov	r2, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800438e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004392:	3302      	adds	r3, #2
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2200      	movs	r2, #0
 800439a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800439e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80043ae:	4629      	mov	r1, r5
 80043b0:	040b      	lsls	r3, r1, #16
 80043b2:	4621      	mov	r1, r4
 80043b4:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80043b8:	4621      	mov	r1, r4
 80043ba:	040a      	lsls	r2, r1, #16
 80043bc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80043c0:	4621      	mov	r1, r4
 80043c2:	4311      	orrs	r1, r2
 80043c4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80043c8:	4629      	mov	r1, r5
 80043ca:	4319      	orrs	r1, r3
 80043cc:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 80043d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80043d4:	3301      	adds	r3, #1
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 80043f0:	4629      	mov	r1, r5
 80043f2:	020b      	lsls	r3, r1, #8
 80043f4:	4621      	mov	r1, r4
 80043f6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80043fa:	4621      	mov	r1, r4
 80043fc:	020a      	lsls	r2, r1, #8
 80043fe:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8004402:	4621      	mov	r1, r4
 8004404:	4311      	orrs	r1, r2
 8004406:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 800440a:	4629      	mov	r1, r5
 800440c:	4319      	orrs	r1, r3
 800440e:	f8c7 10bc 	str.w	r1, [r7, #188]	@ 0xbc
 8004412:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004420:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004424:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8004428:	4623      	mov	r3, r4
 800442a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800442e:	4602      	mov	r2, r0
 8004430:	4313      	orrs	r3, r2
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004434:	462b      	mov	r3, r5
 8004436:	460a      	mov	r2, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004440:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    GET_UINT64_LE( b, x, 8 );
 8004444:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004448:	330f      	adds	r3, #15
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004454:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004458:	f04f 0000 	mov.w	r0, #0
 800445c:	f04f 0100 	mov.w	r1, #0
 8004460:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004464:	0619      	lsls	r1, r3, #24
 8004466:	2000      	movs	r0, #0
 8004468:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800446c:	330e      	adds	r3, #14
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004478:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 8004488:	0423      	lsls	r3, r4, #16
 800448a:	2200      	movs	r2, #0
 800448c:	ea40 0402 	orr.w	r4, r0, r2
 8004490:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8004494:	430b      	orrs	r3, r1
 8004496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800449a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800449e:	330d      	adds	r3, #13
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044ba:	020b      	lsls	r3, r1, #8
 80044bc:	2200      	movs	r2, #0
 80044be:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80044c2:	4621      	mov	r1, r4
 80044c4:	4311      	orrs	r1, r2
 80044c6:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80044ca:	4629      	mov	r1, r5
 80044cc:	4319      	orrs	r1, r3
 80044ce:	f8c7 108c 	str.w	r1, [r7, #140]	@ 0x8c
 80044d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80044d6:	330c      	adds	r3, #12
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2200      	movs	r2, #0
 80044de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044e2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80044f2:	000b      	movs	r3, r1
 80044f4:	2200      	movs	r2, #0
 80044f6:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 80044fa:	4621      	mov	r1, r4
 80044fc:	4311      	orrs	r1, r2
 80044fe:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004500:	4629      	mov	r1, r5
 8004502:	4319      	orrs	r1, r3
 8004504:	67f9      	str	r1, [r7, #124]	@ 0x7c
 8004506:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800450a:	330b      	adds	r3, #11
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2200      	movs	r2, #0
 8004512:	673b      	str	r3, [r7, #112]	@ 0x70
 8004514:	677a      	str	r2, [r7, #116]	@ 0x74
 8004516:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800451a:	460b      	mov	r3, r1
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004520:	460b      	mov	r3, r1
 8004522:	061b      	lsls	r3, r3, #24
 8004524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004526:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800452a:	4623      	mov	r3, r4
 800452c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004530:	4602      	mov	r2, r0
 8004532:	4313      	orrs	r3, r2
 8004534:	663b      	str	r3, [r7, #96]	@ 0x60
 8004536:	462b      	mov	r3, r5
 8004538:	460a      	mov	r2, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	667b      	str	r3, [r7, #100]	@ 0x64
 800453e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004542:	330a      	adds	r3, #10
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2200      	movs	r2, #0
 800454a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800454c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800454e:	f04f 0200 	mov.w	r2, #0
 8004552:	f04f 0300 	mov.w	r3, #0
 8004556:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800455a:	4629      	mov	r1, r5
 800455c:	040b      	lsls	r3, r1, #16
 800455e:	4621      	mov	r1, r4
 8004560:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8004564:	4621      	mov	r1, r4
 8004566:	040a      	lsls	r2, r1, #16
 8004568:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800456c:	4621      	mov	r1, r4
 800456e:	4311      	orrs	r1, r2
 8004570:	6539      	str	r1, [r7, #80]	@ 0x50
 8004572:	4629      	mov	r1, r5
 8004574:	4319      	orrs	r1, r3
 8004576:	6579      	str	r1, [r7, #84]	@ 0x54
 8004578:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800457c:	3309      	adds	r3, #9
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2200      	movs	r2, #0
 8004584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004586:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004594:	4629      	mov	r1, r5
 8004596:	020b      	lsls	r3, r1, #8
 8004598:	4621      	mov	r1, r4
 800459a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800459e:	4621      	mov	r1, r4
 80045a0:	020a      	lsls	r2, r1, #8
 80045a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80045a6:	4621      	mov	r1, r4
 80045a8:	4311      	orrs	r1, r2
 80045aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80045ac:	4629      	mov	r1, r5
 80045ae:	4319      	orrs	r1, r3
 80045b0:	6479      	str	r1, [r7, #68]	@ 0x44
 80045b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80045b6:	3308      	adds	r3, #8
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80045c2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80045c6:	4623      	mov	r3, r4
 80045c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80045cc:	4602      	mov	r2, r0
 80045ce:	4313      	orrs	r3, r2
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	462b      	mov	r3, r5
 80045d4:	460a      	mov	r2, r1
 80045d6:	4313      	orrs	r3, r2
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045da:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80045de:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128

    ra = ( a << 1 )  ^ 0x0087 >> ( 8 - ( ( b >> 63 ) << 3 ) );
 80045e2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80045e6:	1891      	adds	r1, r2, r2
 80045e8:	61b9      	str	r1, [r7, #24]
 80045ea:	415b      	adcs	r3, r3
 80045ec:	61fb      	str	r3, [r7, #28]
 80045ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80045f2:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	0fea      	lsrs	r2, r5, #31
 8004600:	2300      	movs	r3, #0
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	f1c3 0308 	rsb	r3, r3, #8
 800460a:	2287      	movs	r2, #135	@ 0x87
 800460c:	fa42 f303 	asr.w	r3, r2, r3
 8004610:	17da      	asrs	r2, r3, #31
 8004612:	633b      	str	r3, [r7, #48]	@ 0x30
 8004614:	637a      	str	r2, [r7, #52]	@ 0x34
 8004616:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800461a:	4623      	mov	r3, r4
 800461c:	4043      	eors	r3, r0
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	462b      	mov	r3, r5
 8004622:	404b      	eors	r3, r1
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800462a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    rb = ( a >> 63 ) | ( b << 1 );
 800462e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f04f 0100 	mov.w	r1, #0
 800463a:	0fd8      	lsrs	r0, r3, #31
 800463c:	2100      	movs	r1, #0
 800463e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8004642:	1894      	adds	r4, r2, r2
 8004644:	60bc      	str	r4, [r7, #8]
 8004646:	415b      	adcs	r3, r3
 8004648:	60fb      	str	r3, [r7, #12]
 800464a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800464e:	ea40 0402 	orr.w	r4, r0, r2
 8004652:	603c      	str	r4, [r7, #0]
 8004654:	430b      	orrs	r3, r1
 8004656:	607b      	str	r3, [r7, #4]
 8004658:	e9d7 3400 	ldrd	r3, r4, [r7]
 800465c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118

    PUT_UINT64_LE( ra, r, 0 );
 8004660:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	0e0a      	lsrs	r2, r1, #24
 800466e:	2300      	movs	r3, #0
 8004670:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8004674:	3107      	adds	r1, #7
 8004676:	b2d3      	uxtb	r3, r2
 8004678:	700b      	strb	r3, [r1, #0]
 800467a:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800467e:	f04f 0200 	mov.w	r2, #0
 8004682:	f04f 0300 	mov.w	r3, #0
 8004686:	0c0a      	lsrs	r2, r1, #16
 8004688:	2300      	movs	r3, #0
 800468a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800468e:	3106      	adds	r1, #6
 8004690:	b2d3      	uxtb	r3, r2
 8004692:	700b      	strb	r3, [r1, #0]
 8004694:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	0a0a      	lsrs	r2, r1, #8
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80046a8:	3105      	adds	r1, #5
 80046aa:	b2d3      	uxtb	r3, r2
 80046ac:	700b      	strb	r3, [r1, #0]
 80046ae:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	000a      	movs	r2, r1
 80046bc:	2300      	movs	r3, #0
 80046be:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80046c2:	3104      	adds	r1, #4
 80046c4:	b2d3      	uxtb	r3, r2
 80046c6:	700b      	strb	r3, [r1, #0]
 80046c8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	0e02      	lsrs	r2, r0, #24
 80046d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80046da:	0e0b      	lsrs	r3, r1, #24
 80046dc:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80046e0:	3103      	adds	r1, #3
 80046e2:	b2d3      	uxtb	r3, r2
 80046e4:	700b      	strb	r3, [r1, #0]
 80046e6:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	0c02      	lsrs	r2, r0, #16
 80046f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046f8:	0c0b      	lsrs	r3, r1, #16
 80046fa:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80046fe:	3102      	adds	r1, #2
 8004700:	b2d3      	uxtb	r3, r2
 8004702:	700b      	strb	r3, [r1, #0]
 8004704:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	0a02      	lsrs	r2, r0, #8
 8004712:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004716:	0a0b      	lsrs	r3, r1, #8
 8004718:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800471c:	3101      	adds	r1, #1
 800471e:	b2d3      	uxtb	r3, r2
 8004720:	700b      	strb	r3, [r1, #0]
 8004722:	f897 2120 	ldrb.w	r2, [r7, #288]	@ 0x120
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	701a      	strb	r2, [r3, #0]
    PUT_UINT64_LE( rb, r, 8 );
 800472c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	0e0a      	lsrs	r2, r1, #24
 800473a:	2300      	movs	r3, #0
 800473c:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8004740:	310f      	adds	r1, #15
 8004742:	b2d3      	uxtb	r3, r2
 8004744:	700b      	strb	r3, [r1, #0]
 8004746:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	0c0a      	lsrs	r2, r1, #16
 8004754:	2300      	movs	r3, #0
 8004756:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800475a:	310e      	adds	r1, #14
 800475c:	b2d3      	uxtb	r3, r2
 800475e:	700b      	strb	r3, [r1, #0]
 8004760:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	0a0a      	lsrs	r2, r1, #8
 800476e:	2300      	movs	r3, #0
 8004770:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8004774:	310d      	adds	r1, #13
 8004776:	b2d3      	uxtb	r3, r2
 8004778:	700b      	strb	r3, [r1, #0]
 800477a:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	000a      	movs	r2, r1
 8004788:	2300      	movs	r3, #0
 800478a:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 800478e:	310c      	adds	r1, #12
 8004790:	b2d3      	uxtb	r3, r2
 8004792:	700b      	strb	r3, [r1, #0]
 8004794:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	0e02      	lsrs	r2, r0, #24
 80047a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80047a6:	0e0b      	lsrs	r3, r1, #24
 80047a8:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80047ac:	310b      	adds	r1, #11
 80047ae:	b2d3      	uxtb	r3, r2
 80047b0:	700b      	strb	r3, [r1, #0]
 80047b2:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	0c02      	lsrs	r2, r0, #16
 80047c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80047c4:	0c0b      	lsrs	r3, r1, #16
 80047c6:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80047ca:	310a      	adds	r1, #10
 80047cc:	b2d3      	uxtb	r3, r2
 80047ce:	700b      	strb	r3, [r1, #0]
 80047d0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	0a02      	lsrs	r2, r0, #8
 80047de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80047e2:	0a0b      	lsrs	r3, r1, #8
 80047e4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 80047e8:	3109      	adds	r1, #9
 80047ea:	b2d3      	uxtb	r3, r2
 80047ec:	700b      	strb	r3, [r1, #0]
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f2:	3308      	adds	r3, #8
 80047f4:	f897 2118 	ldrb.w	r2, [r7, #280]	@ 0x118
 80047f8:	701a      	strb	r2, [r3, #0]
}
 80047fa:	bf00      	nop
 80047fc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004806:	4770      	bx	lr

08004808 <mbedtls_aes_crypt_xts>:
                           int mode,
                           size_t length,
                           const unsigned char data_unit[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b099      	sub	sp, #100	@ 0x64
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
    int ret;
    size_t blocks = length / 16;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	091b      	lsrs	r3, r3, #4
 800481a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    size_t leftover = length % 16;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	653b      	str	r3, [r7, #80]	@ 0x50
    AES_VALIDATE_RET( data_unit != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    /* Data units must be at least 16 bytes long. */
    if( length < 16 )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	d802      	bhi.n	8004830 <mbedtls_aes_crypt_xts+0x28>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 800482a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800482e:	e0f0      	b.n	8004a12 <mbedtls_aes_crypt_xts+0x20a>

    /* NIST SP 800-38E disallows data units larger than 2**20 blocks. */
    if( length > ( 1 << 20 ) * 16 )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004836:	d902      	bls.n	800483e <mbedtls_aes_crypt_xts+0x36>
        return MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH;
 8004838:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800483c:	e0e9      	b.n	8004a12 <mbedtls_aes_crypt_xts+0x20a>

    /* Compute the tweak. */
    ret = mbedtls_aes_crypt_ecb( &ctx->tweak, MBEDTLS_AES_ENCRYPT,
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f503 708c 	add.w	r0, r3, #280	@ 0x118
 8004844:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	2101      	movs	r1, #1
 800484c:	f7ff fc84 	bl	8004158 <mbedtls_aes_crypt_ecb>
 8004850:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                 data_unit, tweak );
    if( ret != 0 )
 8004852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d068      	beq.n	800492a <mbedtls_aes_crypt_xts+0x122>
        return( ret );
 8004858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485a:	e0da      	b.n	8004a12 <mbedtls_aes_crypt_xts+0x20a>

    while( blocks-- )
    {
        size_t i;

        if( leftover && ( mode == MBEDTLS_AES_DECRYPT ) && blocks == 0 )
 800485c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <mbedtls_aes_crypt_xts+0x84>
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d111      	bne.n	800488c <mbedtls_aes_crypt_xts+0x84>
 8004868:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10e      	bne.n	800488c <mbedtls_aes_crypt_xts+0x84>
            /* We are on the last block in a decrypt operation that has
             * leftover bytes, so we need to use the next tweak for this block,
             * and this tweak for the lefover bytes. Save the current tweak for
             * the leftovers and then update the current tweak for use on this,
             * the last full block. */
            memcpy( prev_tweak, tweak, sizeof( tweak ) );
 800486e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8004872:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004878:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            mbedtls_gf128mul_x_ble( tweak, tweak );
 800487c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004880:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fd02 	bl	8004290 <mbedtls_gf128mul_x_ble>
        }

        for( i = 0; i < 16; i++ )
 800488c:	2300      	movs	r3, #0
 800488e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004890:	e013      	b.n	80048ba <mbedtls_aes_crypt_xts+0xb2>
            tmp[i] = input[i] ^ tweak[i];
 8004892:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004894:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004896:	4413      	add	r3, r2
 8004898:	781a      	ldrb	r2, [r3, #0]
 800489a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800489e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048a0:	440b      	add	r3, r1
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	4053      	eors	r3, r2
 80048a6:	b2d9      	uxtb	r1, r3
 80048a8:	f107 0214 	add.w	r2, r7, #20
 80048ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048ae:	4413      	add	r3, r2
 80048b0:	460a      	mov	r2, r1
 80048b2:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 80048b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048b6:	3301      	adds	r3, #1
 80048b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048bc:	2b0f      	cmp	r3, #15
 80048be:	d9e8      	bls.n	8004892 <mbedtls_aes_crypt_xts+0x8a>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f107 0314 	add.w	r3, r7, #20
 80048c6:	f107 0214 	add.w	r2, r7, #20
 80048ca:	68b9      	ldr	r1, [r7, #8]
 80048cc:	f7ff fc44 	bl	8004158 <mbedtls_aes_crypt_ecb>
 80048d0:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if( ret != 0 )
 80048d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <mbedtls_aes_crypt_xts+0xd4>
            return( ret );
 80048d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048da:	e09a      	b.n	8004a12 <mbedtls_aes_crypt_xts+0x20a>

        for( i = 0; i < 16; i++ )
 80048dc:	2300      	movs	r3, #0
 80048de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048e0:	e012      	b.n	8004908 <mbedtls_aes_crypt_xts+0x100>
            output[i] = tmp[i] ^ tweak[i];
 80048e2:	f107 0214 	add.w	r2, r7, #20
 80048e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048e8:	4413      	add	r3, r2
 80048ea:	7819      	ldrb	r1, [r3, #0]
 80048ec:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80048f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048f2:	4413      	add	r3, r2
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80048f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048fa:	4403      	add	r3, r0
 80048fc:	404a      	eors	r2, r1
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004902:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004904:	3301      	adds	r3, #1
 8004906:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004908:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800490a:	2b0f      	cmp	r3, #15
 800490c:	d9e9      	bls.n	80048e2 <mbedtls_aes_crypt_xts+0xda>

        /* Update the tweak for the next block. */
        mbedtls_gf128mul_x_ble( tweak, tweak );
 800490e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8004912:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004916:	4611      	mov	r1, r2
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff fcb9 	bl	8004290 <mbedtls_gf128mul_x_ble>

        output += 16;
 800491e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004920:	3310      	adds	r3, #16
 8004922:	677b      	str	r3, [r7, #116]	@ 0x74
        input += 16;
 8004924:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004926:	3310      	adds	r3, #16
 8004928:	673b      	str	r3, [r7, #112]	@ 0x70
    while( blocks-- )
 800492a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800492c:	1e5a      	subs	r2, r3, #1
 800492e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004930:	2b00      	cmp	r3, #0
 8004932:	d193      	bne.n	800485c <mbedtls_aes_crypt_xts+0x54>
    }

    if( leftover )
 8004934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004936:	2b00      	cmp	r3, #0
 8004938:	d06a      	beq.n	8004a10 <mbedtls_aes_crypt_xts+0x208>
    {
        /* If we are on the leftover bytes in a decrypt operation, we need to
         * use the previous tweak for these bytes (as saved in prev_tweak). */
        unsigned char *t = mode == MBEDTLS_AES_DECRYPT ? prev_tweak : tweak;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <mbedtls_aes_crypt_xts+0x13e>
 8004940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004944:	e001      	b.n	800494a <mbedtls_aes_crypt_xts+0x142>
 8004946:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800494a:	64bb      	str	r3, [r7, #72]	@ 0x48

        /* We are now on the final part of the data unit, which doesn't divide
         * evenly by 16. It's time for ciphertext stealing. */
        size_t i;
        unsigned char *prev_output = output - 16;
 800494c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800494e:	3b10      	subs	r3, #16
 8004950:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Copy ciphertext bytes from the previous block to our output for each
         * byte of cyphertext we won't steal. At the same time, copy the
         * remainder of the input for this final round (since the loop bounds
         * are the same). */
        for( i = 0; i < leftover; i++ )
 8004952:	2300      	movs	r3, #0
 8004954:	657b      	str	r3, [r7, #84]	@ 0x54
 8004956:	e01a      	b.n	800498e <mbedtls_aes_crypt_xts+0x186>
        {
            output[i] = prev_output[i];
 8004958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800495a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800495c:	441a      	add	r2, r3
 800495e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8004960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004962:	440b      	add	r3, r1
 8004964:	7812      	ldrb	r2, [r2, #0]
 8004966:	701a      	strb	r2, [r3, #0]
            tmp[i] = input[i] ^ t[i];
 8004968:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800496a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496c:	4413      	add	r3, r2
 800496e:	781a      	ldrb	r2, [r3, #0]
 8004970:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004972:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004974:	440b      	add	r3, r1
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	4053      	eors	r3, r2
 800497a:	b2d9      	uxtb	r1, r3
 800497c:	f107 0214 	add.w	r2, r7, #20
 8004980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004982:	4413      	add	r3, r2
 8004984:	460a      	mov	r2, r1
 8004986:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < leftover; i++ )
 8004988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800498a:	3301      	adds	r3, #1
 800498c:	657b      	str	r3, [r7, #84]	@ 0x54
 800498e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004992:	429a      	cmp	r2, r3
 8004994:	d3e0      	bcc.n	8004958 <mbedtls_aes_crypt_xts+0x150>
        }

        /* Copy ciphertext bytes from the previous block for input in this
         * round. */
        for( ; i < 16; i++ )
 8004996:	e012      	b.n	80049be <mbedtls_aes_crypt_xts+0x1b6>
            tmp[i] = prev_output[i] ^ t[i];
 8004998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800499a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800499c:	4413      	add	r3, r2
 800499e:	781a      	ldrb	r2, [r3, #0]
 80049a0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80049a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a4:	440b      	add	r3, r1
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4053      	eors	r3, r2
 80049aa:	b2d9      	uxtb	r1, r3
 80049ac:	f107 0214 	add.w	r2, r7, #20
 80049b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b2:	4413      	add	r3, r2
 80049b4:	460a      	mov	r2, r1
 80049b6:	701a      	strb	r2, [r3, #0]
        for( ; i < 16; i++ )
 80049b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ba:	3301      	adds	r3, #1
 80049bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80049be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c0:	2b0f      	cmp	r3, #15
 80049c2:	d9e9      	bls.n	8004998 <mbedtls_aes_crypt_xts+0x190>

        ret = mbedtls_aes_crypt_ecb( &ctx->crypt, mode, tmp, tmp );
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f107 0314 	add.w	r3, r7, #20
 80049ca:	f107 0214 	add.w	r2, r7, #20
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	f7ff fbc2 	bl	8004158 <mbedtls_aes_crypt_ecb>
 80049d4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if( ret != 0 )
 80049d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <mbedtls_aes_crypt_xts+0x1d8>
            return ret;
 80049dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049de:	e018      	b.n	8004a12 <mbedtls_aes_crypt_xts+0x20a>

        /* Write the result back to the previous block, overriding the previous
         * output we copied. */
        for( i = 0; i < 16; i++ )
 80049e0:	2300      	movs	r3, #0
 80049e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e4:	e011      	b.n	8004a0a <mbedtls_aes_crypt_xts+0x202>
            prev_output[i] = tmp[i] ^ t[i];
 80049e6:	f107 0214 	add.w	r2, r7, #20
 80049ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ec:	4413      	add	r3, r2
 80049ee:	7819      	ldrb	r1, [r3, #0]
 80049f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f4:	4413      	add	r3, r2
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80049fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fc:	4403      	add	r3, r0
 80049fe:	404a      	eors	r2, r1
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8004a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a06:	3301      	adds	r3, #1
 8004a08:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a0c:	2b0f      	cmp	r3, #15
 8004a0e:	d9ea      	bls.n	80049e6 <mbedtls_aes_crypt_xts+0x1de>
    }

    return( 0 );
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3764      	adds	r7, #100	@ 0x64
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}

08004a1a <mbedtls_aes_crypt_ofb>:
                           size_t length,
                           size_t *iv_off,
                           unsigned char iv[16],
                           const unsigned char *input,
                           unsigned char *output )
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b086      	sub	sp, #24
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
 8004a26:	603b      	str	r3, [r7, #0]
    int ret = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]
    AES_VALIDATE_RET( iv_off != NULL );
    AES_VALIDATE_RET( iv != NULL );
    AES_VALIDATE_RET( input != NULL );
    AES_VALIDATE_RET( output != NULL );

    n = *iv_off;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	613b      	str	r3, [r7, #16]

    if( n > 15 )
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b0f      	cmp	r3, #15
 8004a36:	d922      	bls.n	8004a7e <mbedtls_aes_crypt_ofb+0x64>
        return( MBEDTLS_ERR_AES_BAD_INPUT_DATA );
 8004a38:	f06f 0320 	mvn.w	r3, #32
 8004a3c:	e02a      	b.n	8004a94 <mbedtls_aes_crypt_ofb+0x7a>

    while( length-- )
    {
        if( n == 0 )
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <mbedtls_aes_crypt_ofb+0x3e>
        {
            ret = mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	2101      	movs	r1, #1
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7ff fb84 	bl	8004158 <mbedtls_aes_crypt_ecb>
 8004a50:	6178      	str	r0, [r7, #20]
            if( ret != 0 )
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11b      	bne.n	8004a90 <mbedtls_aes_crypt_ofb+0x76>
                goto exit;
        }
        *output++ =  *input++ ^ iv[n];
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	623a      	str	r2, [r7, #32]
 8004a5e:	7819      	ldrb	r1, [r3, #0]
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	781a      	ldrb	r2, [r3, #0]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	1c58      	adds	r0, r3, #1
 8004a6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a6e:	404a      	eors	r2, r1
 8004a70:	b2d2      	uxtb	r2, r2
 8004a72:	701a      	strb	r2, [r3, #0]

        n = ( n + 1 ) & 0x0F;
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	3301      	adds	r3, #1
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	613b      	str	r3, [r7, #16]
    while( length-- )
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	1e5a      	subs	r2, r3, #1
 8004a82:	60ba      	str	r2, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1da      	bne.n	8004a3e <mbedtls_aes_crypt_ofb+0x24>
    }

    *iv_off = n;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e000      	b.n	8004a92 <mbedtls_aes_crypt_ofb+0x78>
                goto exit;
 8004a90:	bf00      	nop

exit:
    return( ret );
 8004a92:	697b      	ldr	r3, [r7, #20]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <camellia_feistel>:
        }                                                   \
}

static void camellia_feistel( const uint32_t x[2], const uint32_t k[2],
                              uint32_t z[2])
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
    uint32_t I0, I1;
    I0 = x[0] ^ k[0];
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4053      	eors	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]
    I1 = x[1] ^ k[1];
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	3304      	adds	r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4053      	eors	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	0e1b      	lsrs	r3, r3, #24
 8004ac8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b80 <camellia_feistel+0xe4>)
 8004aca:	5cd3      	ldrb	r3, [r2, r3]
 8004acc:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	492b      	ldr	r1, [pc, #172]	@ (8004b84 <camellia_feistel+0xe8>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	041b      	lsls	r3, r3, #16
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8004ada:	431a      	orrs	r2, r3
         ((uint32_t) SBOX3((I0 >>  8) & 0xFF) <<  8) |
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	0a1b      	lsrs	r3, r3, #8
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	4929      	ldr	r1, [pc, #164]	@ (8004b88 <camellia_feistel+0xec>)
 8004ae4:	5ccb      	ldrb	r3, [r1, r3]
 8004ae6:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX2((I0 >> 16) & 0xFF) << 16) |
 8004ae8:	4313      	orrs	r3, r2
         ((uint32_t) SBOX4((I0      ) & 0xFF)      );
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	4927      	ldr	r1, [pc, #156]	@ (8004b8c <camellia_feistel+0xf0>)
 8004af0:	5c8a      	ldrb	r2, [r1, r2]
    I0 = ((uint32_t) SBOX1((I0 >> 24) & 0xFF) << 24) |
 8004af2:	4313      	orrs	r3, r2
 8004af4:	617b      	str	r3, [r7, #20]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	4a22      	ldr	r2, [pc, #136]	@ (8004b84 <camellia_feistel+0xe8>)
 8004afc:	5cd3      	ldrb	r3, [r2, r3]
 8004afe:	061a      	lsls	r2, r3, #24
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	4920      	ldr	r1, [pc, #128]	@ (8004b88 <camellia_feistel+0xec>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	041b      	lsls	r3, r3, #16
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8004b0c:	431a      	orrs	r2, r3
         ((uint32_t) SBOX4((I1 >>  8) & 0xFF) <<  8) |
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	491d      	ldr	r1, [pc, #116]	@ (8004b8c <camellia_feistel+0xf0>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	021b      	lsls	r3, r3, #8
         ((uint32_t) SBOX3((I1 >> 16) & 0xFF) << 16) |
 8004b1a:	4313      	orrs	r3, r2
         ((uint32_t) SBOX1((I1      ) & 0xFF)      );
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	4917      	ldr	r1, [pc, #92]	@ (8004b80 <camellia_feistel+0xe4>)
 8004b22:	5c8a      	ldrb	r2, [r1, r2]
    I1 = ((uint32_t) SBOX2((I1 >> 24) & 0xFF) << 24) |
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

    I0 ^= (I1 << 8) | (I1 >> 24);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	ea4f 6333 	mov.w	r3, r3, ror #24
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4053      	eors	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 << 16) | (I0 >> 16);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	ea4f 4333 	mov.w	r3, r3, ror #16
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4053      	eors	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
    I0 ^= (I1 >> 8) | (I1 << 24);
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4053      	eors	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
    I1 ^= (I0 >> 8) | (I0 << 24);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	ea4f 2333 	mov.w	r3, r3, ror #8
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4053      	eors	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]

    z[0] ^= I1;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	405a      	eors	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	601a      	str	r2, [r3, #0]
    z[1] ^= I0;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	404a      	eors	r2, r1
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	0800bf44 	.word	0x0800bf44
 8004b84:	0800c044 	.word	0x0800c044
 8004b88:	0800c144 	.word	0x0800c144
 8004b8c:	0800c244 	.word	0x0800c244

08004b90 <mbedtls_camellia_init>:

void mbedtls_camellia_init( mbedtls_camellia_context *ctx )
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
    CAMELLIA_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_camellia_context ) );
 8004b98:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f004 fab6 	bl	8009110 <memset>
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <mbedtls_camellia_free>:

void mbedtls_camellia_free( mbedtls_camellia_context *ctx )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <mbedtls_camellia_free+0x1a>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_camellia_context ) );
 8004bba:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f003 fb30 	bl	8008224 <mbedtls_platform_zeroize>
 8004bc4:	e000      	b.n	8004bc8 <mbedtls_camellia_free+0x1c>
        return;
 8004bc6:	bf00      	nop
}
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <mbedtls_camellia_setkey_enc>:
 * Camellia key schedule (encryption)
 */
int mbedtls_camellia_setkey_enc( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b0c8      	sub	sp, #288	@ 0x120
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bda:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004bde:	6018      	str	r0, [r3, #0]
 8004be0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004be4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004be8:	6019      	str	r1, [r3, #0]
 8004bea:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bee:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004bf2:	601a      	str	r2, [r3, #0]
    uint32_t TK[20];

    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    RK = ctx->rk;
 8004bf4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004bf8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3304      	adds	r3, #4
 8004c00:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    memset( t, 0, 64 );
 8004c04:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004c08:	2240      	movs	r2, #64	@ 0x40
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f004 fa7f 	bl	8009110 <memset>
    memset( RK, 0, sizeof(ctx->rk) );
 8004c12:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8004c16:	2100      	movs	r1, #0
 8004c18:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8004c1c:	f004 fa78 	bl	8009110 <memset>

    switch( keybits )
 8004c20:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c24:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c2e:	d021      	beq.n	8004c74 <mbedtls_camellia_setkey_enc+0xa4>
 8004c30:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c34:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c3e:	d824      	bhi.n	8004c8a <mbedtls_camellia_setkey_enc+0xba>
 8004c40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c44:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b80      	cmp	r3, #128	@ 0x80
 8004c4c:	d007      	beq.n	8004c5e <mbedtls_camellia_setkey_enc+0x8e>
 8004c4e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c52:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c5a:	d00b      	beq.n	8004c74 <mbedtls_camellia_setkey_enc+0xa4>
 8004c5c:	e015      	b.n	8004c8a <mbedtls_camellia_setkey_enc+0xba>
    {
        case 128: ctx->nr = 3; idx = 0; break;
 8004c5e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c62:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2203      	movs	r2, #3
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004c72:	e00e      	b.n	8004c92 <mbedtls_camellia_setkey_enc+0xc2>
        case 192:
        case 256: ctx->nr = 4; idx = 1; break;
 8004c74:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	2301      	movs	r3, #1
 8004c84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004c88:	e003      	b.n	8004c92 <mbedtls_camellia_setkey_enc+0xc2>
        default : return( MBEDTLS_ERR_CAMELLIA_BAD_INPUT_DATA );
 8004c8a:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8004c8e:	f000 be1f 	b.w	80058d0 <mbedtls_camellia_setkey_enc+0xd00>
    }

    for( i = 0; i < keybits / 8; ++i )
 8004c92:	2300      	movs	r3, #0
 8004c94:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004c98:	e014      	b.n	8004cc4 <mbedtls_camellia_setkey_enc+0xf4>
        t[i] = key[i];
 8004c9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004c9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ca8:	4413      	add	r3, r2
 8004caa:	7819      	ldrb	r1, [r3, #0]
 8004cac:	f107 02d4 	add.w	r2, r7, #212	@ 0xd4
 8004cb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004cb4:	4413      	add	r3, r2
 8004cb6:	460a      	mov	r2, r1
 8004cb8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < keybits / 8; ++i )
 8004cba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004cc4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cc8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d3e0      	bcc.n	8004c9a <mbedtls_camellia_setkey_enc+0xca>

    if( keybits == 192 ) {
 8004cd8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004cdc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ce4:	d11e      	bne.n	8004d24 <mbedtls_camellia_setkey_enc+0x154>
        for( i = 0; i < 8; i++ )
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004cec:	e016      	b.n	8004d1c <mbedtls_camellia_setkey_enc+0x14c>
            t[24 + i] = ~t[16 + i];
 8004cee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004cf2:	3310      	adds	r3, #16
 8004cf4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004cf8:	443b      	add	r3, r7
 8004cfa:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8004cfe:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d02:	3318      	adds	r3, #24
 8004d04:	43d2      	mvns	r2, r2
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004d0c:	443b      	add	r3, r7
 8004d0e:	f803 2c4c 	strb.w	r2, [r3, #-76]
        for( i = 0; i < 8; i++ )
 8004d12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d16:	3301      	adds	r3, #1
 8004d18:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004d1c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d20:	2b07      	cmp	r3, #7
 8004d22:	d9e4      	bls.n	8004cee <mbedtls_camellia_setkey_enc+0x11e>
    }

    /*
     * Prepare SIGMA values
     */
    for( i = 0; i < 6; i++ ) {
 8004d24:	2300      	movs	r3, #0
 8004d26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004d2a:	e04f      	b.n	8004dcc <mbedtls_camellia_setkey_enc+0x1fc>
        GET_UINT32_BE( SIGMA[i][0], SIGMA_CHARS[i], 0 );
 8004d2c:	4abd      	ldr	r2, [pc, #756]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004d2e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d32:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8004d36:	061a      	lsls	r2, r3, #24
 8004d38:	49ba      	ldr	r1, [pc, #744]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004d3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	440b      	add	r3, r1
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	431a      	orrs	r2, r3
 8004d48:	49b6      	ldr	r1, [pc, #728]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004d4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	440b      	add	r3, r1
 8004d52:	789b      	ldrb	r3, [r3, #2]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	431a      	orrs	r2, r3
 8004d58:	49b2      	ldr	r1, [pc, #712]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004d5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	440b      	add	r3, r1
 8004d62:	78db      	ldrb	r3, [r3, #3]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004d70:	443b      	add	r3, r7
 8004d72:	f843 2c7c 	str.w	r2, [r3, #-124]
        GET_UINT32_BE( SIGMA[i][1], SIGMA_CHARS[i], 4 );
 8004d76:	4aab      	ldr	r2, [pc, #684]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004d78:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4413      	add	r3, r2
 8004d80:	791b      	ldrb	r3, [r3, #4]
 8004d82:	061a      	lsls	r2, r3, #24
 8004d84:	49a7      	ldr	r1, [pc, #668]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004d86:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	440b      	add	r3, r1
 8004d8e:	795b      	ldrb	r3, [r3, #5]
 8004d90:	041b      	lsls	r3, r3, #16
 8004d92:	431a      	orrs	r2, r3
 8004d94:	49a3      	ldr	r1, [pc, #652]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004d96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	440b      	add	r3, r1
 8004d9e:	799b      	ldrb	r3, [r3, #6]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	431a      	orrs	r2, r3
 8004da4:	499f      	ldr	r1, [pc, #636]	@ (8005024 <mbedtls_camellia_setkey_enc+0x454>)
 8004da6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	440b      	add	r3, r1
 8004dae:	79db      	ldrb	r3, [r3, #7]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004dbc:	443b      	add	r3, r7
 8004dbe:	f843 2c78 	str.w	r2, [r3, #-120]
    for( i = 0; i < 6; i++ ) {
 8004dc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004dcc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d9ab      	bls.n	8004d2c <mbedtls_camellia_setkey_enc+0x15c>

    /*
     * Key storage in KC
     * Order: KL, KR, KA, KB
     */
    memset( KC, 0, sizeof(KC) );
 8004dd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dd8:	2240      	movs	r2, #64	@ 0x40
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f004 f997 	bl	8009110 <memset>

    /* Store KL, KR */
    for( i = 0; i < 8; i++ )
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004de8:	e035      	b.n	8004e56 <mbedtls_camellia_setkey_enc+0x286>
        GET_UINT32_BE( KC[i], t, i * 4 );
 8004dea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004df4:	443b      	add	r3, r7
 8004df6:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8004dfa:	061a      	lsls	r2, r3, #24
 8004dfc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	3301      	adds	r3, #1
 8004e04:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e08:	443b      	add	r3, r7
 8004e0a:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	431a      	orrs	r2, r3
 8004e12:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	3302      	adds	r3, #2
 8004e1a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e1e:	443b      	add	r3, r7
 8004e20:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004e2c:	0092      	lsls	r2, r2, #2
 8004e2e:	3203      	adds	r2, #3
 8004e30:	f502 7290 	add.w	r2, r2, #288	@ 0x120
 8004e34:	443a      	add	r2, r7
 8004e36:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e46:	443b      	add	r3, r7
 8004e48:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 8; i++ )
 8004e4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e50:	3301      	adds	r3, #1
 8004e52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004e56:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e5a:	2b07      	cmp	r3, #7
 8004e5c:	d9c5      	bls.n	8004dea <mbedtls_camellia_setkey_enc+0x21a>

    /* Generate KA */
    for( i = 0; i < 4; ++i )
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004e64:	e01f      	b.n	8004ea6 <mbedtls_camellia_setkey_enc+0x2d6>
        KC[8 + i] = KC[i] ^ KC[4 + i];
 8004e66:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e70:	443b      	add	r3, r7
 8004e72:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8004e76:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e82:	443b      	add	r3, r7
 8004e84:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8004e88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	404a      	eors	r2, r1
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004e96:	443b      	add	r3, r7
 8004e98:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 8004e9c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004ea6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d9db      	bls.n	8004e66 <mbedtls_camellia_setkey_enc+0x296>

    camellia_feistel( KC + 8, SIGMA[0], KC + 10 );
 8004eae:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004eb2:	3320      	adds	r3, #32
 8004eb4:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004eb8:	3228      	adds	r2, #40	@ 0x28
 8004eba:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fdec 	bl	8004a9c <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[1], KC + 8 );
 8004ec4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004ec8:	3328      	adds	r3, #40	@ 0x28
 8004eca:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004ece:	3220      	adds	r2, #32
 8004ed0:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8004ed4:	3108      	adds	r1, #8
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fde0 	bl	8004a9c <camellia_feistel>

    for( i = 0; i < 4; ++i )
 8004edc:	2300      	movs	r3, #0
 8004ede:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004ee2:	e01f      	b.n	8004f24 <mbedtls_camellia_setkey_enc+0x354>
        KC[8 + i] ^= KC[i];
 8004ee4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004ee8:	3308      	adds	r3, #8
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004ef0:	443b      	add	r3, r7
 8004ef2:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8004ef6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f00:	443b      	add	r3, r7
 8004f02:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8004f06:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	404a      	eors	r2, r1
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f14:	443b      	add	r3, r7
 8004f16:	f843 2cbc 	str.w	r2, [r3, #-188]
    for( i = 0; i < 4; ++i )
 8004f1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f1e:	3301      	adds	r3, #1
 8004f20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004f24:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d9db      	bls.n	8004ee4 <mbedtls_camellia_setkey_enc+0x314>

    camellia_feistel( KC + 8, SIGMA[2], KC + 10 );
 8004f2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004f30:	3320      	adds	r3, #32
 8004f32:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004f36:	3228      	adds	r2, #40	@ 0x28
 8004f38:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8004f3c:	3110      	adds	r1, #16
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff fdac 	bl	8004a9c <camellia_feistel>
    camellia_feistel( KC + 10, SIGMA[3], KC + 8 );
 8004f44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004f48:	3328      	adds	r3, #40	@ 0x28
 8004f4a:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004f4e:	3220      	adds	r2, #32
 8004f50:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8004f54:	3118      	adds	r1, #24
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fda0 	bl	8004a9c <camellia_feistel>

    if( keybits > 128 ) {
 8004f5c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004f60:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b80      	cmp	r3, #128	@ 0x80
 8004f68:	d940      	bls.n	8004fec <mbedtls_camellia_setkey_enc+0x41c>
        /* Generate KB */
        for( i = 0; i < 4; ++i )
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004f70:	e020      	b.n	8004fb4 <mbedtls_camellia_setkey_enc+0x3e4>
            KC[12 + i] = KC[4 + i] ^ KC[8 + i];
 8004f72:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f76:	3304      	adds	r3, #4
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f7e:	443b      	add	r3, r7
 8004f80:	f853 1cbc 	ldr.w	r1, [r3, #-188]
 8004f84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f88:	3308      	adds	r3, #8
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004f90:	443b      	add	r3, r7
 8004f92:	f853 2cbc 	ldr.w	r2, [r3, #-188]
 8004f96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	404a      	eors	r2, r1
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8004fa4:	443b      	add	r3, r7
 8004fa6:	f843 2cbc 	str.w	r2, [r3, #-188]
        for( i = 0; i < 4; ++i )
 8004faa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004fb4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d9da      	bls.n	8004f72 <mbedtls_camellia_setkey_enc+0x3a2>

        camellia_feistel( KC + 12, SIGMA[4], KC + 14 );
 8004fbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004fc0:	3330      	adds	r3, #48	@ 0x30
 8004fc2:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004fc6:	3238      	adds	r2, #56	@ 0x38
 8004fc8:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8004fcc:	3120      	adds	r1, #32
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fd64 	bl	8004a9c <camellia_feistel>
        camellia_feistel( KC + 14, SIGMA[5], KC + 12 );
 8004fd4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004fd8:	3338      	adds	r3, #56	@ 0x38
 8004fda:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8004fde:	3230      	adds	r2, #48	@ 0x30
 8004fe0:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8004fe4:	3128      	adds	r1, #40	@ 0x28
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7ff fd58 	bl	8004a9c <camellia_feistel>
    /*
     * Generating subkeys
     */

    /* Manipulating KL */
    SHIFT_AND_PLACE( idx, 0 );
 8004fec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004fee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ff2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004ffa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8004ffe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005006:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800500a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800500e:	609a      	str	r2, [r3, #8]
 8005010:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8005012:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005016:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800501a:	60da      	str	r2, [r3, #12]
 800501c:	2301      	movs	r3, #1
 800501e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005022:	e0aa      	b.n	800517a <mbedtls_camellia_setkey_enc+0x5aa>
 8005024:	0800bf14 	.word	0x0800bf14
 8005028:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800502c:	3b01      	subs	r3, #1
 800502e:	49dd      	ldr	r1, [pc, #884]	@ (80053a4 <mbedtls_camellia_setkey_enc+0x7d4>)
 8005030:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005034:	0112      	lsls	r2, r2, #4
 8005036:	440a      	add	r2, r1
 8005038:	4413      	add	r3, r2
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 8097 	beq.w	8005170 <mbedtls_camellia_setkey_enc+0x5a0>
 8005042:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005046:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005050:	4613      	mov	r3, r2
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	4099      	lsls	r1, r3
 800505c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005060:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005064:	6858      	ldr	r0, [r3, #4]
 8005066:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800506a:	4613      	mov	r3, r2
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	f003 031f 	and.w	r3, r3, #31
 8005074:	f1c3 0320 	rsb	r3, r3, #32
 8005078:	fa20 f203 	lsr.w	r2, r0, r3
 800507c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	f107 0014 	add.w	r0, r7, #20
 8005086:	4403      	add	r3, r0
 8005088:	404a      	eors	r2, r1
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005090:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005094:	6859      	ldr	r1, [r3, #4]
 8005096:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800509a:	4613      	mov	r3, r2
 800509c:	011b      	lsls	r3, r3, #4
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	4099      	lsls	r1, r3
 80050a6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050aa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050ae:	6898      	ldr	r0, [r3, #8]
 80050b0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	f1c3 0320 	rsb	r3, r3, #32
 80050c2:	fa20 f203 	lsr.w	r2, r0, r3
 80050c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	3304      	adds	r3, #4
 80050ce:	f107 0014 	add.w	r0, r7, #20
 80050d2:	4403      	add	r3, r0
 80050d4:	404a      	eors	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050e0:	6899      	ldr	r1, [r3, #8]
 80050e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	4099      	lsls	r1, r3
 80050f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80050f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80050fa:	68d8      	ldr	r0, [r3, #12]
 80050fc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005100:	4613      	mov	r3, r2
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	f1c3 0320 	rsb	r3, r3, #32
 800510e:	fa20 f203 	lsr.w	r2, r0, r3
 8005112:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	3308      	adds	r3, #8
 800511a:	f107 0014 	add.w	r0, r7, #20
 800511e:	4403      	add	r3, r0
 8005120:	404a      	eors	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005128:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800512c:	68d9      	ldr	r1, [r3, #12]
 800512e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005132:	4613      	mov	r3, r2
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	f003 031f 	and.w	r3, r3, #31
 800513c:	4099      	lsls	r1, r3
 800513e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005142:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800514c:	4613      	mov	r3, r2
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	1a9b      	subs	r3, r3, r2
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	f1c3 0320 	rsb	r3, r3, #32
 800515a:	fa20 f203 	lsr.w	r2, r0, r3
 800515e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	330c      	adds	r3, #12
 8005166:	f107 0014 	add.w	r0, r7, #20
 800516a:	4403      	add	r3, r0
 800516c:	404a      	eors	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005174:	3301      	adds	r3, #1
 8005176:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800517a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800517e:	2b04      	cmp	r3, #4
 8005180:	f67f af52 	bls.w	8005028 <mbedtls_camellia_setkey_enc+0x458>
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800518a:	e02e      	b.n	80051ea <mbedtls_camellia_setkey_enc+0x61a>
 800518c:	4986      	ldr	r1, [pc, #536]	@ (80053a8 <mbedtls_camellia_setkey_enc+0x7d8>)
 800518e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	18ca      	adds	r2, r1, r3
 800519c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051a0:	4413      	add	r3, r2
 80051a2:	f993 3000 	ldrsb.w	r3, [r3]
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d019      	beq.n	80051e0 <mbedtls_camellia_setkey_enc+0x610>
 80051ac:	497e      	ldr	r1, [pc, #504]	@ (80053a8 <mbedtls_camellia_setkey_enc+0x7d8>)
 80051ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80051b2:	4613      	mov	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	011b      	lsls	r3, r3, #4
 80051ba:	18ca      	adds	r2, r1, r3
 80051bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051c0:	4413      	add	r3, r2
 80051c2:	f993 3000 	ldrsb.w	r3, [r3]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80051cc:	4413      	add	r3, r2
 80051ce:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80051d2:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80051d6:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80051da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051e4:	3301      	adds	r3, #1
 80051e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80051ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80051ee:	2b13      	cmp	r3, #19
 80051f0:	d9cc      	bls.n	800518c <mbedtls_camellia_setkey_enc+0x5bc>

    /* Manipulating KR */
    if( keybits > 128 ) {
 80051f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80051f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b80      	cmp	r3, #128	@ 0x80
 80051fe:	f240 810a 	bls.w	8005416 <mbedtls_camellia_setkey_enc+0x846>
        SHIFT_AND_PLACE( idx, 1 );
 8005202:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005204:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005208:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005210:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005214:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005218:	605a      	str	r2, [r3, #4]
 800521a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800521c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005220:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800522a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800522e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005232:	60da      	str	r2, [r3, #12]
 8005234:	2301      	movs	r3, #1
 8005236:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800523a:	e0a9      	b.n	8005390 <mbedtls_camellia_setkey_enc+0x7c0>
 800523c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005240:	3b01      	subs	r3, #1
 8005242:	4958      	ldr	r1, [pc, #352]	@ (80053a4 <mbedtls_camellia_setkey_enc+0x7d4>)
 8005244:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005248:	0112      	lsls	r2, r2, #4
 800524a:	440a      	add	r2, r1
 800524c:	4413      	add	r3, r2
 800524e:	3304      	adds	r3, #4
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8097 	beq.w	8005386 <mbedtls_camellia_setkey_enc+0x7b6>
 8005258:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800525c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005260:	6819      	ldr	r1, [r3, #0]
 8005262:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005266:	4613      	mov	r3, r2
 8005268:	011b      	lsls	r3, r3, #4
 800526a:	1a9b      	subs	r3, r3, r2
 800526c:	f003 031f 	and.w	r3, r3, #31
 8005270:	4099      	lsls	r1, r3
 8005272:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005276:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800527a:	6858      	ldr	r0, [r3, #4]
 800527c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	f003 031f 	and.w	r3, r3, #31
 800528a:	f1c3 0320 	rsb	r3, r3, #32
 800528e:	fa20 f203 	lsr.w	r2, r0, r3
 8005292:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	f107 0014 	add.w	r0, r7, #20
 800529c:	4403      	add	r3, r0
 800529e:	404a      	eors	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052aa:	6859      	ldr	r1, [r3, #4]
 80052ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80052b0:	4613      	mov	r3, r2
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	1a9b      	subs	r3, r3, r2
 80052b6:	f003 031f 	and.w	r3, r3, #31
 80052ba:	4099      	lsls	r1, r3
 80052bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052c4:	6898      	ldr	r0, [r3, #8]
 80052c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80052ca:	4613      	mov	r3, r2
 80052cc:	011b      	lsls	r3, r3, #4
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	f1c3 0320 	rsb	r3, r3, #32
 80052d8:	fa20 f203 	lsr.w	r2, r0, r3
 80052dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	3304      	adds	r3, #4
 80052e4:	f107 0014 	add.w	r0, r7, #20
 80052e8:	4403      	add	r3, r0
 80052ea:	404a      	eors	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80052f2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80052f6:	6899      	ldr	r1, [r3, #8]
 80052f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80052fc:	4613      	mov	r3, r2
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	4099      	lsls	r1, r3
 8005308:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800530c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005310:	68d8      	ldr	r0, [r3, #12]
 8005312:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005316:	4613      	mov	r3, r2
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	f1c3 0320 	rsb	r3, r3, #32
 8005324:	fa20 f203 	lsr.w	r2, r0, r3
 8005328:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	3308      	adds	r3, #8
 8005330:	f107 0014 	add.w	r0, r7, #20
 8005334:	4403      	add	r3, r0
 8005336:	404a      	eors	r2, r1
 8005338:	601a      	str	r2, [r3, #0]
 800533a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800533e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005342:	68d9      	ldr	r1, [r3, #12]
 8005344:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005348:	4613      	mov	r3, r2
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	4099      	lsls	r1, r3
 8005354:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005358:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800535c:	6818      	ldr	r0, [r3, #0]
 800535e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	f1c3 0320 	rsb	r3, r3, #32
 8005370:	fa20 f203 	lsr.w	r2, r0, r3
 8005374:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	330c      	adds	r3, #12
 800537c:	f107 0014 	add.w	r0, r7, #20
 8005380:	4403      	add	r3, r0
 8005382:	404a      	eors	r2, r1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800538a:	3301      	adds	r3, #1
 800538c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005390:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005394:	2b04      	cmp	r3, #4
 8005396:	f67f af51 	bls.w	800523c <mbedtls_camellia_setkey_enc+0x66c>
 800539a:	2300      	movs	r3, #0
 800539c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80053a0:	e035      	b.n	800540e <mbedtls_camellia_setkey_enc+0x83e>
 80053a2:	bf00      	nop
 80053a4:	0800c344 	.word	0x0800c344
 80053a8:	0800c364 	.word	0x0800c364
 80053ac:	49b2      	ldr	r1, [pc, #712]	@ (8005678 <mbedtls_camellia_setkey_enc+0xaa8>)
 80053ae:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80053b2:	4613      	mov	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	18ca      	adds	r2, r1, r3
 80053bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80053c0:	4413      	add	r3, r2
 80053c2:	3314      	adds	r3, #20
 80053c4:	f993 3000 	ldrsb.w	r3, [r3]
 80053c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053cc:	d01a      	beq.n	8005404 <mbedtls_camellia_setkey_enc+0x834>
 80053ce:	49aa      	ldr	r1, [pc, #680]	@ (8005678 <mbedtls_camellia_setkey_enc+0xaa8>)
 80053d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	18ca      	adds	r2, r1, r3
 80053de:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80053e2:	4413      	add	r3, r2
 80053e4:	3314      	adds	r3, #20
 80053e6:	f993 3000 	ldrsb.w	r3, [r3]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80053f0:	4413      	add	r3, r2
 80053f2:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80053f6:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80053fa:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 80053fe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005408:	3301      	adds	r3, #1
 800540a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800540e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005412:	2b13      	cmp	r3, #19
 8005414:	d9ca      	bls.n	80053ac <mbedtls_camellia_setkey_enc+0x7dc>
    }

    /* Manipulating KA */
    SHIFT_AND_PLACE( idx, 2 );
 8005416:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800541a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800541e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8005428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800542c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005430:	605a      	str	r2, [r3, #4]
 8005432:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005436:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800543a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005444:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005448:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	2301      	movs	r3, #1
 8005450:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005454:	e0a9      	b.n	80055aa <mbedtls_camellia_setkey_enc+0x9da>
 8005456:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800545a:	3b01      	subs	r3, #1
 800545c:	4987      	ldr	r1, [pc, #540]	@ (800567c <mbedtls_camellia_setkey_enc+0xaac>)
 800545e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005462:	0112      	lsls	r2, r2, #4
 8005464:	440a      	add	r2, r1
 8005466:	4413      	add	r3, r2
 8005468:	3308      	adds	r3, #8
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 8097 	beq.w	80055a0 <mbedtls_camellia_setkey_enc+0x9d0>
 8005472:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005476:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800547a:	6819      	ldr	r1, [r3, #0]
 800547c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	4099      	lsls	r1, r3
 800548c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005490:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005494:	6858      	ldr	r0, [r3, #4]
 8005496:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800549a:	4613      	mov	r3, r2
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	f1c3 0320 	rsb	r3, r3, #32
 80054a8:	fa20 f203 	lsr.w	r2, r0, r3
 80054ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	f107 0014 	add.w	r0, r7, #20
 80054b6:	4403      	add	r3, r0
 80054b8:	404a      	eors	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054c0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80054c4:	6859      	ldr	r1, [r3, #4]
 80054c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	4099      	lsls	r1, r3
 80054d6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80054da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80054de:	6898      	ldr	r0, [r3, #8]
 80054e0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80054e4:	4613      	mov	r3, r2
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	f003 031f 	and.w	r3, r3, #31
 80054ee:	f1c3 0320 	rsb	r3, r3, #32
 80054f2:	fa20 f203 	lsr.w	r2, r0, r3
 80054f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	3304      	adds	r3, #4
 80054fe:	f107 0014 	add.w	r0, r7, #20
 8005502:	4403      	add	r3, r0
 8005504:	404a      	eors	r2, r1
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800550c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005510:	6899      	ldr	r1, [r3, #8]
 8005512:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005516:	4613      	mov	r3, r2
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	4099      	lsls	r1, r3
 8005522:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005526:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800552a:	68d8      	ldr	r0, [r3, #12]
 800552c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005530:	4613      	mov	r3, r2
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	f1c3 0320 	rsb	r3, r3, #32
 800553e:	fa20 f203 	lsr.w	r2, r0, r3
 8005542:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	3308      	adds	r3, #8
 800554a:	f107 0014 	add.w	r0, r7, #20
 800554e:	4403      	add	r3, r0
 8005550:	404a      	eors	r2, r1
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005558:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800555c:	68d9      	ldr	r1, [r3, #12]
 800555e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005562:	4613      	mov	r3, r2
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	1a9b      	subs	r3, r3, r2
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	4099      	lsls	r1, r3
 800556e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005572:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800557c:	4613      	mov	r3, r2
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	f1c3 0320 	rsb	r3, r3, #32
 800558a:	fa20 f203 	lsr.w	r2, r0, r3
 800558e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	330c      	adds	r3, #12
 8005596:	f107 0014 	add.w	r0, r7, #20
 800559a:	4403      	add	r3, r0
 800559c:	404a      	eors	r2, r1
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80055a4:	3301      	adds	r3, #1
 80055a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80055aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	f67f af51 	bls.w	8005456 <mbedtls_camellia_setkey_enc+0x886>
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80055ba:	e030      	b.n	800561e <mbedtls_camellia_setkey_enc+0xa4e>
 80055bc:	492e      	ldr	r1, [pc, #184]	@ (8005678 <mbedtls_camellia_setkey_enc+0xaa8>)
 80055be:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	18ca      	adds	r2, r1, r3
 80055cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80055d0:	4413      	add	r3, r2
 80055d2:	3328      	adds	r3, #40	@ 0x28
 80055d4:	f993 3000 	ldrsb.w	r3, [r3]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d01a      	beq.n	8005614 <mbedtls_camellia_setkey_enc+0xa44>
 80055de:	4926      	ldr	r1, [pc, #152]	@ (8005678 <mbedtls_camellia_setkey_enc+0xaa8>)
 80055e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	18ca      	adds	r2, r1, r3
 80055ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80055f2:	4413      	add	r3, r2
 80055f4:	3328      	adds	r3, #40	@ 0x28
 80055f6:	f993 3000 	ldrsb.w	r3, [r3]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005600:	4413      	add	r3, r2
 8005602:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005606:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800560a:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 800560e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005618:	3301      	adds	r3, #1
 800561a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800561e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005622:	2b13      	cmp	r3, #19
 8005624:	d9ca      	bls.n	80055bc <mbedtls_camellia_setkey_enc+0x9ec>

    /* Manipulating KB */
    if( keybits > 128 ) {
 8005626:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800562a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b80      	cmp	r3, #128	@ 0x80
 8005632:	f240 810d 	bls.w	8005850 <mbedtls_camellia_setkey_enc+0xc80>
        SHIFT_AND_PLACE( idx, 3 );
 8005636:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800563a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800563e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005648:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800564c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8005656:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800565a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8005664:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005668:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800566c:	60da      	str	r2, [r3, #12]
 800566e:	2301      	movs	r3, #1
 8005670:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005674:	e0ae      	b.n	80057d4 <mbedtls_camellia_setkey_enc+0xc04>
 8005676:	bf00      	nop
 8005678:	0800c364 	.word	0x0800c364
 800567c:	0800c344 	.word	0x0800c344
 8005680:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005684:	3b01      	subs	r3, #1
 8005686:	4995      	ldr	r1, [pc, #596]	@ (80058dc <mbedtls_camellia_setkey_enc+0xd0c>)
 8005688:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800568c:	0112      	lsls	r2, r2, #4
 800568e:	440a      	add	r2, r1
 8005690:	4413      	add	r3, r2
 8005692:	330c      	adds	r3, #12
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 8097 	beq.w	80057ca <mbedtls_camellia_setkey_enc+0xbfa>
 800569c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056a0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80056aa:	4613      	mov	r3, r2
 80056ac:	011b      	lsls	r3, r3, #4
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	f003 031f 	and.w	r3, r3, #31
 80056b4:	4099      	lsls	r1, r3
 80056b6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80056be:	6858      	ldr	r0, [r3, #4]
 80056c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80056c4:	4613      	mov	r3, r2
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	1a9b      	subs	r3, r3, r2
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	f1c3 0320 	rsb	r3, r3, #32
 80056d2:	fa20 f203 	lsr.w	r2, r0, r3
 80056d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	f107 0014 	add.w	r0, r7, #20
 80056e0:	4403      	add	r3, r0
 80056e2:	404a      	eors	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80056ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80056f4:	4613      	mov	r3, r2
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	f003 031f 	and.w	r3, r3, #31
 80056fe:	4099      	lsls	r1, r3
 8005700:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005704:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005708:	6898      	ldr	r0, [r3, #8]
 800570a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800570e:	4613      	mov	r3, r2
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	f003 031f 	and.w	r3, r3, #31
 8005718:	f1c3 0320 	rsb	r3, r3, #32
 800571c:	fa20 f203 	lsr.w	r2, r0, r3
 8005720:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	3304      	adds	r3, #4
 8005728:	f107 0014 	add.w	r0, r7, #20
 800572c:	4403      	add	r3, r0
 800572e:	404a      	eors	r2, r1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005736:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800573a:	6899      	ldr	r1, [r3, #8]
 800573c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005740:	4613      	mov	r3, r2
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	1a9b      	subs	r3, r3, r2
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	4099      	lsls	r1, r3
 800574c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005750:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005754:	68d8      	ldr	r0, [r3, #12]
 8005756:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800575a:	4613      	mov	r3, r2
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	1a9b      	subs	r3, r3, r2
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	f1c3 0320 	rsb	r3, r3, #32
 8005768:	fa20 f203 	lsr.w	r2, r0, r3
 800576c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	3308      	adds	r3, #8
 8005774:	f107 0014 	add.w	r0, r7, #20
 8005778:	4403      	add	r3, r0
 800577a:	404a      	eors	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8005782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005786:	68d9      	ldr	r1, [r3, #12]
 8005788:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800578c:	4613      	mov	r3, r2
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	f003 031f 	and.w	r3, r3, #31
 8005796:	4099      	lsls	r1, r3
 8005798:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800579c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	f1c3 0320 	rsb	r3, r3, #32
 80057b4:	fa20 f203 	lsr.w	r2, r0, r3
 80057b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	330c      	adds	r3, #12
 80057c0:	f107 0014 	add.w	r0, r7, #20
 80057c4:	4403      	add	r3, r0
 80057c6:	404a      	eors	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057ce:	3301      	adds	r3, #1
 80057d0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057d8:	2b04      	cmp	r3, #4
 80057da:	f67f af51 	bls.w	8005680 <mbedtls_camellia_setkey_enc+0xab0>
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80057e4:	e030      	b.n	8005848 <mbedtls_camellia_setkey_enc+0xc78>
 80057e6:	493e      	ldr	r1, [pc, #248]	@ (80058e0 <mbedtls_camellia_setkey_enc+0xd10>)
 80057e8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	18ca      	adds	r2, r1, r3
 80057f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80057fa:	4413      	add	r3, r2
 80057fc:	333c      	adds	r3, #60	@ 0x3c
 80057fe:	f993 3000 	ldrsb.w	r3, [r3]
 8005802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005806:	d01a      	beq.n	800583e <mbedtls_camellia_setkey_enc+0xc6e>
 8005808:	4935      	ldr	r1, [pc, #212]	@ (80058e0 <mbedtls_camellia_setkey_enc+0xd10>)
 800580a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	18ca      	adds	r2, r1, r3
 8005818:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800581c:	4413      	add	r3, r2
 800581e:	333c      	adds	r3, #60	@ 0x3c
 8005820:	f993 3000 	ldrsb.w	r3, [r3]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800582a:	4413      	add	r3, r2
 800582c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8005830:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8005834:	f8d7 1118 	ldr.w	r1, [r7, #280]	@ 0x118
 8005838:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8005842:	3301      	adds	r3, #1
 8005844:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005848:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800584c:	2b13      	cmp	r3, #19
 800584e:	d9ca      	bls.n	80057e6 <mbedtls_camellia_setkey_enc+0xc16>
    }

    /* Do transpositions */
    for( i = 0; i < 20; i++ ) {
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005856:	e036      	b.n	80058c6 <mbedtls_camellia_setkey_enc+0xcf6>
        if( transposes[idx][i] != -1 ) {
 8005858:	4922      	ldr	r1, [pc, #136]	@ (80058e4 <mbedtls_camellia_setkey_enc+0xd14>)
 800585a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	18ca      	adds	r2, r1, r3
 8005868:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800586c:	4413      	add	r3, r2
 800586e:	f993 3000 	ldrsb.w	r3, [r3]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d021      	beq.n	80058bc <mbedtls_camellia_setkey_enc+0xcec>
            RK[32 + 12 * idx + i] = RK[transposes[idx][i]];
 8005878:	491a      	ldr	r1, [pc, #104]	@ (80058e4 <mbedtls_camellia_setkey_enc+0xd14>)
 800587a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	18ca      	adds	r2, r1, r3
 8005888:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800588c:	4413      	add	r3, r2
 800588e:	f993 3000 	ldrsb.w	r3, [r3]
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8005898:	18d1      	adds	r1, r2, r3
 800589a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800589e:	4613      	mov	r3, r2
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	461a      	mov	r2, r3
 80058a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058ac:	4413      	add	r3, r2
 80058ae:	3320      	adds	r3, #32
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80058b6:	4413      	add	r3, r2
 80058b8:	680a      	ldr	r2, [r1, #0]
 80058ba:	601a      	str	r2, [r3, #0]
    for( i = 0; i < 20; i++ ) {
 80058bc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058c0:	3301      	adds	r3, #1
 80058c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80058c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80058ca:	2b13      	cmp	r3, #19
 80058cc:	d9c4      	bls.n	8005858 <mbedtls_camellia_setkey_enc+0xc88>
        }
    }

    return( 0 );
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	0800c344 	.word	0x0800c344
 80058e0:	0800c364 	.word	0x0800c364
 80058e4:	0800c404 	.word	0x0800c404

080058e8 <mbedtls_camellia_setkey_dec>:
 * Camellia key schedule (decryption)
 */
int mbedtls_camellia_setkey_dec( mbedtls_camellia_context *ctx,
                                 const unsigned char *key,
                                 unsigned int keybits )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b0ce      	sub	sp, #312	@ 0x138
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058f2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80058f6:	6018      	str	r0, [r3, #0]
 80058f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80058fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005900:	6019      	str	r1, [r3, #0]
 8005902:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005906:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800590a:	601a      	str	r2, [r3, #0]
    uint32_t *RK;
    uint32_t *SK;
    CAMELLIA_VALIDATE_RET( ctx != NULL );
    CAMELLIA_VALIDATE_RET( key != NULL );

    mbedtls_camellia_init( &cty );
 800590c:	f107 0310 	add.w	r3, r7, #16
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff f93d 	bl	8004b90 <mbedtls_camellia_init>

    /* Also checks keybits */
    if( ( ret = mbedtls_camellia_setkey_enc( &cty, key, keybits ) ) != 0 )
 8005916:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800591a:	f5a3 729a 	sub.w	r2, r3, #308	@ 0x134
 800591e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005922:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005926:	f107 0010 	add.w	r0, r7, #16
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	6819      	ldr	r1, [r3, #0]
 800592e:	f7ff f94f 	bl	8004bd0 <mbedtls_camellia_setkey_enc>
 8005932:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
 8005936:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 80c3 	bne.w	8005ac6 <mbedtls_camellia_setkey_dec+0x1de>
        goto exit;

    ctx->nr = cty.nr;
 8005940:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005944:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800594e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	601a      	str	r2, [r3, #0]
    idx = ( ctx->nr == 4 );
 8005956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800595a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b04      	cmp	r3, #4
 8005964:	bf0c      	ite	eq
 8005966:	2301      	moveq	r3, #1
 8005968:	2300      	movne	r3, #0
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    RK = ctx->rk;
 8005970:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005974:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3304      	adds	r3, #4
 800597c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    SK = cty.rk + 24 * 2 + 8 * idx * 2;
 8005980:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	3318      	adds	r3, #24
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	f107 0210 	add.w	r2, r7, #16
 800598e:	3204      	adds	r2, #4
 8005990:	4413      	add	r3, r2
 8005992:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    *RK++ = *SK++;
 8005996:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800599a:	1d13      	adds	r3, r2, #4
 800599c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80059a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059a4:	1d19      	adds	r1, r3, #4
 80059a6:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80059ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80059b2:	1d13      	adds	r3, r2, #4
 80059b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80059b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059bc:	1d19      	adds	r1, r3, #4
 80059be:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80059c2:	6812      	ldr	r2, [r2, #0]
 80059c4:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80059c6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80059ca:	1d13      	adds	r3, r2, #4
 80059cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80059d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059d4:	1d19      	adds	r1, r3, #4
 80059d6:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 80059de:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80059e2:	1d13      	adds	r3, r2, #4
 80059e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80059e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	601a      	str	r2, [r3, #0]

    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 80059f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	3316      	adds	r3, #22
 80059fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a06:	3b18      	subs	r3, #24
 8005a08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005a0c:	e021      	b.n	8005a52 <mbedtls_camellia_setkey_dec+0x16a>
    {
        *RK++ = *SK++;
 8005a0e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005a12:	1d13      	adds	r3, r2, #4
 8005a14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005a18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005a22:	6812      	ldr	r2, [r2, #0]
 8005a24:	601a      	str	r2, [r3, #0]
        *RK++ = *SK++;
 8005a26:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005a2a:	1d13      	adds	r3, r2, #4
 8005a2c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005a30:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a34:	1d19      	adds	r1, r3, #4
 8005a36:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	601a      	str	r2, [r3, #0]
    for( i = 22 + 8 * idx, SK -= 6; i > 0; i--, SK -= 4 )
 8005a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a42:	3b01      	subs	r3, #1
 8005a44:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a4c:	3b10      	subs	r3, #16
 8005a4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005a52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1d9      	bne.n	8005a0e <mbedtls_camellia_setkey_dec+0x126>
    }

    SK -= 2;
 8005a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005a5e:	3b08      	subs	r3, #8
 8005a60:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    *RK++ = *SK++;
 8005a64:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005a68:	1d13      	adds	r3, r2, #4
 8005a6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005a6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a72:	1d19      	adds	r1, r3, #4
 8005a74:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005a78:	6812      	ldr	r2, [r2, #0]
 8005a7a:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005a7c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005a80:	1d13      	adds	r3, r2, #4
 8005a82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005a86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005a8a:	1d19      	adds	r1, r3, #4
 8005a8c:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005a94:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005a98:	1d13      	adds	r3, r2, #4
 8005a9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005a9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005aa2:	1d19      	adds	r1, r3, #4
 8005aa4:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005aa8:	6812      	ldr	r2, [r2, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
    *RK++ = *SK++;
 8005aac:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8005ab0:	1d13      	adds	r3, r2, #4
 8005ab2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005ab6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005aba:	1d19      	adds	r1, r3, #4
 8005abc:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	601a      	str	r2, [r3, #0]
 8005ac4:	e000      	b.n	8005ac8 <mbedtls_camellia_setkey_dec+0x1e0>
        goto exit;
 8005ac6:	bf00      	nop

exit:
    mbedtls_camellia_free( &cty );
 8005ac8:	f107 0310 	add.w	r3, r7, #16
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff f86d 	bl	8004bac <mbedtls_camellia_free>

    return( ret );
 8005ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <mbedtls_camellia_crypt_ecb>:
 */
int mbedtls_camellia_crypt_ecb( mbedtls_camellia_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08a      	sub	sp, #40	@ 0x28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
    CAMELLIA_VALIDATE_RET( input  != NULL );
    CAMELLIA_VALIDATE_RET( output != NULL );

    ( (void) mode );

    NR = ctx->nr;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
    RK = ctx->rk;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	3304      	adds	r3, #4
 8005af8:	623b      	str	r3, [r7, #32]

    GET_UINT32_BE( X[0], input,  0 );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	061a      	lsls	r2, r3, #24
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3301      	adds	r3, #1
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	041b      	lsls	r3, r3, #16
 8005b08:	431a      	orrs	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	4313      	orrs	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	3203      	adds	r2, #3
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
    GET_UINT32_BE( X[1], input,  4 );
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3304      	adds	r3, #4
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	061a      	lsls	r2, r3, #24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	3305      	adds	r3, #5
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3306      	adds	r3, #6
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	3207      	adds	r2, #7
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
    GET_UINT32_BE( X[2], input,  8 );
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3308      	adds	r3, #8
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	061a      	lsls	r2, r3, #24
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3309      	adds	r3, #9
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	330a      	adds	r3, #10
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	320b      	adds	r2, #11
 8005b64:	7812      	ldrb	r2, [r2, #0]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
    GET_UINT32_BE( X[3], input, 12 );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	061a      	lsls	r2, r3, #24
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	330d      	adds	r3, #13
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	041b      	lsls	r3, r3, #16
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	330e      	adds	r3, #14
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	021b      	lsls	r3, r3, #8
 8005b84:	4313      	orrs	r3, r2
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	320f      	adds	r2, #15
 8005b8a:	7812      	ldrb	r2, [r2, #0]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61fb      	str	r3, [r7, #28]

    X[0] ^= *RK++;
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	1d1a      	adds	r2, r3, #4
 8005b94:	623a      	str	r2, [r7, #32]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	4053      	eors	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	1d1a      	adds	r2, r3, #4
 8005ba2:	623a      	str	r2, [r7, #32]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	4053      	eors	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]
    X[2] ^= *RK++;
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	623a      	str	r2, [r7, #32]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	4053      	eors	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	1d1a      	adds	r2, r3, #4
 8005bbe:	623a      	str	r2, [r7, #32]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4053      	eors	r3, r2
 8005bc6:	61fb      	str	r3, [r7, #28]

    while( NR ) {
 8005bc8:	e075      	b.n	8005cb6 <mbedtls_camellia_crypt_ecb+0x1d6>
        --NR;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	627b      	str	r3, [r7, #36]	@ 0x24
        camellia_feistel( X, RK, X + 2 );
 8005bd0:	f107 0310 	add.w	r3, r7, #16
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	f107 0010 	add.w	r0, r7, #16
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6a39      	ldr	r1, [r7, #32]
 8005bde:	f7fe ff5d 	bl	8004a9c <camellia_feistel>
        RK += 2;
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	3308      	adds	r3, #8
 8005be6:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 8005be8:	f107 0310 	add.w	r3, r7, #16
 8005bec:	3308      	adds	r3, #8
 8005bee:	f107 0210 	add.w	r2, r7, #16
 8005bf2:	6a39      	ldr	r1, [r7, #32]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe ff51 	bl	8004a9c <camellia_feistel>
        RK += 2;
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	3308      	adds	r3, #8
 8005bfe:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	3308      	adds	r3, #8
 8005c06:	f107 0010 	add.w	r0, r7, #16
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	6a39      	ldr	r1, [r7, #32]
 8005c0e:	f7fe ff45 	bl	8004a9c <camellia_feistel>
        RK += 2;
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	3308      	adds	r3, #8
 8005c16:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 8005c18:	f107 0310 	add.w	r3, r7, #16
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	f107 0210 	add.w	r2, r7, #16
 8005c22:	6a39      	ldr	r1, [r7, #32]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe ff39 	bl	8004a9c <camellia_feistel>
        RK += 2;
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	623b      	str	r3, [r7, #32]
        camellia_feistel( X, RK, X + 2 );
 8005c30:	f107 0310 	add.w	r3, r7, #16
 8005c34:	3308      	adds	r3, #8
 8005c36:	f107 0010 	add.w	r0, r7, #16
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6a39      	ldr	r1, [r7, #32]
 8005c3e:	f7fe ff2d 	bl	8004a9c <camellia_feistel>
        RK += 2;
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	3308      	adds	r3, #8
 8005c46:	623b      	str	r3, [r7, #32]
        camellia_feistel( X + 2, RK, X );
 8005c48:	f107 0310 	add.w	r3, r7, #16
 8005c4c:	3308      	adds	r3, #8
 8005c4e:	f107 0210 	add.w	r2, r7, #16
 8005c52:	6a39      	ldr	r1, [r7, #32]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fe ff21 	bl	8004a9c <camellia_feistel>
        RK += 2;
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	623b      	str	r3, [r7, #32]

        if( NR ) {
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d027      	beq.n	8005cb6 <mbedtls_camellia_crypt_ecb+0x1d6>
            FL(X[0], X[1], RK[0], RK[1]);
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4053      	eors	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	431a      	orrs	r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4053      	eors	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
            RK += 2;
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	623b      	str	r3, [r7, #32]
            FLInv(X[2], X[3], RK[0], RK[1]);
 8005c8e:	69fa      	ldr	r2, [r7, #28]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	3304      	adds	r3, #4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	4053      	eors	r3, r2
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4053      	eors	r3, r2
 8005cae:	61fb      	str	r3, [r7, #28]
            RK += 2;
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	3308      	adds	r3, #8
 8005cb4:	623b      	str	r3, [r7, #32]
    while( NR ) {
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d186      	bne.n	8005bca <mbedtls_camellia_crypt_ecb+0xea>
        }
    }

    X[2] ^= *RK++;
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	1d1a      	adds	r2, r3, #4
 8005cc0:	623a      	str	r2, [r7, #32]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	4053      	eors	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
    X[3] ^= *RK++;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	1d1a      	adds	r2, r3, #4
 8005cce:	623a      	str	r2, [r7, #32]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4053      	eors	r3, r2
 8005cd6:	61fb      	str	r3, [r7, #28]
    X[0] ^= *RK++;
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	1d1a      	adds	r2, r3, #4
 8005cdc:	623a      	str	r2, [r7, #32]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4053      	eors	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
    X[1] ^= *RK++;
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	1d1a      	adds	r2, r3, #4
 8005cea:	623a      	str	r2, [r7, #32]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4053      	eors	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

    PUT_UINT32_BE( X[2], output,  0 );
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	0e1b      	lsrs	r3, r3, #24
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	0c1a      	lsrs	r2, r3, #16
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	0a1a      	lsrs	r2, r3, #8
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	3302      	adds	r3, #2
 8005d12:	b2d2      	uxtb	r2, r2
 8005d14:	701a      	strb	r2, [r3, #0]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	3303      	adds	r3, #3
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[3], output,  4 );
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	0e1a      	lsrs	r2, r3, #24
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	3304      	adds	r3, #4
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	0c1a      	lsrs	r2, r3, #16
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	3305      	adds	r3, #5
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	0a1a      	lsrs	r2, r3, #8
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	3306      	adds	r3, #6
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	3307      	adds	r3, #7
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[0], output,  8 );
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	0e1a      	lsrs	r2, r3, #24
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	3308      	adds	r3, #8
 8005d56:	b2d2      	uxtb	r2, r2
 8005d58:	701a      	strb	r2, [r3, #0]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	0c1a      	lsrs	r2, r3, #16
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	3309      	adds	r3, #9
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	0a1a      	lsrs	r2, r3, #8
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	330a      	adds	r3, #10
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	330b      	adds	r3, #11
 8005d78:	b2d2      	uxtb	r2, r2
 8005d7a:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( X[1], output, 12 );
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	0e1a      	lsrs	r2, r3, #24
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	0c1a      	lsrs	r2, r3, #16
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	330d      	adds	r3, #13
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	0a1a      	lsrs	r2, r3, #8
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	330e      	adds	r3, #14
 8005d9c:	b2d2      	uxtb	r2, r2
 8005d9e:	701a      	strb	r2, [r3, #0]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	330f      	adds	r3, #15
 8005da6:	b2d2      	uxtb	r2, r2
 8005da8:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3728      	adds	r7, #40	@ 0x28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <mbedtls_camellia_crypt_cbc>:
                                int mode,
                                size_t length,
                                unsigned char iv[16],
                                const unsigned char *input,
                                unsigned char *output )
{
 8005db4:	b5b0      	push	{r4, r5, r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
 8005dc0:	603b      	str	r3, [r7, #0]
                           mode == MBEDTLS_CAMELLIA_DECRYPT );
    CAMELLIA_VALIDATE_RET( iv != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || input  != NULL );
    CAMELLIA_VALIDATE_RET( length == 0 || output != NULL );

    if( length % 16 )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <mbedtls_camellia_crypt_cbc+0x1e>
        return( MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH );
 8005dcc:	f06f 0325 	mvn.w	r3, #37	@ 0x25
 8005dd0:	e06d      	b.n	8005eae <mbedtls_camellia_crypt_cbc+0xfa>

    if( mode == MBEDTLS_CAMELLIA_DECRYPT )
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d166      	bne.n	8005ea6 <mbedtls_camellia_crypt_cbc+0xf2>
    {
        while( length > 0 )
 8005dd8:	e036      	b.n	8005e48 <mbedtls_camellia_crypt_cbc+0x94>
        {
            memcpy( temp, input, 16 );
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	f107 0414 	add.w	r4, r7, #20
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            mbedtls_camellia_crypt_ecb( ctx, mode, input, output );
 8005dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f7ff fe75 	bl	8005ae0 <mbedtls_camellia_crypt_ecb>

            for( i = 0; i < 16; i++ )
 8005df6:	2300      	movs	r3, #0
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfa:	e010      	b.n	8005e1e <mbedtls_camellia_crypt_cbc+0x6a>
                output[i] = (unsigned char)( output[i] ^ iv[i] );
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e00:	4413      	add	r3, r2
 8005e02:	7819      	ldrb	r1, [r3, #0]
 8005e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4413      	add	r3, r2
 8005e0a:	781a      	ldrb	r2, [r3, #0]
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e10:	4403      	add	r3, r0
 8005e12:	404a      	eors	r2, r1
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e20:	2b0f      	cmp	r3, #15
 8005e22:	ddeb      	ble.n	8005dfc <mbedtls_camellia_crypt_cbc+0x48>

            memcpy( iv, temp, 16 );
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	461d      	mov	r5, r3
 8005e28:	f107 0414 	add.w	r4, r7, #20
 8005e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e2e:	6028      	str	r0, [r5, #0]
 8005e30:	6069      	str	r1, [r5, #4]
 8005e32:	60aa      	str	r2, [r5, #8]
 8005e34:	60eb      	str	r3, [r5, #12]

            input  += 16;
 8005e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e38:	3310      	adds	r3, #16
 8005e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3e:	3310      	adds	r3, #16
 8005e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3b10      	subs	r3, #16
 8005e46:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1c5      	bne.n	8005dda <mbedtls_camellia_crypt_cbc+0x26>
 8005e4e:	e02d      	b.n	8005eac <mbedtls_camellia_crypt_cbc+0xf8>
    }
    else
    {
        while( length > 0 )
        {
            for( i = 0; i < 16; i++ )
 8005e50:	2300      	movs	r3, #0
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e54:	e010      	b.n	8005e78 <mbedtls_camellia_crypt_cbc+0xc4>
                output[i] = (unsigned char)( input[i] ^ iv[i] );
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e5a:	4413      	add	r3, r2
 8005e5c:	7819      	ldrb	r1, [r3, #0]
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	4413      	add	r3, r2
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e6a:	4403      	add	r3, r0
 8005e6c:	404a      	eors	r2, r1
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < 16; i++ )
 8005e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e74:	3301      	adds	r3, #1
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e7a:	2b0f      	cmp	r3, #15
 8005e7c:	ddeb      	ble.n	8005e56 <mbedtls_camellia_crypt_cbc+0xa2>

            mbedtls_camellia_crypt_ecb( ctx, mode, output, output );
 8005e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e82:	68b9      	ldr	r1, [r7, #8]
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f7ff fe2b 	bl	8005ae0 <mbedtls_camellia_crypt_ecb>
            memcpy( iv, output, 16 );
 8005e8a:	2210      	movs	r2, #16
 8005e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e8e:	6838      	ldr	r0, [r7, #0]
 8005e90:	f003 f9c9 	bl	8009226 <memcpy>

            input  += 16;
 8005e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e96:	3310      	adds	r3, #16
 8005e98:	63bb      	str	r3, [r7, #56]	@ 0x38
            output += 16;
 8005e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e9c:	3310      	adds	r3, #16
 8005e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            length -= 16;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3b10      	subs	r3, #16
 8005ea4:	607b      	str	r3, [r7, #4]
        while( length > 0 )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1d1      	bne.n	8005e50 <mbedtls_camellia_crypt_cbc+0x9c>
        }
    }

    return( 0 );
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3728      	adds	r7, #40	@ 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bdb0      	pop	{r4, r5, r7, pc}

08005eb6 <chacha20_quarter_round>:
static inline void chacha20_quarter_round( uint32_t state[16],
                                           size_t a,
                                           size_t b,
                                           size_t c,
                                           size_t d )
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	603b      	str	r3, [r7, #0]
    /* a += b; d ^= a; d <<<= 16; */
    state[a] += state[b];
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	6819      	ldr	r1, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	4403      	add	r3, r0
 8005ee0:	440a      	add	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	4403      	add	r3, r0
 8005f00:	404a      	eors	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 16 );
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	440b      	add	r3, r1
 8005f16:	ea4f 4232 	mov.w	r2, r2, ror #16
 8005f1a:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 12 */
    state[c] += state[d];
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	6819      	ldr	r1, [r3, #0]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	4403      	add	r3, r0
 8005f38:	440a      	add	r2, r1
 8005f3a:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	4403      	add	r3, r0
 8005f58:	404a      	eors	r2, r1
 8005f5a:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 12 );
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	68f9      	ldr	r1, [r7, #12]
 8005f6c:	440b      	add	r3, r1
 8005f6e:	ea4f 5232 	mov.w	r2, r2, ror #20
 8005f72:	601a      	str	r2, [r3, #0]

    /* a += b; d ^= a; d <<<= 8; */
    state[a] += state[b];
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	6819      	ldr	r1, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4413      	add	r3, r2
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	4403      	add	r3, r0
 8005f90:	440a      	add	r2, r1
 8005f92:	601a      	str	r2, [r3, #0]
    state[d] ^= state[a];
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	4403      	add	r3, r0
 8005fb0:	404a      	eors	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]
    state[d] = ROTL32( state[d], 8 );
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	440b      	add	r3, r1
 8005fc6:	ea4f 6232 	mov.w	r2, r2, ror #24
 8005fca:	601a      	str	r2, [r3, #0]

    /* c += d; b ^= c; b <<<= 7; */
    state[c] += state[d];
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	6819      	ldr	r1, [r3, #0]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	4403      	add	r3, r0
 8005fe8:	440a      	add	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
    state[b] ^= state[c];
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	6819      	ldr	r1, [r3, #0]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	4403      	add	r3, r0
 8006008:	404a      	eors	r2, r1
 800600a:	601a      	str	r2, [r3, #0]
    state[b] = ROTL32( state[b], 7 );
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	68f9      	ldr	r1, [r7, #12]
 800601c:	440b      	add	r3, r1
 800601e:	ea4f 6272 	mov.w	r2, r2, ror #25
 8006022:	601a      	str	r2, [r3, #0]
}
 8006024:	bf00      	nop
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <chacha20_inner_block>:
 *                  diagonal round.
 *
 * \param state     The ChaCha20 state to update.
 */
static void chacha20_inner_block( uint32_t state[16] )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af02      	add	r7, sp, #8
 8006036:	6078      	str	r0, [r7, #4]
    chacha20_quarter_round( state, 0, 4, 8,  12 );
 8006038:	230c      	movs	r3, #12
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2308      	movs	r3, #8
 800603e:	2204      	movs	r2, #4
 8006040:	2100      	movs	r1, #0
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff ff37 	bl	8005eb6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 5, 9,  13 );
 8006048:	230d      	movs	r3, #13
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2309      	movs	r3, #9
 800604e:	2205      	movs	r2, #5
 8006050:	2101      	movs	r1, #1
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ff2f 	bl	8005eb6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 6, 10, 14 );
 8006058:	230e      	movs	r3, #14
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	230a      	movs	r3, #10
 800605e:	2206      	movs	r2, #6
 8006060:	2102      	movs	r1, #2
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ff27 	bl	8005eb6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 7, 11, 15 );
 8006068:	230f      	movs	r3, #15
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	230b      	movs	r3, #11
 800606e:	2207      	movs	r2, #7
 8006070:	2103      	movs	r1, #3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff ff1f 	bl	8005eb6 <chacha20_quarter_round>

    chacha20_quarter_round( state, 0, 5, 10, 15 );
 8006078:	230f      	movs	r3, #15
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	230a      	movs	r3, #10
 800607e:	2205      	movs	r2, #5
 8006080:	2100      	movs	r1, #0
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f7ff ff17 	bl	8005eb6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 1, 6, 11, 12 );
 8006088:	230c      	movs	r3, #12
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	230b      	movs	r3, #11
 800608e:	2206      	movs	r2, #6
 8006090:	2101      	movs	r1, #1
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ff0f 	bl	8005eb6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 2, 7, 8,  13 );
 8006098:	230d      	movs	r3, #13
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2308      	movs	r3, #8
 800609e:	2207      	movs	r2, #7
 80060a0:	2102      	movs	r1, #2
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ff07 	bl	8005eb6 <chacha20_quarter_round>
    chacha20_quarter_round( state, 3, 4, 9,  14 );
 80060a8:	230e      	movs	r3, #14
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2309      	movs	r3, #9
 80060ae:	2204      	movs	r2, #4
 80060b0:	2103      	movs	r1, #3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff feff 	bl	8005eb6 <chacha20_quarter_round>
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <chacha20_block>:
 * \param initial_state The initial ChaCha20 state (key, nonce, counter).
 * \param keystream     Generated keystream bytes are written to this buffer.
 */
static void chacha20_block( const uint32_t initial_state[16],
                            unsigned char keystream[64] )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b094      	sub	sp, #80	@ 0x50
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
    uint32_t working_state[16];
    size_t i;

    memcpy( working_state,
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	2240      	movs	r2, #64	@ 0x40
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f003 f8a7 	bl	8009226 <memcpy>
            initial_state,
            CHACHA20_BLOCK_SIZE_BYTES );

    for( i = 0U; i < 10U; i++ )
 80060d8:	2300      	movs	r3, #0
 80060da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060dc:	e007      	b.n	80060ee <chacha20_block+0x2e>
        chacha20_inner_block( working_state );
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff ffa4 	bl	8006030 <chacha20_inner_block>
    for( i = 0U; i < 10U; i++ )
 80060e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060ea:	3301      	adds	r3, #1
 80060ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f0:	2b09      	cmp	r3, #9
 80060f2:	d9f4      	bls.n	80060de <chacha20_block+0x1e>

    working_state[ 0] += initial_state[ 0];
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4413      	add	r3, r2
 80060fc:	60bb      	str	r3, [r7, #8]
    working_state[ 1] += initial_state[ 1];
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3304      	adds	r3, #4
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4413      	add	r3, r2
 8006108:	60fb      	str	r3, [r7, #12]
    working_state[ 2] += initial_state[ 2];
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3308      	adds	r3, #8
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4413      	add	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
    working_state[ 3] += initial_state[ 3];
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	330c      	adds	r3, #12
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4413      	add	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
    working_state[ 4] += initial_state[ 4];
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3310      	adds	r3, #16
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4413      	add	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
    working_state[ 5] += initial_state[ 5];
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3314      	adds	r3, #20
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4413      	add	r3, r2
 8006138:	61fb      	str	r3, [r7, #28]
    working_state[ 6] += initial_state[ 6];
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	3318      	adds	r3, #24
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4413      	add	r3, r2
 8006144:	623b      	str	r3, [r7, #32]
    working_state[ 7] += initial_state[ 7];
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	331c      	adds	r3, #28
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4413      	add	r3, r2
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
    working_state[ 8] += initial_state[ 8];
 8006152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3320      	adds	r3, #32
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4413      	add	r3, r2
 800615c:	62bb      	str	r3, [r7, #40]	@ 0x28
    working_state[ 9] += initial_state[ 9];
 800615e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3324      	adds	r3, #36	@ 0x24
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4413      	add	r3, r2
 8006168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    working_state[10] += initial_state[10];
 800616a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3328      	adds	r3, #40	@ 0x28
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4413      	add	r3, r2
 8006174:	633b      	str	r3, [r7, #48]	@ 0x30
    working_state[11] += initial_state[11];
 8006176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	332c      	adds	r3, #44	@ 0x2c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4413      	add	r3, r2
 8006180:	637b      	str	r3, [r7, #52]	@ 0x34
    working_state[12] += initial_state[12];
 8006182:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	3330      	adds	r3, #48	@ 0x30
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4413      	add	r3, r2
 800618c:	63bb      	str	r3, [r7, #56]	@ 0x38
    working_state[13] += initial_state[13];
 800618e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3334      	adds	r3, #52	@ 0x34
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4413      	add	r3, r2
 8006198:	63fb      	str	r3, [r7, #60]	@ 0x3c
    working_state[14] += initial_state[14];
 800619a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3338      	adds	r3, #56	@ 0x38
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4413      	add	r3, r2
 80061a4:	643b      	str	r3, [r7, #64]	@ 0x40
    working_state[15] += initial_state[15];
 80061a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	333c      	adds	r3, #60	@ 0x3c
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4413      	add	r3, r2
 80061b0:	647b      	str	r3, [r7, #68]	@ 0x44

    for( i = 0U; i < 16; i++ )
 80061b2:	2300      	movs	r3, #0
 80061b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b6:	e037      	b.n	8006228 <chacha20_block+0x168>
    {
        size_t offset = i * 4U;
 80061b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	64bb      	str	r3, [r7, #72]	@ 0x48

        keystream[offset     ] = (unsigned char)( working_state[i]       );
 80061be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	3350      	adds	r3, #80	@ 0x50
 80061c4:	443b      	add	r3, r7
 80061c6:	f853 1c48 	ldr.w	r1, [r3, #-72]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061ce:	4413      	add	r3, r2
 80061d0:	b2ca      	uxtb	r2, r1
 80061d2:	701a      	strb	r2, [r3, #0]
        keystream[offset + 1U] = (unsigned char)( working_state[i] >>  8 );
 80061d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	3350      	adds	r3, #80	@ 0x50
 80061da:	443b      	add	r3, r7
 80061dc:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80061e0:	0a19      	lsrs	r1, r3, #8
 80061e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061e4:	3301      	adds	r3, #1
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	4413      	add	r3, r2
 80061ea:	b2ca      	uxtb	r2, r1
 80061ec:	701a      	strb	r2, [r3, #0]
        keystream[offset + 2U] = (unsigned char)( working_state[i] >> 16 );
 80061ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	3350      	adds	r3, #80	@ 0x50
 80061f4:	443b      	add	r3, r7
 80061f6:	f853 3c48 	ldr.w	r3, [r3, #-72]
 80061fa:	0c19      	lsrs	r1, r3, #16
 80061fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061fe:	3302      	adds	r3, #2
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	4413      	add	r3, r2
 8006204:	b2ca      	uxtb	r2, r1
 8006206:	701a      	strb	r2, [r3, #0]
        keystream[offset + 3U] = (unsigned char)( working_state[i] >> 24 );
 8006208:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	3350      	adds	r3, #80	@ 0x50
 800620e:	443b      	add	r3, r7
 8006210:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8006214:	0e19      	lsrs	r1, r3, #24
 8006216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006218:	3303      	adds	r3, #3
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	4413      	add	r3, r2
 800621e:	b2ca      	uxtb	r2, r1
 8006220:	701a      	strb	r2, [r3, #0]
    for( i = 0U; i < 16; i++ )
 8006222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006224:	3301      	adds	r3, #1
 8006226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800622a:	2b0f      	cmp	r3, #15
 800622c:	d9c4      	bls.n	80061b8 <chacha20_block+0xf8>
    }

    mbedtls_platform_zeroize( working_state, sizeof( working_state ) );
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	2140      	movs	r1, #64	@ 0x40
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fff5 	bl	8008224 <mbedtls_platform_zeroize>
}
 800623a:	bf00      	nop
 800623c:	3750      	adds	r7, #80	@ 0x50
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <mbedtls_chacha20_init>:

void mbedtls_chacha20_init( mbedtls_chacha20_context *ctx )
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b082      	sub	sp, #8
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    CHACHA20_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx->state, sizeof( ctx->state ) );
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2140      	movs	r1, #64	@ 0x40
 800624e:	4618      	mov	r0, r3
 8006250:	f001 ffe8 	bl	8008224 <mbedtls_platform_zeroize>
    mbedtls_platform_zeroize( ctx->keystream8, sizeof( ctx->keystream8 ) );
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	3340      	adds	r3, #64	@ 0x40
 8006258:	2140      	movs	r1, #64	@ 0x40
 800625a:	4618      	mov	r0, r3
 800625c:	f001 ffe2 	bl	8008224 <mbedtls_platform_zeroize>

    /* Initially, there's no keystream bytes available */
    ctx->keystream_bytes_used = CHACHA20_BLOCK_SIZE_BYTES;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2240      	movs	r2, #64	@ 0x40
 8006264:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <mbedtls_chacha20_free>:

void mbedtls_chacha20_free( mbedtls_chacha20_context *ctx )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
    if( ctx != NULL )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <mbedtls_chacha20_free+0x16>
    {
        mbedtls_platform_zeroize( ctx, sizeof( mbedtls_chacha20_context ) );
 800627e:	2184      	movs	r1, #132	@ 0x84
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f001 ffcf 	bl	8008224 <mbedtls_platform_zeroize>
    }
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <mbedtls_chacha20_setkey>:

int mbedtls_chacha20_setkey( mbedtls_chacha20_context *ctx,
                            const unsigned char key[32] )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( key != NULL );

    /* ChaCha20 constants - the string "expand 32-byte k" */
    ctx->state[0] = 0x61707865;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a5c      	ldr	r2, [pc, #368]	@ (8006410 <mbedtls_chacha20_setkey+0x180>)
 800629e:	601a      	str	r2, [r3, #0]
    ctx->state[1] = 0x3320646e;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a5c      	ldr	r2, [pc, #368]	@ (8006414 <mbedtls_chacha20_setkey+0x184>)
 80062a4:	605a      	str	r2, [r3, #4]
    ctx->state[2] = 0x79622d32;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a5b      	ldr	r2, [pc, #364]	@ (8006418 <mbedtls_chacha20_setkey+0x188>)
 80062aa:	609a      	str	r2, [r3, #8]
    ctx->state[3] = 0x6b206574;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a5b      	ldr	r2, [pc, #364]	@ (800641c <mbedtls_chacha20_setkey+0x18c>)
 80062b0:	60da      	str	r2, [r3, #12]

    /* Set key */
    ctx->state[4]  = BYTES_TO_U32_LE( key, 0 );
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	021b      	lsls	r3, r3, #8
 80062c0:	431a      	orrs	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	3302      	adds	r3, #2
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	041b      	lsls	r3, r3, #16
 80062ca:	431a      	orrs	r2, r3
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	3303      	adds	r3, #3
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	061b      	lsls	r3, r3, #24
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	611a      	str	r2, [r3, #16]
    ctx->state[5]  = BYTES_TO_U32_LE( key, 4 );
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	3305      	adds	r3, #5
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	021b      	lsls	r3, r3, #8
 80062ea:	431a      	orrs	r2, r3
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	3306      	adds	r3, #6
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	041b      	lsls	r3, r3, #16
 80062f4:	431a      	orrs	r2, r3
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	3307      	adds	r3, #7
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	061b      	lsls	r3, r3, #24
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	615a      	str	r2, [r3, #20]
    ctx->state[6]  = BYTES_TO_U32_LE( key, 8 );
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	3309      	adds	r3, #9
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	431a      	orrs	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	330a      	adds	r3, #10
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	041b      	lsls	r3, r3, #16
 800631e:	431a      	orrs	r2, r3
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	330b      	adds	r3, #11
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	061b      	lsls	r3, r3, #24
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	619a      	str	r2, [r3, #24]
    ctx->state[7]  = BYTES_TO_U32_LE( key, 12 );
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	330d      	adds	r3, #13
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	431a      	orrs	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	330e      	adds	r3, #14
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	041b      	lsls	r3, r3, #16
 8006348:	431a      	orrs	r2, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	330f      	adds	r3, #15
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	061b      	lsls	r3, r3, #24
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	61da      	str	r2, [r3, #28]
    ctx->state[8]  = BYTES_TO_U32_LE( key, 16 );
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	3310      	adds	r3, #16
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	3311      	adds	r3, #17
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	021b      	lsls	r3, r3, #8
 8006368:	431a      	orrs	r2, r3
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	3312      	adds	r3, #18
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	041b      	lsls	r3, r3, #16
 8006372:	431a      	orrs	r2, r3
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	3313      	adds	r3, #19
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	621a      	str	r2, [r3, #32]
    ctx->state[9]  = BYTES_TO_U32_LE( key, 20 );
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	3314      	adds	r3, #20
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	3315      	adds	r3, #21
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	431a      	orrs	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	3316      	adds	r3, #22
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	431a      	orrs	r2, r3
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	3317      	adds	r3, #23
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	061b      	lsls	r3, r3, #24
 80063a6:	431a      	orrs	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->state[10] = BYTES_TO_U32_LE( key, 24 );
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	3318      	adds	r3, #24
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	3319      	adds	r3, #25
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	431a      	orrs	r2, r3
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	331a      	adds	r3, #26
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	041b      	lsls	r3, r3, #16
 80063c6:	431a      	orrs	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	331b      	adds	r3, #27
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	061b      	lsls	r3, r3, #24
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->state[11] = BYTES_TO_U32_LE( key, 28 );
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	331c      	adds	r3, #28
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	331d      	adds	r3, #29
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	431a      	orrs	r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	331e      	adds	r3, #30
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	431a      	orrs	r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	331f      	adds	r3, #31
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	061b      	lsls	r3, r3, #24
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    return( 0 );
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	61707865 	.word	0x61707865
 8006414:	3320646e 	.word	0x3320646e
 8006418:	79622d32 	.word	0x79622d32
 800641c:	6b206574 	.word	0x6b206574

08006420 <mbedtls_chacha20_update>:

int mbedtls_chacha20_update( mbedtls_chacha20_context *ctx,
                              size_t size,
                              const unsigned char *input,
                              unsigned char *output )
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
    size_t offset = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
    CHACHA20_VALIDATE_RET( ctx != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || input  != NULL );
    CHACHA20_VALIDATE_RET( size == 0 || output != NULL );

    /* Use leftover keystream bytes, if available */
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8006432:	e01d      	b.n	8006470 <mbedtls_chacha20_update+0x50>
    {
        output[offset] = input[offset]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	4413      	add	r3, r2
 800643a:	7819      	ldrb	r1, [r3, #0]
                       ^ ctx->keystream8[ctx->keystream_bytes_used];
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	4413      	add	r3, r2
 8006446:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
        output[offset] = input[offset]
 800644a:	6838      	ldr	r0, [r7, #0]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	4403      	add	r3, r0
 8006450:	404a      	eors	r2, r1
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

        ctx->keystream_bytes_used++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        offset++;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	3301      	adds	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
        size--;
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	3b01      	subs	r3, #1
 800646e:	60bb      	str	r3, [r7, #8]
    while( size > 0U && ctx->keystream_bytes_used < CHACHA20_BLOCK_SIZE_BYTES )
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2b00      	cmp	r3, #0
 8006474:	f000 80cf 	beq.w	8006616 <mbedtls_chacha20_update+0x1f6>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006480:	d9d8      	bls.n	8006434 <mbedtls_chacha20_update+0x14>
    }

    /* Process full blocks */
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 8006482:	e0c8      	b.n	8006616 <mbedtls_chacha20_update+0x1f6>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3340      	adds	r3, #64	@ 0x40
 800648a:	4619      	mov	r1, r3
 800648c:	4610      	mov	r0, r2
 800648e:	f7ff fe17 	bl	80060c0 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30

        for( i = 0U; i < 64U; i += 8U )
 800649c:	2300      	movs	r3, #0
 800649e:	613b      	str	r3, [r7, #16]
 80064a0:	e0af      	b.n	8006602 <mbedtls_chacha20_update+0x1e2>
        {
            output[offset + i  ] = input[offset + i  ] ^ ctx->keystream8[i  ];
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4413      	add	r3, r2
 80064ac:	7819      	ldrb	r1, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	4413      	add	r3, r2
 80064b4:	3340      	adds	r3, #64	@ 0x40
 80064b6:	781a      	ldrb	r2, [r3, #0]
 80064b8:	6978      	ldr	r0, [r7, #20]
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	4403      	add	r3, r0
 80064be:	6838      	ldr	r0, [r7, #0]
 80064c0:	4403      	add	r3, r0
 80064c2:	404a      	eors	r2, r1
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
            output[offset + i+1] = input[offset + i+1] ^ ctx->keystream8[i+1];
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	3301      	adds	r3, #1
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4413      	add	r3, r2
 80064d4:	7819      	ldrb	r1, [r3, #0]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	3301      	adds	r3, #1
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4413      	add	r3, r2
 80064de:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4403      	add	r3, r0
 80064e8:	3301      	adds	r3, #1
 80064ea:	6838      	ldr	r0, [r7, #0]
 80064ec:	4403      	add	r3, r0
 80064ee:	404a      	eors	r2, r1
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
            output[offset + i+2] = input[offset + i+2] ^ ctx->keystream8[i+2];
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	4413      	add	r3, r2
 80064fa:	3302      	adds	r3, #2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	7819      	ldrb	r1, [r3, #0]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	3302      	adds	r3, #2
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	4403      	add	r3, r0
 8006514:	3302      	adds	r3, #2
 8006516:	6838      	ldr	r0, [r7, #0]
 8006518:	4403      	add	r3, r0
 800651a:	404a      	eors	r2, r1
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
            output[offset + i+3] = input[offset + i+3] ^ ctx->keystream8[i+3];
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	3303      	adds	r3, #3
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	4413      	add	r3, r2
 800652c:	7819      	ldrb	r1, [r3, #0]
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	3303      	adds	r3, #3
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4413      	add	r3, r2
 8006536:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800653a:	6978      	ldr	r0, [r7, #20]
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	4403      	add	r3, r0
 8006540:	3303      	adds	r3, #3
 8006542:	6838      	ldr	r0, [r7, #0]
 8006544:	4403      	add	r3, r0
 8006546:	404a      	eors	r2, r1
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	701a      	strb	r2, [r3, #0]
            output[offset + i+4] = input[offset + i+4] ^ ctx->keystream8[i+4];
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4413      	add	r3, r2
 8006552:	3304      	adds	r3, #4
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4413      	add	r3, r2
 8006558:	7819      	ldrb	r1, [r3, #0]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3304      	adds	r3, #4
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	4413      	add	r3, r2
 8006562:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006566:	6978      	ldr	r0, [r7, #20]
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	4403      	add	r3, r0
 800656c:	3304      	adds	r3, #4
 800656e:	6838      	ldr	r0, [r7, #0]
 8006570:	4403      	add	r3, r0
 8006572:	404a      	eors	r2, r1
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
            output[offset + i+5] = input[offset + i+5] ^ ctx->keystream8[i+5];
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	3305      	adds	r3, #5
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	7819      	ldrb	r1, [r3, #0]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	3305      	adds	r3, #5
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	4413      	add	r3, r2
 800658e:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8006592:	6978      	ldr	r0, [r7, #20]
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	4403      	add	r3, r0
 8006598:	3305      	adds	r3, #5
 800659a:	6838      	ldr	r0, [r7, #0]
 800659c:	4403      	add	r3, r0
 800659e:	404a      	eors	r2, r1
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
            output[offset + i+6] = input[offset + i+6] ^ ctx->keystream8[i+6];
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4413      	add	r3, r2
 80065aa:	3306      	adds	r3, #6
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	7819      	ldrb	r1, [r3, #0]
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	3306      	adds	r3, #6
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80065be:	6978      	ldr	r0, [r7, #20]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	4403      	add	r3, r0
 80065c4:	3306      	adds	r3, #6
 80065c6:	6838      	ldr	r0, [r7, #0]
 80065c8:	4403      	add	r3, r0
 80065ca:	404a      	eors	r2, r1
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	701a      	strb	r2, [r3, #0]
            output[offset + i+7] = input[offset + i+7] ^ ctx->keystream8[i+7];
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4413      	add	r3, r2
 80065d6:	3307      	adds	r3, #7
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	4413      	add	r3, r2
 80065dc:	7819      	ldrb	r1, [r3, #0]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	3307      	adds	r3, #7
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80065ea:	6978      	ldr	r0, [r7, #20]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	4403      	add	r3, r0
 80065f0:	3307      	adds	r3, #7
 80065f2:	6838      	ldr	r0, [r7, #0]
 80065f4:	4403      	add	r3, r0
 80065f6:	404a      	eors	r2, r1
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < 64U; i += 8U )
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	3308      	adds	r3, #8
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b3f      	cmp	r3, #63	@ 0x3f
 8006606:	f67f af4c 	bls.w	80064a2 <mbedtls_chacha20_update+0x82>
        }

        offset += CHACHA20_BLOCK_SIZE_BYTES;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	3340      	adds	r3, #64	@ 0x40
 800660e:	617b      	str	r3, [r7, #20]
        size   -= CHACHA20_BLOCK_SIZE_BYTES;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	3b40      	subs	r3, #64	@ 0x40
 8006614:	60bb      	str	r3, [r7, #8]
    while( size >= CHACHA20_BLOCK_SIZE_BYTES )
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	2b3f      	cmp	r3, #63	@ 0x3f
 800661a:	f63f af33 	bhi.w	8006484 <mbedtls_chacha20_update+0x64>
    }

    /* Last (partial) block */
    if( size > 0U )
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02c      	beq.n	800667e <mbedtls_chacha20_update+0x25e>
    {
        /* Generate new keystream block and increment counter */
        chacha20_block( ctx->state, ctx->keystream8 );
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3340      	adds	r3, #64	@ 0x40
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7ff fd47 	bl	80060c0 <chacha20_block>
        ctx->state[CHACHA20_CTR_INDEX]++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006636:	1c5a      	adds	r2, r3, #1
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30

        for( i = 0U; i < size; i++)
 800663c:	2300      	movs	r3, #0
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	e015      	b.n	800666e <mbedtls_chacha20_update+0x24e>
        {
            output[offset + i] = input[offset + i] ^ ctx->keystream8[i];
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4413      	add	r3, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4413      	add	r3, r2
 800664c:	7819      	ldrb	r1, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4413      	add	r3, r2
 8006654:	3340      	adds	r3, #64	@ 0x40
 8006656:	781a      	ldrb	r2, [r3, #0]
 8006658:	6978      	ldr	r0, [r7, #20]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4403      	add	r3, r0
 800665e:	6838      	ldr	r0, [r7, #0]
 8006660:	4403      	add	r3, r0
 8006662:	404a      	eors	r2, r1
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
        for( i = 0U; i < size; i++)
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	3301      	adds	r3, #1
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	d3e5      	bcc.n	8006642 <mbedtls_chacha20_update+0x222>
        }

        ctx->keystream_bytes_used = size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    }

    return( 0 );
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <chachapoly_pad_aad>:
 * \brief           Adds nul bytes to pad the AAD for Poly1305.
 *
 * \param ctx       The ChaCha20-Poly1305 context.
 */
static int chachapoly_pad_aad( mbedtls_chachapoly_context *ctx )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
    uint32_t partial_block_len = (uint32_t) ( ctx->aad_len % 16U );
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	@ 0xd0
 8006696:	4613      	mov	r3, r2
 8006698:	f003 030f 	and.w	r3, r3, #15
 800669c:	61fb      	str	r3, [r7, #28]
    unsigned char zeroes[15];

    if( partial_block_len == 0U )
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d101      	bne.n	80066a8 <chachapoly_pad_aad+0x20>
        return( 0 );
 80066a4:	2300      	movs	r3, #0
 80066a6:	e012      	b.n	80066ce <chachapoly_pad_aad+0x46>

    memset( zeroes, 0, sizeof( zeroes ) );
 80066a8:	f107 030c 	add.w	r3, r7, #12
 80066ac:	220f      	movs	r2, #15
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f002 fd2d 	bl	8009110 <memset>

    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f103 0084 	add.w	r0, r3, #132	@ 0x84
                                     zeroes,
                                     16U - partial_block_len ) );
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f1c3 0210 	rsb	r2, r3, #16
    return( mbedtls_poly1305_update( &ctx->poly1305_ctx,
 80066c2:	f107 030c 	add.w	r3, r7, #12
 80066c6:	4619      	mov	r1, r3
 80066c8:	f002 fa2c 	bl	8008b24 <mbedtls_poly1305_update>
 80066cc:	4603      	mov	r3, r0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <mbedtls_chachapoly_init>:
                                     zeroes,
                                     16U - partial_block_len ) );
}

void mbedtls_chachapoly_init( mbedtls_chachapoly_context *ctx )
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
    CHACHAPOLY_VALIDATE( ctx != NULL );

    mbedtls_chacha20_init( &ctx->chacha20_ctx );
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fdae 	bl	8006242 <mbedtls_chacha20_init>
    mbedtls_poly1305_init( &ctx->poly1305_ctx );
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3384      	adds	r3, #132	@ 0x84
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 f9fe 	bl	8008aec <mbedtls_poly1305_init>
    ctx->aad_len        = 0U;
 80066f0:	6879      	ldr	r1, [r7, #4]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    ctx->ciphertext_len = 0U;
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
}
 800671c:	bf00      	nop
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <mbedtls_chachapoly_free>:

void mbedtls_chachapoly_free( mbedtls_chachapoly_context *ctx )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d01f      	beq.n	8006772 <mbedtls_chachapoly_free+0x4e>
        return;

    mbedtls_chacha20_free( &ctx->chacha20_ctx );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fd9b 	bl	8006270 <mbedtls_chacha20_free>
    mbedtls_poly1305_free( &ctx->poly1305_ctx );
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	3384      	adds	r3, #132	@ 0x84
 800673e:	4618      	mov	r0, r3
 8006740:	f002 f9e0 	bl	8008b04 <mbedtls_poly1305_free>
    ctx->aad_len        = 0U;
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	f04f 0200 	mov.w	r2, #0
 800674a:	f04f 0300 	mov.w	r3, #0
 800674e:	e9c1 2334 	strd	r2, r3, [r1, #208]	@ 0xd0
    ctx->ciphertext_len = 0U;
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	e9c1 2336 	strd	r2, r3, [r1, #216]	@ 0xd8
    ctx->state          = CHACHAPOLY_STATE_INIT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    ctx->mode           = MBEDTLS_CHACHAPOLY_ENCRYPT;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 20e4 	strb.w	r2, [r3, #228]	@ 0xe4
 8006770:	e000      	b.n	8006774 <mbedtls_chachapoly_free+0x50>
        return;
 8006772:	bf00      	nop
}
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <mbedtls_chachapoly_setkey>:

int mbedtls_chachapoly_setkey( mbedtls_chachapoly_context *ctx,
                               const unsigned char key[32] )
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( key != NULL );

    ret = mbedtls_chacha20_setkey( &ctx->chacha20_ctx, key );
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fd81 	bl	8006290 <mbedtls_chacha20_setkey>
 800678e:	60f8      	str	r0, [r7, #12]

    return( ret );
 8006790:	68fb      	ldr	r3, [r7, #12]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <mbedtls_chachapoly_update>:

int mbedtls_chachapoly_update( mbedtls_chachapoly_context *ctx,
                               size_t len,
                               const unsigned char *input,
                               unsigned char *output )
{
 800679a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
    int ret;
    CHACHAPOLY_VALIDATE_RET( ctx != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || input != NULL );
    CHACHAPOLY_VALIDATE_RET( len == 0 || output != NULL );

    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d007      	beq.n	80067c4 <mbedtls_chachapoly_update+0x2a>
        ( ctx->state != CHACHAPOLY_STATE_CIPHERTEXT ) )
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    if( ( ctx->state != CHACHAPOLY_STATE_AAD ) &&
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d002      	beq.n	80067c4 <mbedtls_chachapoly_update+0x2a>
    {
        return( MBEDTLS_ERR_CHACHAPOLY_BAD_STATE );
 80067be:	f06f 0353 	mvn.w	r3, #83	@ 0x53
 80067c2:	e057      	b.n	8006874 <mbedtls_chachapoly_update+0xda>
    }

    if( ctx->state == CHACHAPOLY_STATE_AAD )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10c      	bne.n	80067e8 <mbedtls_chachapoly_update+0x4e>
    {
        ctx->state = CHACHAPOLY_STATE_CIPHERTEXT;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

        ret = chachapoly_pad_aad( ctx );
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff ff56 	bl	8006688 <chachapoly_pad_aad>
 80067dc:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <mbedtls_chachapoly_update+0x4e>
            return( ret );
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	e045      	b.n	8006874 <mbedtls_chachapoly_update+0xda>
    }

    ctx->ciphertext_len += len;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	e9d3 2336 	ldrd	r2, r3, [r3, #216]	@ 0xd8
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	2000      	movs	r0, #0
 80067f2:	460c      	mov	r4, r1
 80067f4:	4605      	mov	r5, r0
 80067f6:	eb12 0804 	adds.w	r8, r2, r4
 80067fa:	eb43 0905 	adc.w	r9, r3, r5
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	e9c3 8936 	strd	r8, r9, [r3, #216]	@ 0xd8

    if( ctx->mode == MBEDTLS_CHACHAPOLY_ENCRYPT )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f893 30e4 	ldrb.w	r3, [r3, #228]	@ 0xe4
 800680a:	2b00      	cmp	r3, #0
 800680c:	d118      	bne.n	8006840 <mbedtls_chachapoly_update+0xa6>
    {
        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	68b9      	ldr	r1, [r7, #8]
 8006816:	f7ff fe03 	bl	8006420 <mbedtls_chacha20_update>
 800681a:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <mbedtls_chachapoly_update+0x8c>
            return( ret );
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	e026      	b.n	8006874 <mbedtls_chachapoly_update+0xda>

        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, output, len );
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3384      	adds	r3, #132	@ 0x84
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f002 f978 	bl	8008b24 <mbedtls_poly1305_update>
 8006834:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01a      	beq.n	8006872 <mbedtls_chachapoly_update+0xd8>
            return( ret );
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	e019      	b.n	8006874 <mbedtls_chachapoly_update+0xda>
    }
    else /* DECRYPT */
    {
        ret = mbedtls_poly1305_update( &ctx->poly1305_ctx, input, len );
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3384      	adds	r3, #132	@ 0x84
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4618      	mov	r0, r3
 800684a:	f002 f96b 	bl	8008b24 <mbedtls_poly1305_update>
 800684e:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <mbedtls_chachapoly_update+0xc0>
            return( ret );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	e00c      	b.n	8006874 <mbedtls_chachapoly_update+0xda>

        ret = mbedtls_chacha20_update( &ctx->chacha20_ctx, len, input, output );
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	f7ff fddd 	bl	8006420 <mbedtls_chacha20_update>
 8006866:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <mbedtls_chachapoly_update+0xd8>
            return( ret );
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	e000      	b.n	8006874 <mbedtls_chachapoly_update+0xda>
    }

    return( 0 );
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3718      	adds	r7, #24
 8006878:	46bd      	mov	sp, r7
 800687a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800687e <mbedtls_cipher_get_block_size>:
 * \return       The block size of the underlying cipher.
 * \return       \c 0 if \p ctx has not been initialized.
 */
static inline unsigned int mbedtls_cipher_get_block_size(
    const mbedtls_cipher_context_t *ctx )
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
    MBEDTLS_INTERNAL_VALIDATE_RET( ctx != NULL, 0 );
    if( ctx->cipher_info == NULL )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <mbedtls_cipher_get_block_size+0x14>
        return 0;
 800688e:	2300      	movs	r3, #0
 8006890:	e002      	b.n	8006898 <mbedtls_cipher_get_block_size+0x1a>

    return ctx->cipher_info->block_size;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <mbedtls_cipher_info_from_values>:
}

const mbedtls_cipher_info_t *mbedtls_cipher_info_from_values( const mbedtls_cipher_id_t cipher_id,
                                              int key_bitlen,
                                              const mbedtls_cipher_mode_t mode )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	4603      	mov	r3, r0
 80068ac:	6039      	str	r1, [r7, #0]
 80068ae:	71fb      	strb	r3, [r7, #7]
 80068b0:	4613      	mov	r3, r2
 80068b2:	71bb      	strb	r3, [r7, #6]
    const mbedtls_cipher_definition_t *def;

    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80068b4:	4b13      	ldr	r3, [pc, #76]	@ (8006904 <mbedtls_cipher_info_from_values+0x60>)
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e018      	b.n	80068ec <mbedtls_cipher_info_from_values+0x48>
        if( def->info->base->cipher == cipher_id &&
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	79fa      	ldrb	r2, [r7, #7]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d10e      	bne.n	80068e6 <mbedtls_cipher_info_from_values+0x42>
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
        if( def->info->base->cipher == cipher_id &&
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d108      	bne.n	80068e6 <mbedtls_cipher_info_from_values+0x42>
            def->info->mode == mode )
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	785b      	ldrb	r3, [r3, #1]
            def->info->key_bitlen == (unsigned) key_bitlen &&
 80068da:	79ba      	ldrb	r2, [r7, #6]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d102      	bne.n	80068e6 <mbedtls_cipher_info_from_values+0x42>
            return( def->info );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	e007      	b.n	80068f6 <mbedtls_cipher_info_from_values+0x52>
    for( def = mbedtls_cipher_definitions; def->info != NULL; def++ )
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3308      	adds	r3, #8
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e2      	bne.n	80068ba <mbedtls_cipher_info_from_values+0x16>

    return( NULL );
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	0800c800 	.word	0x0800c800

08006908 <mbedtls_cipher_free>:
    CIPHER_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
}

void mbedtls_cipher_free( mbedtls_cipher_context_t *ctx )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d010      	beq.n	8006938 <mbedtls_cipher_free+0x30>
                                 sizeof( mbedtls_cmac_context_t ) );
       mbedtls_free( ctx->cmac_ctx );
    }
#endif

    if( ctx->cipher_ctx )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <mbedtls_cipher_free+0x26>
        ctx->cipher_info->base->ctx_free_func( ctx->cipher_ctx );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800692a:	4610      	mov	r0, r2
 800692c:	4798      	blx	r3

    mbedtls_platform_zeroize( ctx, sizeof(mbedtls_cipher_context_t) );
 800692e:	2140      	movs	r1, #64	@ 0x40
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 fc77 	bl	8008224 <mbedtls_platform_zeroize>
 8006936:	e000      	b.n	800693a <mbedtls_cipher_free+0x32>
        return;
 8006938:	bf00      	nop
}
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <mbedtls_cipher_setup>:

int mbedtls_cipher_setup( mbedtls_cipher_context_t *ctx, const mbedtls_cipher_info_t *cipher_info )
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
    CIPHER_VALIDATE_RET( ctx != NULL );
    if( cipher_info == NULL )
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <mbedtls_cipher_setup+0x14>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006950:	4b0f      	ldr	r3, [pc, #60]	@ (8006990 <mbedtls_cipher_setup+0x50>)
 8006952:	e019      	b.n	8006988 <mbedtls_cipher_setup+0x48>

    memset( ctx, 0, sizeof( mbedtls_cipher_context_t ) );
 8006954:	2240      	movs	r2, #64	@ 0x40
 8006956:	2100      	movs	r1, #0
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f002 fbd9 	bl	8009110 <memset>

    if( NULL == ( ctx->cipher_ctx = cipher_info->base->ctx_alloc_func() ) )
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	4798      	blx	r3
 8006966:	4602      	mov	r2, r0
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <mbedtls_cipher_setup+0x38>
        return( MBEDTLS_ERR_CIPHER_ALLOC_FAILED );
 8006974:	4b07      	ldr	r3, [pc, #28]	@ (8006994 <mbedtls_cipher_setup+0x54>)
 8006976:	e007      	b.n	8006988 <mbedtls_cipher_setup+0x48>

    ctx->cipher_info = cipher_info;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	601a      	str	r2, [r3, #0]
     * Ignore possible errors caused by a cipher mode that doesn't use padding
     */
#if defined(MBEDTLS_CIPHER_PADDING_PKCS7)
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_PKCS7 );
#else
    (void) mbedtls_cipher_set_padding_mode( ctx, MBEDTLS_PADDING_NONE );
 800697e:	2104      	movs	r1, #4
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fa45 	bl	8006e10 <mbedtls_cipher_set_padding_mode>
#endif
#endif /* MBEDTLS_CIPHER_MODE_WITH_PADDING */

    return( 0 );
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	ffff9f00 	.word	0xffff9f00
 8006994:	ffff9e80 	.word	0xffff9e80

08006998 <mbedtls_cipher_setkey>:

int mbedtls_cipher_setkey( mbedtls_cipher_context_t *ctx,
                           const unsigned char *key,
                           int key_bitlen,
                           const mbedtls_operation_t operation )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( key != NULL );
    CIPHER_VALIDATE_RET( operation == MBEDTLS_ENCRYPT ||
                         operation == MBEDTLS_DECRYPT );
    if( ctx->cipher_info == NULL )
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <mbedtls_cipher_setkey+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80069ae:	4b26      	ldr	r3, [pc, #152]	@ (8006a48 <mbedtls_cipher_setkey+0xb0>)
 80069b0:	e045      	b.n	8006a3e <mbedtls_cipher_setkey+0xa6>

    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d108      	bne.n	80069d2 <mbedtls_cipher_setkey+0x3a>
        (int) ctx->cipher_info->key_bitlen != key_bitlen )
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	461a      	mov	r2, r3
    if( ( ctx->cipher_info->flags & MBEDTLS_CIPHER_VARIABLE_KEY_LEN ) == 0 &&
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d001      	beq.n	80069d2 <mbedtls_cipher_setkey+0x3a>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80069ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006a48 <mbedtls_cipher_setkey+0xb0>)
 80069d0:	e035      	b.n	8006a3e <mbedtls_cipher_setkey+0xa6>
    }

    ctx->key_bitlen = key_bitlen;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	605a      	str	r2, [r3, #4]
    ctx->operation = operation;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	78fa      	ldrb	r2, [r7, #3]
 80069dc:	721a      	strb	r2, [r3, #8]

    /*
     * For OFB, CFB and CTR mode always use the encryption key schedule
     */
    if( MBEDTLS_ENCRYPT == operation ||
 80069de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d00e      	beq.n	8006a04 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
    if( MBEDTLS_ENCRYPT == operation ||
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d009      	beq.n	8006a04 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_CFB == ctx->cipher_info->mode ||
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d004      	beq.n	8006a04 <mbedtls_cipher_setkey+0x6c>
        MBEDTLS_MODE_CTR == ctx->cipher_info->mode )
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	785b      	ldrb	r3, [r3, #1]
        MBEDTLS_MODE_OFB == ctx->cipher_info->mode ||
 8006a00:	2b05      	cmp	r3, #5
 8006a02:	d10b      	bne.n	8006a1c <mbedtls_cipher_setkey+0x84>
    {
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
                                                         ctx->key_bitlen ) );
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_enc_func( ctx->cipher_ctx, key,
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	4798      	blx	r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	e010      	b.n	8006a3e <mbedtls_cipher_setkey+0xa6>
    }

    if( MBEDTLS_DECRYPT == operation )
 8006a1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <mbedtls_cipher_setkey+0xa4>
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	69db      	ldr	r3, [r3, #28]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	6bd0      	ldr	r0, [r2, #60]	@ 0x3c
                                                         ctx->key_bitlen ) );
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	6852      	ldr	r2, [r2, #4]
        return( ctx->cipher_info->base->setkey_dec_func( ctx->cipher_ctx, key,
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4798      	blx	r3
 8006a38:	4603      	mov	r3, r0
 8006a3a:	e000      	b.n	8006a3e <mbedtls_cipher_setkey+0xa6>

    return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006a3c:	4b02      	ldr	r3, [pc, #8]	@ (8006a48 <mbedtls_cipher_setkey+0xb0>)
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	ffff9f00 	.word	0xffff9f00

08006a4c <mbedtls_cipher_update>:
}
#endif /* MBEDTLS_GCM_C || MBEDTLS_CHACHAPOLY_C */

int mbedtls_cipher_update( mbedtls_cipher_context_t *ctx, const unsigned char *input,
                   size_t ilen, unsigned char *output, size_t *olen )
{
 8006a4c:	b5b0      	push	{r4, r5, r7, lr}
 8006a4e:	b08a      	sub	sp, #40	@ 0x28
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
 8006a58:	603b      	str	r3, [r7, #0]

    CIPHER_VALIDATE_RET( ctx != NULL );
    CIPHER_VALIDATE_RET( ilen == 0 || input != NULL );
    CIPHER_VALIDATE_RET( output != NULL );
    CIPHER_VALIDATE_RET( olen != NULL );
    if( ctx->cipher_info == NULL )
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <mbedtls_cipher_update+0x1a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006a62:	4b7c      	ldr	r3, [pc, #496]	@ (8006c54 <mbedtls_cipher_update+0x208>)
 8006a64:	e1b4      	b.n	8006dd0 <mbedtls_cipher_update+0x384>

    *olen = 0;
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]
    block_size = mbedtls_cipher_get_block_size( ctx );
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f7ff ff06 	bl	800687e <mbedtls_cipher_get_block_size>
 8006a72:	61b8      	str	r0, [r7, #24]

    if( ctx->cipher_info->mode == MBEDTLS_MODE_ECB )
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d11c      	bne.n	8006ab8 <mbedtls_cipher_update+0x6c>
    {
        if( ilen != block_size )
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d001      	beq.n	8006a8a <mbedtls_cipher_update+0x3e>
            return( MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED );
 8006a86:	4b74      	ldr	r3, [pc, #464]	@ (8006c58 <mbedtls_cipher_update+0x20c>)
 8006a88:	e1a2      	b.n	8006dd0 <mbedtls_cipher_update+0x384>

        *olen = ilen;
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	601a      	str	r2, [r3, #0]

        if( 0 != ( ret = ctx->cipher_info->base->ecb_func( ctx->cipher_ctx,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	685c      	ldr	r4, [r3, #4]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f993 1008 	ldrsb.w	r1, [r3, #8]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	47a0      	blx	r4
 8006aa8:	6178      	str	r0, [r7, #20]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <mbedtls_cipher_update+0x68>
                    ctx->operation, input, output ) ) )
        {
            return( ret );
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	e18d      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        }

        return( 0 );
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	e18b      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
    }

#if defined(MBEDTLS_GCM_C)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_GCM )
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	785b      	ldrb	r3, [r3, #1]
 8006abe:	2b06      	cmp	r3, #6
 8006ac0:	d10b      	bne.n	8006ada <mbedtls_cipher_update+0x8e>
    {
        *olen = ilen;
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	601a      	str	r2, [r3, #0]
        return( mbedtls_gcm_update( (mbedtls_gcm_context *) ctx->cipher_ctx, ilen, input,
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	f001 f8f6 	bl	8007cc2 <mbedtls_gcm_update>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	e17a      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
                                    output ) );
    }
#endif

#if defined(MBEDTLS_CHACHAPOLY_C)
    if ( ctx->cipher_info->type == MBEDTLS_CIPHER_CHACHA20_POLY1305 )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b49      	cmp	r3, #73	@ 0x49
 8006ae2:	d10b      	bne.n	8006afc <mbedtls_cipher_update+0xb0>
    {
        *olen = ilen;
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	601a      	str	r2, [r3, #0]
        return( mbedtls_chachapoly_update( (mbedtls_chachapoly_context*) ctx->cipher_ctx,
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	f7ff fe51 	bl	800679a <mbedtls_chachapoly_update>
 8006af8:	4603      	mov	r3, r0
 8006afa:	e169      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
                                           ilen, input, output ) );
    }
#endif

    if ( 0 == block_size )
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <mbedtls_cipher_update+0xba>
    {
        return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8006b02:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <mbedtls_cipher_update+0x210>)
 8006b04:	e164      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
    }

    if( input == output &&
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d10f      	bne.n	8006b2e <mbedtls_cipher_update+0xe2>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    if( input == output &&
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <mbedtls_cipher_update+0xde>
       ( ctx->unprocessed_len != 0 || ilen % block_size ) )
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006b1e:	69b9      	ldr	r1, [r7, #24]
 8006b20:	fb01 f202 	mul.w	r2, r1, r2
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <mbedtls_cipher_update+0xe2>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c54 <mbedtls_cipher_update+0x208>)
 8006b2c:	e150      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
    }

#if defined(MBEDTLS_CIPHER_MODE_CBC)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_CBC )
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	f040 80e4 	bne.w	8006d02 <mbedtls_cipher_update+0x2b6>
    {
        size_t copy_len = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]

        /*
         * If there is not enough data for a full block, cache it.
         */
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10a      	bne.n	8006b5e <mbedtls_cipher_update+0x112>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <mbedtls_cipher_update+0x112>
                ilen <= block_size - ctx->unprocessed_len ) ||
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	1ad3      	subs	r3, r2, r3
        if( ( ctx->operation == MBEDTLS_DECRYPT && NULL != ctx->add_padding &&
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d91b      	bls.n	8006b96 <mbedtls_cipher_update+0x14a>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen <= block_size - ctx->unprocessed_len ) ||
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10a      	bne.n	8006b7e <mbedtls_cipher_update+0x132>
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d106      	bne.n	8006b7e <mbedtls_cipher_update+0x132>
                ilen < block_size - ctx->unprocessed_len ) ||
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	1ad3      	subs	r3, r2, r3
            ( ctx->operation == MBEDTLS_DECRYPT && NULL == ctx->add_padding &&
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d30b      	bcc.n	8006b96 <mbedtls_cipher_update+0x14a>
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f993 3008 	ldrsb.w	r3, [r3, #8]
                ilen < block_size - ctx->unprocessed_len ) ||
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d119      	bne.n	8006bbc <mbedtls_cipher_update+0x170>
                ilen < block_size - ctx->unprocessed_len ) )
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	1ad3      	subs	r3, r2, r3
             ( ctx->operation == MBEDTLS_ENCRYPT &&
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d212      	bcs.n	8006bbc <mbedtls_cipher_update+0x170>
        {
            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9a:	3310      	adds	r3, #16
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f002 fb3d 	bl	8009226 <memcpy>
                    ilen );

            ctx->unprocessed_len += ilen;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	625a      	str	r2, [r3, #36]	@ 0x24
            return( 0 );
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e109      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        }

        /*
         * Process cached data first
         */
        if( 0 != ctx->unprocessed_len )
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d03e      	beq.n	8006c42 <mbedtls_cipher_update+0x1f6>
        {
            copy_len = block_size - ctx->unprocessed_len;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	61fb      	str	r3, [r7, #28]

            memcpy( &( ctx->unprocessed_data[ctx->unprocessed_len] ), input,
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	3310      	adds	r3, #16
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	3304      	adds	r3, #4
 8006bda:	69fa      	ldr	r2, [r7, #28]
 8006bdc:	68b9      	ldr	r1, [r7, #8]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f002 fb21 	bl	8009226 <memcpy>
                    copy_len );

            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	689c      	ldr	r4, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, block_size, ctx->iv,
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f103 0528 	add.w	r5, r3, #40	@ 0x28
                    ctx->unprocessed_data, output ) ) )
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	3314      	adds	r3, #20
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	9201      	str	r2, [sp, #4]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	462b      	mov	r3, r5
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	47a0      	blx	r4
 8006c0c:	6178      	str	r0, [r7, #20]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d001      	beq.n	8006c18 <mbedtls_cipher_update+0x1cc>
            {
                return( ret );
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	e0db      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
            }

            *olen += block_size;
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	441a      	add	r2, r3
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	601a      	str	r2, [r3, #0]
            output += block_size;
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	4413      	add	r3, r2
 8006c2a:	603b      	str	r3, [r7, #0]
            ctx->unprocessed_len = 0;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	625a      	str	r2, [r3, #36]	@ 0x24

            input += copy_len;
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	4413      	add	r3, r2
 8006c38:	60bb      	str	r3, [r7, #8]
            ilen -= copy_len;
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	607b      	str	r3, [r7, #4]
        }

        /*
         * Cache final, incomplete block
         */
        if( 0 != ilen )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d038      	beq.n	8006cba <mbedtls_cipher_update+0x26e>
        {
            if( 0 == block_size )
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <mbedtls_cipher_update+0x214>
            {
                return( MBEDTLS_ERR_CIPHER_INVALID_CONTEXT );
 8006c4e:	4b03      	ldr	r3, [pc, #12]	@ (8006c5c <mbedtls_cipher_update+0x210>)
 8006c50:	e0be      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
 8006c52:	bf00      	nop
 8006c54:	ffff9f00 	.word	0xffff9f00
 8006c58:	ffff9d80 	.word	0xffff9d80
 8006c5c:	ffff9c80 	.word	0xffff9c80

            /* Encryption: only cache partial blocks
             * Decryption w/ padding: always keep at least one whole block
             * Decryption w/o padding: only cache partial blocks
             */
            copy_len = ilen % block_size;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c68:	69b9      	ldr	r1, [r7, #24]
 8006c6a:	fb01 f202 	mul.w	r2, r1, r2
 8006c6e:	1a9b      	subs	r3, r3, r2
 8006c70:	61fb      	str	r3, [r7, #28]
            if( copy_len == 0 &&
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <mbedtls_cipher_update+0x242>
                ctx->operation == MBEDTLS_DECRYPT &&
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
            if( copy_len == 0 &&
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d105      	bne.n	8006c8e <mbedtls_cipher_update+0x242>
                NULL != ctx->add_padding)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68db      	ldr	r3, [r3, #12]
                ctx->operation == MBEDTLS_DECRYPT &&
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <mbedtls_cipher_update+0x242>
            {
                copy_len = block_size;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	61fb      	str	r3, [r7, #28]
            }

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f103 0014 	add.w	r0, r3, #20
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	69fa      	ldr	r2, [r7, #28]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f002 fac0 	bl	8009226 <memcpy>
                    copy_len );

            ctx->unprocessed_len += copy_len;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	441a      	add	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	@ 0x24
            ilen -= copy_len;
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	607b      	str	r3, [r7, #4]
        }

        /*
         * Process remaining full blocks
         */
        if( ilen )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d01e      	beq.n	8006cfe <mbedtls_cipher_update+0x2b2>
        {
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	689c      	ldr	r4, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f993 1008 	ldrsb.w	r1, [r3, #8]
                    ctx->operation, ilen, ctx->iv, input, output ) ) )
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
            if( 0 != ( ret = ctx->cipher_info->base->cbc_func( ctx->cipher_ctx,
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	47a0      	blx	r4
 8006ce6:	6178      	str	r0, [r7, #20]
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <mbedtls_cipher_update+0x2a6>
            {
                return( ret );
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	e06e      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
            }

            *olen += ilen;
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	441a      	add	r2, r3
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfc:	601a      	str	r2, [r3, #0]
        }

        return( 0 );
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e066      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_OFB )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	785b      	ldrb	r3, [r3, #1]
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d11d      	bne.n	8006d48 <mbedtls_cipher_update+0x2fc>
    {
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	68dc      	ldr	r4, [r3, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f103 0224 	add.w	r2, r3, #36	@ 0x24
                ilen, &ctx->unprocessed_len, ctx->iv, input, output ) ) )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f103 0128 	add.w	r1, r3, #40	@ 0x28
        if( 0 != ( ret = ctx->cipher_info->base->ofb_func( ctx->cipher_ctx,
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	9301      	str	r3, [sp, #4]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	460b      	mov	r3, r1
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	47a0      	blx	r4
 8006d32:	6178      	str	r0, [r7, #20]
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <mbedtls_cipher_update+0x2f2>
        {
            return( ret );
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	e048      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	601a      	str	r2, [r3, #0]

        return( 0 );
 8006d44:	2300      	movs	r3, #0
 8006d46:	e043      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        return( 0 );
    }
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_XTS )
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	785b      	ldrb	r3, [r3, #1]
 8006d4e:	2b09      	cmp	r3, #9
 8006d50:	d123      	bne.n	8006d9a <mbedtls_cipher_update+0x34e>
    {
        if( ctx->unprocessed_len > 0 ) {
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <mbedtls_cipher_update+0x312>
            /* We can only process an entire data unit at a time. */
            return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8006d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd8 <mbedtls_cipher_update+0x38c>)
 8006d5c:	e038      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        }

        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	691c      	ldr	r4, [r3, #16]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f993 1008 	ldrsb.w	r1, [r3, #8]
                ctx->operation, ilen, ctx->iv, input, output );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f103 0228 	add.w	r2, r3, #40	@ 0x28
        ret = ctx->cipher_info->base->xts_func( ctx->cipher_ctx,
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	47a0      	blx	r4
 8006d84:	6178      	str	r0, [r7, #20]
        if( ret != 0 )
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d001      	beq.n	8006d90 <mbedtls_cipher_update+0x344>
        {
            return( ret );
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	e01f      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	601a      	str	r2, [r3, #0]

        return( 0 );
 8006d96:	2300      	movs	r3, #0
 8006d98:	e01a      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
    }
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_CIPHER_MODE_STREAM)
    if( ctx->cipher_info->mode == MBEDTLS_MODE_STREAM )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	785b      	ldrb	r3, [r3, #1]
 8006da0:	2b07      	cmp	r3, #7
 8006da2:	d114      	bne.n	8006dce <mbedtls_cipher_update+0x382>
    {
        if( 0 != ( ret = ctx->cipher_info->base->stream_func( ctx->cipher_ctx,
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	695c      	ldr	r4, [r3, #20]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	47a0      	blx	r4
 8006db8:	6178      	str	r0, [r7, #20]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <mbedtls_cipher_update+0x378>
                                                    ilen, input, output ) ) )
        {
            return( ret );
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	e005      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
        }

        *olen = ilen;
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]

        return( 0 );
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e000      	b.n	8006dd0 <mbedtls_cipher_update+0x384>
    }
#endif /* MBEDTLS_CIPHER_MODE_STREAM */

    return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8006dce:	4b02      	ldr	r3, [pc, #8]	@ (8006dd8 <mbedtls_cipher_update+0x38c>)
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3720      	adds	r7, #32
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bdb0      	pop	{r4, r5, r7, pc}
 8006dd8:	ffff9f80 	.word	0xffff9f80

08006ddc <get_no_padding>:
 * There is no add_padding function (check for NULL in mbedtls_cipher_finish)
 * but a trivial get_padding function
 */
static int get_no_padding( unsigned char *input, size_t input_len,
                              size_t *data_len )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
    if( NULL == input || NULL == data_len )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <get_no_padding+0x18>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <get_no_padding+0x1c>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006df4:	4b05      	ldr	r3, [pc, #20]	@ (8006e0c <get_no_padding+0x30>)
 8006df6:	e003      	b.n	8006e00 <get_no_padding+0x24>

    *data_len = input_len;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68ba      	ldr	r2, [r7, #8]
 8006dfc:	601a      	str	r2, [r3, #0]

    return( 0 );
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	ffff9f00 	.word	0xffff9f00

08006e10 <mbedtls_cipher_set_padding_mode>:
}

#if defined(MBEDTLS_CIPHER_MODE_WITH_PADDING)
int mbedtls_cipher_set_padding_mode( mbedtls_cipher_context_t *ctx,
                                     mbedtls_cipher_padding_t mode )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
    CIPHER_VALIDATE_RET( ctx != NULL );

    if( NULL == ctx->cipher_info || MBEDTLS_MODE_CBC != ctx->cipher_info->mode )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d004      	beq.n	8006e2e <mbedtls_cipher_set_padding_mode+0x1e>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d001      	beq.n	8006e32 <mbedtls_cipher_set_padding_mode+0x22>
    {
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 8006e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006e58 <mbedtls_cipher_set_padding_mode+0x48>)
 8006e30:	e00c      	b.n	8006e4c <mbedtls_cipher_set_padding_mode+0x3c>
    }

    switch( mode )
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d108      	bne.n	8006e4a <mbedtls_cipher_set_padding_mode+0x3a>
        ctx->add_padding = add_zeros_padding;
        ctx->get_padding = get_zeros_padding;
        break;
#endif
    case MBEDTLS_PADDING_NONE:
        ctx->add_padding = NULL;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	60da      	str	r2, [r3, #12]
        ctx->get_padding = get_no_padding;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a06      	ldr	r2, [pc, #24]	@ (8006e5c <mbedtls_cipher_set_padding_mode+0x4c>)
 8006e42:	611a      	str	r2, [r3, #16]
        break;
 8006e44:	bf00      	nop

    default:
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
    }

    return( 0 );
 8006e46:	2300      	movs	r3, #0
 8006e48:	e000      	b.n	8006e4c <mbedtls_cipher_set_padding_mode+0x3c>
        return( MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE );
 8006e4a:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <mbedtls_cipher_set_padding_mode+0x50>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	ffff9f00 	.word	0xffff9f00
 8006e5c:	08006ddd 	.word	0x08006ddd
 8006e60:	ffff9f80 	.word	0xffff9f80

08006e64 <gcm_ctx_alloc>:
#endif

#if defined(MBEDTLS_GCM_C)
/* shared by all GCM ciphers */
static void *gcm_ctx_alloc( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
    void *ctx = mbedtls_calloc( 1, sizeof( mbedtls_gcm_context ) );
 8006e6a:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006e6e:	2001      	movs	r0, #1
 8006e70:	f001 fed0 	bl	8008c14 <calloc>
 8006e74:	4603      	mov	r3, r0
 8006e76:	607b      	str	r3, [r7, #4]

    if( ctx != NULL )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d002      	beq.n	8006e84 <gcm_ctx_alloc+0x20>
        mbedtls_gcm_init( (mbedtls_gcm_context *) ctx );
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa42 	bl	8007308 <mbedtls_gcm_init>

    return( ctx );
 8006e84:	687b      	ldr	r3, [r7, #4]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <gcm_ctx_free>:

static void gcm_ctx_free( void *ctx )
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
    mbedtls_gcm_free( ctx );
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f001 f9af 	bl	80081fa <mbedtls_gcm_free>
    mbedtls_free( ctx );
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 fed5 	bl	8008c4c <free>
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <aes_crypt_ecb_wrap>:

#if defined(MBEDTLS_AES_C)

static int aes_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_ecb( (mbedtls_aes_context *) ctx, operation, input, output );
 8006eba:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7fd f948 	bl	8004158 <mbedtls_aes_crypt_ecb>
 8006ec8:	4603      	mov	r3, r0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <aes_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int aes_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation, size_t length,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af02      	add	r7, sp, #8
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	72fb      	strb	r3, [r7, #11]
    return mbedtls_aes_crypt_cbc( (mbedtls_aes_context *) ctx, operation, length, iv, input,
 8006ee2:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7fd f94b 	bl	800418e <mbedtls_aes_crypt_cbc>
 8006ef8:	4603      	mov	r3, r0
                          output );
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <aes_crypt_ofb_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CFB */

#if defined(MBEDTLS_CIPHER_MODE_OFB)
static int aes_crypt_ofb_wrap( void *ctx, size_t length, size_t *iv_off,
        unsigned char *iv, const unsigned char *input, unsigned char *output )
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b086      	sub	sp, #24
 8006f06:	af02      	add	r7, sp, #8
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	603b      	str	r3, [r7, #0]
    return mbedtls_aes_crypt_ofb( (mbedtls_aes_context *) ctx, length, iv_off,
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	9301      	str	r3, [sp, #4]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	9300      	str	r3, [sp, #0]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	68b9      	ldr	r1, [r7, #8]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7fd fd7b 	bl	8004a1a <mbedtls_aes_crypt_ofb>
 8006f24:	4603      	mov	r3, r0
                                    iv, input, output );
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
	...

08006f30 <aes_crypt_xts_wrap>:
static int aes_crypt_xts_wrap( void *ctx, mbedtls_operation_t operation,
                               size_t length,
                               const unsigned char data_unit[16],
                               const unsigned char *input,
                               unsigned char *output )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af02      	add	r7, sp, #8
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	607a      	str	r2, [r7, #4]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	72fb      	strb	r3, [r7, #11]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	613b      	str	r3, [r7, #16]
    int mode;

    switch( operation )
 8006f44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <aes_crypt_xts_wrap+0x26>
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d105      	bne.n	8006f5c <aes_crypt_xts_wrap+0x2c>
    {
        case MBEDTLS_ENCRYPT:
            mode = MBEDTLS_AES_ENCRYPT;
 8006f50:	2301      	movs	r3, #1
 8006f52:	617b      	str	r3, [r7, #20]
            break;
 8006f54:	e004      	b.n	8006f60 <aes_crypt_xts_wrap+0x30>
        case MBEDTLS_DECRYPT:
            mode = MBEDTLS_AES_DECRYPT;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
            break;
 8006f5a:	e001      	b.n	8006f60 <aes_crypt_xts_wrap+0x30>
        default:
            return MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA;
 8006f5c:	4b08      	ldr	r3, [pc, #32]	@ (8006f80 <aes_crypt_xts_wrap+0x50>)
 8006f5e:	e00a      	b.n	8006f76 <aes_crypt_xts_wrap+0x46>
    }

    return mbedtls_aes_crypt_xts( xts_ctx, mode, length,
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6979      	ldr	r1, [r7, #20]
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f7fd fc4a 	bl	8004808 <mbedtls_aes_crypt_xts>
 8006f74:	4603      	mov	r3, r0
                                  data_unit, input, output );
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	ffff9f00 	.word	0xffff9f00

08006f84 <aes_setkey_dec_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

static int aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_dec( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f7fc f953 	bl	8003240 <mbedtls_aes_setkey_dec>
 8006f9a:	4603      	mov	r3, r0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <aes_setkey_enc_wrap>:

static int aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
    return mbedtls_aes_setkey_enc( (mbedtls_aes_context *) ctx, key, key_bitlen );
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	68b9      	ldr	r1, [r7, #8]
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7fb ff6d 	bl	8002e94 <mbedtls_aes_setkey_enc>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <aes_ctx_alloc>:

static void * aes_ctx_alloc( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
    mbedtls_aes_context *aes = mbedtls_calloc( 1, sizeof( mbedtls_aes_context ) );
 8006fca:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8006fce:	2001      	movs	r0, #1
 8006fd0:	f001 fe20 	bl	8008c14 <calloc>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	607b      	str	r3, [r7, #4]

    if( aes == NULL )
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <aes_ctx_alloc+0x1e>
        return( NULL );
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e003      	b.n	8006fea <aes_ctx_alloc+0x26>

    mbedtls_aes_init( aes );
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fb ff0f 	bl	8002e06 <mbedtls_aes_init>

    return( aes );
 8006fe8:	687b      	ldr	r3, [r7, #4]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <aes_ctx_free>:

static void aes_ctx_free( void *ctx )
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
    mbedtls_aes_free( (mbedtls_aes_context *) ctx );
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fb ff11 	bl	8002e22 <mbedtls_aes_free>
    mbedtls_free( ctx );
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 fe23 	bl	8008c4c <free>
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <xts_aes_setkey_enc_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_CIPHER_MODE_XTS)
static int xts_aes_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b086      	sub	sp, #24
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_enc( xts_ctx, key, key_bitlen ) );
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	68b9      	ldr	r1, [r7, #8]
 8007022:	6978      	ldr	r0, [r7, #20]
 8007024:	f7fc fa6c 	bl	8003500 <mbedtls_aes_xts_setkey_enc>
 8007028:	4603      	mov	r3, r0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <xts_aes_setkey_dec_wrap>:

static int xts_aes_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                    unsigned int key_bitlen )
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b086      	sub	sp, #24
 8007036:	af00      	add	r7, sp, #0
 8007038:	60f8      	str	r0, [r7, #12]
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	617b      	str	r3, [r7, #20]
    return( mbedtls_aes_xts_setkey_dec( xts_ctx, key, key_bitlen ) );
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	6978      	ldr	r0, [r7, #20]
 8007048:	f7fc fa8e 	bl	8003568 <mbedtls_aes_xts_setkey_dec>
 800704c:	4603      	mov	r3, r0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <xts_aes_ctx_alloc>:

static void *xts_aes_ctx_alloc( void )
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
    mbedtls_aes_xts_context *xts_ctx = mbedtls_calloc( 1, sizeof( *xts_ctx ) );
 800705c:	f44f 710c 	mov.w	r1, #560	@ 0x230
 8007060:	2001      	movs	r0, #1
 8007062:	f001 fdd7 	bl	8008c14 <calloc>
 8007066:	4603      	mov	r3, r0
 8007068:	607b      	str	r3, [r7, #4]

    if( xts_ctx != NULL )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <xts_aes_ctx_alloc+0x20>
        mbedtls_aes_xts_init( xts_ctx );
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fb fee7 	bl	8002e44 <mbedtls_aes_xts_init>

    return( xts_ctx );
 8007076:	687b      	ldr	r3, [r7, #4]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <xts_aes_ctx_free>:

static void xts_aes_ctx_free( void *ctx )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
    mbedtls_aes_xts_context *xts_ctx = ctx;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60fb      	str	r3, [r7, #12]

    if( xts_ctx == NULL )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d006      	beq.n	80070a0 <xts_aes_ctx_free+0x20>
        return;

    mbedtls_aes_xts_free( xts_ctx );
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7fb fee8 	bl	8002e68 <mbedtls_aes_xts_free>
    mbedtls_free( xts_ctx );
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f001 fdd7 	bl	8008c4c <free>
 800709e:	e000      	b.n	80070a2 <xts_aes_ctx_free+0x22>
        return;
 80070a0:	bf00      	nop
}
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <gcm_aes_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_XTS */

#if defined(MBEDTLS_GCM_C)
static int gcm_aes_setkey_wrap( void *ctx, const unsigned char *key,
                                unsigned int key_bitlen )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_AES,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	2102      	movs	r1, #2
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 faac 	bl	8007618 <mbedtls_gcm_setkey>
 80070c0:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <camellia_crypt_ecb_wrap>:

#if defined(MBEDTLS_CAMELLIA_C)

static int camellia_crypt_ecb_wrap( void *ctx, mbedtls_operation_t operation,
        const unsigned char *input, unsigned char *output )
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
 80070d6:	460b      	mov	r3, r1
 80070d8:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_ecb( (mbedtls_camellia_context *) ctx, operation, input,
 80070da:	f997 100b 	ldrsb.w	r1, [r7, #11]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7fe fcfc 	bl	8005ae0 <mbedtls_camellia_crypt_ecb>
 80070e8:	4603      	mov	r3, r0
                               output );
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <camellia_crypt_cbc_wrap>:

#if defined(MBEDTLS_CIPHER_MODE_CBC)
static int camellia_crypt_cbc_wrap( void *ctx, mbedtls_operation_t operation,
        size_t length, unsigned char *iv,
        const unsigned char *input, unsigned char *output )
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af02      	add	r7, sp, #8
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	460b      	mov	r3, r1
 8007100:	72fb      	strb	r3, [r7, #11]
    return mbedtls_camellia_crypt_cbc( (mbedtls_camellia_context *) ctx, operation, length, iv,
 8007102:	f997 100b 	ldrsb.w	r1, [r7, #11]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7fe fe4e 	bl	8005db4 <mbedtls_camellia_crypt_cbc>
 8007118:	4603      	mov	r3, r0
                               input, output );
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <camellia_setkey_dec_wrap>:
}
#endif /* MBEDTLS_CIPHER_MODE_CTR */

static int camellia_setkey_dec_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_dec( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7fe fbd8 	bl	80058e8 <mbedtls_camellia_setkey_dec>
 8007138:	4603      	mov	r3, r0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <camellia_setkey_enc_wrap>:

static int camellia_setkey_enc_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
    return mbedtls_camellia_setkey_enc( (mbedtls_camellia_context *) ctx, key, key_bitlen );
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7fd fd3c 	bl	8004bd0 <mbedtls_camellia_setkey_enc>
 8007158:	4603      	mov	r3, r0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <camellia_ctx_alloc>:

static void * camellia_ctx_alloc( void )
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
    mbedtls_camellia_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_camellia_context ) );
 8007168:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800716c:	2001      	movs	r0, #1
 800716e:	f001 fd51 	bl	8008c14 <calloc>
 8007172:	4603      	mov	r3, r0
 8007174:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <camellia_ctx_alloc+0x1e>
        return( NULL );
 800717c:	2300      	movs	r3, #0
 800717e:	e003      	b.n	8007188 <camellia_ctx_alloc+0x26>

    mbedtls_camellia_init( ctx );
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7fd fd05 	bl	8004b90 <mbedtls_camellia_init>

    return( ctx );
 8007186:	687b      	ldr	r3, [r7, #4]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <camellia_ctx_free>:

static void camellia_ctx_free( void *ctx )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
    mbedtls_camellia_free( (mbedtls_camellia_context *) ctx );
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7fd fd07 	bl	8004bac <mbedtls_camellia_free>
    mbedtls_free( ctx );
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fd54 	bl	8008c4c <free>
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <gcm_camellia_setkey_wrap>:
#endif /* MBEDTLS_CIPHER_MODE_CTR */

#if defined(MBEDTLS_GCM_C)
static int gcm_camellia_setkey_wrap( void *ctx, const unsigned char *key,
                                     unsigned int key_bitlen )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
    return mbedtls_gcm_setkey( (mbedtls_gcm_context *) ctx, MBEDTLS_CIPHER_ID_CAMELLIA,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	2105      	movs	r1, #5
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fa2a 	bl	8007618 <mbedtls_gcm_setkey>
 80071c4:	4603      	mov	r3, r0
                     key, key_bitlen );
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <chacha20_setkey_wrap>:

#if defined(MBEDTLS_CHACHA20_C)

static int chacha20_setkey_wrap( void *ctx, const unsigned char *key,
                                 unsigned int key_bitlen )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e2:	d001      	beq.n	80071e8 <chacha20_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80071e4:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <chacha20_setkey_wrap+0x34>)
 80071e6:	e009      	b.n	80071fc <chacha20_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chacha20_setkey( (mbedtls_chacha20_context*)ctx, key ) )
 80071e8:	68b9      	ldr	r1, [r7, #8]
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff f850 	bl	8006290 <mbedtls_chacha20_setkey>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <chacha20_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80071f6:	4b03      	ldr	r3, [pc, #12]	@ (8007204 <chacha20_setkey_wrap+0x34>)
 80071f8:	e000      	b.n	80071fc <chacha20_setkey_wrap+0x2c>

    return( 0 );
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	ffff9f00 	.word	0xffff9f00

08007208 <chacha20_stream_wrap>:

static int chacha20_stream_wrap( void *ctx,  size_t length,
                                 const unsigned char *input,
                                 unsigned char *output )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
    int ret;

    ret = mbedtls_chacha20_update( ctx, length, input, output );
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff f8ff 	bl	8006420 <mbedtls_chacha20_update>
 8007222:	6178      	str	r0, [r7, #20]
    if( ret == MBEDTLS_ERR_CHACHA20_BAD_INPUT_DATA )
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800722a:	d101      	bne.n	8007230 <chacha20_stream_wrap+0x28>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800722c:	4b03      	ldr	r3, [pc, #12]	@ (800723c <chacha20_stream_wrap+0x34>)
 800722e:	e000      	b.n	8007232 <chacha20_stream_wrap+0x2a>

    return( ret );
 8007230:	697b      	ldr	r3, [r7, #20]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	ffff9f00 	.word	0xffff9f00

08007240 <chacha20_ctx_alloc>:

static void * chacha20_ctx_alloc( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
    mbedtls_chacha20_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chacha20_context ) );
 8007246:	2184      	movs	r1, #132	@ 0x84
 8007248:	2001      	movs	r0, #1
 800724a:	f001 fce3 	bl	8008c14 <calloc>
 800724e:	4603      	mov	r3, r0
 8007250:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <chacha20_ctx_alloc+0x1c>
        return( NULL );
 8007258:	2300      	movs	r3, #0
 800725a:	e003      	b.n	8007264 <chacha20_ctx_alloc+0x24>

    mbedtls_chacha20_init( ctx );
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f7fe fff0 	bl	8006242 <mbedtls_chacha20_init>

    return( ctx );
 8007262:	687b      	ldr	r3, [r7, #4]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3708      	adds	r7, #8
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <chacha20_ctx_free>:

static void chacha20_ctx_free( void *ctx )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
    mbedtls_chacha20_free( (mbedtls_chacha20_context *) ctx );
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7fe fffb 	bl	8006270 <mbedtls_chacha20_free>
    mbedtls_free( ctx );
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f001 fce6 	bl	8008c4c <free>
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <chachapoly_setkey_wrap>:
#if defined(MBEDTLS_CHACHAPOLY_C)

static int chachapoly_setkey_wrap( void *ctx,
                                   const unsigned char *key,
                                   unsigned int key_bitlen )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
    if( key_bitlen != 256U )
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800729a:	d001      	beq.n	80072a0 <chachapoly_setkey_wrap+0x18>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 800729c:	4b07      	ldr	r3, [pc, #28]	@ (80072bc <chachapoly_setkey_wrap+0x34>)
 800729e:	e009      	b.n	80072b4 <chachapoly_setkey_wrap+0x2c>

    if ( 0 != mbedtls_chachapoly_setkey( (mbedtls_chachapoly_context*)ctx, key ) )
 80072a0:	68b9      	ldr	r1, [r7, #8]
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f7ff fa69 	bl	800677a <mbedtls_chachapoly_setkey>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <chachapoly_setkey_wrap+0x2a>
        return( MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA );
 80072ae:	4b03      	ldr	r3, [pc, #12]	@ (80072bc <chachapoly_setkey_wrap+0x34>)
 80072b0:	e000      	b.n	80072b4 <chachapoly_setkey_wrap+0x2c>

    return( 0 );
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	ffff9f00 	.word	0xffff9f00

080072c0 <chachapoly_ctx_alloc>:

static void * chachapoly_ctx_alloc( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
    mbedtls_chachapoly_context *ctx;
    ctx = mbedtls_calloc( 1, sizeof( mbedtls_chachapoly_context ) );
 80072c6:	21e8      	movs	r1, #232	@ 0xe8
 80072c8:	2001      	movs	r0, #1
 80072ca:	f001 fca3 	bl	8008c14 <calloc>
 80072ce:	4603      	mov	r3, r0
 80072d0:	607b      	str	r3, [r7, #4]

    if( ctx == NULL )
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <chachapoly_ctx_alloc+0x1c>
        return( NULL );
 80072d8:	2300      	movs	r3, #0
 80072da:	e003      	b.n	80072e4 <chachapoly_ctx_alloc+0x24>

    mbedtls_chachapoly_init( ctx );
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff f9fa 	bl	80066d6 <mbedtls_chachapoly_init>

    return( ctx );
 80072e2:	687b      	ldr	r3, [r7, #4]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3708      	adds	r7, #8
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <chachapoly_ctx_free>:

static void chachapoly_ctx_free( void *ctx )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
    mbedtls_chachapoly_free( (mbedtls_chachapoly_context *) ctx );
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f7ff fa15 	bl	8006724 <mbedtls_chachapoly_free>
    mbedtls_free( ctx );
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fca6 	bl	8008c4c <free>
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <mbedtls_gcm_init>:

/*
 * Initialize a context
 */
void mbedtls_gcm_init( mbedtls_gcm_context *ctx )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
    GCM_VALIDATE( ctx != NULL );
    memset( ctx, 0, sizeof( mbedtls_gcm_context ) );
 8007310:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8007314:	2100      	movs	r1, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 fefa 	bl	8009110 <memset>
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <gcm_gen_table>:
 * correspond to low powers of P. The result is stored in the same way, that
 * is the high-order bit of HH corresponds to P^0 and the low-order bit of HL
 * corresponds to P^127.
 */
static int gcm_gen_table( mbedtls_gcm_context *ctx )
{
 8007324:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007328:	b0a8      	sub	sp, #160	@ 0xa0
 800732a:	af02      	add	r7, sp, #8
 800732c:	6478      	str	r0, [r7, #68]	@ 0x44
    int ret, i, j;
    uint64_t hi, lo;
    uint64_t vl, vh;
    unsigned char h[16];
    size_t olen = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	64bb      	str	r3, [r7, #72]	@ 0x48

    memset( h, 0, 16 );
 8007332:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007336:	2210      	movs	r2, #16
 8007338:	2100      	movs	r1, #0
 800733a:	4618      	mov	r0, r3
 800733c:	f001 fee8 	bl	8009110 <memset>
    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, h, 16, h, &olen ) ) != 0 )
 8007340:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007342:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8007346:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800734a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	2210      	movs	r2, #16
 8007354:	f7ff fb7a 	bl	8006a4c <mbedtls_cipher_update>
 8007358:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800735a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <gcm_gen_table+0x40>
        return( ret );
 8007360:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007362:	e154      	b.n	800760e <gcm_gen_table+0x2ea>

    /* pack h as two 64-bits ints, big-endian */
    GET_UINT32_BE( hi, h,  0  );
 8007364:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8007368:	061a      	lsls	r2, r3, #24
 800736a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	431a      	orrs	r2, r3
 8007372:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	431a      	orrs	r2, r3
 800737a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800737e:	4313      	orrs	r3, r2
 8007380:	2200      	movs	r2, #0
 8007382:	4698      	mov	r8, r3
 8007384:	4691      	mov	r9, r2
 8007386:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
    GET_UINT32_BE( lo, h,  4  );
 800738a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 800738e:	061a      	lsls	r2, r3, #24
 8007390:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8007394:	041b      	lsls	r3, r3, #16
 8007396:	431a      	orrs	r2, r3
 8007398:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	431a      	orrs	r2, r3
 80073a0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80073a4:	4313      	orrs	r3, r2
 80073a6:	2200      	movs	r2, #0
 80073a8:	623b      	str	r3, [r7, #32]
 80073aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80073ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073b0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    vh = (uint64_t) hi << 32 | lo;
 80073b4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80073b8:	f04f 0000 	mov.w	r0, #0
 80073bc:	f04f 0100 	mov.w	r1, #0
 80073c0:	0011      	movs	r1, r2
 80073c2:	2000      	movs	r0, #0
 80073c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80073c8:	ea42 0400 	orr.w	r4, r2, r0
 80073cc:	ea43 0501 	orr.w	r5, r3, r1
 80073d0:	e9c7 4520 	strd	r4, r5, [r7, #128]	@ 0x80

    GET_UINT32_BE( hi, h,  8  );
 80073d4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80073d8:	061a      	lsls	r2, r3, #24
 80073da:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80073de:	041b      	lsls	r3, r3, #16
 80073e0:	431a      	orrs	r2, r3
 80073e2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	431a      	orrs	r2, r3
 80073ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80073ee:	4313      	orrs	r3, r2
 80073f0:	2200      	movs	r2, #0
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	61fa      	str	r2, [r7, #28]
 80073f6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80073fa:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    GET_UINT32_BE( lo, h,  12 );
 80073fe:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8007402:	061a      	lsls	r2, r3, #24
 8007404:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8007408:	041b      	lsls	r3, r3, #16
 800740a:	431a      	orrs	r2, r3
 800740c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	431a      	orrs	r2, r3
 8007414:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8007418:	4313      	orrs	r3, r2
 800741a:	2200      	movs	r2, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	617a      	str	r2, [r7, #20]
 8007420:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007424:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
    vl = (uint64_t) hi << 32 | lo;
 8007428:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800742c:	f04f 0000 	mov.w	r0, #0
 8007430:	f04f 0100 	mov.w	r1, #0
 8007434:	0011      	movs	r1, r2
 8007436:	2000      	movs	r0, #0
 8007438:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800743c:	ea42 0a00 	orr.w	sl, r2, r0
 8007440:	ea43 0b01 	orr.w	fp, r3, r1
 8007444:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88

    /* 8 = 1000 corresponds to 1 in GF(2^128) */
    ctx->HL[8] = vl;
 8007448:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800744a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800744e:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
    ctx->HH[8] = vh;
 8007452:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007454:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007458:	e9c1 2340 	strd	r2, r3, [r1, #256]	@ 0x100
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_CLMUL ) )
        return( 0 );
#endif

    /* 0 corresponds to 0 in GF(2^128) */
    ctx->HH[0] = 0;
 800745c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
    ctx->HL[0] = 0;
 800746a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800746c:	f04f 0200 	mov.w	r2, #0
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    for( i = 4; i > 0; i >>= 1 )
 8007478:	2304      	movs	r3, #4
 800747a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800747e:	e05b      	b.n	8007538 <gcm_gen_table+0x214>
    {
        uint32_t T = ( vl & 1 ) * 0xe1000000U;
 8007480:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007484:	f003 0201 	and.w	r2, r3, #1
 8007488:	4613      	mov	r3, r2
 800748a:	0152      	lsls	r2, r2, #5
 800748c:	1a9b      	subs	r3, r3, r2
 800748e:	061b      	lsls	r3, r3, #24
 8007490:	65fb      	str	r3, [r7, #92]	@ 0x5c
        vl  = ( vh << 63 ) | ( vl >> 1 );
 8007492:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8007496:	f04f 0400 	mov.w	r4, #0
 800749a:	f04f 0500 	mov.w	r5, #0
 800749e:	07d5      	lsls	r5, r2, #31
 80074a0:	2400      	movs	r4, #0
 80074a2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80074a6:	f04f 0000 	mov.w	r0, #0
 80074aa:	f04f 0100 	mov.w	r1, #0
 80074ae:	0850      	lsrs	r0, r2, #1
 80074b0:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80074b4:	0859      	lsrs	r1, r3, #1
 80074b6:	ea44 0300 	orr.w	r3, r4, r0
 80074ba:	60bb      	str	r3, [r7, #8]
 80074bc:	ea45 0301 	orr.w	r3, r5, r1
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80074c6:	e9c7 3422 	strd	r3, r4, [r7, #136]	@ 0x88
        vh  = ( vh >> 1 ) ^ ( (uint64_t) T << 32);
 80074ca:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80074ce:	f04f 0000 	mov.w	r0, #0
 80074d2:	f04f 0100 	mov.w	r1, #0
 80074d6:	0850      	lsrs	r0, r2, #1
 80074d8:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80074dc:	0859      	lsrs	r1, r3, #1
 80074de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074e0:	2200      	movs	r2, #0
 80074e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80074f0:	0023      	movs	r3, r4
 80074f2:	2200      	movs	r2, #0
 80074f4:	ea80 0402 	eor.w	r4, r0, r2
 80074f8:	603c      	str	r4, [r7, #0]
 80074fa:	404b      	eors	r3, r1
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007502:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80

        ctx->HL[i] = vl;
 8007506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007508:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800750c:	3308      	adds	r3, #8
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	18d1      	adds	r1, r2, r3
 8007512:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8007516:	e9c1 2300 	strd	r2, r3, [r1]
        ctx->HH[i] = vh;
 800751a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800751c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007520:	3318      	adds	r3, #24
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	18d1      	adds	r1, r2, r3
 8007526:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800752a:	e9c1 2300 	strd	r2, r3, [r1]
    for( i = 4; i > 0; i >>= 1 )
 800752e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007532:	105b      	asrs	r3, r3, #1
 8007534:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007538:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800753c:	2b00      	cmp	r3, #0
 800753e:	dc9f      	bgt.n	8007480 <gcm_gen_table+0x15c>
    }

    for( i = 2; i <= 8; i *= 2 )
 8007540:	2302      	movs	r3, #2
 8007542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007546:	e05d      	b.n	8007604 <gcm_gen_table+0x2e0>
    {
        uint64_t *HiL = ctx->HL + i, *HiH = ctx->HH + i;
 8007548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800754a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800754e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	667b      	str	r3, [r7, #100]	@ 0x64
 8007558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800755a:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800755e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	4413      	add	r3, r2
 8007566:	663b      	str	r3, [r7, #96]	@ 0x60
        vh = *HiH;
 8007568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        vl = *HiL;
 8007572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        for( j = 1; j < i; j++ )
 800757c:	2301      	movs	r3, #1
 800757e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007582:	e034      	b.n	80075ee <gcm_gen_table+0x2ca>
        {
            HiH[j] = vh ^ ctx->HH[j];
 8007584:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800758a:	3318      	adds	r3, #24
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	4413      	add	r3, r2
 8007590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007594:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800759c:	18d4      	adds	r4, r2, r3
 800759e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80075a2:	ea80 0502 	eor.w	r5, r0, r2
 80075a6:	633d      	str	r5, [r7, #48]	@ 0x30
 80075a8:	404b      	eors	r3, r1
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80075b0:	e9c4 2300 	strd	r2, r3, [r4]
            HiL[j] = vl ^ ctx->HL[j];
 80075b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075ba:	3308      	adds	r3, #8
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	4413      	add	r3, r2
 80075c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075cc:	18d4      	adds	r4, r2, r3
 80075ce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80075d2:	ea80 0502 	eor.w	r5, r0, r2
 80075d6:	62bd      	str	r5, [r7, #40]	@ 0x28
 80075d8:	404b      	eors	r3, r1
 80075da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075e0:	e9c4 2300 	strd	r2, r3, [r4]
        for( j = 1; j < i; j++ )
 80075e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80075e8:	3301      	adds	r3, #1
 80075ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80075f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075f6:	429a      	cmp	r2, r3
 80075f8:	dbc4      	blt.n	8007584 <gcm_gen_table+0x260>
    for( i = 2; i <= 8; i *= 2 )
 80075fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007604:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007608:	2b08      	cmp	r3, #8
 800760a:	dd9d      	ble.n	8007548 <gcm_gen_table+0x224>
        }
    }

    return( 0 );
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3798      	adds	r7, #152	@ 0x98
 8007612:	46bd      	mov	sp, r7
 8007614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007618 <mbedtls_gcm_setkey>:

int mbedtls_gcm_setkey( mbedtls_gcm_context *ctx,
                        mbedtls_cipher_id_t cipher,
                        const unsigned char *key,
                        unsigned int keybits )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	460b      	mov	r3, r1
 8007626:	72fb      	strb	r3, [r7, #11]

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( key != NULL );
    GCM_VALIDATE_RET( keybits == 128 || keybits == 192 || keybits == 256 );

    cipher_info = mbedtls_cipher_info_from_values( cipher, keybits, MBEDTLS_MODE_ECB );
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	7afb      	ldrb	r3, [r7, #11]
 800762c:	2201      	movs	r2, #1
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff f938 	bl	80068a4 <mbedtls_cipher_info_from_values>
 8007634:	6178      	str	r0, [r7, #20]
    if( cipher_info == NULL )
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d102      	bne.n	8007642 <mbedtls_gcm_setkey+0x2a>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800763c:	f06f 0313 	mvn.w	r3, #19
 8007640:	e02b      	b.n	800769a <mbedtls_gcm_setkey+0x82>

    if( cipher_info->block_size != 16 )
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b10      	cmp	r3, #16
 8007648:	d002      	beq.n	8007650 <mbedtls_gcm_setkey+0x38>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 800764a:	f06f 0313 	mvn.w	r3, #19
 800764e:	e024      	b.n	800769a <mbedtls_gcm_setkey+0x82>

    mbedtls_cipher_free( &ctx->cipher_ctx );
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff f958 	bl	8006908 <mbedtls_cipher_free>

    if( ( ret = mbedtls_cipher_setup( &ctx->cipher_ctx, cipher_info ) ) != 0 )
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6979      	ldr	r1, [r7, #20]
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff f96f 	bl	8006940 <mbedtls_cipher_setup>
 8007662:	6138      	str	r0, [r7, #16]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <mbedtls_gcm_setkey+0x56>
        return( ret );
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	e015      	b.n	800769a <mbedtls_gcm_setkey+0x82>

    if( ( ret = mbedtls_cipher_setkey( &ctx->cipher_ctx, key, keybits,
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	2301      	movs	r3, #1
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	f7ff f98f 	bl	8006998 <mbedtls_cipher_setkey>
 800767a:	6138      	str	r0, [r7, #16]
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <mbedtls_gcm_setkey+0x6e>
                               MBEDTLS_ENCRYPT ) ) != 0 )
    {
        return( ret );
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	e009      	b.n	800769a <mbedtls_gcm_setkey+0x82>
    }

    if( ( ret = gcm_gen_table( ctx ) ) != 0 )
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f7ff fe4c 	bl	8007324 <gcm_gen_table>
 800768c:	6138      	str	r0, [r7, #16]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d001      	beq.n	8007698 <mbedtls_gcm_setkey+0x80>
        return( ret );
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	e000      	b.n	800769a <mbedtls_gcm_setkey+0x82>

    return( 0 );
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <gcm_mult>:
 * Sets output to x times H using the precomputed tables.
 * x and output are seen as elements of GF(2^128) as in [MGV].
 */
static void gcm_mult( mbedtls_gcm_context *ctx, const unsigned char x[16],
                      unsigned char output[16] )
{
 80076a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80076a8:	b099      	sub	sp, #100	@ 0x64
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80076ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80076b0:	637a      	str	r2, [r7, #52]	@ 0x34
    int i = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        mbedtls_aesni_gcm_mult( output, x, h );
        return;
    }
#endif /* MBEDTLS_AESNI_C && MBEDTLS_HAVE_X86_64 */

    lo = x[15] & 0xf;
 80076b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b8:	330f      	adds	r3, #15
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f003 030f 	and.w	r3, r3, #15
 80076c0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    zh = ctx->HH[lo];
 80076c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80076c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076ca:	3318      	adds	r3, #24
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	4413      	add	r3, r2
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    zl = ctx->HL[lo];
 80076d8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80076dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80076de:	3308      	adds	r3, #8
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4413      	add	r3, r2
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    for( i = 15; i >= 0; i-- )
 80076ec:	230f      	movs	r3, #15
 80076ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076f0:	e0e6      	b.n	80078c0 <gcm_mult+0x21c>
    {
        lo = x[i] & 0xf;
 80076f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f6:	4413      	add	r3, r2
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        hi = x[i] >> 4;
 8007702:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007706:	4413      	add	r3, r2
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	091b      	lsrs	r3, r3, #4
 800770c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        if( i != 15 )
 8007710:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007712:	2b0f      	cmp	r3, #15
 8007714:	d068      	beq.n	80077e8 <gcm_mult+0x144>
        {
            rem = (unsigned char) zl & 0xf;
 8007716:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800771a:	f003 030f 	and.w	r3, r3, #15
 800771e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            zl = ( zh << 60 ) | ( zl >> 4 );
 8007722:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007726:	f04f 0400 	mov.w	r4, #0
 800772a:	f04f 0500 	mov.w	r5, #0
 800772e:	0715      	lsls	r5, r2, #28
 8007730:	2400      	movs	r4, #0
 8007732:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007736:	f04f 0000 	mov.w	r0, #0
 800773a:	f04f 0100 	mov.w	r1, #0
 800773e:	0910      	lsrs	r0, r2, #4
 8007740:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8007744:	0919      	lsrs	r1, r3, #4
 8007746:	ea44 0300 	orr.w	r3, r4, r0
 800774a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800774c:	ea45 0301 	orr.w	r3, r5, r1
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007752:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8007756:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
            zh = ( zh >> 4 );
 800775a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800775e:	f04f 0000 	mov.w	r0, #0
 8007762:	f04f 0100 	mov.w	r1, #0
 8007766:	0910      	lsrs	r0, r2, #4
 8007768:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800776c:	0919      	lsrs	r1, r3, #4
 800776e:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
            zh ^= (uint64_t) last4[rem] << 48;
 8007772:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007776:	4ab6      	ldr	r2, [pc, #728]	@ (8007a50 <gcm_mult+0x3ac>)
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4413      	add	r3, r2
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	f04f 0000 	mov.w	r0, #0
 8007784:	f04f 0100 	mov.w	r1, #0
 8007788:	0411      	lsls	r1, r2, #16
 800778a:	2000      	movs	r0, #0
 800778c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007790:	ea82 0400 	eor.w	r4, r2, r0
 8007794:	623c      	str	r4, [r7, #32]
 8007796:	404b      	eors	r3, r1
 8007798:	627b      	str	r3, [r7, #36]	@ 0x24
 800779a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800779e:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
            zh ^= ctx->HH[lo];
 80077a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80077a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077a8:	3318      	adds	r3, #24
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4413      	add	r3, r2
 80077ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077b2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077b6:	ea82 0400 	eor.w	r4, r2, r0
 80077ba:	61bc      	str	r4, [r7, #24]
 80077bc:	404b      	eors	r3, r1
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80077c4:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
            zl ^= ctx->HL[lo];
 80077c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80077cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80077ce:	3308      	adds	r3, #8
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	4413      	add	r3, r2
 80077d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80077dc:	ea82 0800 	eor.w	r8, r2, r0
 80077e0:	ea83 0901 	eor.w	r9, r3, r1
 80077e4:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48

        }

        rem = (unsigned char) zl & 0xf;
 80077e8:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
        zl = ( zh << 60 ) | ( zl >> 4 );
 80077f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80077f8:	f04f 0400 	mov.w	r4, #0
 80077fc:	f04f 0500 	mov.w	r5, #0
 8007800:	0715      	lsls	r5, r2, #28
 8007802:	2400      	movs	r4, #0
 8007804:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007808:	f04f 0000 	mov.w	r0, #0
 800780c:	f04f 0100 	mov.w	r1, #0
 8007810:	0910      	lsrs	r0, r2, #4
 8007812:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 8007816:	0919      	lsrs	r1, r3, #4
 8007818:	ea44 0300 	orr.w	r3, r4, r0
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	ea45 0301 	orr.w	r3, r5, r1
 8007822:	617b      	str	r3, [r7, #20]
 8007824:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007828:	e9c7 3412 	strd	r3, r4, [r7, #72]	@ 0x48
        zh = ( zh >> 4 );
 800782c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007830:	f04f 0000 	mov.w	r0, #0
 8007834:	f04f 0100 	mov.w	r1, #0
 8007838:	0910      	lsrs	r0, r2, #4
 800783a:	ea40 7003 	orr.w	r0, r0, r3, lsl #28
 800783e:	0919      	lsrs	r1, r3, #4
 8007840:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
        zh ^= (uint64_t) last4[rem] << 48;
 8007844:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007848:	4a81      	ldr	r2, [pc, #516]	@ (8007a50 <gcm_mult+0x3ac>)
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	4413      	add	r3, r2
 800784e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007852:	f04f 0000 	mov.w	r0, #0
 8007856:	f04f 0100 	mov.w	r1, #0
 800785a:	0411      	lsls	r1, r2, #16
 800785c:	2000      	movs	r0, #0
 800785e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007862:	ea82 0400 	eor.w	r4, r2, r0
 8007866:	60bc      	str	r4, [r7, #8]
 8007868:	404b      	eors	r3, r1
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007870:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
        zh ^= ctx->HH[hi];
 8007874:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007878:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800787a:	3318      	adds	r3, #24
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007888:	ea82 0400 	eor.w	r4, r2, r0
 800788c:	603c      	str	r4, [r7, #0]
 800788e:	404b      	eors	r3, r1
 8007890:	607b      	str	r3, [r7, #4]
 8007892:	e9d7 3400 	ldrd	r3, r4, [r7]
 8007896:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
        zl ^= ctx->HL[hi];
 800789a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800789e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80078a0:	3308      	adds	r3, #8
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	4413      	add	r3, r2
 80078a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078ae:	ea82 0a00 	eor.w	sl, r2, r0
 80078b2:	ea83 0b01 	eor.w	fp, r3, r1
 80078b6:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
    for( i = 15; i >= 0; i-- )
 80078ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078bc:	3b01      	subs	r3, #1
 80078be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f6bf af15 	bge.w	80076f2 <gcm_mult+0x4e>
    }

    PUT_UINT32_BE( zh >> 32, output, 0 );
 80078c8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	0e0a      	lsrs	r2, r1, #24
 80078d6:	2300      	movs	r3, #0
 80078d8:	b2d2      	uxtb	r2, r2
 80078da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	f04f 0300 	mov.w	r3, #0
 80078ea:	0c0a      	lsrs	r2, r1, #16
 80078ec:	2300      	movs	r3, #0
 80078ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80078f0:	3101      	adds	r1, #1
 80078f2:	b2d3      	uxtb	r3, r2
 80078f4:	700b      	strb	r3, [r1, #0]
 80078f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80078fa:	f04f 0200 	mov.w	r2, #0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	0a0a      	lsrs	r2, r1, #8
 8007904:	2300      	movs	r3, #0
 8007906:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007908:	3102      	adds	r1, #2
 800790a:	b2d3      	uxtb	r3, r2
 800790c:	700b      	strb	r3, [r1, #0]
 800790e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	f04f 0300 	mov.w	r3, #0
 800791a:	000a      	movs	r2, r1
 800791c:	2300      	movs	r3, #0
 800791e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007920:	3103      	adds	r1, #3
 8007922:	b2d3      	uxtb	r3, r2
 8007924:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zh, output, 4 );
 8007926:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	f04f 0300 	mov.w	r3, #0
 8007932:	0e02      	lsrs	r2, r0, #24
 8007934:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007938:	0e0b      	lsrs	r3, r1, #24
 800793a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800793c:	3104      	adds	r1, #4
 800793e:	b2d3      	uxtb	r3, r2
 8007940:	700b      	strb	r3, [r1, #0]
 8007942:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	f04f 0300 	mov.w	r3, #0
 800794e:	0c02      	lsrs	r2, r0, #16
 8007950:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007954:	0c0b      	lsrs	r3, r1, #16
 8007956:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007958:	3105      	adds	r1, #5
 800795a:	b2d3      	uxtb	r3, r2
 800795c:	700b      	strb	r3, [r1, #0]
 800795e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8007962:	f04f 0200 	mov.w	r2, #0
 8007966:	f04f 0300 	mov.w	r3, #0
 800796a:	0a02      	lsrs	r2, r0, #8
 800796c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007970:	0a0b      	lsrs	r3, r1, #8
 8007972:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007974:	3106      	adds	r1, #6
 8007976:	b2d3      	uxtb	r3, r2
 8007978:	700b      	strb	r3, [r1, #0]
 800797a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800797c:	3307      	adds	r3, #7
 800797e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8007982:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_BE( zl >> 32, output, 8 );
 8007984:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	0e0a      	lsrs	r2, r1, #24
 8007992:	2300      	movs	r3, #0
 8007994:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007996:	3108      	adds	r1, #8
 8007998:	b2d3      	uxtb	r3, r2
 800799a:	700b      	strb	r3, [r1, #0]
 800799c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80079a0:	f04f 0200 	mov.w	r2, #0
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	0c0a      	lsrs	r2, r1, #16
 80079aa:	2300      	movs	r3, #0
 80079ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80079ae:	3109      	adds	r1, #9
 80079b0:	b2d3      	uxtb	r3, r2
 80079b2:	700b      	strb	r3, [r1, #0]
 80079b4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80079b8:	f04f 0200 	mov.w	r2, #0
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	0a0a      	lsrs	r2, r1, #8
 80079c2:	2300      	movs	r3, #0
 80079c4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80079c6:	310a      	adds	r1, #10
 80079c8:	b2d3      	uxtb	r3, r2
 80079ca:	700b      	strb	r3, [r1, #0]
 80079cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	f04f 0300 	mov.w	r3, #0
 80079d8:	000a      	movs	r2, r1
 80079da:	2300      	movs	r3, #0
 80079dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80079de:	310b      	adds	r1, #11
 80079e0:	b2d3      	uxtb	r3, r2
 80079e2:	700b      	strb	r3, [r1, #0]
    PUT_UINT32_BE( zl, output, 12 );
 80079e4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	f04f 0300 	mov.w	r3, #0
 80079f0:	0e02      	lsrs	r2, r0, #24
 80079f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80079f6:	0e0b      	lsrs	r3, r1, #24
 80079f8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80079fa:	310c      	adds	r1, #12
 80079fc:	b2d3      	uxtb	r3, r2
 80079fe:	700b      	strb	r3, [r1, #0]
 8007a00:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	0c02      	lsrs	r2, r0, #16
 8007a0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007a12:	0c0b      	lsrs	r3, r1, #16
 8007a14:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a16:	310d      	adds	r1, #13
 8007a18:	b2d3      	uxtb	r3, r2
 8007a1a:	700b      	strb	r3, [r1, #0]
 8007a1c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007a20:	f04f 0200 	mov.w	r2, #0
 8007a24:	f04f 0300 	mov.w	r3, #0
 8007a28:	0a02      	lsrs	r2, r0, #8
 8007a2a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007a2e:	0a0b      	lsrs	r3, r1, #8
 8007a30:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a32:	310e      	adds	r1, #14
 8007a34:	b2d3      	uxtb	r3, r2
 8007a36:	700b      	strb	r3, [r1, #0]
 8007a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a3a:	330f      	adds	r3, #15
 8007a3c:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8007a40:	701a      	strb	r2, [r3, #0]
}
 8007a42:	bf00      	nop
 8007a44:	3764      	adds	r7, #100	@ 0x64
 8007a46:	46bd      	mov	sp, r7
 8007a48:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	0800c8d0 	.word	0x0800c8d0

08007a54 <mbedtls_gcm_starts>:
                int mode,
                const unsigned char *iv,
                size_t iv_len,
                const unsigned char *add,
                size_t add_len )
{
 8007a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a58:	b090      	sub	sp, #64	@ 0x40
 8007a5a:	af02      	add	r7, sp, #8
 8007a5c:	60f8      	str	r0, [r7, #12]
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	603b      	str	r3, [r7, #0]
    int ret;
    unsigned char work_buf[16];
    size_t i;
    const unsigned char *p;
    size_t use_len, olen = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]
    GCM_VALIDATE_RET( iv != NULL );
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );

    /* IV and AD are limited to 2^64 bits, so 2^61 bytes */
    /* IV is not allowed to be zero length */
    if( iv_len == 0 ||
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d019      	beq.n	8007aa2 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2200      	movs	r2, #0
 8007a72:	469a      	mov	sl, r3
 8007a74:	4693      	mov	fp, r2
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	ea4f 725b 	mov.w	r2, fp, lsr #29
 8007a82:	2300      	movs	r3, #0
    if( iv_len == 0 ||
 8007a84:	4313      	orrs	r3, r2
 8007a86:	d10c      	bne.n	8007aa2 <mbedtls_gcm_starts+0x4e>
      ( (uint64_t) add_len ) >> 61 != 0 )
 8007a88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	4698      	mov	r8, r3
 8007a8e:	4691      	mov	r9, r2
 8007a90:	f04f 0200 	mov.w	r2, #0
 8007a94:	f04f 0300 	mov.w	r3, #0
 8007a98:	ea4f 7259 	mov.w	r2, r9, lsr #29
 8007a9c:	2300      	movs	r3, #0
      ( (uint64_t) iv_len  ) >> 61 != 0 ||
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	d002      	beq.n	8007aa8 <mbedtls_gcm_starts+0x54>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8007aa2:	f06f 0313 	mvn.w	r3, #19
 8007aa6:	e107      	b.n	8007cb8 <mbedtls_gcm_starts+0x264>
    }

    memset( ctx->y, 0x00, sizeof(ctx->y) );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007aae:	2210      	movs	r2, #16
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 fb2c 	bl	8009110 <memset>
    memset( ctx->buf, 0x00, sizeof(ctx->buf) );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007abe:	2210      	movs	r2, #16
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 fb24 	bl	8009110 <memset>

    ctx->mode = mode;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
    ctx->len = 0;
 8007ad0:	68f9      	ldr	r1, [r7, #12]
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	e9c1 2350 	strd	r2, r3, [r1, #320]	@ 0x140
    ctx->add_len = 0;
 8007ade:	68f9      	ldr	r1, [r7, #12]
 8007ae0:	f04f 0200 	mov.w	r2, #0
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	e9c1 2352 	strd	r2, r3, [r1, #328]	@ 0x148

    if( iv_len == 12 )
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b0c      	cmp	r3, #12
 8007af0:	d10c      	bne.n	8007b0c <mbedtls_gcm_starts+0xb8>
    {
        memcpy( ctx->y, iv, iv_len );
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 fb92 	bl	8009226 <memcpy>
        ctx->y[15] = 1;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 216f 	strb.w	r2, [r3, #367]	@ 0x16f
 8007b0a:	e07f      	b.n	8007c0c <mbedtls_gcm_starts+0x1b8>
    }
    else
    {
        memset( work_buf, 0x00, 16 );
 8007b0c:	f107 0318 	add.w	r3, r7, #24
 8007b10:	2210      	movs	r2, #16
 8007b12:	2100      	movs	r1, #0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 fafb 	bl	8009110 <memset>
        PUT_UINT32_BE( iv_len * 8, work_buf, 12 );
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	0e1b      	lsrs	r3, r3, #24
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	00db      	lsls	r3, r3, #3
 8007b2a:	0c1b      	lsrs	r3, r3, #16
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	00db      	lsls	r3, r3, #3
 8007b36:	0a1b      	lsrs	r3, r3, #8
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	00db      	lsls	r3, r3, #3
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        p = iv;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	633b      	str	r3, [r7, #48]	@ 0x30
        while( iv_len > 0 )
 8007b4e:	e033      	b.n	8007bb8 <mbedtls_gcm_starts+0x164>
        {
            use_len = ( iv_len < 16 ) ? iv_len : 16;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	bf28      	it	cs
 8007b56:	2310      	movcs	r3, #16
 8007b58:	62fb      	str	r3, [r7, #44]	@ 0x2c

            for( i = 0; i < use_len; i++ )
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5e:	e015      	b.n	8007b8c <mbedtls_gcm_starts+0x138>
                ctx->y[i] ^= p[i];
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b64:	4413      	add	r3, r2
 8007b66:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b70:	440b      	add	r3, r1
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	4053      	eors	r3, r2
 8007b76:	b2d9      	uxtb	r1, r3
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007b82:	460a      	mov	r2, r1
 8007b84:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < use_len; i++ )
 8007b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b88:	3301      	adds	r3, #1
 8007b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d3e5      	bcc.n	8007b60 <mbedtls_gcm_starts+0x10c>

            gcm_mult( ctx, ctx->y, ctx->y );
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f7ff fd7e 	bl	80076a4 <gcm_mult>

            iv_len -= use_len;
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	603b      	str	r3, [r7, #0]
            p += use_len;
 8007bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb4:	4413      	add	r3, r2
 8007bb6:	633b      	str	r3, [r7, #48]	@ 0x30
        while( iv_len > 0 )
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1c8      	bne.n	8007b50 <mbedtls_gcm_starts+0xfc>
        }

        for( i = 0; i < 16; i++ )
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bc2:	e016      	b.n	8007bf2 <mbedtls_gcm_starts+0x19e>
            ctx->y[i] ^= work_buf[i];
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007bce:	781a      	ldrb	r2, [r3, #0]
 8007bd0:	f107 0118 	add.w	r1, r7, #24
 8007bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd6:	440b      	add	r3, r1
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	4053      	eors	r3, r2
 8007bdc:	b2d9      	uxtb	r1, r3
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007be8:	460a      	mov	r2, r1
 8007bea:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 8007bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bee:	3301      	adds	r3, #1
 8007bf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf4:	2b0f      	cmp	r3, #15
 8007bf6:	d9e5      	bls.n	8007bc4 <mbedtls_gcm_starts+0x170>

        gcm_mult( ctx, ctx->y, ctx->y );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007c04:	461a      	mov	r2, r3
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f7ff fd4c 	bl	80076a4 <gcm_mult>
    }

    if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ctx->base_ectr,
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 72a8 	add.w	r2, r3, #336	@ 0x150
 8007c1a:	f107 0314 	add.w	r3, r7, #20
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	2210      	movs	r2, #16
 8007c24:	f7fe ff12 	bl	8006a4c <mbedtls_cipher_update>
 8007c28:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <mbedtls_gcm_starts+0x1e0>
                             &olen ) ) != 0 )
    {
        return( ret );
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	e041      	b.n	8007cb8 <mbedtls_gcm_starts+0x264>
    }

    ctx->add_len = add_len;
 8007c34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c36:	2200      	movs	r2, #0
 8007c38:	461c      	mov	r4, r3
 8007c3a:	4615      	mov	r5, r2
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	e9c3 4552 	strd	r4, r5, [r3, #328]	@ 0x148
    p = add;
 8007c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c44:	633b      	str	r3, [r7, #48]	@ 0x30
    while( add_len > 0 )
 8007c46:	e033      	b.n	8007cb0 <mbedtls_gcm_starts+0x25c>
    {
        use_len = ( add_len < 16 ) ? add_len : 16;
 8007c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c4a:	2b10      	cmp	r3, #16
 8007c4c:	bf28      	it	cs
 8007c4e:	2310      	movcs	r3, #16
 8007c50:	62fb      	str	r3, [r7, #44]	@ 0x2c

        for( i = 0; i < use_len; i++ )
 8007c52:	2300      	movs	r3, #0
 8007c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c56:	e015      	b.n	8007c84 <mbedtls_gcm_starts+0x230>
            ctx->buf[i] ^= p[i];
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007c62:	781a      	ldrb	r2, [r3, #0]
 8007c64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c68:	440b      	add	r3, r1
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	4053      	eors	r3, r2
 8007c6e:	b2d9      	uxtb	r1, r3
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007c7a:	460a      	mov	r2, r1
 8007c7c:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c80:	3301      	adds	r3, #1
 8007c82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d3e5      	bcc.n	8007c58 <mbedtls_gcm_starts+0x204>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007c98:	461a      	mov	r2, r3
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff fd02 	bl	80076a4 <gcm_mult>

        add_len -= use_len;
 8007ca0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        p += use_len;
 8007ca8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cac:	4413      	add	r3, r2
 8007cae:	633b      	str	r3, [r7, #48]	@ 0x30
    while( add_len > 0 )
 8007cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1c8      	bne.n	8007c48 <mbedtls_gcm_starts+0x1f4>
    }

    return( 0 );
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3738      	adds	r7, #56	@ 0x38
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007cc2 <mbedtls_gcm_update>:

int mbedtls_gcm_update( mbedtls_gcm_context *ctx,
                size_t length,
                const unsigned char *input,
                unsigned char *output )
{
 8007cc2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc6:	b096      	sub	sp, #88	@ 0x58
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	6278      	str	r0, [r7, #36]	@ 0x24
 8007ccc:	6239      	str	r1, [r7, #32]
 8007cce:	61fa      	str	r2, [r7, #28]
 8007cd0:	61bb      	str	r3, [r7, #24]
    int ret;
    unsigned char ectr[16];
    size_t i;
    const unsigned char *p;
    unsigned char *out_p = output;
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t use_len, olen = 0;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	62bb      	str	r3, [r7, #40]	@ 0x28

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( output > input && (size_t) ( output - input ) < length )
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d909      	bls.n	8007cf6 <mbedtls_gcm_update+0x34>
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d902      	bls.n	8007cf6 <mbedtls_gcm_update+0x34>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8007cf0:	f06f 0313 	mvn.w	r3, #19
 8007cf4:	e0d8      	b.n	8007ea8 <mbedtls_gcm_update+0x1e6>

    /* Total length is restricted to 2^39 - 256 bits, ie 2^36 - 2^5 bytes
     * Also check for possible overflow */
    if( ctx->len + length < ctx->len ||
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8007cfc:	6a39      	ldr	r1, [r7, #32]
 8007cfe:	2000      	movs	r0, #0
 8007d00:	6139      	str	r1, [r7, #16]
 8007d02:	6178      	str	r0, [r7, #20]
 8007d04:	6939      	ldr	r1, [r7, #16]
 8007d06:	eb12 0801 	adds.w	r8, r2, r1
 8007d0a:	6979      	ldr	r1, [r7, #20]
 8007d0c:	eb43 0901 	adc.w	r9, r3, r1
 8007d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d12:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8007d16:	4590      	cmp	r8, r2
 8007d18:	eb79 0303 	sbcs.w	r3, r9, r3
 8007d1c:	d313      	bcc.n	8007d46 <mbedtls_gcm_update+0x84>
        (uint64_t) ctx->len + length > 0xFFFFFFFE0ull )
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d20:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8007d24:	6a39      	ldr	r1, [r7, #32]
 8007d26:	2000      	movs	r0, #0
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8007d30:	4641      	mov	r1, r8
 8007d32:	1854      	adds	r4, r2, r1
 8007d34:	4649      	mov	r1, r9
 8007d36:	eb43 0101 	adc.w	r1, r3, r1
 8007d3a:	460d      	mov	r5, r1
    if( ctx->len + length < ctx->len ||
 8007d3c:	f114 0f1f 	cmn.w	r4, #31
 8007d40:	f175 030f 	sbcs.w	r3, r5, #15
 8007d44:	d302      	bcc.n	8007d4c <mbedtls_gcm_update+0x8a>
    {
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8007d46:	f06f 0313 	mvn.w	r3, #19
 8007d4a:	e0ad      	b.n	8007ea8 <mbedtls_gcm_update+0x1e6>
    }

    ctx->len += length;
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	e9d3 2350 	ldrd	r2, r3, [r3, #320]	@ 0x140
 8007d52:	6a39      	ldr	r1, [r7, #32]
 8007d54:	2000      	movs	r0, #0
 8007d56:	468a      	mov	sl, r1
 8007d58:	4683      	mov	fp, r0
 8007d5a:	eb12 010a 	adds.w	r1, r2, sl
 8007d5e:	6039      	str	r1, [r7, #0]
 8007d60:	eb43 030b 	adc.w	r3, r3, fp
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007d6c:	e9c3 1250 	strd	r1, r2, [r3, #320]	@ 0x140

    p = input;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	64bb      	str	r3, [r7, #72]	@ 0x48
    while( length > 0 )
 8007d74:	e093      	b.n	8007e9e <mbedtls_gcm_update+0x1dc>
    {
        use_len = ( length < 16 ) ? length : 16;
 8007d76:	6a3b      	ldr	r3, [r7, #32]
 8007d78:	2b10      	cmp	r3, #16
 8007d7a:	bf28      	it	cs
 8007d7c:	2310      	movcs	r3, #16
 8007d7e:	643b      	str	r3, [r7, #64]	@ 0x40

        for( i = 16; i > 12; i-- )
 8007d80:	2310      	movs	r3, #16
 8007d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d84:	e014      	b.n	8007db0 <mbedtls_gcm_update+0xee>
            if( ++ctx->y[i - 1] != 0 )
 8007d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d8c:	441a      	add	r2, r3
 8007d8e:	f892 2160 	ldrb.w	r2, [r2, #352]	@ 0x160
 8007d92:	3201      	adds	r2, #1
 8007d94:	b2d1      	uxtb	r1, r2
 8007d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d98:	441a      	add	r2, r3
 8007d9a:	f882 1160 	strb.w	r1, [r2, #352]	@ 0x160
 8007d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007da0:	4413      	add	r3, r2
 8007da2:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d106      	bne.n	8007db8 <mbedtls_gcm_update+0xf6>
        for( i = 16; i > 12; i-- )
 8007daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dac:	3b01      	subs	r3, #1
 8007dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db2:	2b0c      	cmp	r3, #12
 8007db4:	d8e7      	bhi.n	8007d86 <mbedtls_gcm_update+0xc4>
 8007db6:	e000      	b.n	8007dba <mbedtls_gcm_update+0xf8>
                break;
 8007db8:	bf00      	nop

        if( ( ret = mbedtls_cipher_update( &ctx->cipher_ctx, ctx->y, 16, ectr,
 8007dba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbe:	f503 71b0 	add.w	r1, r3, #352	@ 0x160
 8007dc2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	2210      	movs	r2, #16
 8007dd0:	f7fe fe3c 	bl	8006a4c <mbedtls_cipher_update>
 8007dd4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <mbedtls_gcm_update+0x11e>
                                   &olen ) ) != 0 )
        {
            return( ret );
 8007ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dde:	e063      	b.n	8007ea8 <mbedtls_gcm_update+0x1e6>
        }

        for( i = 0; i < use_len; i++ )
 8007de0:	2300      	movs	r3, #0
 8007de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de4:	e041      	b.n	8007e6a <mbedtls_gcm_update+0x1a8>
        {
            if( ctx->mode == MBEDTLS_GCM_DECRYPT )
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d112      	bne.n	8007e16 <mbedtls_gcm_update+0x154>
                ctx->buf[i] ^= p[i];
 8007df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007dfa:	781a      	ldrb	r2, [r3, #0]
 8007dfc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e00:	440b      	add	r3, r1
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4053      	eors	r3, r2
 8007e06:	b2d9      	uxtb	r1, r3
 8007e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007e12:	460a      	mov	r2, r1
 8007e14:	701a      	strb	r2, [r3, #0]
            out_p[i] = ectr[i] ^ p[i];
 8007e16:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8007e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1c:	4413      	add	r3, r2
 8007e1e:	7819      	ldrb	r1, [r3, #0]
 8007e20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e24:	4413      	add	r3, r2
 8007e26:	781a      	ldrb	r2, [r3, #0]
 8007e28:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8007e2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e2c:	4403      	add	r3, r0
 8007e2e:	404a      	eors	r2, r1
 8007e30:	b2d2      	uxtb	r2, r2
 8007e32:	701a      	strb	r2, [r3, #0]
            if( ctx->mode == MBEDTLS_GCM_ENCRYPT )
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d112      	bne.n	8007e64 <mbedtls_gcm_update+0x1a2>
                ctx->buf[i] ^= out_p[i];
 8007e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e4e:	440b      	add	r3, r1
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	4053      	eors	r3, r2
 8007e54:	b2d9      	uxtb	r1, r3
 8007e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007e60:	460a      	mov	r2, r1
 8007e62:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < use_len; i++ )
 8007e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e66:	3301      	adds	r3, #1
 8007e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e6a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d3b9      	bcc.n	8007de6 <mbedtls_gcm_update+0x124>
        }

        gcm_mult( ctx, ctx->buf, ctx->buf );
 8007e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e74:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 8007e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e82:	f7ff fc0f 	bl	80076a4 <gcm_mult>

        length -= use_len;
 8007e86:	6a3a      	ldr	r2, [r7, #32]
 8007e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	623b      	str	r3, [r7, #32]
        p += use_len;
 8007e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e92:	4413      	add	r3, r2
 8007e94:	64bb      	str	r3, [r7, #72]	@ 0x48
        out_p += use_len;
 8007e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e9a:	4413      	add	r3, r2
 8007e9c:	647b      	str	r3, [r7, #68]	@ 0x44
    while( length > 0 )
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f47f af68 	bne.w	8007d76 <mbedtls_gcm_update+0xb4>
    }

    return( 0 );
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3750      	adds	r7, #80	@ 0x50
 8007eac:	46bd      	mov	sp, r7
 8007eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007eb2 <mbedtls_gcm_finish>:

int mbedtls_gcm_finish( mbedtls_gcm_context *ctx,
                unsigned char *tag,
                size_t tag_len )
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b08e      	sub	sp, #56	@ 0x38
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
    uint64_t orig_add_len;

    GCM_VALIDATE_RET( ctx != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    orig_len = ctx->len * 8;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	@ 0x140
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	00cb      	lsls	r3, r1, #3
 8007ece:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007ed2:	00c2      	lsls	r2, r0, #3
 8007ed4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    orig_add_len = ctx->add_len * 8;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	@ 0x148
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	00cb      	lsls	r3, r1, #3
 8007ee8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007eec:	00c2      	lsls	r2, r0, #3
 8007eee:	e9c7 2308 	strd	r2, r3, [r7, #32]

    if( tag_len > 16 || tag_len < 4 )
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b10      	cmp	r3, #16
 8007ef6:	d802      	bhi.n	8007efe <mbedtls_gcm_finish+0x4c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d802      	bhi.n	8007f04 <mbedtls_gcm_finish+0x52>
        return( MBEDTLS_ERR_GCM_BAD_INPUT );
 8007efe:	f06f 0313 	mvn.w	r3, #19
 8007f02:	e0f7      	b.n	80080f4 <mbedtls_gcm_finish+0x242>

    memcpy( tag, ctx->base_ectr, tag_len );
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	68b8      	ldr	r0, [r7, #8]
 8007f10:	f001 f989 	bl	8009226 <memcpy>

    if( orig_len || orig_add_len )
 8007f14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	d104      	bne.n	8007f26 <mbedtls_gcm_finish+0x74>
 8007f1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f000 80e6 	beq.w	80080f2 <mbedtls_gcm_finish+0x240>
    {
        memset( work_buf, 0x00, 16 );
 8007f26:	f107 0310 	add.w	r3, r7, #16
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 f8ee 	bl	8009110 <memset>

        PUT_UINT32_BE( ( orig_add_len >> 32 ), work_buf, 0  );
 8007f34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f38:	f04f 0200 	mov.w	r2, #0
 8007f3c:	f04f 0300 	mov.w	r3, #0
 8007f40:	0e0a      	lsrs	r2, r1, #24
 8007f42:	2300      	movs	r3, #0
 8007f44:	b2d3      	uxtb	r3, r2
 8007f46:	743b      	strb	r3, [r7, #16]
 8007f48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	0c0a      	lsrs	r2, r1, #16
 8007f56:	2300      	movs	r3, #0
 8007f58:	b2d3      	uxtb	r3, r2
 8007f5a:	747b      	strb	r3, [r7, #17]
 8007f5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f60:	f04f 0200 	mov.w	r2, #0
 8007f64:	f04f 0300 	mov.w	r3, #0
 8007f68:	0a0a      	lsrs	r2, r1, #8
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	b2d3      	uxtb	r3, r2
 8007f6e:	74bb      	strb	r3, [r7, #18]
 8007f70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f74:	f04f 0200 	mov.w	r2, #0
 8007f78:	f04f 0300 	mov.w	r3, #0
 8007f7c:	000a      	movs	r2, r1
 8007f7e:	2300      	movs	r3, #0
 8007f80:	b2d3      	uxtb	r3, r2
 8007f82:	74fb      	strb	r3, [r7, #19]
        PUT_UINT32_BE( ( orig_add_len       ), work_buf, 4  );
 8007f84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f88:	f04f 0200 	mov.w	r2, #0
 8007f8c:	f04f 0300 	mov.w	r3, #0
 8007f90:	0e02      	lsrs	r2, r0, #24
 8007f92:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007f96:	0e0b      	lsrs	r3, r1, #24
 8007f98:	b2d3      	uxtb	r3, r2
 8007f9a:	753b      	strb	r3, [r7, #20]
 8007f9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	0c02      	lsrs	r2, r0, #16
 8007faa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007fae:	0c0b      	lsrs	r3, r1, #16
 8007fb0:	b2d3      	uxtb	r3, r2
 8007fb2:	757b      	strb	r3, [r7, #21]
 8007fb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	0a02      	lsrs	r2, r0, #8
 8007fc2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8007fc6:	0a0b      	lsrs	r3, r1, #8
 8007fc8:	b2d3      	uxtb	r3, r2
 8007fca:	75bb      	strb	r3, [r7, #22]
 8007fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007fd0:	75fb      	strb	r3, [r7, #23]
        PUT_UINT32_BE( ( orig_len     >> 32 ), work_buf, 8  );
 8007fd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007fd6:	f04f 0200 	mov.w	r2, #0
 8007fda:	f04f 0300 	mov.w	r3, #0
 8007fde:	0e0a      	lsrs	r2, r1, #24
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	b2d3      	uxtb	r3, r2
 8007fe4:	763b      	strb	r3, [r7, #24]
 8007fe6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007fea:	f04f 0200 	mov.w	r2, #0
 8007fee:	f04f 0300 	mov.w	r3, #0
 8007ff2:	0c0a      	lsrs	r2, r1, #16
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	b2d3      	uxtb	r3, r2
 8007ff8:	767b      	strb	r3, [r7, #25]
 8007ffa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	0a0a      	lsrs	r2, r1, #8
 8008008:	2300      	movs	r3, #0
 800800a:	b2d3      	uxtb	r3, r2
 800800c:	76bb      	strb	r3, [r7, #26]
 800800e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008012:	f04f 0200 	mov.w	r2, #0
 8008016:	f04f 0300 	mov.w	r3, #0
 800801a:	000a      	movs	r2, r1
 800801c:	2300      	movs	r3, #0
 800801e:	b2d3      	uxtb	r3, r2
 8008020:	76fb      	strb	r3, [r7, #27]
        PUT_UINT32_BE( ( orig_len           ), work_buf, 12 );
 8008022:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008026:	f04f 0200 	mov.w	r2, #0
 800802a:	f04f 0300 	mov.w	r3, #0
 800802e:	0e02      	lsrs	r2, r0, #24
 8008030:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008034:	0e0b      	lsrs	r3, r1, #24
 8008036:	b2d3      	uxtb	r3, r2
 8008038:	773b      	strb	r3, [r7, #28]
 800803a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	f04f 0300 	mov.w	r3, #0
 8008046:	0c02      	lsrs	r2, r0, #16
 8008048:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800804c:	0c0b      	lsrs	r3, r1, #16
 800804e:	b2d3      	uxtb	r3, r2
 8008050:	777b      	strb	r3, [r7, #29]
 8008052:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	f04f 0300 	mov.w	r3, #0
 800805e:	0a02      	lsrs	r2, r0, #8
 8008060:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008064:	0a0b      	lsrs	r3, r1, #8
 8008066:	b2d3      	uxtb	r3, r2
 8008068:	77bb      	strb	r3, [r7, #30]
 800806a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800806e:	77fb      	strb	r3, [r7, #31]

        for( i = 0; i < 16; i++ )
 8008070:	2300      	movs	r3, #0
 8008072:	637b      	str	r3, [r7, #52]	@ 0x34
 8008074:	e016      	b.n	80080a4 <mbedtls_gcm_finish+0x1f2>
            ctx->buf[i] ^= work_buf[i];
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800807a:	4413      	add	r3, r2
 800807c:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8008080:	781a      	ldrb	r2, [r3, #0]
 8008082:	f107 0110 	add.w	r1, r7, #16
 8008086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008088:	440b      	add	r3, r1
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	4053      	eors	r3, r2
 800808e:	b2d9      	uxtb	r1, r3
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008094:	4413      	add	r3, r2
 8008096:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800809a:	460a      	mov	r2, r1
 800809c:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < 16; i++ )
 800809e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a0:	3301      	adds	r3, #1
 80080a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80080a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a6:	2b0f      	cmp	r3, #15
 80080a8:	d9e5      	bls.n	8008076 <mbedtls_gcm_finish+0x1c4>

        gcm_mult( ctx, ctx->buf, ctx->buf );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f503 71b8 	add.w	r1, r3, #368	@ 0x170
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80080b6:	461a      	mov	r2, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff faf3 	bl	80076a4 <gcm_mult>

        for( i = 0; i < tag_len; i++ )
 80080be:	2300      	movs	r3, #0
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080c2:	e012      	b.n	80080ea <mbedtls_gcm_finish+0x238>
            tag[i] ^= ctx->buf[i];
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080c8:	4413      	add	r3, r2
 80080ca:	7819      	ldrb	r1, [r3, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	68b8      	ldr	r0, [r7, #8]
 80080da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080dc:	4403      	add	r3, r0
 80080de:	404a      	eors	r2, r1
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	701a      	strb	r2, [r3, #0]
        for( i = 0; i < tag_len; i++ )
 80080e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080e6:	3301      	adds	r3, #1
 80080e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d3e8      	bcc.n	80080c4 <mbedtls_gcm_finish+0x212>
    }

    return( 0 );
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3738      	adds	r7, #56	@ 0x38
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <mbedtls_gcm_crypt_and_tag>:
                       size_t add_len,
                       const unsigned char *input,
                       unsigned char *output,
                       size_t tag_len,
                       unsigned char *tag )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b088      	sub	sp, #32
 8008100:	af02      	add	r7, sp, #8
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	603b      	str	r3, [r7, #0]
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );
    GCM_VALIDATE_RET( tag != NULL );

    if( ( ret = mbedtls_gcm_starts( ctx, mode, iv, iv_len, add, add_len ) ) != 0 )
 800810a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	683a      	ldr	r2, [r7, #0]
 8008116:	68b9      	ldr	r1, [r7, #8]
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff fc9b 	bl	8007a54 <mbedtls_gcm_starts>
 800811e:	6178      	str	r0, [r7, #20]
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <mbedtls_gcm_crypt_and_tag+0x2e>
        return( ret );
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	e017      	b.n	800815a <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_update( ctx, length, input, output ) ) != 0 )
 800812a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f7ff fdc6 	bl	8007cc2 <mbedtls_gcm_update>
 8008136:	6178      	str	r0, [r7, #20]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <mbedtls_gcm_crypt_and_tag+0x46>
        return( ret );
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	e00b      	b.n	800815a <mbedtls_gcm_crypt_and_tag+0x5e>

    if( ( ret = mbedtls_gcm_finish( ctx, tag, tag_len ) ) != 0 )
 8008142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008144:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff feb3 	bl	8007eb2 <mbedtls_gcm_finish>
 800814c:	6178      	str	r0, [r7, #20]
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <mbedtls_gcm_crypt_and_tag+0x5c>
        return( ret );
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	e000      	b.n	800815a <mbedtls_gcm_crypt_and_tag+0x5e>

    return( 0 );
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <mbedtls_gcm_auth_decrypt>:
                      size_t add_len,
                      const unsigned char *tag,
                      size_t tag_len,
                      const unsigned char *input,
                      unsigned char *output )
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b094      	sub	sp, #80	@ 0x50
 8008166:	af08      	add	r7, sp, #32
 8008168:	60f8      	str	r0, [r7, #12]
 800816a:	60b9      	str	r1, [r7, #8]
 800816c:	607a      	str	r2, [r7, #4]
 800816e:	603b      	str	r3, [r7, #0]
    GCM_VALIDATE_RET( add_len == 0 || add != NULL );
    GCM_VALIDATE_RET( tag != NULL );
    GCM_VALIDATE_RET( length == 0 || input != NULL );
    GCM_VALIDATE_RET( length == 0 || output != NULL );

    if( ( ret = mbedtls_gcm_crypt_and_tag( ctx, MBEDTLS_GCM_DECRYPT, length,
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	9306      	str	r3, [sp, #24]
 8008176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008178:	9305      	str	r3, [sp, #20]
 800817a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800817c:	9304      	str	r3, [sp, #16]
 800817e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008184:	9302      	str	r3, [sp, #8]
 8008186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	2100      	movs	r1, #0
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7ff ffb1 	bl	80080fc <mbedtls_gcm_crypt_and_tag>
 800819a:	6278      	str	r0, [r7, #36]	@ 0x24
 800819c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <mbedtls_gcm_auth_decrypt+0x44>
                                   iv, iv_len, add, add_len,
                                   input, output, tag_len, check_tag ) ) != 0 )
    {
        return( ret );
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	e025      	b.n	80081f2 <mbedtls_gcm_auth_decrypt+0x90>
    }

    /* Check tag in "constant-time" */
    for( diff = 0, i = 0; i < tag_len; i++ )
 80081a6:	2300      	movs	r3, #0
 80081a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081aa:	2300      	movs	r3, #0
 80081ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ae:	e011      	b.n	80081d4 <mbedtls_gcm_auth_decrypt+0x72>
        diff |= tag[i] ^ check_tag[i];
 80081b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80081b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b4:	4413      	add	r3, r2
 80081b6:	781a      	ldrb	r2, [r3, #0]
 80081b8:	f107 0114 	add.w	r1, r7, #20
 80081bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081be:	440b      	add	r3, r1
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	4053      	eors	r3, r2
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	4313      	orrs	r3, r2
 80081cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    for( diff = 0, i = 0; i < tag_len; i++ )
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	3301      	adds	r3, #1
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081d8:	429a      	cmp	r2, r3
 80081da:	d3e9      	bcc.n	80081b0 <mbedtls_gcm_auth_decrypt+0x4e>

    if( diff != 0 )
 80081dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d006      	beq.n	80081f0 <mbedtls_gcm_auth_decrypt+0x8e>
    {
        mbedtls_platform_zeroize( output, length );
 80081e2:	68b9      	ldr	r1, [r7, #8]
 80081e4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80081e6:	f000 f81d 	bl	8008224 <mbedtls_platform_zeroize>
        return( MBEDTLS_ERR_GCM_AUTH_FAILED );
 80081ea:	f06f 0311 	mvn.w	r3, #17
 80081ee:	e000      	b.n	80081f2 <mbedtls_gcm_auth_decrypt+0x90>
    }

    return( 0 );
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3730      	adds	r7, #48	@ 0x30
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <mbedtls_gcm_free>:

void mbedtls_gcm_free( mbedtls_gcm_context *ctx )
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d009      	beq.n	800821c <mbedtls_gcm_free+0x22>
        return;
    mbedtls_cipher_free( &ctx->cipher_ctx );
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe fb7c 	bl	8006908 <mbedtls_cipher_free>
    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_gcm_context ) );
 8008210:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 f805 	bl	8008224 <mbedtls_platform_zeroize>
 800821a:	e000      	b.n	800821e <mbedtls_gcm_free+0x24>
        return;
 800821c:	bf00      	nop
}
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 800822e:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <mbedtls_platform_zeroize+0x20>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	2100      	movs	r1, #0
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	20000010 	.word	0x20000010

08008248 <mul64>:

    return( lo + ( me << 16 ) + ( (uint64_t) hi << 32 ) );
}
#else
static inline uint64_t mul64( uint32_t a, uint32_t b )
{
 8008248:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	6039      	str	r1, [r7, #0]
    return( (uint64_t) a * b );
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	2000      	movs	r0, #0
 8008258:	4688      	mov	r8, r1
 800825a:	4681      	mov	r9, r0
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	2000      	movs	r0, #0
 8008260:	460c      	mov	r4, r1
 8008262:	4605      	mov	r5, r0
 8008264:	fb04 f009 	mul.w	r0, r4, r9
 8008268:	fb08 f105 	mul.w	r1, r8, r5
 800826c:	4401      	add	r1, r0
 800826e:	fba8 2304 	umull	r2, r3, r8, r4
 8008272:	4419      	add	r1, r3
 8008274:	460b      	mov	r3, r1
}
 8008276:	4610      	mov	r0, r2
 8008278:	4619      	mov	r1, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8008282:	4770      	bx	lr

08008284 <poly1305_process>:
 */
static void poly1305_process( mbedtls_poly1305_context *ctx,
                              size_t nblocks,
                              const unsigned char *input,
                              uint32_t needs_padding )
{
 8008284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008288:	b0f4      	sub	sp, #464	@ 0x1d0
 800828a:	af00      	add	r7, sp, #0
 800828c:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 8008290:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 8008294:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8008298:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
    uint64_t d0, d1, d2, d3;
    uint32_t acc0, acc1, acc2, acc3, acc4;
    uint32_t r0, r1, r2, r3;
    uint32_t rs1, rs2, rs3;
    size_t offset  = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    size_t i;

    r0 = ctx->r[0];
 80082a2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
    r1 = ctx->r[1];
 80082ac:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    r2 = ctx->r[2];
 80082b6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    r3 = ctx->r[3];
 80082c0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    rs1 = r1 + ( r1 >> 2U );
 80082ca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80082ce:	089a      	lsrs	r2, r3, #2
 80082d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80082d4:	4413      	add	r3, r2
 80082d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    rs2 = r2 + ( r2 >> 2U );
 80082da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80082de:	089a      	lsrs	r2, r3, #2
 80082e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80082e4:	4413      	add	r3, r2
 80082e6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    rs3 = r3 + ( r3 >> 2U );
 80082ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80082ee:	089a      	lsrs	r2, r3, #2
 80082f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80082f4:	4413      	add	r3, r2
 80082f6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

    acc0 = ctx->acc[0];
 80082fa:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
    acc1 = ctx->acc[1];
 8008304:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
    acc2 = ctx->acc[2];
 800830e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008314:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
    acc3 = ctx->acc[3];
 8008318:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800831c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    acc4 = ctx->acc[4];
 8008322:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008328:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

    /* Process full blocks */
    for( i = 0U; i < nblocks; i++ )
 800832c:	2300      	movs	r3, #0
 800832e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8008332:	e3b5      	b.n	8008aa0 <poly1305_process+0x81c>
    {
        /* The input block is treated as a 128-bit little-endian integer */
        d0   = BYTES_TO_U32_LE( input, offset + 0  );
 8008334:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008338:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800833c:	4413      	add	r3, r2
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	4619      	mov	r1, r3
 8008342:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800834c:	4413      	add	r3, r2
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	4319      	orrs	r1, r3
 8008354:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008358:	1c9a      	adds	r2, r3, #2
 800835a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800835e:	4413      	add	r3, r2
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	041b      	lsls	r3, r3, #16
 8008364:	4319      	orrs	r1, r3
 8008366:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800836a:	1cda      	adds	r2, r3, #3
 800836c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008370:	4413      	add	r3, r2
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	061b      	lsls	r3, r3, #24
 8008376:	430b      	orrs	r3, r1
 8008378:	2200      	movs	r2, #0
 800837a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800837e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008382:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8008386:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1   = BYTES_TO_U32_LE( input, offset + 4  );
 800838a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800838e:	1d1a      	adds	r2, r3, #4
 8008390:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008394:	4413      	add	r3, r2
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	4619      	mov	r1, r3
 800839a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800839e:	1d5a      	adds	r2, r3, #5
 80083a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80083a4:	4413      	add	r3, r2
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	021b      	lsls	r3, r3, #8
 80083aa:	4319      	orrs	r1, r3
 80083ac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80083b0:	1d9a      	adds	r2, r3, #6
 80083b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80083b6:	4413      	add	r3, r2
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	041b      	lsls	r3, r3, #16
 80083bc:	4319      	orrs	r1, r3
 80083be:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80083c2:	1dda      	adds	r2, r3, #7
 80083c4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80083c8:	4413      	add	r3, r2
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	061b      	lsls	r3, r3, #24
 80083ce:	430b      	orrs	r3, r1
 80083d0:	2200      	movs	r2, #0
 80083d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80083d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80083da:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 80083de:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2   = BYTES_TO_U32_LE( input, offset + 8  );
 80083e2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80083e6:	f103 0208 	add.w	r2, r3, #8
 80083ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80083ee:	4413      	add	r3, r2
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4619      	mov	r1, r3
 80083f4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80083f8:	f103 0209 	add.w	r2, r3, #9
 80083fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008400:	4413      	add	r3, r2
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	4319      	orrs	r1, r3
 8008408:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800840c:	f103 020a 	add.w	r2, r3, #10
 8008410:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008414:	4413      	add	r3, r2
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	041b      	lsls	r3, r3, #16
 800841a:	4319      	orrs	r1, r3
 800841c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008420:	f103 020b 	add.w	r2, r3, #11
 8008424:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008428:	4413      	add	r3, r2
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	061b      	lsls	r3, r3, #24
 800842e:	430b      	orrs	r3, r1
 8008430:	2200      	movs	r2, #0
 8008432:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008436:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800843a:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 800843e:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3   = BYTES_TO_U32_LE( input, offset + 12 );
 8008442:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008446:	f103 020c 	add.w	r2, r3, #12
 800844a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800844e:	4413      	add	r3, r2
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	4619      	mov	r1, r3
 8008454:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008458:	f103 020d 	add.w	r2, r3, #13
 800845c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008460:	4413      	add	r3, r2
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	4319      	orrs	r1, r3
 8008468:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800846c:	f103 020e 	add.w	r2, r3, #14
 8008470:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008474:	4413      	add	r3, r2
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	041b      	lsls	r3, r3, #16
 800847a:	4319      	orrs	r1, r3
 800847c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008480:	f103 020f 	add.w	r2, r3, #15
 8008484:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8008488:	4413      	add	r3, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	061b      	lsls	r3, r3, #24
 800848e:	430b      	orrs	r3, r1
 8008490:	2200      	movs	r2, #0
 8008492:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008496:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800849a:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800849e:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178

        /* Compute: acc += (padded) block as a 130-bit integer */
        d0  += (uint64_t) acc0;
 80084a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80084ac:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80084b0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80084b4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80084b8:	4621      	mov	r1, r4
 80084ba:	1851      	adds	r1, r2, r1
 80084bc:	67b9      	str	r1, [r7, #120]	@ 0x78
 80084be:	4629      	mov	r1, r5
 80084c0:	414b      	adcs	r3, r1
 80084c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084c4:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80084c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1  += (uint64_t) acc1 + ( d0 >> 32U );
 80084cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80084d0:	2200      	movs	r2, #0
 80084d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80084d6:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80084da:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80084de:	f04f 0000 	mov.w	r0, #0
 80084e2:	f04f 0100 	mov.w	r1, #0
 80084e6:	0018      	movs	r0, r3
 80084e8:	2100      	movs	r1, #0
 80084ea:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80084ee:	4623      	mov	r3, r4
 80084f0:	181b      	adds	r3, r3, r0
 80084f2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80084f6:	462b      	mov	r3, r5
 80084f8:	414b      	adcs	r3, r1
 80084fa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80084fe:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8008502:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8008506:	4621      	mov	r1, r4
 8008508:	1851      	adds	r1, r2, r1
 800850a:	6739      	str	r1, [r7, #112]	@ 0x70
 800850c:	4629      	mov	r1, r5
 800850e:	414b      	adcs	r3, r1
 8008510:	677b      	str	r3, [r7, #116]	@ 0x74
 8008512:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8008516:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2  += (uint64_t) acc2 + ( d1 >> 32U );
 800851a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800851e:	2200      	movs	r2, #0
 8008520:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8008524:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8008528:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800852c:	f04f 0000 	mov.w	r0, #0
 8008530:	f04f 0100 	mov.w	r1, #0
 8008534:	0018      	movs	r0, r3
 8008536:	2100      	movs	r1, #0
 8008538:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 800853c:	4623      	mov	r3, r4
 800853e:	181b      	adds	r3, r3, r0
 8008540:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008544:	462b      	mov	r3, r5
 8008546:	414b      	adcs	r3, r1
 8008548:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800854c:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8008550:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8008554:	4621      	mov	r1, r4
 8008556:	1851      	adds	r1, r2, r1
 8008558:	66b9      	str	r1, [r7, #104]	@ 0x68
 800855a:	4629      	mov	r1, r5
 800855c:	414b      	adcs	r3, r1
 800855e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008560:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8008564:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3  += (uint64_t) acc3 + ( d2 >> 32U );
 8008568:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800856c:	2200      	movs	r2, #0
 800856e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8008572:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8008576:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800857a:	f04f 0000 	mov.w	r0, #0
 800857e:	f04f 0100 	mov.w	r1, #0
 8008582:	0018      	movs	r0, r3
 8008584:	2100      	movs	r1, #0
 8008586:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 800858a:	4623      	mov	r3, r4
 800858c:	181b      	adds	r3, r3, r0
 800858e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8008592:	462b      	mov	r3, r5
 8008594:	414b      	adcs	r3, r1
 8008596:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800859a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 800859e:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 80085a2:	4621      	mov	r1, r4
 80085a4:	1851      	adds	r1, r2, r1
 80085a6:	6639      	str	r1, [r7, #96]	@ 0x60
 80085a8:	4629      	mov	r1, r5
 80085aa:	414b      	adcs	r3, r1
 80085ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80085ae:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 80085b2:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc0 = (uint32_t) d0;
 80085b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80085ba:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        acc1 = (uint32_t) d1;
 80085be:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80085c2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        acc2 = (uint32_t) d2;
 80085c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80085ca:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        acc3 = (uint32_t) d3;
 80085ce:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80085d2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        acc4 += (uint32_t) ( d3 >> 32U ) + needs_padding;
 80085d6:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80085da:	f04f 0000 	mov.w	r0, #0
 80085de:	f04f 0100 	mov.w	r1, #0
 80085e2:	0018      	movs	r0, r3
 80085e4:	2100      	movs	r1, #0
 80085e6:	4602      	mov	r2, r0
 80085e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80085ec:	441a      	add	r2, r3
 80085ee:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80085f2:	4413      	add	r3, r2
 80085f4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        /* Compute: acc *= r */
        d0 = mul64( acc0, r0  ) +
 80085f8:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 80085fc:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8008600:	f7ff fe22 	bl	8008248 <mul64>
 8008604:	4604      	mov	r4, r0
 8008606:	460d      	mov	r5, r1
             mul64( acc1, rs3 ) +
 8008608:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 800860c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8008610:	f7ff fe1a 	bl	8008248 <mul64>
 8008614:	4602      	mov	r2, r0
 8008616:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 8008618:	18a1      	adds	r1, r4, r2
 800861a:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 800861e:	eb45 0303 	adc.w	r3, r5, r3
 8008622:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
             mul64( acc2, rs2 ) +
 8008626:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 800862a:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 800862e:	f7ff fe0b 	bl	8008248 <mul64>
 8008632:	4602      	mov	r2, r0
 8008634:	460b      	mov	r3, r1
             mul64( acc1, rs3 ) +
 8008636:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	@ 0x128
 800863a:	4621      	mov	r1, r4
 800863c:	1889      	adds	r1, r1, r2
 800863e:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 8008642:	4629      	mov	r1, r5
 8008644:	eb41 0303 	adc.w	r3, r1, r3
 8008648:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
             mul64( acc3, rs1 );
 800864c:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8008650:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8008654:	f7ff fdf8 	bl	8008248 <mul64>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
        d0 = mul64( acc0, r0  ) +
 800865c:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8008660:	4621      	mov	r1, r4
 8008662:	1889      	adds	r1, r1, r2
 8008664:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008666:	4629      	mov	r1, r5
 8008668:	eb41 0303 	adc.w	r3, r1, r3
 800866c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800866e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8008672:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        d1 = mul64( acc0, r1  ) +
 8008676:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 800867a:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 800867e:	f7ff fde3 	bl	8008248 <mul64>
 8008682:	4604      	mov	r4, r0
 8008684:	460d      	mov	r5, r1
             mul64( acc1, r0  ) +
 8008686:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 800868a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 800868e:	f7ff fddb 	bl	8008248 <mul64>
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 8008696:	18a1      	adds	r1, r4, r2
 8008698:	f8c7 1118 	str.w	r1, [r7, #280]	@ 0x118
 800869c:	eb45 0303 	adc.w	r3, r5, r3
 80086a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
             mul64( acc2, rs3 ) +
 80086a4:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 80086a8:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 80086ac:	f7ff fdcc 	bl	8008248 <mul64>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
             mul64( acc1, r0  ) +
 80086b4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	@ 0x118
 80086b8:	4621      	mov	r1, r4
 80086ba:	1889      	adds	r1, r1, r2
 80086bc:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80086c0:	4629      	mov	r1, r5
 80086c2:	eb41 0303 	adc.w	r3, r1, r3
 80086c6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
             mul64( acc3, rs2 ) +
 80086ca:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 80086ce:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 80086d2:	f7ff fdb9 	bl	8008248 <mul64>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
             mul64( acc2, rs3 ) +
 80086da:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80086de:	4621      	mov	r1, r4
 80086e0:	1889      	adds	r1, r1, r2
 80086e2:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 80086e6:	4629      	mov	r1, r5
 80086e8:	eb41 0303 	adc.w	r3, r1, r3
 80086ec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
             mul64( acc4, rs1 );
 80086f0:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 80086f4:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80086f8:	f7ff fda6 	bl	8008248 <mul64>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
        d1 = mul64( acc0, r1  ) +
 8008700:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8008704:	4621      	mov	r1, r4
 8008706:	1889      	adds	r1, r1, r2
 8008708:	6539      	str	r1, [r7, #80]	@ 0x50
 800870a:	4629      	mov	r1, r5
 800870c:	eb41 0303 	adc.w	r3, r1, r3
 8008710:	657b      	str	r3, [r7, #84]	@ 0x54
 8008712:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8008716:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2 = mul64( acc0, r2  ) +
 800871a:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 800871e:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 8008722:	f7ff fd91 	bl	8008248 <mul64>
 8008726:	4604      	mov	r4, r0
 8008728:	460d      	mov	r5, r1
             mul64( acc1, r1  ) +
 800872a:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 800872e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 8008732:	f7ff fd89 	bl	8008248 <mul64>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 800873a:	18a1      	adds	r1, r4, r2
 800873c:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8008740:	eb45 0303 	adc.w	r3, r5, r3
 8008744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
             mul64( acc2, r0  ) +
 8008748:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 800874c:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 8008750:	f7ff fd7a 	bl	8008248 <mul64>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
             mul64( acc1, r1  ) +
 8008758:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800875c:	4621      	mov	r1, r4
 800875e:	1889      	adds	r1, r1, r2
 8008760:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8008764:	4629      	mov	r1, r5
 8008766:	eb41 0303 	adc.w	r3, r1, r3
 800876a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
             mul64( acc3, rs3 ) +
 800876e:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8008772:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 8008776:	f7ff fd67 	bl	8008248 <mul64>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
             mul64( acc2, r0  ) +
 800877e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8008782:	4621      	mov	r1, r4
 8008784:	1889      	adds	r1, r1, r2
 8008786:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 800878a:	4629      	mov	r1, r5
 800878c:	eb41 0303 	adc.w	r3, r1, r3
 8008790:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
             mul64( acc4, rs2 );
 8008794:	f8d7 119c 	ldr.w	r1, [r7, #412]	@ 0x19c
 8008798:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800879c:	f7ff fd54 	bl	8008248 <mul64>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
        d2 = mul64( acc0, r2  ) +
 80087a4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80087a8:	4621      	mov	r1, r4
 80087aa:	1889      	adds	r1, r1, r2
 80087ac:	64b9      	str	r1, [r7, #72]	@ 0x48
 80087ae:	4629      	mov	r1, r5
 80087b0:	eb41 0303 	adc.w	r3, r1, r3
 80087b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087b6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80087ba:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3 = mul64( acc0, r3  ) +
 80087be:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 80087c2:	f8d7 01cc 	ldr.w	r0, [r7, #460]	@ 0x1cc
 80087c6:	f7ff fd3f 	bl	8008248 <mul64>
 80087ca:	4604      	mov	r4, r0
 80087cc:	460d      	mov	r5, r1
             mul64( acc1, r2  ) +
 80087ce:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 80087d2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 80087d6:	f7ff fd37 	bl	8008248 <mul64>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 80087de:	18a1      	adds	r1, r4, r2
 80087e0:	f8c7 10e8 	str.w	r1, [r7, #232]	@ 0xe8
 80087e4:	eb45 0303 	adc.w	r3, r5, r3
 80087e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
             mul64( acc2, r1  ) +
 80087ec:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80087f0:	f8d7 01c4 	ldr.w	r0, [r7, #452]	@ 0x1c4
 80087f4:	f7ff fd28 	bl	8008248 <mul64>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
             mul64( acc1, r2  ) +
 80087fc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008800:	4621      	mov	r1, r4
 8008802:	1889      	adds	r1, r1, r2
 8008804:	f8c7 10e0 	str.w	r1, [r7, #224]	@ 0xe0
 8008808:	4629      	mov	r1, r5
 800880a:	eb41 0303 	adc.w	r3, r1, r3
 800880e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
             mul64( acc3, r0  ) +
 8008812:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8008816:	f8d7 01c0 	ldr.w	r0, [r7, #448]	@ 0x1c0
 800881a:	f7ff fd15 	bl	8008248 <mul64>
 800881e:	4602      	mov	r2, r0
 8008820:	460b      	mov	r3, r1
             mul64( acc2, r1  ) +
 8008822:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8008826:	4621      	mov	r1, r4
 8008828:	eb11 0a02 	adds.w	sl, r1, r2
 800882c:	4629      	mov	r1, r5
 800882e:	eb41 0b03 	adc.w	fp, r1, r3
             mul64( acc4, rs3 );
 8008832:	f8d7 1198 	ldr.w	r1, [r7, #408]	@ 0x198
 8008836:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800883a:	f7ff fd05 	bl	8008248 <mul64>
 800883e:	4602      	mov	r2, r0
 8008840:	460b      	mov	r3, r1
        d3 = mul64( acc0, r3  ) +
 8008842:	eb1a 0102 	adds.w	r1, sl, r2
 8008846:	6439      	str	r1, [r7, #64]	@ 0x40
 8008848:	eb4b 0303 	adc.w	r3, fp, r3
 800884c:	647b      	str	r3, [r7, #68]	@ 0x44
 800884e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8008852:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc4 *= r0;
 8008856:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800885a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        /* Compute: acc %= (2^130 - 5) (partial remainder) */
        d1 += ( d0 >> 32 );
 8008866:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 800886a:	f04f 0000 	mov.w	r0, #0
 800886e:	f04f 0100 	mov.w	r1, #0
 8008872:	0018      	movs	r0, r3
 8008874:	2100      	movs	r1, #0
 8008876:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800887a:	1814      	adds	r4, r2, r0
 800887c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800887e:	414b      	adcs	r3, r1
 8008880:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008882:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8008886:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
        d2 += ( d1 >> 32 );
 800888a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 800888e:	f04f 0000 	mov.w	r0, #0
 8008892:	f04f 0100 	mov.w	r1, #0
 8008896:	0018      	movs	r0, r3
 8008898:	2100      	movs	r1, #0
 800889a:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 800889e:	1814      	adds	r4, r2, r0
 80088a0:	633c      	str	r4, [r7, #48]	@ 0x30
 80088a2:	414b      	adcs	r3, r1
 80088a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088a6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80088aa:	e9c7 3460 	strd	r3, r4, [r7, #384]	@ 0x180
        d3 += ( d2 >> 32 );
 80088ae:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f04f 0100 	mov.w	r1, #0
 80088ba:	0018      	movs	r0, r3
 80088bc:	2100      	movs	r1, #0
 80088be:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80088c2:	1814      	adds	r4, r2, r0
 80088c4:	62bc      	str	r4, [r7, #40]	@ 0x28
 80088c6:	414b      	adcs	r3, r1
 80088c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80088ca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80088ce:	e9c7 345e 	strd	r3, r4, [r7, #376]	@ 0x178
        acc0 = (uint32_t) d0;
 80088d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80088d6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        acc1 = (uint32_t) d1;
 80088da:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80088de:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        acc2 = (uint32_t) d2;
 80088e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80088e6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        acc3 = (uint32_t) d3;
 80088ea:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80088ee:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        acc4 = (uint32_t) ( d3 >> 32 ) + acc4;
 80088f2:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 80088f6:	f04f 0000 	mov.w	r0, #0
 80088fa:	f04f 0100 	mov.w	r1, #0
 80088fe:	0018      	movs	r0, r3
 8008900:	2100      	movs	r1, #0
 8008902:	4602      	mov	r2, r0
 8008904:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008908:	4413      	add	r3, r2
 800890a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        d0 = (uint64_t) acc0 + ( acc4 >> 2 ) + ( acc4 & 0xFFFFFFFCU );
 800890e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8008912:	2200      	movs	r2, #0
 8008914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008918:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800891c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008920:	089b      	lsrs	r3, r3, #2
 8008922:	2200      	movs	r2, #0
 8008924:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008928:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800892c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8008930:	4623      	mov	r3, r4
 8008932:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8008936:	4602      	mov	r2, r0
 8008938:	eb13 0802 	adds.w	r8, r3, r2
 800893c:	462b      	mov	r3, r5
 800893e:	460a      	mov	r2, r1
 8008940:	eb43 0902 	adc.w	r9, r3, r2
 8008944:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008948:	2200      	movs	r2, #0
 800894a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800894e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8008952:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008956:	f023 0303 	bic.w	r3, r3, #3
 800895a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800895e:	2300      	movs	r3, #0
 8008960:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008964:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008968:	460b      	mov	r3, r1
 800896a:	eb18 0303 	adds.w	r3, r8, r3
 800896e:	623b      	str	r3, [r7, #32]
 8008970:	4613      	mov	r3, r2
 8008972:	eb49 0303 	adc.w	r3, r9, r3
 8008976:	627b      	str	r3, [r7, #36]	@ 0x24
 8008978:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800897c:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc4 &= 3U;
 8008980:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008984:	f003 0303 	and.w	r3, r3, #3
 8008988:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        acc0 = (uint32_t) d0;
 800898c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008990:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        d0 = (uint64_t) acc1 + ( d0 >> 32U );
 8008994:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008998:	2200      	movs	r2, #0
 800899a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800899e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80089a2:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80089a6:	f04f 0000 	mov.w	r0, #0
 80089aa:	f04f 0100 	mov.w	r1, #0
 80089ae:	0018      	movs	r0, r3
 80089b0:	2100      	movs	r1, #0
 80089b2:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80089b6:	4623      	mov	r3, r4
 80089b8:	181b      	adds	r3, r3, r0
 80089ba:	61bb      	str	r3, [r7, #24]
 80089bc:	462b      	mov	r3, r5
 80089be:	414b      	adcs	r3, r1
 80089c0:	61fb      	str	r3, [r7, #28]
 80089c2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80089c6:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc1 = (uint32_t) d0;
 80089ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80089ce:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
        d0 = (uint64_t) acc2 + ( d0 >> 32U );
 80089d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80089d6:	2200      	movs	r2, #0
 80089d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089dc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80089e0:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 80089e4:	f04f 0000 	mov.w	r0, #0
 80089e8:	f04f 0100 	mov.w	r1, #0
 80089ec:	0018      	movs	r0, r3
 80089ee:	2100      	movs	r1, #0
 80089f0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80089f4:	4623      	mov	r3, r4
 80089f6:	181b      	adds	r3, r3, r0
 80089f8:	613b      	str	r3, [r7, #16]
 80089fa:	462b      	mov	r3, r5
 80089fc:	414b      	adcs	r3, r1
 80089fe:	617b      	str	r3, [r7, #20]
 8008a00:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8008a04:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc2 = (uint32_t) d0;
 8008a08:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008a0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
        d0 = (uint64_t) acc3 + ( d0 >> 32U );
 8008a10:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008a14:	2200      	movs	r2, #0
 8008a16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a1a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008a1e:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f04f 0100 	mov.w	r1, #0
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8008a32:	4623      	mov	r3, r4
 8008a34:	181b      	adds	r3, r3, r0
 8008a36:	60bb      	str	r3, [r7, #8]
 8008a38:	462b      	mov	r3, r5
 8008a3a:	414b      	adcs	r3, r1
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8008a42:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc3 = (uint32_t) d0;
 8008a46:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008a4a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        d0 = (uint64_t) acc4 + ( d0 >> 32U );
 8008a4e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a58:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008a5c:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8008a60:	f04f 0000 	mov.w	r0, #0
 8008a64:	f04f 0100 	mov.w	r1, #0
 8008a68:	0018      	movs	r0, r3
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8008a70:	4623      	mov	r3, r4
 8008a72:	181b      	adds	r3, r3, r0
 8008a74:	603b      	str	r3, [r7, #0]
 8008a76:	462b      	mov	r3, r5
 8008a78:	414b      	adcs	r3, r1
 8008a7a:	607b      	str	r3, [r7, #4]
 8008a7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8008a80:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
        acc4 = (uint32_t) d0;
 8008a84:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008a88:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

        offset    += POLY1305_BLOCK_SIZE_BYTES;
 8008a8c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8008a90:	3310      	adds	r3, #16
 8008a92:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
    for( i = 0U; i < nblocks; i++ )
 8008a96:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8008aa0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8008aa4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	f4ff ac43 	bcc.w	8008334 <poly1305_process+0xb0>
    }

    ctx->acc[0] = acc0;
 8008aae:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008ab2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8008ab6:	621a      	str	r2, [r3, #32]
    ctx->acc[1] = acc1;
 8008ab8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008abc:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8008ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->acc[2] = acc2;
 8008ac2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008ac6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8008aca:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->acc[3] = acc3;
 8008acc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008ad0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8008ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    ctx->acc[4] = acc4;
 8008ad6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8008ada:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8008ade:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008ae0:	bf00      	nop
 8008ae2:	f507 77e8 	add.w	r7, r7, #464	@ 0x1d0
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008aec <mbedtls_poly1305_init>:
    mac[14] = (unsigned char)( acc3 >> 16 );
    mac[15] = (unsigned char)( acc3 >> 24 );
}

void mbedtls_poly1305_init( mbedtls_poly1305_context *ctx )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
    POLY1305_VALIDATE( ctx != NULL );

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 8008af4:	2148      	movs	r1, #72	@ 0x48
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f7ff fb94 	bl	8008224 <mbedtls_platform_zeroize>
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <mbedtls_poly1305_free>:

void mbedtls_poly1305_free( mbedtls_poly1305_context *ctx )
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d004      	beq.n	8008b1c <mbedtls_poly1305_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_poly1305_context ) );
 8008b12:	2148      	movs	r1, #72	@ 0x48
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff fb85 	bl	8008224 <mbedtls_platform_zeroize>
 8008b1a:	e000      	b.n	8008b1e <mbedtls_poly1305_free+0x1a>
        return;
 8008b1c:	bf00      	nop
}
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <mbedtls_poly1305_update>:
}

int mbedtls_poly1305_update( mbedtls_poly1305_context *ctx,
                             const unsigned char *input,
                             size_t ilen )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b088      	sub	sp, #32
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
    size_t offset    = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61fb      	str	r3, [r7, #28]
    size_t remaining = ilen;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	61bb      	str	r3, [r7, #24]
    size_t queue_free_len;
    size_t nblocks;
    POLY1305_VALIDATE_RET( ctx != NULL );
    POLY1305_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ( remaining > 0U ) && ( ctx->queue_len > 0U ) )
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d03e      	beq.n	8008bbc <mbedtls_poly1305_update+0x98>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d03a      	beq.n	8008bbc <mbedtls_poly1305_update+0x98>
    {
        queue_free_len = ( POLY1305_BLOCK_SIZE_BYTES - ctx->queue_len );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b4a:	f1c3 0310 	rsb	r3, r3, #16
 8008b4e:	617b      	str	r3, [r7, #20]

        if( ilen < queue_free_len )
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d213      	bcs.n	8008b80 <mbedtls_poly1305_update+0x5c>
        {
            /* Not enough data to complete the block.
             * Store this data with the other leftovers.
             */
            memcpy( &ctx->queue[ctx->queue_len],
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b5c:	3330      	adds	r3, #48	@ 0x30
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4413      	add	r3, r2
 8008b62:	3304      	adds	r3, #4
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f000 fb5c 	bl	8009226 <memcpy>
                    input,
                    ilen );

            ctx->queue_len += ilen;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	441a      	add	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	645a      	str	r2, [r3, #68]	@ 0x44

            remaining = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	61bb      	str	r3, [r7, #24]
 8008b7e:	e01d      	b.n	8008bbc <mbedtls_poly1305_update+0x98>
        }
        else
        {
            /* Enough data to produce a complete block */
            memcpy( &ctx->queue[ctx->queue_len],
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b84:	3330      	adds	r3, #48	@ 0x30
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	4413      	add	r3, r2
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	68b9      	ldr	r1, [r7, #8]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fb48 	bl	8009226 <memcpy>
                    input,
                    queue_free_len );

            ctx->queue_len = 0U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	645a      	str	r2, [r3, #68]	@ 0x44

            poly1305_process( ctx, 1U, ctx->queue, 1U ); /* add padding bit */
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff fb6c 	bl	8008284 <poly1305_process>

            offset    += queue_free_len;
 8008bac:	69fa      	ldr	r2, [r7, #28]
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	61fb      	str	r3, [r7, #28]
            remaining -= queue_free_len;
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	61bb      	str	r3, [r7, #24]
        }
    }

    if( remaining >= POLY1305_BLOCK_SIZE_BYTES )
 8008bbc:	69bb      	ldr	r3, [r7, #24]
 8008bbe:	2b0f      	cmp	r3, #15
 8008bc0:	d913      	bls.n	8008bea <mbedtls_poly1305_update+0xc6>
    {
        nblocks = remaining / POLY1305_BLOCK_SIZE_BYTES;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	091b      	lsrs	r3, r3, #4
 8008bc6:	613b      	str	r3, [r7, #16]

        poly1305_process( ctx, nblocks, &input[offset], 1U );
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	441a      	add	r2, r3
 8008bce:	2301      	movs	r3, #1
 8008bd0:	6939      	ldr	r1, [r7, #16]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff fb56 	bl	8008284 <poly1305_process>

        offset += nblocks * POLY1305_BLOCK_SIZE_BYTES;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	011b      	lsls	r3, r3, #4
 8008bdc:	69fa      	ldr	r2, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	61fb      	str	r3, [r7, #28]
        remaining %= POLY1305_BLOCK_SIZE_BYTES;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	61bb      	str	r3, [r7, #24]
    }

    if( remaining > 0U )
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00c      	beq.n	8008c0a <mbedtls_poly1305_update+0xe6>
    {
        /* Store partial block */
        ctx->queue_len = remaining;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	645a      	str	r2, [r3, #68]	@ 0x44
        memcpy( ctx->queue, &input[offset], remaining );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	69ba      	ldr	r2, [r7, #24]
 8008c04:	4619      	mov	r1, r3
 8008c06:	f000 fb0e 	bl	8009226 <memcpy>
    }

    return( 0 );
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3720      	adds	r7, #32
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <calloc>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	@ (8008c20 <calloc+0xc>)
 8008c16:	460a      	mov	r2, r1
 8008c18:	4601      	mov	r1, r0
 8008c1a:	6818      	ldr	r0, [r3, #0]
 8008c1c:	f000 b802 	b.w	8008c24 <_calloc_r>
 8008c20:	20000020 	.word	0x20000020

08008c24 <_calloc_r>:
 8008c24:	b570      	push	{r4, r5, r6, lr}
 8008c26:	fba1 5402 	umull	r5, r4, r1, r2
 8008c2a:	b93c      	cbnz	r4, 8008c3c <_calloc_r+0x18>
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	f000 f837 	bl	8008ca0 <_malloc_r>
 8008c32:	4606      	mov	r6, r0
 8008c34:	b928      	cbnz	r0, 8008c42 <_calloc_r+0x1e>
 8008c36:	2600      	movs	r6, #0
 8008c38:	4630      	mov	r0, r6
 8008c3a:	bd70      	pop	{r4, r5, r6, pc}
 8008c3c:	220c      	movs	r2, #12
 8008c3e:	6002      	str	r2, [r0, #0]
 8008c40:	e7f9      	b.n	8008c36 <_calloc_r+0x12>
 8008c42:	462a      	mov	r2, r5
 8008c44:	4621      	mov	r1, r4
 8008c46:	f000 fa63 	bl	8009110 <memset>
 8008c4a:	e7f5      	b.n	8008c38 <_calloc_r+0x14>

08008c4c <free>:
 8008c4c:	4b02      	ldr	r3, [pc, #8]	@ (8008c58 <free+0xc>)
 8008c4e:	4601      	mov	r1, r0
 8008c50:	6818      	ldr	r0, [r3, #0]
 8008c52:	f000 baf7 	b.w	8009244 <_free_r>
 8008c56:	bf00      	nop
 8008c58:	20000020 	.word	0x20000020

08008c5c <sbrk_aligned>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008c9c <sbrk_aligned+0x40>)
 8008c60:	460c      	mov	r4, r1
 8008c62:	6831      	ldr	r1, [r6, #0]
 8008c64:	4605      	mov	r5, r0
 8008c66:	b911      	cbnz	r1, 8008c6e <sbrk_aligned+0x12>
 8008c68:	f000 fa8e 	bl	8009188 <_sbrk_r>
 8008c6c:	6030      	str	r0, [r6, #0]
 8008c6e:	4621      	mov	r1, r4
 8008c70:	4628      	mov	r0, r5
 8008c72:	f000 fa89 	bl	8009188 <_sbrk_r>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	d103      	bne.n	8008c82 <sbrk_aligned+0x26>
 8008c7a:	f04f 34ff 	mov.w	r4, #4294967295
 8008c7e:	4620      	mov	r0, r4
 8008c80:	bd70      	pop	{r4, r5, r6, pc}
 8008c82:	1cc4      	adds	r4, r0, #3
 8008c84:	f024 0403 	bic.w	r4, r4, #3
 8008c88:	42a0      	cmp	r0, r4
 8008c8a:	d0f8      	beq.n	8008c7e <sbrk_aligned+0x22>
 8008c8c:	1a21      	subs	r1, r4, r0
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f000 fa7a 	bl	8009188 <_sbrk_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	d1f2      	bne.n	8008c7e <sbrk_aligned+0x22>
 8008c98:	e7ef      	b.n	8008c7a <sbrk_aligned+0x1e>
 8008c9a:	bf00      	nop
 8008c9c:	20000130 	.word	0x20000130

08008ca0 <_malloc_r>:
 8008ca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	1ccd      	adds	r5, r1, #3
 8008ca6:	f025 0503 	bic.w	r5, r5, #3
 8008caa:	3508      	adds	r5, #8
 8008cac:	2d0c      	cmp	r5, #12
 8008cae:	bf38      	it	cc
 8008cb0:	250c      	movcc	r5, #12
 8008cb2:	2d00      	cmp	r5, #0
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	db01      	blt.n	8008cbc <_malloc_r+0x1c>
 8008cb8:	42a9      	cmp	r1, r5
 8008cba:	d904      	bls.n	8008cc6 <_malloc_r+0x26>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	6033      	str	r3, [r6, #0]
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d9c <_malloc_r+0xfc>
 8008cca:	f000 f869 	bl	8008da0 <__malloc_lock>
 8008cce:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd2:	461c      	mov	r4, r3
 8008cd4:	bb44      	cbnz	r4, 8008d28 <_malloc_r+0x88>
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7ff ffbf 	bl	8008c5c <sbrk_aligned>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	d158      	bne.n	8008d96 <_malloc_r+0xf6>
 8008ce4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ce8:	4627      	mov	r7, r4
 8008cea:	2f00      	cmp	r7, #0
 8008cec:	d143      	bne.n	8008d76 <_malloc_r+0xd6>
 8008cee:	2c00      	cmp	r4, #0
 8008cf0:	d04b      	beq.n	8008d8a <_malloc_r+0xea>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	4639      	mov	r1, r7
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	eb04 0903 	add.w	r9, r4, r3
 8008cfc:	f000 fa44 	bl	8009188 <_sbrk_r>
 8008d00:	4581      	cmp	r9, r0
 8008d02:	d142      	bne.n	8008d8a <_malloc_r+0xea>
 8008d04:	6821      	ldr	r1, [r4, #0]
 8008d06:	1a6d      	subs	r5, r5, r1
 8008d08:	4629      	mov	r1, r5
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f7ff ffa6 	bl	8008c5c <sbrk_aligned>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d03a      	beq.n	8008d8a <_malloc_r+0xea>
 8008d14:	6823      	ldr	r3, [r4, #0]
 8008d16:	442b      	add	r3, r5
 8008d18:	6023      	str	r3, [r4, #0]
 8008d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008d1e:	685a      	ldr	r2, [r3, #4]
 8008d20:	bb62      	cbnz	r2, 8008d7c <_malloc_r+0xdc>
 8008d22:	f8c8 7000 	str.w	r7, [r8]
 8008d26:	e00f      	b.n	8008d48 <_malloc_r+0xa8>
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	1b52      	subs	r2, r2, r5
 8008d2c:	d420      	bmi.n	8008d70 <_malloc_r+0xd0>
 8008d2e:	2a0b      	cmp	r2, #11
 8008d30:	d917      	bls.n	8008d62 <_malloc_r+0xc2>
 8008d32:	1961      	adds	r1, r4, r5
 8008d34:	42a3      	cmp	r3, r4
 8008d36:	6025      	str	r5, [r4, #0]
 8008d38:	bf18      	it	ne
 8008d3a:	6059      	strne	r1, [r3, #4]
 8008d3c:	6863      	ldr	r3, [r4, #4]
 8008d3e:	bf08      	it	eq
 8008d40:	f8c8 1000 	streq.w	r1, [r8]
 8008d44:	5162      	str	r2, [r4, r5]
 8008d46:	604b      	str	r3, [r1, #4]
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f000 f82f 	bl	8008dac <__malloc_unlock>
 8008d4e:	f104 000b 	add.w	r0, r4, #11
 8008d52:	1d23      	adds	r3, r4, #4
 8008d54:	f020 0007 	bic.w	r0, r0, #7
 8008d58:	1ac2      	subs	r2, r0, r3
 8008d5a:	bf1c      	itt	ne
 8008d5c:	1a1b      	subne	r3, r3, r0
 8008d5e:	50a3      	strne	r3, [r4, r2]
 8008d60:	e7af      	b.n	8008cc2 <_malloc_r+0x22>
 8008d62:	6862      	ldr	r2, [r4, #4]
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	bf0c      	ite	eq
 8008d68:	f8c8 2000 	streq.w	r2, [r8]
 8008d6c:	605a      	strne	r2, [r3, #4]
 8008d6e:	e7eb      	b.n	8008d48 <_malloc_r+0xa8>
 8008d70:	4623      	mov	r3, r4
 8008d72:	6864      	ldr	r4, [r4, #4]
 8008d74:	e7ae      	b.n	8008cd4 <_malloc_r+0x34>
 8008d76:	463c      	mov	r4, r7
 8008d78:	687f      	ldr	r7, [r7, #4]
 8008d7a:	e7b6      	b.n	8008cea <_malloc_r+0x4a>
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	d1fb      	bne.n	8008d7c <_malloc_r+0xdc>
 8008d84:	2300      	movs	r3, #0
 8008d86:	6053      	str	r3, [r2, #4]
 8008d88:	e7de      	b.n	8008d48 <_malloc_r+0xa8>
 8008d8a:	230c      	movs	r3, #12
 8008d8c:	6033      	str	r3, [r6, #0]
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f000 f80c 	bl	8008dac <__malloc_unlock>
 8008d94:	e794      	b.n	8008cc0 <_malloc_r+0x20>
 8008d96:	6005      	str	r5, [r0, #0]
 8008d98:	e7d6      	b.n	8008d48 <_malloc_r+0xa8>
 8008d9a:	bf00      	nop
 8008d9c:	20000134 	.word	0x20000134

08008da0 <__malloc_lock>:
 8008da0:	4801      	ldr	r0, [pc, #4]	@ (8008da8 <__malloc_lock+0x8>)
 8008da2:	f000 ba3e 	b.w	8009222 <__retarget_lock_acquire_recursive>
 8008da6:	bf00      	nop
 8008da8:	20000278 	.word	0x20000278

08008dac <__malloc_unlock>:
 8008dac:	4801      	ldr	r0, [pc, #4]	@ (8008db4 <__malloc_unlock+0x8>)
 8008dae:	f000 ba39 	b.w	8009224 <__retarget_lock_release_recursive>
 8008db2:	bf00      	nop
 8008db4:	20000278 	.word	0x20000278

08008db8 <std>:
 8008db8:	2300      	movs	r3, #0
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dc6:	6083      	str	r3, [r0, #8]
 8008dc8:	8181      	strh	r1, [r0, #12]
 8008dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dcc:	81c2      	strh	r2, [r0, #14]
 8008dce:	6183      	str	r3, [r0, #24]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	2208      	movs	r2, #8
 8008dd4:	305c      	adds	r0, #92	@ 0x5c
 8008dd6:	f000 f99b 	bl	8009110 <memset>
 8008dda:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <std+0x58>)
 8008ddc:	6263      	str	r3, [r4, #36]	@ 0x24
 8008dde:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <std+0x5c>)
 8008de0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008de2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <std+0x60>)
 8008de4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008de6:	4b0d      	ldr	r3, [pc, #52]	@ (8008e1c <std+0x64>)
 8008de8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dea:	4b0d      	ldr	r3, [pc, #52]	@ (8008e20 <std+0x68>)
 8008dec:	6224      	str	r4, [r4, #32]
 8008dee:	429c      	cmp	r4, r3
 8008df0:	d006      	beq.n	8008e00 <std+0x48>
 8008df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008df6:	4294      	cmp	r4, r2
 8008df8:	d002      	beq.n	8008e00 <std+0x48>
 8008dfa:	33d0      	adds	r3, #208	@ 0xd0
 8008dfc:	429c      	cmp	r4, r3
 8008dfe:	d105      	bne.n	8008e0c <std+0x54>
 8008e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e08:	f000 ba0a 	b.w	8009220 <__retarget_lock_init_recursive>
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	bf00      	nop
 8008e10:	08008f61 	.word	0x08008f61
 8008e14:	08008f83 	.word	0x08008f83
 8008e18:	08008fbb 	.word	0x08008fbb
 8008e1c:	08008fdf 	.word	0x08008fdf
 8008e20:	20000138 	.word	0x20000138

08008e24 <stdio_exit_handler>:
 8008e24:	4a02      	ldr	r2, [pc, #8]	@ (8008e30 <stdio_exit_handler+0xc>)
 8008e26:	4903      	ldr	r1, [pc, #12]	@ (8008e34 <stdio_exit_handler+0x10>)
 8008e28:	4803      	ldr	r0, [pc, #12]	@ (8008e38 <stdio_exit_handler+0x14>)
 8008e2a:	f000 b869 	b.w	8008f00 <_fwalk_sglue>
 8008e2e:	bf00      	nop
 8008e30:	20000014 	.word	0x20000014
 8008e34:	08009981 	.word	0x08009981
 8008e38:	20000024 	.word	0x20000024

08008e3c <cleanup_stdio>:
 8008e3c:	6841      	ldr	r1, [r0, #4]
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8008e70 <cleanup_stdio+0x34>)
 8008e40:	4299      	cmp	r1, r3
 8008e42:	b510      	push	{r4, lr}
 8008e44:	4604      	mov	r4, r0
 8008e46:	d001      	beq.n	8008e4c <cleanup_stdio+0x10>
 8008e48:	f000 fd9a 	bl	8009980 <_fflush_r>
 8008e4c:	68a1      	ldr	r1, [r4, #8]
 8008e4e:	4b09      	ldr	r3, [pc, #36]	@ (8008e74 <cleanup_stdio+0x38>)
 8008e50:	4299      	cmp	r1, r3
 8008e52:	d002      	beq.n	8008e5a <cleanup_stdio+0x1e>
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 fd93 	bl	8009980 <_fflush_r>
 8008e5a:	68e1      	ldr	r1, [r4, #12]
 8008e5c:	4b06      	ldr	r3, [pc, #24]	@ (8008e78 <cleanup_stdio+0x3c>)
 8008e5e:	4299      	cmp	r1, r3
 8008e60:	d004      	beq.n	8008e6c <cleanup_stdio+0x30>
 8008e62:	4620      	mov	r0, r4
 8008e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e68:	f000 bd8a 	b.w	8009980 <_fflush_r>
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000138 	.word	0x20000138
 8008e74:	200001a0 	.word	0x200001a0
 8008e78:	20000208 	.word	0x20000208

08008e7c <global_stdio_init.part.0>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008eac <global_stdio_init.part.0+0x30>)
 8008e80:	4c0b      	ldr	r4, [pc, #44]	@ (8008eb0 <global_stdio_init.part.0+0x34>)
 8008e82:	4a0c      	ldr	r2, [pc, #48]	@ (8008eb4 <global_stdio_init.part.0+0x38>)
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	4620      	mov	r0, r4
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2104      	movs	r1, #4
 8008e8c:	f7ff ff94 	bl	8008db8 <std>
 8008e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e94:	2201      	movs	r2, #1
 8008e96:	2109      	movs	r1, #9
 8008e98:	f7ff ff8e 	bl	8008db8 <std>
 8008e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ea6:	2112      	movs	r1, #18
 8008ea8:	f7ff bf86 	b.w	8008db8 <std>
 8008eac:	20000270 	.word	0x20000270
 8008eb0:	20000138 	.word	0x20000138
 8008eb4:	08008e25 	.word	0x08008e25

08008eb8 <__sfp_lock_acquire>:
 8008eb8:	4801      	ldr	r0, [pc, #4]	@ (8008ec0 <__sfp_lock_acquire+0x8>)
 8008eba:	f000 b9b2 	b.w	8009222 <__retarget_lock_acquire_recursive>
 8008ebe:	bf00      	nop
 8008ec0:	20000279 	.word	0x20000279

08008ec4 <__sfp_lock_release>:
 8008ec4:	4801      	ldr	r0, [pc, #4]	@ (8008ecc <__sfp_lock_release+0x8>)
 8008ec6:	f000 b9ad 	b.w	8009224 <__retarget_lock_release_recursive>
 8008eca:	bf00      	nop
 8008ecc:	20000279 	.word	0x20000279

08008ed0 <__sinit>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	f7ff fff0 	bl	8008eb8 <__sfp_lock_acquire>
 8008ed8:	6a23      	ldr	r3, [r4, #32]
 8008eda:	b11b      	cbz	r3, 8008ee4 <__sinit+0x14>
 8008edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee0:	f7ff bff0 	b.w	8008ec4 <__sfp_lock_release>
 8008ee4:	4b04      	ldr	r3, [pc, #16]	@ (8008ef8 <__sinit+0x28>)
 8008ee6:	6223      	str	r3, [r4, #32]
 8008ee8:	4b04      	ldr	r3, [pc, #16]	@ (8008efc <__sinit+0x2c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f5      	bne.n	8008edc <__sinit+0xc>
 8008ef0:	f7ff ffc4 	bl	8008e7c <global_stdio_init.part.0>
 8008ef4:	e7f2      	b.n	8008edc <__sinit+0xc>
 8008ef6:	bf00      	nop
 8008ef8:	08008e3d 	.word	0x08008e3d
 8008efc:	20000270 	.word	0x20000270

08008f00 <_fwalk_sglue>:
 8008f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	4607      	mov	r7, r0
 8008f06:	4688      	mov	r8, r1
 8008f08:	4614      	mov	r4, r2
 8008f0a:	2600      	movs	r6, #0
 8008f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f10:	f1b9 0901 	subs.w	r9, r9, #1
 8008f14:	d505      	bpl.n	8008f22 <_fwalk_sglue+0x22>
 8008f16:	6824      	ldr	r4, [r4, #0]
 8008f18:	2c00      	cmp	r4, #0
 8008f1a:	d1f7      	bne.n	8008f0c <_fwalk_sglue+0xc>
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f22:	89ab      	ldrh	r3, [r5, #12]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d907      	bls.n	8008f38 <_fwalk_sglue+0x38>
 8008f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	d003      	beq.n	8008f38 <_fwalk_sglue+0x38>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4638      	mov	r0, r7
 8008f34:	47c0      	blx	r8
 8008f36:	4306      	orrs	r6, r0
 8008f38:	3568      	adds	r5, #104	@ 0x68
 8008f3a:	e7e9      	b.n	8008f10 <_fwalk_sglue+0x10>

08008f3c <iprintf>:
 8008f3c:	b40f      	push	{r0, r1, r2, r3}
 8008f3e:	b507      	push	{r0, r1, r2, lr}
 8008f40:	4906      	ldr	r1, [pc, #24]	@ (8008f5c <iprintf+0x20>)
 8008f42:	ab04      	add	r3, sp, #16
 8008f44:	6808      	ldr	r0, [r1, #0]
 8008f46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4a:	6881      	ldr	r1, [r0, #8]
 8008f4c:	9301      	str	r3, [sp, #4]
 8008f4e:	f000 f9ed 	bl	800932c <_vfiprintf_r>
 8008f52:	b003      	add	sp, #12
 8008f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f58:	b004      	add	sp, #16
 8008f5a:	4770      	bx	lr
 8008f5c:	20000020 	.word	0x20000020

08008f60 <__sread>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	460c      	mov	r4, r1
 8008f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f68:	f000 f8fc 	bl	8009164 <_read_r>
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	bfab      	itete	ge
 8008f70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f72:	89a3      	ldrhlt	r3, [r4, #12]
 8008f74:	181b      	addge	r3, r3, r0
 8008f76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f7a:	bfac      	ite	ge
 8008f7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f7e:	81a3      	strhlt	r3, [r4, #12]
 8008f80:	bd10      	pop	{r4, pc}

08008f82 <__swrite>:
 8008f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f86:	461f      	mov	r7, r3
 8008f88:	898b      	ldrh	r3, [r1, #12]
 8008f8a:	05db      	lsls	r3, r3, #23
 8008f8c:	4605      	mov	r5, r0
 8008f8e:	460c      	mov	r4, r1
 8008f90:	4616      	mov	r6, r2
 8008f92:	d505      	bpl.n	8008fa0 <__swrite+0x1e>
 8008f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f98:	2302      	movs	r3, #2
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f000 f8d0 	bl	8009140 <_lseek_r>
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	4632      	mov	r2, r6
 8008fae:	463b      	mov	r3, r7
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb6:	f000 b8f7 	b.w	80091a8 <_write_r>

08008fba <__sseek>:
 8008fba:	b510      	push	{r4, lr}
 8008fbc:	460c      	mov	r4, r1
 8008fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc2:	f000 f8bd 	bl	8009140 <_lseek_r>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	bf15      	itete	ne
 8008fcc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008fce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008fd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008fd6:	81a3      	strheq	r3, [r4, #12]
 8008fd8:	bf18      	it	ne
 8008fda:	81a3      	strhne	r3, [r4, #12]
 8008fdc:	bd10      	pop	{r4, pc}

08008fde <__sclose>:
 8008fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe2:	f000 b89d 	b.w	8009120 <_close_r>

08008fe6 <__swbuf_r>:
 8008fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe8:	460e      	mov	r6, r1
 8008fea:	4614      	mov	r4, r2
 8008fec:	4605      	mov	r5, r0
 8008fee:	b118      	cbz	r0, 8008ff8 <__swbuf_r+0x12>
 8008ff0:	6a03      	ldr	r3, [r0, #32]
 8008ff2:	b90b      	cbnz	r3, 8008ff8 <__swbuf_r+0x12>
 8008ff4:	f7ff ff6c 	bl	8008ed0 <__sinit>
 8008ff8:	69a3      	ldr	r3, [r4, #24]
 8008ffa:	60a3      	str	r3, [r4, #8]
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	071a      	lsls	r2, r3, #28
 8009000:	d501      	bpl.n	8009006 <__swbuf_r+0x20>
 8009002:	6923      	ldr	r3, [r4, #16]
 8009004:	b943      	cbnz	r3, 8009018 <__swbuf_r+0x32>
 8009006:	4621      	mov	r1, r4
 8009008:	4628      	mov	r0, r5
 800900a:	f000 f82b 	bl	8009064 <__swsetup_r>
 800900e:	b118      	cbz	r0, 8009018 <__swbuf_r+0x32>
 8009010:	f04f 37ff 	mov.w	r7, #4294967295
 8009014:	4638      	mov	r0, r7
 8009016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	6922      	ldr	r2, [r4, #16]
 800901c:	1a98      	subs	r0, r3, r2
 800901e:	6963      	ldr	r3, [r4, #20]
 8009020:	b2f6      	uxtb	r6, r6
 8009022:	4283      	cmp	r3, r0
 8009024:	4637      	mov	r7, r6
 8009026:	dc05      	bgt.n	8009034 <__swbuf_r+0x4e>
 8009028:	4621      	mov	r1, r4
 800902a:	4628      	mov	r0, r5
 800902c:	f000 fca8 	bl	8009980 <_fflush_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	d1ed      	bne.n	8009010 <__swbuf_r+0x2a>
 8009034:	68a3      	ldr	r3, [r4, #8]
 8009036:	3b01      	subs	r3, #1
 8009038:	60a3      	str	r3, [r4, #8]
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	6022      	str	r2, [r4, #0]
 8009040:	701e      	strb	r6, [r3, #0]
 8009042:	6962      	ldr	r2, [r4, #20]
 8009044:	1c43      	adds	r3, r0, #1
 8009046:	429a      	cmp	r2, r3
 8009048:	d004      	beq.n	8009054 <__swbuf_r+0x6e>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	07db      	lsls	r3, r3, #31
 800904e:	d5e1      	bpl.n	8009014 <__swbuf_r+0x2e>
 8009050:	2e0a      	cmp	r6, #10
 8009052:	d1df      	bne.n	8009014 <__swbuf_r+0x2e>
 8009054:	4621      	mov	r1, r4
 8009056:	4628      	mov	r0, r5
 8009058:	f000 fc92 	bl	8009980 <_fflush_r>
 800905c:	2800      	cmp	r0, #0
 800905e:	d0d9      	beq.n	8009014 <__swbuf_r+0x2e>
 8009060:	e7d6      	b.n	8009010 <__swbuf_r+0x2a>
	...

08009064 <__swsetup_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4b29      	ldr	r3, [pc, #164]	@ (800910c <__swsetup_r+0xa8>)
 8009068:	4605      	mov	r5, r0
 800906a:	6818      	ldr	r0, [r3, #0]
 800906c:	460c      	mov	r4, r1
 800906e:	b118      	cbz	r0, 8009078 <__swsetup_r+0x14>
 8009070:	6a03      	ldr	r3, [r0, #32]
 8009072:	b90b      	cbnz	r3, 8009078 <__swsetup_r+0x14>
 8009074:	f7ff ff2c 	bl	8008ed0 <__sinit>
 8009078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800907c:	0719      	lsls	r1, r3, #28
 800907e:	d422      	bmi.n	80090c6 <__swsetup_r+0x62>
 8009080:	06da      	lsls	r2, r3, #27
 8009082:	d407      	bmi.n	8009094 <__swsetup_r+0x30>
 8009084:	2209      	movs	r2, #9
 8009086:	602a      	str	r2, [r5, #0]
 8009088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800908c:	81a3      	strh	r3, [r4, #12]
 800908e:	f04f 30ff 	mov.w	r0, #4294967295
 8009092:	e033      	b.n	80090fc <__swsetup_r+0x98>
 8009094:	0758      	lsls	r0, r3, #29
 8009096:	d512      	bpl.n	80090be <__swsetup_r+0x5a>
 8009098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800909a:	b141      	cbz	r1, 80090ae <__swsetup_r+0x4a>
 800909c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090a0:	4299      	cmp	r1, r3
 80090a2:	d002      	beq.n	80090aa <__swsetup_r+0x46>
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 f8cd 	bl	8009244 <_free_r>
 80090aa:	2300      	movs	r3, #0
 80090ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	2300      	movs	r3, #0
 80090b8:	6063      	str	r3, [r4, #4]
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	f043 0308 	orr.w	r3, r3, #8
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	b94b      	cbnz	r3, 80090de <__swsetup_r+0x7a>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090d4:	d003      	beq.n	80090de <__swsetup_r+0x7a>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4628      	mov	r0, r5
 80090da:	f000 fc9f 	bl	8009a1c <__smakebuf_r>
 80090de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090e2:	f013 0201 	ands.w	r2, r3, #1
 80090e6:	d00a      	beq.n	80090fe <__swsetup_r+0x9a>
 80090e8:	2200      	movs	r2, #0
 80090ea:	60a2      	str	r2, [r4, #8]
 80090ec:	6962      	ldr	r2, [r4, #20]
 80090ee:	4252      	negs	r2, r2
 80090f0:	61a2      	str	r2, [r4, #24]
 80090f2:	6922      	ldr	r2, [r4, #16]
 80090f4:	b942      	cbnz	r2, 8009108 <__swsetup_r+0xa4>
 80090f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090fa:	d1c5      	bne.n	8009088 <__swsetup_r+0x24>
 80090fc:	bd38      	pop	{r3, r4, r5, pc}
 80090fe:	0799      	lsls	r1, r3, #30
 8009100:	bf58      	it	pl
 8009102:	6962      	ldrpl	r2, [r4, #20]
 8009104:	60a2      	str	r2, [r4, #8]
 8009106:	e7f4      	b.n	80090f2 <__swsetup_r+0x8e>
 8009108:	2000      	movs	r0, #0
 800910a:	e7f7      	b.n	80090fc <__swsetup_r+0x98>
 800910c:	20000020 	.word	0x20000020

08009110 <memset>:
 8009110:	4402      	add	r2, r0
 8009112:	4603      	mov	r3, r0
 8009114:	4293      	cmp	r3, r2
 8009116:	d100      	bne.n	800911a <memset+0xa>
 8009118:	4770      	bx	lr
 800911a:	f803 1b01 	strb.w	r1, [r3], #1
 800911e:	e7f9      	b.n	8009114 <memset+0x4>

08009120 <_close_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d06      	ldr	r5, [pc, #24]	@ (800913c <_close_r+0x1c>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f7 fd69 	bl	8000c02 <_close>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_close_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_close_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20000274 	.word	0x20000274

08009140 <_lseek_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d07      	ldr	r5, [pc, #28]	@ (8009160 <_lseek_r+0x20>)
 8009144:	4604      	mov	r4, r0
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f7f7 fd7e 	bl	8000c50 <_lseek>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_lseek_r+0x1e>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_lseek_r+0x1e>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000274 	.word	0x20000274

08009164 <_read_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d07      	ldr	r5, [pc, #28]	@ (8009184 <_read_r+0x20>)
 8009168:	4604      	mov	r4, r0
 800916a:	4608      	mov	r0, r1
 800916c:	4611      	mov	r1, r2
 800916e:	2200      	movs	r2, #0
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f7f7 fd0c 	bl	8000b90 <_read>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_read_r+0x1e>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_read_r+0x1e>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000274 	.word	0x20000274

08009188 <_sbrk_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d06      	ldr	r5, [pc, #24]	@ (80091a4 <_sbrk_r+0x1c>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f7 fd6a 	bl	8000c6c <_sbrk>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_sbrk_r+0x1a>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_sbrk_r+0x1a>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	20000274 	.word	0x20000274

080091a8 <_write_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d07      	ldr	r5, [pc, #28]	@ (80091c8 <_write_r+0x20>)
 80091ac:	4604      	mov	r4, r0
 80091ae:	4608      	mov	r0, r1
 80091b0:	4611      	mov	r1, r2
 80091b2:	2200      	movs	r2, #0
 80091b4:	602a      	str	r2, [r5, #0]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f7f7 fd07 	bl	8000bca <_write>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_write_r+0x1e>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_write_r+0x1e>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20000274 	.word	0x20000274

080091cc <__errno>:
 80091cc:	4b01      	ldr	r3, [pc, #4]	@ (80091d4 <__errno+0x8>)
 80091ce:	6818      	ldr	r0, [r3, #0]
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20000020 	.word	0x20000020

080091d8 <__libc_init_array>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	4d0d      	ldr	r5, [pc, #52]	@ (8009210 <__libc_init_array+0x38>)
 80091dc:	4c0d      	ldr	r4, [pc, #52]	@ (8009214 <__libc_init_array+0x3c>)
 80091de:	1b64      	subs	r4, r4, r5
 80091e0:	10a4      	asrs	r4, r4, #2
 80091e2:	2600      	movs	r6, #0
 80091e4:	42a6      	cmp	r6, r4
 80091e6:	d109      	bne.n	80091fc <__libc_init_array+0x24>
 80091e8:	4d0b      	ldr	r5, [pc, #44]	@ (8009218 <__libc_init_array+0x40>)
 80091ea:	4c0c      	ldr	r4, [pc, #48]	@ (800921c <__libc_init_array+0x44>)
 80091ec:	f000 fc74 	bl	8009ad8 <_init>
 80091f0:	1b64      	subs	r4, r4, r5
 80091f2:	10a4      	asrs	r4, r4, #2
 80091f4:	2600      	movs	r6, #0
 80091f6:	42a6      	cmp	r6, r4
 80091f8:	d105      	bne.n	8009206 <__libc_init_array+0x2e>
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
 80091fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009200:	4798      	blx	r3
 8009202:	3601      	adds	r6, #1
 8009204:	e7ee      	b.n	80091e4 <__libc_init_array+0xc>
 8009206:	f855 3b04 	ldr.w	r3, [r5], #4
 800920a:	4798      	blx	r3
 800920c:	3601      	adds	r6, #1
 800920e:	e7f2      	b.n	80091f6 <__libc_init_array+0x1e>
 8009210:	0800c98c 	.word	0x0800c98c
 8009214:	0800c98c 	.word	0x0800c98c
 8009218:	0800c98c 	.word	0x0800c98c
 800921c:	0800c990 	.word	0x0800c990

08009220 <__retarget_lock_init_recursive>:
 8009220:	4770      	bx	lr

08009222 <__retarget_lock_acquire_recursive>:
 8009222:	4770      	bx	lr

08009224 <__retarget_lock_release_recursive>:
 8009224:	4770      	bx	lr

08009226 <memcpy>:
 8009226:	440a      	add	r2, r1
 8009228:	4291      	cmp	r1, r2
 800922a:	f100 33ff 	add.w	r3, r0, #4294967295
 800922e:	d100      	bne.n	8009232 <memcpy+0xc>
 8009230:	4770      	bx	lr
 8009232:	b510      	push	{r4, lr}
 8009234:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009238:	f803 4f01 	strb.w	r4, [r3, #1]!
 800923c:	4291      	cmp	r1, r2
 800923e:	d1f9      	bne.n	8009234 <memcpy+0xe>
 8009240:	bd10      	pop	{r4, pc}
	...

08009244 <_free_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4605      	mov	r5, r0
 8009248:	2900      	cmp	r1, #0
 800924a:	d041      	beq.n	80092d0 <_free_r+0x8c>
 800924c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009250:	1f0c      	subs	r4, r1, #4
 8009252:	2b00      	cmp	r3, #0
 8009254:	bfb8      	it	lt
 8009256:	18e4      	addlt	r4, r4, r3
 8009258:	f7ff fda2 	bl	8008da0 <__malloc_lock>
 800925c:	4a1d      	ldr	r2, [pc, #116]	@ (80092d4 <_free_r+0x90>)
 800925e:	6813      	ldr	r3, [r2, #0]
 8009260:	b933      	cbnz	r3, 8009270 <_free_r+0x2c>
 8009262:	6063      	str	r3, [r4, #4]
 8009264:	6014      	str	r4, [r2, #0]
 8009266:	4628      	mov	r0, r5
 8009268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800926c:	f7ff bd9e 	b.w	8008dac <__malloc_unlock>
 8009270:	42a3      	cmp	r3, r4
 8009272:	d908      	bls.n	8009286 <_free_r+0x42>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	1821      	adds	r1, r4, r0
 8009278:	428b      	cmp	r3, r1
 800927a:	bf01      	itttt	eq
 800927c:	6819      	ldreq	r1, [r3, #0]
 800927e:	685b      	ldreq	r3, [r3, #4]
 8009280:	1809      	addeq	r1, r1, r0
 8009282:	6021      	streq	r1, [r4, #0]
 8009284:	e7ed      	b.n	8009262 <_free_r+0x1e>
 8009286:	461a      	mov	r2, r3
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	b10b      	cbz	r3, 8009290 <_free_r+0x4c>
 800928c:	42a3      	cmp	r3, r4
 800928e:	d9fa      	bls.n	8009286 <_free_r+0x42>
 8009290:	6811      	ldr	r1, [r2, #0]
 8009292:	1850      	adds	r0, r2, r1
 8009294:	42a0      	cmp	r0, r4
 8009296:	d10b      	bne.n	80092b0 <_free_r+0x6c>
 8009298:	6820      	ldr	r0, [r4, #0]
 800929a:	4401      	add	r1, r0
 800929c:	1850      	adds	r0, r2, r1
 800929e:	4283      	cmp	r3, r0
 80092a0:	6011      	str	r1, [r2, #0]
 80092a2:	d1e0      	bne.n	8009266 <_free_r+0x22>
 80092a4:	6818      	ldr	r0, [r3, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	6053      	str	r3, [r2, #4]
 80092aa:	4408      	add	r0, r1
 80092ac:	6010      	str	r0, [r2, #0]
 80092ae:	e7da      	b.n	8009266 <_free_r+0x22>
 80092b0:	d902      	bls.n	80092b8 <_free_r+0x74>
 80092b2:	230c      	movs	r3, #12
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	e7d6      	b.n	8009266 <_free_r+0x22>
 80092b8:	6820      	ldr	r0, [r4, #0]
 80092ba:	1821      	adds	r1, r4, r0
 80092bc:	428b      	cmp	r3, r1
 80092be:	bf04      	itt	eq
 80092c0:	6819      	ldreq	r1, [r3, #0]
 80092c2:	685b      	ldreq	r3, [r3, #4]
 80092c4:	6063      	str	r3, [r4, #4]
 80092c6:	bf04      	itt	eq
 80092c8:	1809      	addeq	r1, r1, r0
 80092ca:	6021      	streq	r1, [r4, #0]
 80092cc:	6054      	str	r4, [r2, #4]
 80092ce:	e7ca      	b.n	8009266 <_free_r+0x22>
 80092d0:	bd38      	pop	{r3, r4, r5, pc}
 80092d2:	bf00      	nop
 80092d4:	20000134 	.word	0x20000134

080092d8 <__sfputc_r>:
 80092d8:	6893      	ldr	r3, [r2, #8]
 80092da:	3b01      	subs	r3, #1
 80092dc:	2b00      	cmp	r3, #0
 80092de:	b410      	push	{r4}
 80092e0:	6093      	str	r3, [r2, #8]
 80092e2:	da08      	bge.n	80092f6 <__sfputc_r+0x1e>
 80092e4:	6994      	ldr	r4, [r2, #24]
 80092e6:	42a3      	cmp	r3, r4
 80092e8:	db01      	blt.n	80092ee <__sfputc_r+0x16>
 80092ea:	290a      	cmp	r1, #10
 80092ec:	d103      	bne.n	80092f6 <__sfputc_r+0x1e>
 80092ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092f2:	f7ff be78 	b.w	8008fe6 <__swbuf_r>
 80092f6:	6813      	ldr	r3, [r2, #0]
 80092f8:	1c58      	adds	r0, r3, #1
 80092fa:	6010      	str	r0, [r2, #0]
 80092fc:	7019      	strb	r1, [r3, #0]
 80092fe:	4608      	mov	r0, r1
 8009300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009304:	4770      	bx	lr

08009306 <__sfputs_r>:
 8009306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009308:	4606      	mov	r6, r0
 800930a:	460f      	mov	r7, r1
 800930c:	4614      	mov	r4, r2
 800930e:	18d5      	adds	r5, r2, r3
 8009310:	42ac      	cmp	r4, r5
 8009312:	d101      	bne.n	8009318 <__sfputs_r+0x12>
 8009314:	2000      	movs	r0, #0
 8009316:	e007      	b.n	8009328 <__sfputs_r+0x22>
 8009318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800931c:	463a      	mov	r2, r7
 800931e:	4630      	mov	r0, r6
 8009320:	f7ff ffda 	bl	80092d8 <__sfputc_r>
 8009324:	1c43      	adds	r3, r0, #1
 8009326:	d1f3      	bne.n	8009310 <__sfputs_r+0xa>
 8009328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800932c <_vfiprintf_r>:
 800932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	460d      	mov	r5, r1
 8009332:	b09d      	sub	sp, #116	@ 0x74
 8009334:	4614      	mov	r4, r2
 8009336:	4698      	mov	r8, r3
 8009338:	4606      	mov	r6, r0
 800933a:	b118      	cbz	r0, 8009344 <_vfiprintf_r+0x18>
 800933c:	6a03      	ldr	r3, [r0, #32]
 800933e:	b90b      	cbnz	r3, 8009344 <_vfiprintf_r+0x18>
 8009340:	f7ff fdc6 	bl	8008ed0 <__sinit>
 8009344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009346:	07d9      	lsls	r1, r3, #31
 8009348:	d405      	bmi.n	8009356 <_vfiprintf_r+0x2a>
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	059a      	lsls	r2, r3, #22
 800934e:	d402      	bmi.n	8009356 <_vfiprintf_r+0x2a>
 8009350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009352:	f7ff ff66 	bl	8009222 <__retarget_lock_acquire_recursive>
 8009356:	89ab      	ldrh	r3, [r5, #12]
 8009358:	071b      	lsls	r3, r3, #28
 800935a:	d501      	bpl.n	8009360 <_vfiprintf_r+0x34>
 800935c:	692b      	ldr	r3, [r5, #16]
 800935e:	b99b      	cbnz	r3, 8009388 <_vfiprintf_r+0x5c>
 8009360:	4629      	mov	r1, r5
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff fe7e 	bl	8009064 <__swsetup_r>
 8009368:	b170      	cbz	r0, 8009388 <_vfiprintf_r+0x5c>
 800936a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800936c:	07dc      	lsls	r4, r3, #31
 800936e:	d504      	bpl.n	800937a <_vfiprintf_r+0x4e>
 8009370:	f04f 30ff 	mov.w	r0, #4294967295
 8009374:	b01d      	add	sp, #116	@ 0x74
 8009376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	0598      	lsls	r0, r3, #22
 800937e:	d4f7      	bmi.n	8009370 <_vfiprintf_r+0x44>
 8009380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009382:	f7ff ff4f 	bl	8009224 <__retarget_lock_release_recursive>
 8009386:	e7f3      	b.n	8009370 <_vfiprintf_r+0x44>
 8009388:	2300      	movs	r3, #0
 800938a:	9309      	str	r3, [sp, #36]	@ 0x24
 800938c:	2320      	movs	r3, #32
 800938e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009392:	f8cd 800c 	str.w	r8, [sp, #12]
 8009396:	2330      	movs	r3, #48	@ 0x30
 8009398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009548 <_vfiprintf_r+0x21c>
 800939c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093a0:	f04f 0901 	mov.w	r9, #1
 80093a4:	4623      	mov	r3, r4
 80093a6:	469a      	mov	sl, r3
 80093a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ac:	b10a      	cbz	r2, 80093b2 <_vfiprintf_r+0x86>
 80093ae:	2a25      	cmp	r2, #37	@ 0x25
 80093b0:	d1f9      	bne.n	80093a6 <_vfiprintf_r+0x7a>
 80093b2:	ebba 0b04 	subs.w	fp, sl, r4
 80093b6:	d00b      	beq.n	80093d0 <_vfiprintf_r+0xa4>
 80093b8:	465b      	mov	r3, fp
 80093ba:	4622      	mov	r2, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	4630      	mov	r0, r6
 80093c0:	f7ff ffa1 	bl	8009306 <__sfputs_r>
 80093c4:	3001      	adds	r0, #1
 80093c6:	f000 80a7 	beq.w	8009518 <_vfiprintf_r+0x1ec>
 80093ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093cc:	445a      	add	r2, fp
 80093ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80093d0:	f89a 3000 	ldrb.w	r3, [sl]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 809f 	beq.w	8009518 <_vfiprintf_r+0x1ec>
 80093da:	2300      	movs	r3, #0
 80093dc:	f04f 32ff 	mov.w	r2, #4294967295
 80093e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e4:	f10a 0a01 	add.w	sl, sl, #1
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	9307      	str	r3, [sp, #28]
 80093ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80093f2:	4654      	mov	r4, sl
 80093f4:	2205      	movs	r2, #5
 80093f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093fa:	4853      	ldr	r0, [pc, #332]	@ (8009548 <_vfiprintf_r+0x21c>)
 80093fc:	f7f6 fef8 	bl	80001f0 <memchr>
 8009400:	9a04      	ldr	r2, [sp, #16]
 8009402:	b9d8      	cbnz	r0, 800943c <_vfiprintf_r+0x110>
 8009404:	06d1      	lsls	r1, r2, #27
 8009406:	bf44      	itt	mi
 8009408:	2320      	movmi	r3, #32
 800940a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800940e:	0713      	lsls	r3, r2, #28
 8009410:	bf44      	itt	mi
 8009412:	232b      	movmi	r3, #43	@ 0x2b
 8009414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009418:	f89a 3000 	ldrb.w	r3, [sl]
 800941c:	2b2a      	cmp	r3, #42	@ 0x2a
 800941e:	d015      	beq.n	800944c <_vfiprintf_r+0x120>
 8009420:	9a07      	ldr	r2, [sp, #28]
 8009422:	4654      	mov	r4, sl
 8009424:	2000      	movs	r0, #0
 8009426:	f04f 0c0a 	mov.w	ip, #10
 800942a:	4621      	mov	r1, r4
 800942c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009430:	3b30      	subs	r3, #48	@ 0x30
 8009432:	2b09      	cmp	r3, #9
 8009434:	d94b      	bls.n	80094ce <_vfiprintf_r+0x1a2>
 8009436:	b1b0      	cbz	r0, 8009466 <_vfiprintf_r+0x13a>
 8009438:	9207      	str	r2, [sp, #28]
 800943a:	e014      	b.n	8009466 <_vfiprintf_r+0x13a>
 800943c:	eba0 0308 	sub.w	r3, r0, r8
 8009440:	fa09 f303 	lsl.w	r3, r9, r3
 8009444:	4313      	orrs	r3, r2
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	46a2      	mov	sl, r4
 800944a:	e7d2      	b.n	80093f2 <_vfiprintf_r+0xc6>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	1d19      	adds	r1, r3, #4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	9103      	str	r1, [sp, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	bfbb      	ittet	lt
 8009458:	425b      	neglt	r3, r3
 800945a:	f042 0202 	orrlt.w	r2, r2, #2
 800945e:	9307      	strge	r3, [sp, #28]
 8009460:	9307      	strlt	r3, [sp, #28]
 8009462:	bfb8      	it	lt
 8009464:	9204      	strlt	r2, [sp, #16]
 8009466:	7823      	ldrb	r3, [r4, #0]
 8009468:	2b2e      	cmp	r3, #46	@ 0x2e
 800946a:	d10a      	bne.n	8009482 <_vfiprintf_r+0x156>
 800946c:	7863      	ldrb	r3, [r4, #1]
 800946e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009470:	d132      	bne.n	80094d8 <_vfiprintf_r+0x1ac>
 8009472:	9b03      	ldr	r3, [sp, #12]
 8009474:	1d1a      	adds	r2, r3, #4
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	9203      	str	r2, [sp, #12]
 800947a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800947e:	3402      	adds	r4, #2
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009558 <_vfiprintf_r+0x22c>
 8009486:	7821      	ldrb	r1, [r4, #0]
 8009488:	2203      	movs	r2, #3
 800948a:	4650      	mov	r0, sl
 800948c:	f7f6 feb0 	bl	80001f0 <memchr>
 8009490:	b138      	cbz	r0, 80094a2 <_vfiprintf_r+0x176>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	eba0 000a 	sub.w	r0, r0, sl
 8009498:	2240      	movs	r2, #64	@ 0x40
 800949a:	4082      	lsls	r2, r0
 800949c:	4313      	orrs	r3, r2
 800949e:	3401      	adds	r4, #1
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	4829      	ldr	r0, [pc, #164]	@ (800954c <_vfiprintf_r+0x220>)
 80094a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094ac:	2206      	movs	r2, #6
 80094ae:	f7f6 fe9f 	bl	80001f0 <memchr>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d03f      	beq.n	8009536 <_vfiprintf_r+0x20a>
 80094b6:	4b26      	ldr	r3, [pc, #152]	@ (8009550 <_vfiprintf_r+0x224>)
 80094b8:	bb1b      	cbnz	r3, 8009502 <_vfiprintf_r+0x1d6>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	3307      	adds	r3, #7
 80094be:	f023 0307 	bic.w	r3, r3, #7
 80094c2:	3308      	adds	r3, #8
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094c8:	443b      	add	r3, r7
 80094ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80094cc:	e76a      	b.n	80093a4 <_vfiprintf_r+0x78>
 80094ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d2:	460c      	mov	r4, r1
 80094d4:	2001      	movs	r0, #1
 80094d6:	e7a8      	b.n	800942a <_vfiprintf_r+0xfe>
 80094d8:	2300      	movs	r3, #0
 80094da:	3401      	adds	r4, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	4619      	mov	r1, r3
 80094e0:	f04f 0c0a 	mov.w	ip, #10
 80094e4:	4620      	mov	r0, r4
 80094e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ea:	3a30      	subs	r2, #48	@ 0x30
 80094ec:	2a09      	cmp	r2, #9
 80094ee:	d903      	bls.n	80094f8 <_vfiprintf_r+0x1cc>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0c6      	beq.n	8009482 <_vfiprintf_r+0x156>
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	e7c4      	b.n	8009482 <_vfiprintf_r+0x156>
 80094f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094fc:	4604      	mov	r4, r0
 80094fe:	2301      	movs	r3, #1
 8009500:	e7f0      	b.n	80094e4 <_vfiprintf_r+0x1b8>
 8009502:	ab03      	add	r3, sp, #12
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	462a      	mov	r2, r5
 8009508:	4b12      	ldr	r3, [pc, #72]	@ (8009554 <_vfiprintf_r+0x228>)
 800950a:	a904      	add	r1, sp, #16
 800950c:	4630      	mov	r0, r6
 800950e:	f3af 8000 	nop.w
 8009512:	4607      	mov	r7, r0
 8009514:	1c78      	adds	r0, r7, #1
 8009516:	d1d6      	bne.n	80094c6 <_vfiprintf_r+0x19a>
 8009518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800951a:	07d9      	lsls	r1, r3, #31
 800951c:	d405      	bmi.n	800952a <_vfiprintf_r+0x1fe>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	059a      	lsls	r2, r3, #22
 8009522:	d402      	bmi.n	800952a <_vfiprintf_r+0x1fe>
 8009524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009526:	f7ff fe7d 	bl	8009224 <__retarget_lock_release_recursive>
 800952a:	89ab      	ldrh	r3, [r5, #12]
 800952c:	065b      	lsls	r3, r3, #25
 800952e:	f53f af1f 	bmi.w	8009370 <_vfiprintf_r+0x44>
 8009532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009534:	e71e      	b.n	8009374 <_vfiprintf_r+0x48>
 8009536:	ab03      	add	r3, sp, #12
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	462a      	mov	r2, r5
 800953c:	4b05      	ldr	r3, [pc, #20]	@ (8009554 <_vfiprintf_r+0x228>)
 800953e:	a904      	add	r1, sp, #16
 8009540:	4630      	mov	r0, r6
 8009542:	f000 f879 	bl	8009638 <_printf_i>
 8009546:	e7e4      	b.n	8009512 <_vfiprintf_r+0x1e6>
 8009548:	0800c950 	.word	0x0800c950
 800954c:	0800c95a 	.word	0x0800c95a
 8009550:	00000000 	.word	0x00000000
 8009554:	08009307 	.word	0x08009307
 8009558:	0800c956 	.word	0x0800c956

0800955c <_printf_common>:
 800955c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009560:	4616      	mov	r6, r2
 8009562:	4698      	mov	r8, r3
 8009564:	688a      	ldr	r2, [r1, #8]
 8009566:	690b      	ldr	r3, [r1, #16]
 8009568:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800956c:	4293      	cmp	r3, r2
 800956e:	bfb8      	it	lt
 8009570:	4613      	movlt	r3, r2
 8009572:	6033      	str	r3, [r6, #0]
 8009574:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009578:	4607      	mov	r7, r0
 800957a:	460c      	mov	r4, r1
 800957c:	b10a      	cbz	r2, 8009582 <_printf_common+0x26>
 800957e:	3301      	adds	r3, #1
 8009580:	6033      	str	r3, [r6, #0]
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	0699      	lsls	r1, r3, #26
 8009586:	bf42      	ittt	mi
 8009588:	6833      	ldrmi	r3, [r6, #0]
 800958a:	3302      	addmi	r3, #2
 800958c:	6033      	strmi	r3, [r6, #0]
 800958e:	6825      	ldr	r5, [r4, #0]
 8009590:	f015 0506 	ands.w	r5, r5, #6
 8009594:	d106      	bne.n	80095a4 <_printf_common+0x48>
 8009596:	f104 0a19 	add.w	sl, r4, #25
 800959a:	68e3      	ldr	r3, [r4, #12]
 800959c:	6832      	ldr	r2, [r6, #0]
 800959e:	1a9b      	subs	r3, r3, r2
 80095a0:	42ab      	cmp	r3, r5
 80095a2:	dc26      	bgt.n	80095f2 <_printf_common+0x96>
 80095a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095a8:	6822      	ldr	r2, [r4, #0]
 80095aa:	3b00      	subs	r3, #0
 80095ac:	bf18      	it	ne
 80095ae:	2301      	movne	r3, #1
 80095b0:	0692      	lsls	r2, r2, #26
 80095b2:	d42b      	bmi.n	800960c <_printf_common+0xb0>
 80095b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095b8:	4641      	mov	r1, r8
 80095ba:	4638      	mov	r0, r7
 80095bc:	47c8      	blx	r9
 80095be:	3001      	adds	r0, #1
 80095c0:	d01e      	beq.n	8009600 <_printf_common+0xa4>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	6922      	ldr	r2, [r4, #16]
 80095c6:	f003 0306 	and.w	r3, r3, #6
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	bf02      	ittt	eq
 80095ce:	68e5      	ldreq	r5, [r4, #12]
 80095d0:	6833      	ldreq	r3, [r6, #0]
 80095d2:	1aed      	subeq	r5, r5, r3
 80095d4:	68a3      	ldr	r3, [r4, #8]
 80095d6:	bf0c      	ite	eq
 80095d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095dc:	2500      	movne	r5, #0
 80095de:	4293      	cmp	r3, r2
 80095e0:	bfc4      	itt	gt
 80095e2:	1a9b      	subgt	r3, r3, r2
 80095e4:	18ed      	addgt	r5, r5, r3
 80095e6:	2600      	movs	r6, #0
 80095e8:	341a      	adds	r4, #26
 80095ea:	42b5      	cmp	r5, r6
 80095ec:	d11a      	bne.n	8009624 <_printf_common+0xc8>
 80095ee:	2000      	movs	r0, #0
 80095f0:	e008      	b.n	8009604 <_printf_common+0xa8>
 80095f2:	2301      	movs	r3, #1
 80095f4:	4652      	mov	r2, sl
 80095f6:	4641      	mov	r1, r8
 80095f8:	4638      	mov	r0, r7
 80095fa:	47c8      	blx	r9
 80095fc:	3001      	adds	r0, #1
 80095fe:	d103      	bne.n	8009608 <_printf_common+0xac>
 8009600:	f04f 30ff 	mov.w	r0, #4294967295
 8009604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009608:	3501      	adds	r5, #1
 800960a:	e7c6      	b.n	800959a <_printf_common+0x3e>
 800960c:	18e1      	adds	r1, r4, r3
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	2030      	movs	r0, #48	@ 0x30
 8009612:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009616:	4422      	add	r2, r4
 8009618:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800961c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009620:	3302      	adds	r3, #2
 8009622:	e7c7      	b.n	80095b4 <_printf_common+0x58>
 8009624:	2301      	movs	r3, #1
 8009626:	4622      	mov	r2, r4
 8009628:	4641      	mov	r1, r8
 800962a:	4638      	mov	r0, r7
 800962c:	47c8      	blx	r9
 800962e:	3001      	adds	r0, #1
 8009630:	d0e6      	beq.n	8009600 <_printf_common+0xa4>
 8009632:	3601      	adds	r6, #1
 8009634:	e7d9      	b.n	80095ea <_printf_common+0x8e>
	...

08009638 <_printf_i>:
 8009638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800963c:	7e0f      	ldrb	r7, [r1, #24]
 800963e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009640:	2f78      	cmp	r7, #120	@ 0x78
 8009642:	4691      	mov	r9, r2
 8009644:	4680      	mov	r8, r0
 8009646:	460c      	mov	r4, r1
 8009648:	469a      	mov	sl, r3
 800964a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800964e:	d807      	bhi.n	8009660 <_printf_i+0x28>
 8009650:	2f62      	cmp	r7, #98	@ 0x62
 8009652:	d80a      	bhi.n	800966a <_printf_i+0x32>
 8009654:	2f00      	cmp	r7, #0
 8009656:	f000 80d2 	beq.w	80097fe <_printf_i+0x1c6>
 800965a:	2f58      	cmp	r7, #88	@ 0x58
 800965c:	f000 80b9 	beq.w	80097d2 <_printf_i+0x19a>
 8009660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009664:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009668:	e03a      	b.n	80096e0 <_printf_i+0xa8>
 800966a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800966e:	2b15      	cmp	r3, #21
 8009670:	d8f6      	bhi.n	8009660 <_printf_i+0x28>
 8009672:	a101      	add	r1, pc, #4	@ (adr r1, 8009678 <_printf_i+0x40>)
 8009674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009678:	080096d1 	.word	0x080096d1
 800967c:	080096e5 	.word	0x080096e5
 8009680:	08009661 	.word	0x08009661
 8009684:	08009661 	.word	0x08009661
 8009688:	08009661 	.word	0x08009661
 800968c:	08009661 	.word	0x08009661
 8009690:	080096e5 	.word	0x080096e5
 8009694:	08009661 	.word	0x08009661
 8009698:	08009661 	.word	0x08009661
 800969c:	08009661 	.word	0x08009661
 80096a0:	08009661 	.word	0x08009661
 80096a4:	080097e5 	.word	0x080097e5
 80096a8:	0800970f 	.word	0x0800970f
 80096ac:	0800979f 	.word	0x0800979f
 80096b0:	08009661 	.word	0x08009661
 80096b4:	08009661 	.word	0x08009661
 80096b8:	08009807 	.word	0x08009807
 80096bc:	08009661 	.word	0x08009661
 80096c0:	0800970f 	.word	0x0800970f
 80096c4:	08009661 	.word	0x08009661
 80096c8:	08009661 	.word	0x08009661
 80096cc:	080097a7 	.word	0x080097a7
 80096d0:	6833      	ldr	r3, [r6, #0]
 80096d2:	1d1a      	adds	r2, r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6032      	str	r2, [r6, #0]
 80096d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096e0:	2301      	movs	r3, #1
 80096e2:	e09d      	b.n	8009820 <_printf_i+0x1e8>
 80096e4:	6833      	ldr	r3, [r6, #0]
 80096e6:	6820      	ldr	r0, [r4, #0]
 80096e8:	1d19      	adds	r1, r3, #4
 80096ea:	6031      	str	r1, [r6, #0]
 80096ec:	0606      	lsls	r6, r0, #24
 80096ee:	d501      	bpl.n	80096f4 <_printf_i+0xbc>
 80096f0:	681d      	ldr	r5, [r3, #0]
 80096f2:	e003      	b.n	80096fc <_printf_i+0xc4>
 80096f4:	0645      	lsls	r5, r0, #25
 80096f6:	d5fb      	bpl.n	80096f0 <_printf_i+0xb8>
 80096f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096fc:	2d00      	cmp	r5, #0
 80096fe:	da03      	bge.n	8009708 <_printf_i+0xd0>
 8009700:	232d      	movs	r3, #45	@ 0x2d
 8009702:	426d      	negs	r5, r5
 8009704:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009708:	4859      	ldr	r0, [pc, #356]	@ (8009870 <_printf_i+0x238>)
 800970a:	230a      	movs	r3, #10
 800970c:	e011      	b.n	8009732 <_printf_i+0xfa>
 800970e:	6821      	ldr	r1, [r4, #0]
 8009710:	6833      	ldr	r3, [r6, #0]
 8009712:	0608      	lsls	r0, r1, #24
 8009714:	f853 5b04 	ldr.w	r5, [r3], #4
 8009718:	d402      	bmi.n	8009720 <_printf_i+0xe8>
 800971a:	0649      	lsls	r1, r1, #25
 800971c:	bf48      	it	mi
 800971e:	b2ad      	uxthmi	r5, r5
 8009720:	2f6f      	cmp	r7, #111	@ 0x6f
 8009722:	4853      	ldr	r0, [pc, #332]	@ (8009870 <_printf_i+0x238>)
 8009724:	6033      	str	r3, [r6, #0]
 8009726:	bf14      	ite	ne
 8009728:	230a      	movne	r3, #10
 800972a:	2308      	moveq	r3, #8
 800972c:	2100      	movs	r1, #0
 800972e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009732:	6866      	ldr	r6, [r4, #4]
 8009734:	60a6      	str	r6, [r4, #8]
 8009736:	2e00      	cmp	r6, #0
 8009738:	bfa2      	ittt	ge
 800973a:	6821      	ldrge	r1, [r4, #0]
 800973c:	f021 0104 	bicge.w	r1, r1, #4
 8009740:	6021      	strge	r1, [r4, #0]
 8009742:	b90d      	cbnz	r5, 8009748 <_printf_i+0x110>
 8009744:	2e00      	cmp	r6, #0
 8009746:	d04b      	beq.n	80097e0 <_printf_i+0x1a8>
 8009748:	4616      	mov	r6, r2
 800974a:	fbb5 f1f3 	udiv	r1, r5, r3
 800974e:	fb03 5711 	mls	r7, r3, r1, r5
 8009752:	5dc7      	ldrb	r7, [r0, r7]
 8009754:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009758:	462f      	mov	r7, r5
 800975a:	42bb      	cmp	r3, r7
 800975c:	460d      	mov	r5, r1
 800975e:	d9f4      	bls.n	800974a <_printf_i+0x112>
 8009760:	2b08      	cmp	r3, #8
 8009762:	d10b      	bne.n	800977c <_printf_i+0x144>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	07df      	lsls	r7, r3, #31
 8009768:	d508      	bpl.n	800977c <_printf_i+0x144>
 800976a:	6923      	ldr	r3, [r4, #16]
 800976c:	6861      	ldr	r1, [r4, #4]
 800976e:	4299      	cmp	r1, r3
 8009770:	bfde      	ittt	le
 8009772:	2330      	movle	r3, #48	@ 0x30
 8009774:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009778:	f106 36ff 	addle.w	r6, r6, #4294967295
 800977c:	1b92      	subs	r2, r2, r6
 800977e:	6122      	str	r2, [r4, #16]
 8009780:	f8cd a000 	str.w	sl, [sp]
 8009784:	464b      	mov	r3, r9
 8009786:	aa03      	add	r2, sp, #12
 8009788:	4621      	mov	r1, r4
 800978a:	4640      	mov	r0, r8
 800978c:	f7ff fee6 	bl	800955c <_printf_common>
 8009790:	3001      	adds	r0, #1
 8009792:	d14a      	bne.n	800982a <_printf_i+0x1f2>
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	b004      	add	sp, #16
 800979a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979e:	6823      	ldr	r3, [r4, #0]
 80097a0:	f043 0320 	orr.w	r3, r3, #32
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	4833      	ldr	r0, [pc, #204]	@ (8009874 <_printf_i+0x23c>)
 80097a8:	2778      	movs	r7, #120	@ 0x78
 80097aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	6831      	ldr	r1, [r6, #0]
 80097b2:	061f      	lsls	r7, r3, #24
 80097b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80097b8:	d402      	bmi.n	80097c0 <_printf_i+0x188>
 80097ba:	065f      	lsls	r7, r3, #25
 80097bc:	bf48      	it	mi
 80097be:	b2ad      	uxthmi	r5, r5
 80097c0:	6031      	str	r1, [r6, #0]
 80097c2:	07d9      	lsls	r1, r3, #31
 80097c4:	bf44      	itt	mi
 80097c6:	f043 0320 	orrmi.w	r3, r3, #32
 80097ca:	6023      	strmi	r3, [r4, #0]
 80097cc:	b11d      	cbz	r5, 80097d6 <_printf_i+0x19e>
 80097ce:	2310      	movs	r3, #16
 80097d0:	e7ac      	b.n	800972c <_printf_i+0xf4>
 80097d2:	4827      	ldr	r0, [pc, #156]	@ (8009870 <_printf_i+0x238>)
 80097d4:	e7e9      	b.n	80097aa <_printf_i+0x172>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	f023 0320 	bic.w	r3, r3, #32
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	e7f6      	b.n	80097ce <_printf_i+0x196>
 80097e0:	4616      	mov	r6, r2
 80097e2:	e7bd      	b.n	8009760 <_printf_i+0x128>
 80097e4:	6833      	ldr	r3, [r6, #0]
 80097e6:	6825      	ldr	r5, [r4, #0]
 80097e8:	6961      	ldr	r1, [r4, #20]
 80097ea:	1d18      	adds	r0, r3, #4
 80097ec:	6030      	str	r0, [r6, #0]
 80097ee:	062e      	lsls	r6, r5, #24
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	d501      	bpl.n	80097f8 <_printf_i+0x1c0>
 80097f4:	6019      	str	r1, [r3, #0]
 80097f6:	e002      	b.n	80097fe <_printf_i+0x1c6>
 80097f8:	0668      	lsls	r0, r5, #25
 80097fa:	d5fb      	bpl.n	80097f4 <_printf_i+0x1bc>
 80097fc:	8019      	strh	r1, [r3, #0]
 80097fe:	2300      	movs	r3, #0
 8009800:	6123      	str	r3, [r4, #16]
 8009802:	4616      	mov	r6, r2
 8009804:	e7bc      	b.n	8009780 <_printf_i+0x148>
 8009806:	6833      	ldr	r3, [r6, #0]
 8009808:	1d1a      	adds	r2, r3, #4
 800980a:	6032      	str	r2, [r6, #0]
 800980c:	681e      	ldr	r6, [r3, #0]
 800980e:	6862      	ldr	r2, [r4, #4]
 8009810:	2100      	movs	r1, #0
 8009812:	4630      	mov	r0, r6
 8009814:	f7f6 fcec 	bl	80001f0 <memchr>
 8009818:	b108      	cbz	r0, 800981e <_printf_i+0x1e6>
 800981a:	1b80      	subs	r0, r0, r6
 800981c:	6060      	str	r0, [r4, #4]
 800981e:	6863      	ldr	r3, [r4, #4]
 8009820:	6123      	str	r3, [r4, #16]
 8009822:	2300      	movs	r3, #0
 8009824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009828:	e7aa      	b.n	8009780 <_printf_i+0x148>
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	4632      	mov	r2, r6
 800982e:	4649      	mov	r1, r9
 8009830:	4640      	mov	r0, r8
 8009832:	47d0      	blx	sl
 8009834:	3001      	adds	r0, #1
 8009836:	d0ad      	beq.n	8009794 <_printf_i+0x15c>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	079b      	lsls	r3, r3, #30
 800983c:	d413      	bmi.n	8009866 <_printf_i+0x22e>
 800983e:	68e0      	ldr	r0, [r4, #12]
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	4298      	cmp	r0, r3
 8009844:	bfb8      	it	lt
 8009846:	4618      	movlt	r0, r3
 8009848:	e7a6      	b.n	8009798 <_printf_i+0x160>
 800984a:	2301      	movs	r3, #1
 800984c:	4632      	mov	r2, r6
 800984e:	4649      	mov	r1, r9
 8009850:	4640      	mov	r0, r8
 8009852:	47d0      	blx	sl
 8009854:	3001      	adds	r0, #1
 8009856:	d09d      	beq.n	8009794 <_printf_i+0x15c>
 8009858:	3501      	adds	r5, #1
 800985a:	68e3      	ldr	r3, [r4, #12]
 800985c:	9903      	ldr	r1, [sp, #12]
 800985e:	1a5b      	subs	r3, r3, r1
 8009860:	42ab      	cmp	r3, r5
 8009862:	dcf2      	bgt.n	800984a <_printf_i+0x212>
 8009864:	e7eb      	b.n	800983e <_printf_i+0x206>
 8009866:	2500      	movs	r5, #0
 8009868:	f104 0619 	add.w	r6, r4, #25
 800986c:	e7f5      	b.n	800985a <_printf_i+0x222>
 800986e:	bf00      	nop
 8009870:	0800c961 	.word	0x0800c961
 8009874:	0800c972 	.word	0x0800c972

08009878 <__sflush_r>:
 8009878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800987c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009880:	0716      	lsls	r6, r2, #28
 8009882:	4605      	mov	r5, r0
 8009884:	460c      	mov	r4, r1
 8009886:	d454      	bmi.n	8009932 <__sflush_r+0xba>
 8009888:	684b      	ldr	r3, [r1, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	dc02      	bgt.n	8009894 <__sflush_r+0x1c>
 800988e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009890:	2b00      	cmp	r3, #0
 8009892:	dd48      	ble.n	8009926 <__sflush_r+0xae>
 8009894:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009896:	2e00      	cmp	r6, #0
 8009898:	d045      	beq.n	8009926 <__sflush_r+0xae>
 800989a:	2300      	movs	r3, #0
 800989c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80098a0:	682f      	ldr	r7, [r5, #0]
 80098a2:	6a21      	ldr	r1, [r4, #32]
 80098a4:	602b      	str	r3, [r5, #0]
 80098a6:	d030      	beq.n	800990a <__sflush_r+0x92>
 80098a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098aa:	89a3      	ldrh	r3, [r4, #12]
 80098ac:	0759      	lsls	r1, r3, #29
 80098ae:	d505      	bpl.n	80098bc <__sflush_r+0x44>
 80098b0:	6863      	ldr	r3, [r4, #4]
 80098b2:	1ad2      	subs	r2, r2, r3
 80098b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098b6:	b10b      	cbz	r3, 80098bc <__sflush_r+0x44>
 80098b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098ba:	1ad2      	subs	r2, r2, r3
 80098bc:	2300      	movs	r3, #0
 80098be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098c0:	6a21      	ldr	r1, [r4, #32]
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b0      	blx	r6
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	d106      	bne.n	80098da <__sflush_r+0x62>
 80098cc:	6829      	ldr	r1, [r5, #0]
 80098ce:	291d      	cmp	r1, #29
 80098d0:	d82b      	bhi.n	800992a <__sflush_r+0xb2>
 80098d2:	4a2a      	ldr	r2, [pc, #168]	@ (800997c <__sflush_r+0x104>)
 80098d4:	410a      	asrs	r2, r1
 80098d6:	07d6      	lsls	r6, r2, #31
 80098d8:	d427      	bmi.n	800992a <__sflush_r+0xb2>
 80098da:	2200      	movs	r2, #0
 80098dc:	6062      	str	r2, [r4, #4]
 80098de:	04d9      	lsls	r1, r3, #19
 80098e0:	6922      	ldr	r2, [r4, #16]
 80098e2:	6022      	str	r2, [r4, #0]
 80098e4:	d504      	bpl.n	80098f0 <__sflush_r+0x78>
 80098e6:	1c42      	adds	r2, r0, #1
 80098e8:	d101      	bne.n	80098ee <__sflush_r+0x76>
 80098ea:	682b      	ldr	r3, [r5, #0]
 80098ec:	b903      	cbnz	r3, 80098f0 <__sflush_r+0x78>
 80098ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80098f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098f2:	602f      	str	r7, [r5, #0]
 80098f4:	b1b9      	cbz	r1, 8009926 <__sflush_r+0xae>
 80098f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098fa:	4299      	cmp	r1, r3
 80098fc:	d002      	beq.n	8009904 <__sflush_r+0x8c>
 80098fe:	4628      	mov	r0, r5
 8009900:	f7ff fca0 	bl	8009244 <_free_r>
 8009904:	2300      	movs	r3, #0
 8009906:	6363      	str	r3, [r4, #52]	@ 0x34
 8009908:	e00d      	b.n	8009926 <__sflush_r+0xae>
 800990a:	2301      	movs	r3, #1
 800990c:	4628      	mov	r0, r5
 800990e:	47b0      	blx	r6
 8009910:	4602      	mov	r2, r0
 8009912:	1c50      	adds	r0, r2, #1
 8009914:	d1c9      	bne.n	80098aa <__sflush_r+0x32>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d0c6      	beq.n	80098aa <__sflush_r+0x32>
 800991c:	2b1d      	cmp	r3, #29
 800991e:	d001      	beq.n	8009924 <__sflush_r+0xac>
 8009920:	2b16      	cmp	r3, #22
 8009922:	d11e      	bne.n	8009962 <__sflush_r+0xea>
 8009924:	602f      	str	r7, [r5, #0]
 8009926:	2000      	movs	r0, #0
 8009928:	e022      	b.n	8009970 <__sflush_r+0xf8>
 800992a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800992e:	b21b      	sxth	r3, r3
 8009930:	e01b      	b.n	800996a <__sflush_r+0xf2>
 8009932:	690f      	ldr	r7, [r1, #16]
 8009934:	2f00      	cmp	r7, #0
 8009936:	d0f6      	beq.n	8009926 <__sflush_r+0xae>
 8009938:	0793      	lsls	r3, r2, #30
 800993a:	680e      	ldr	r6, [r1, #0]
 800993c:	bf08      	it	eq
 800993e:	694b      	ldreq	r3, [r1, #20]
 8009940:	600f      	str	r7, [r1, #0]
 8009942:	bf18      	it	ne
 8009944:	2300      	movne	r3, #0
 8009946:	eba6 0807 	sub.w	r8, r6, r7
 800994a:	608b      	str	r3, [r1, #8]
 800994c:	f1b8 0f00 	cmp.w	r8, #0
 8009950:	dde9      	ble.n	8009926 <__sflush_r+0xae>
 8009952:	6a21      	ldr	r1, [r4, #32]
 8009954:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009956:	4643      	mov	r3, r8
 8009958:	463a      	mov	r2, r7
 800995a:	4628      	mov	r0, r5
 800995c:	47b0      	blx	r6
 800995e:	2800      	cmp	r0, #0
 8009960:	dc08      	bgt.n	8009974 <__sflush_r+0xfc>
 8009962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009974:	4407      	add	r7, r0
 8009976:	eba8 0800 	sub.w	r8, r8, r0
 800997a:	e7e7      	b.n	800994c <__sflush_r+0xd4>
 800997c:	dfbffffe 	.word	0xdfbffffe

08009980 <_fflush_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	690b      	ldr	r3, [r1, #16]
 8009984:	4605      	mov	r5, r0
 8009986:	460c      	mov	r4, r1
 8009988:	b913      	cbnz	r3, 8009990 <_fflush_r+0x10>
 800998a:	2500      	movs	r5, #0
 800998c:	4628      	mov	r0, r5
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	b118      	cbz	r0, 800999a <_fflush_r+0x1a>
 8009992:	6a03      	ldr	r3, [r0, #32]
 8009994:	b90b      	cbnz	r3, 800999a <_fflush_r+0x1a>
 8009996:	f7ff fa9b 	bl	8008ed0 <__sinit>
 800999a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0f3      	beq.n	800998a <_fflush_r+0xa>
 80099a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80099a4:	07d0      	lsls	r0, r2, #31
 80099a6:	d404      	bmi.n	80099b2 <_fflush_r+0x32>
 80099a8:	0599      	lsls	r1, r3, #22
 80099aa:	d402      	bmi.n	80099b2 <_fflush_r+0x32>
 80099ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ae:	f7ff fc38 	bl	8009222 <__retarget_lock_acquire_recursive>
 80099b2:	4628      	mov	r0, r5
 80099b4:	4621      	mov	r1, r4
 80099b6:	f7ff ff5f 	bl	8009878 <__sflush_r>
 80099ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099bc:	07da      	lsls	r2, r3, #31
 80099be:	4605      	mov	r5, r0
 80099c0:	d4e4      	bmi.n	800998c <_fflush_r+0xc>
 80099c2:	89a3      	ldrh	r3, [r4, #12]
 80099c4:	059b      	lsls	r3, r3, #22
 80099c6:	d4e1      	bmi.n	800998c <_fflush_r+0xc>
 80099c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099ca:	f7ff fc2b 	bl	8009224 <__retarget_lock_release_recursive>
 80099ce:	e7dd      	b.n	800998c <_fflush_r+0xc>

080099d0 <__swhatbuf_r>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	460c      	mov	r4, r1
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	2900      	cmp	r1, #0
 80099da:	b096      	sub	sp, #88	@ 0x58
 80099dc:	4615      	mov	r5, r2
 80099de:	461e      	mov	r6, r3
 80099e0:	da0d      	bge.n	80099fe <__swhatbuf_r+0x2e>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099e8:	f04f 0100 	mov.w	r1, #0
 80099ec:	bf14      	ite	ne
 80099ee:	2340      	movne	r3, #64	@ 0x40
 80099f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099f4:	2000      	movs	r0, #0
 80099f6:	6031      	str	r1, [r6, #0]
 80099f8:	602b      	str	r3, [r5, #0]
 80099fa:	b016      	add	sp, #88	@ 0x58
 80099fc:	bd70      	pop	{r4, r5, r6, pc}
 80099fe:	466a      	mov	r2, sp
 8009a00:	f000 f848 	bl	8009a94 <_fstat_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	dbec      	blt.n	80099e2 <__swhatbuf_r+0x12>
 8009a08:	9901      	ldr	r1, [sp, #4]
 8009a0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a12:	4259      	negs	r1, r3
 8009a14:	4159      	adcs	r1, r3
 8009a16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a1a:	e7eb      	b.n	80099f4 <__swhatbuf_r+0x24>

08009a1c <__smakebuf_r>:
 8009a1c:	898b      	ldrh	r3, [r1, #12]
 8009a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a20:	079d      	lsls	r5, r3, #30
 8009a22:	4606      	mov	r6, r0
 8009a24:	460c      	mov	r4, r1
 8009a26:	d507      	bpl.n	8009a38 <__smakebuf_r+0x1c>
 8009a28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	2301      	movs	r3, #1
 8009a32:	6163      	str	r3, [r4, #20]
 8009a34:	b003      	add	sp, #12
 8009a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a38:	ab01      	add	r3, sp, #4
 8009a3a:	466a      	mov	r2, sp
 8009a3c:	f7ff ffc8 	bl	80099d0 <__swhatbuf_r>
 8009a40:	9f00      	ldr	r7, [sp, #0]
 8009a42:	4605      	mov	r5, r0
 8009a44:	4639      	mov	r1, r7
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff f92a 	bl	8008ca0 <_malloc_r>
 8009a4c:	b948      	cbnz	r0, 8009a62 <__smakebuf_r+0x46>
 8009a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a52:	059a      	lsls	r2, r3, #22
 8009a54:	d4ee      	bmi.n	8009a34 <__smakebuf_r+0x18>
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	f043 0302 	orr.w	r3, r3, #2
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e7e2      	b.n	8009a28 <__smakebuf_r+0xc>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	6020      	str	r0, [r4, #0]
 8009a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a72:	b15b      	cbz	r3, 8009a8c <__smakebuf_r+0x70>
 8009a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 f81d 	bl	8009ab8 <_isatty_r>
 8009a7e:	b128      	cbz	r0, 8009a8c <__smakebuf_r+0x70>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	f043 0301 	orr.w	r3, r3, #1
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	431d      	orrs	r5, r3
 8009a90:	81a5      	strh	r5, [r4, #12]
 8009a92:	e7cf      	b.n	8009a34 <__smakebuf_r+0x18>

08009a94 <_fstat_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d07      	ldr	r5, [pc, #28]	@ (8009ab4 <_fstat_r+0x20>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	f7f7 f8ba 	bl	8000c1a <_fstat>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d102      	bne.n	8009ab0 <_fstat_r+0x1c>
 8009aaa:	682b      	ldr	r3, [r5, #0]
 8009aac:	b103      	cbz	r3, 8009ab0 <_fstat_r+0x1c>
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000274 	.word	0x20000274

08009ab8 <_isatty_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d06      	ldr	r5, [pc, #24]	@ (8009ad4 <_isatty_r+0x1c>)
 8009abc:	2300      	movs	r3, #0
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	602b      	str	r3, [r5, #0]
 8009ac4:	f7f7 f8b9 	bl	8000c3a <_isatty>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_isatty_r+0x1a>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_isatty_r+0x1a>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	20000274 	.word	0x20000274

08009ad8 <_init>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr

08009ae4 <_fini>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr
